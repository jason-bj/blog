<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>apt-dpkg-command</title>
    <url>/2019/11/25/apt-dpkg-command/</url>
    <content><![CDATA[<h1 id="dpkg-vs-apt"><a href="#dpkg-vs-apt" class="headerlink" title="dpkg vs apt"></a>dpkg vs apt</h1><p>dpkg only installs a package from local which apt-get installs it from local cache which is got from remote repo configure by <code>/etc/apt/source.list</code>, so when you run apt related commands better to run <code>$ apt-get update</code> first to sync local cache with remote repo.</p>
<p>dpkg only installs a package provided it does not solve dependency for the package, let’s say if a package depends on A, while A is not installed, install this package will fail, that’s the big difference for these two tools, so always use <code>apt-get for published package</code> while use <code>dpkg for your own package</code>.</p>
<span id="more"></span>

<h2 id="dpkg-commands"><a href="#dpkg-commands" class="headerlink" title="dpkg commands"></a>dpkg commands</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install the package</span></span><br><span class="line">$ sudo dpkg -i package.deb</span><br><span class="line"></span><br><span class="line"><span class="comment"># if same file(path) in two debs, the later package can&#x27;t be installed successfully if no overwrite</span></span><br><span class="line">$ sudo dpkg -i --force-overwrite package.deb</span><br><span class="line"></span><br><span class="line"><span class="comment"># show all installed packages</span></span><br><span class="line">$ dpkg --get-selections | grep green</span><br><span class="line">$ dpkg -l | grep green</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">root@dev:~/build<span class="comment"># dpkg -l | grep dhcp</span></span><br><span class="line">rc  dhcp                      2.5.1                            amd64        dhcp backend</span><br><span class="line"></span><br><span class="line">ii: any package is installed without any error</span><br><span class="line">rc: residual package(removed but config kept)</span><br><span class="line">iU: broken</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># show then content of it</span></span><br><span class="line">$ dpkg -c package.deb</span><br><span class="line"></span><br><span class="line"><span class="comment"># show control file of it</span></span><br><span class="line">$ dpkg -I package.deb</span><br><span class="line"></span><br><span class="line"><span class="comment"># show where the package is installed</span></span><br><span class="line">$ dpkg -L  ibus-gtk</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove deb package</span></span><br><span class="line">$ sudo dpkg -r ibus-gtk</span><br><span class="line"><span class="comment"># Remove/Delete an installed package except configuration files</span></span><br><span class="line"></span><br><span class="line">$ sudo dpkg -P ibus-gtk</span><br><span class="line"><span class="comment"># Remove/Delete everything including configuration files</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># repack---create debian package from installed files</span></span><br><span class="line">$ sudo apt-get install dpkg-repack</span><br><span class="line">$ dpkg-repack ibus-gtk</span><br><span class="line"></span><br><span class="line"><span class="comment"># extract files from deb to outputdir</span></span><br><span class="line">$ dpkg-deb -x xxx.deb outputdir</span><br><span class="line"></span><br><span class="line"><span class="comment"># extract control files like control/preinst/postinst</span></span><br><span class="line">$ dpkg -e xx.deb</span><br><span class="line"></span><br><span class="line"><span class="comment"># show tar files in deb</span></span><br><span class="line">$ ar tv hello.deb</span><br><span class="line">rw-r--r-- 0/0      4 Mar 28 23:17 2017 debian-binary</span><br><span class="line">rw-r--r-- 0/0    270 Mar 28 23:17 2017 control.tar.gz</span><br><span class="line">rw-r--r-- 0/0   2176 Mar 28 23:17 2017 data.tar.xz</span><br><span class="line"></span><br><span class="line"><span class="comment"># extract a debian</span></span><br><span class="line">$ ar xv hello.deb</span><br><span class="line">debian-binary  control.tar.gz data.tar.xz</span><br><span class="line"></span><br><span class="line"><span class="comment"># only extract data file and extract data.tar.xz as well</span></span><br><span class="line">$ dpkg-deb -x hello.deb</span><br><span class="line"></span><br><span class="line"><span class="comment"># check if deb package missed something</span></span><br><span class="line">$ lintian xx.deb</span><br><span class="line"></span><br><span class="line"><span class="comment"># if a file is installed by apt/dpkg, check which package it belongs</span></span><br><span class="line">$ dpkg -S /bin/cat</span><br></pre></td></tr></table></figure>

<p><strong>what happens when you install a deb package from apt&#x2F;dpkg</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-i, --install package-file...</span><br><span class="line">       Install the package. If --recursive or -R option is specified, package-file must refer to a directory instead.</span><br><span class="line"></span><br><span class="line">       Installation consists of the following steps:</span><br><span class="line"></span><br><span class="line">       1. Extract the control files of the new package.</span><br><span class="line"></span><br><span class="line">       2. If another version of the same package was installed before the new installation, execute prerm script of the old package.</span><br><span class="line"></span><br><span class="line">       3. Run preinst script, <span class="keyword">if</span> provided by the package.</span><br><span class="line"></span><br><span class="line">       4. Unpack the new files, and at the same time back up the old files, so that <span class="keyword">if</span> something goes wrong, they can be restored.</span><br><span class="line"></span><br><span class="line">       5.  If another version of the same package was installed before the new installation, execute the postrm script of the old package. Note that this script is executed after the preinst script of the new package, because new files are written at the same time old files are removed.</span><br><span class="line"></span><br><span class="line">       6. Configure the package. See --configure <span class="keyword">for</span> detailed information about how this is <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">--unpack package-file...</span><br><span class="line">       Unpack the package, but don not configure it. If --recursive or -R option is specified, package-file must refer to a directory instead.</span><br><span class="line"></span><br><span class="line">--configure package...|-a|--pending</span><br><span class="line">       Configure a package <span class="built_in">which</span> has been unpacked but not yet configured.  If -a or --pending is given instead of package, all unpacked but unconfigured packages are configured.</span><br><span class="line"></span><br><span class="line">       To reconfigure a package <span class="built_in">which</span> has already been configured, try the dpkg-reconfigure(8) <span class="built_in">command</span> instead.</span><br><span class="line"></span><br><span class="line">       Configuring consists of the following steps:</span><br><span class="line"></span><br><span class="line">       1. Unpack the conf files, and at the same time back up the old conf files, so that they can be restored <span class="keyword">if</span> something goes wrong.</span><br><span class="line"></span><br><span class="line">       2. Run postinst script, <span class="keyword">if</span> provided by the package.</span><br></pre></td></tr></table></figure>

<p>The control files(post install, preinstall etc)  are at <code>/var/lib/dpkg/info</code></p>
<p><strong>debug dpkg when install fails</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Setting up gconf2 (2.28.1-6) ...</span><br><span class="line">dpkg: error processing gconf2 (--configure):</span><br><span class="line">subprocess installed post-installation script returned error <span class="built_in">exit</span> status 247</span><br><span class="line"></span><br><span class="line">check why</span><br><span class="line">$ dpkg -i --debug=7337 xx.deb</span><br><span class="line"></span><br><span class="line">$ dpkg --configure -D 777 gconf2</span><br><span class="line"><span class="comment"># OR run the post script with shell debug</span></span><br><span class="line">$ sh -x /var/lib/dpkg/info/gconf2.postinstpostinst configure 2.28.1-6</span><br><span class="line"></span><br><span class="line"><span class="comment"># if there is no script at /var/lib/dpkg/info, extract it</span></span><br><span class="line">$ dpkg -e  xx.deb</span><br><span class="line">$ sh -x DEBIAN/postinst configure 2.28.1-6</span><br></pre></td></tr></table></figure>

<h2 id="apt-commands"><a href="#apt-commands" class="headerlink" title="apt commands"></a>apt commands</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># update local cache for apt</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get remove/install packageName</span><br><span class="line"><span class="comment"># remove not delete cfg file, but purge did</span></span><br><span class="line">$ sudo apt-get purge packageName</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove files with pattern matches</span></span><br><span class="line">$ sudo apt-get remove <span class="string">&quot;green-*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># only download package to /var/cache/apt/archives</span></span><br><span class="line">$ sudo apt-get install -d packageName</span><br><span class="line"></span><br><span class="line"><span class="comment"># search package from local cache</span></span><br><span class="line">$ sudo apt-cache search *</span><br><span class="line"></span><br><span class="line"><span class="comment"># show runtime depends directly</span></span><br><span class="line">$ sudo apt-cache depends common-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># show runtime depends recursively</span></span><br><span class="line">$ sudo apt install apt-rdepends</span><br><span class="line">$ sudo apt-rdepends  common-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># show who depends on me</span></span><br><span class="line">$ sudo apt-rdepends -r  xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># fix pending issue that apt-get knows with -f option</span></span><br><span class="line">$ sudo apt-get install -f</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
        <category>dpkg</category>
      </categories>
      <tags>
        <tag>dpkg</tag>
        <tag>apt</tag>
      </tags>
  </entry>
  <entry>
    <title>benchmark-tools</title>
    <url>/2019/11/29/benchmark-tools/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>There are lots of tools for traffic capturing, sending, replaying about protocols, here are some examples of these popular tools.</p>
<p><strong>capture</strong></p>
<ul>
<li>tcpdump(linux)</li>
<li>wireshark(windows&#x2F;linux)</li>
</ul>
<p><strong>sending&#x2F;replay</strong></p>
<ul>
<li>sendip</li>
<li>tcprelay</li>
</ul>
<p><strong>http benchmark</strong></p>
<ul>
<li>ab</li>
<li>wrk</li>
</ul>
<p><strong>io benchmark</strong></p>
<ul>
<li>dd</li>
</ul>
<span id="more"></span>
<h1 id="Traffic"><a href="#Traffic" class="headerlink" title="Traffic"></a>Traffic</h1><h2 id="tcpdump-vs-wireshark"><a href="#tcpdump-vs-wireshark" class="headerlink" title="tcpdump vs wireshark"></a>tcpdump vs wireshark</h2><p>tcpdump and wireshark are used to capture traffic on the internet, while wireshark provides filter for us after capture, that’s much helpful, while for tcpdump, there is no filter after capture, filter is only available when capturing, but you can save tcpdump output to xx.pcap than open it with wireshark, hence use filter provided by wireshark.</p>
<p>when <strong>capturing packets tcpdump and wireshark use the same syntax</strong> like <code>host 10.10.2.2 and tcp port 5000</code>.</p>
<p><strong>tcpdump</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># type:      host，net，port,</span></span><br><span class="line"><span class="comment"># direction: src, dst, dst or src, dst and src</span></span><br><span class="line"><span class="comment"># proto:     arp, rarp, tcp, udp</span></span><br><span class="line"><span class="comment"># logical:   not，and, or</span></span><br><span class="line"><span class="comment"># combine them together</span></span><br><span class="line">$ tcpdump -i eth0 host 10.10.10.8 and tcp src port 5000 and not dst port 6000</span><br><span class="line"></span><br><span class="line"><span class="comment"># save to wireshark message</span></span><br><span class="line">$ tcpdump -i eth0 -s 0 -w /home/lzq/pt.pcap</span><br><span class="line"></span><br><span class="line"><span class="comment"># vxlan use 4789, 11:4 is VNI</span></span><br><span class="line"><span class="comment"># capture VNI 6452, vxlan packet</span></span><br><span class="line">$ tcpdump -i mirror-out port 4789 and udp[11:4]=6452</span><br></pre></td></tr></table></figure>

<p><strong>wireshark capture</strong></p>
<p><code>syntax</code></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">support tcpdump syntax but more than that with extra options like this.</span><br><span class="line"></span><br><span class="line">dst port 135 and tcp port 135 and ip[2:2]==48</span><br><span class="line"></span><br><span class="line">icmp[icmptype]==icmp-echo and ip[2:2]==92 and icmp[8:4]==0xAAAAAAAA</span><br><span class="line"></span><br><span class="line">dst port 135 or dst port 445 or dst port 1433  and tcp[tcpflags] &amp; (tcp-syn) != 0 and tcp[tcpflags] &amp; (tcp-ack) = 0 and src net 192.168.0.0/24</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>wireshark filter</strong></p>
<p><em>tips: exported filtered packets from wireshark.</em></p>
<p>At the wireshark main panel, apply a filter, then you see filtered packets displayed, then exported it by</p>
<h2 id="File-gt-Export-specified-Packets-gt-All-packets-displayed"><a href="#File-gt-Export-specified-Packets-gt-All-packets-displayed" class="headerlink" title="File-&gt;Export specified Packets-&gt; All packets(displayed)!"></a><code>File-&gt;Export specified Packets-&gt; All packets(displayed)!</code></h2><p><code>filter syntax</code></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">tcp.port eq 25 or icmp</span><br><span class="line">tcp.port == 25 or icmp</span><br><span class="line">ip.src==192.168.0.0/16 and ip.dst==192.168.0.0/16</span><br><span class="line">tcp.window_size == 0 &amp;&amp; tcp.flags.reset != 1</span><br><span class="line"></span><br><span class="line">Match packets containing the (arbitrary) 3-byte sequence 0x81, 0x60, 0x03 at the beginning of the UDP payload, skipping the 8-byte UDP header.</span><br><span class="line">udp[8:3]==81:60:03</span><br><span class="line"></span><br><span class="line">eth.addr[0:3]==00:06:5B</span><br></pre></td></tr></table></figure>

<p><strong>wireshark display</strong></p>
<p><em>show absolute time</em><br><code>View-&gt;Time Display Format</code>  </p>
<p><em>show absolute tcp seq number</em><br><code>Preference-&gt;Protocols-&gt;TCP [uncheck]Relative sequence numbers</code></p>
<p><em>for tcp retransmission how can I distinguish the original packet and retransmitted on</em><br><code>Check TsVal it&#39;s at packets&#39; Tcp options Tsval</code> Or <code>Tcp field checksum</code></p>
<h2 id="sendip-vs-tcprelay"><a href="#sendip-vs-tcprelay" class="headerlink" title="sendip vs tcprelay"></a>sendip vs tcprelay</h2><p>sendip is used to send arbitrary <code>IP</code> packets while tcprelay is mostly used to replay(edit) captured packet(send it again).</p>
<h3 id="sendip"><a href="#sendip" class="headerlink" title="sendip"></a>sendip</h3><p><code>sendip</code> sends arbitrary IP packets(ip + upper protocol), like tcp, udp, icmp, rip etc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo sendip -v -d <span class="string">&quot;hello&quot;</span> -p ipv4 -is 192.168.200.1 -<span class="built_in">id</span> 192.168.200.2 -p udp -us 4000 -ud 1200 192.168.200.2</span><br><span class="line"><span class="comment"># send ipv4 udp with src 192.168.200.1, src port 4000, payload hello</span></span><br><span class="line"><span class="comment"># -is:  source ip</span></span><br><span class="line"><span class="comment"># -id:  dst ip</span></span><br><span class="line"><span class="comment"># -us:  udp src port</span></span><br><span class="line"><span class="comment"># -ud:  udp dst port</span></span><br><span class="line"><span class="comment"># -d   data(payload)</span></span><br><span class="line"></span><br><span class="line">$ sudo sendip -v -d <span class="string">&quot;hello&quot;</span> -p ipv4 -is 192.168.200.1 -<span class="built_in">id</span> 192.168.200.2 -p tcp -ts 4000 -td 1200 192.168.200.2</span><br></pre></td></tr></table></figure>

<h3 id="tcpreplay"><a href="#tcpreplay" class="headerlink" title="tcpreplay"></a>tcpreplay</h3><p>tcpreplay is a series of commands that can be used to replay packets captured(not only tcp packet) with more control, like sending duration, loop, send number, pps, modify packets etc.</p>
<ul>
<li>tcpreplay:      only <code>send</code> packets captured</li>
<li>tcprewrite:     only <code>modify</code>(mac, vlan, ip, tcp&#x2F;udp etc)captured packets and save it to a file</li>
<li>tcpreplay-edit: modify on fly and send the modified packets &#x3D;&#x3D; <code>tcprewrite + tcpreplay</code>, so options for tcprewrite still work for tcpreplay-edit</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tcpreplay -i eth0 -l 2 c.pcap      <span class="comment"># replay twice</span></span><br><span class="line">$ tcpreplay-edit -i eth0 c.pcap      <span class="comment"># same as replay</span></span><br><span class="line"></span><br><span class="line">$ tcprewrite --portmap=80:8000 --srcipmap=10.117.6.8:10.117.6.80 --fixcsum --ttl=125 --infile=c.pcap --outfile=b.pcap</span><br><span class="line"><span class="comment"># --enet-dmac=00:12:13:14:15:16,00:22:33:44:55:66</span></span><br><span class="line"></span><br><span class="line">$ tcpreplay-edit --portmap=80:8000 --srcipmap=10.117.6.8:10.117.6.80 --fixcsum --ttl=125 c.pcap</span><br></pre></td></tr></table></figure>

<h2 id="curl-vs-ab-vs-wrk"><a href="#curl-vs-ab-vs-wrk" class="headerlink" title="curl vs ab vs wrk"></a>curl vs ab vs wrk</h2><p>curl used for <code>function test</code> supports get&#x2F;post etc. while ab&#x2F;wrk are used for <code>performance test</code></p>
<p>ab and wrk both for http benchmark(software level, should not used for production), ab is from apache, old but more powerful with lots of options, while wrk is a newly tool which is very popular today.</p>
<h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>curl provides lots of options for sending one http request, <code>by default, curl use http1.1 can change to http1.0 or http2.0</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl --http1.0 www.example.com</span><br><span class="line">$ curl --http1.1 www.example.com</span><br><span class="line">$ curl --http2 www.example.com</span><br><span class="line">$ curl www.example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># By default, Post uses x-www-form-urlencoded format to send data</span></span><br><span class="line"><span class="comment"># send post payload from a file</span></span><br><span class="line">$ curl -X POST -d <span class="string">&quot;@data.txt&quot;</span> http:/www.test.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># send post request with chunked data</span></span><br><span class="line">$ curl -H <span class="string">&quot;Transfer-Encoding: chunked&quot;</span> -d <span class="string">&quot;payload to send&quot;</span> http://example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># send post request with data</span></span><br><span class="line">$ curl -X POST -d <span class="string">&quot;name=Mona&amp;age=20&quot;</span>  https://www.example.com/update_info</span><br><span class="line"></span><br><span class="line"><span class="comment"># send post with json format, must set Content-type to json explicitly</span></span><br><span class="line">$ curl -X POST -d <span class="string">&quot;@json_data&quot;</span> -H <span class="string">&quot;Content-Type: application/json&quot;</span> https://www.example.com/update_info</span><br><span class="line">$ curl -X POST -d <span class="string">&#x27;&#123;&quot;key1&quot;:&quot;value1&quot;, &quot;key2&quot;:&quot;value2&quot;&#125;&#x27;</span> -H <span class="string">&quot;Content-Type: application/json&quot;</span> https://www.example.com/update_info</span><br><span class="line"></span><br><span class="line"><span class="comment"># send password,  cookie when download a file</span></span><br><span class="line">$ curl -u <span class="string">&quot;user:passwd&quot;</span> -b <span class="string">&quot;name=john123&quot;</span> -O http://ubuntu.biz.net.id/18.04.2/ubuntu-18.04.2-desktop-amd64.iso</span><br><span class="line"></span><br><span class="line"><span class="comment"># write cookie to a file</span></span><br><span class="line">$ curl -u <span class="string">&quot;user:passwd&quot;</span> -c saved_cookie.txt -O http://ubuntu.biz.net.id/18.04.2/ubuntu-18.04.2-desktop-amd64.iso</span><br><span class="line"></span><br><span class="line"><span class="comment"># read cookie from a file</span></span><br><span class="line">$ curl -u <span class="string">&quot;user:passwd&quot;</span> -b saved_cookie.txt -O http://ubuntu.biz.net.id/18.04.2/ubuntu-18.04.2-desktop-amd64.iso</span><br><span class="line"></span><br><span class="line"><span class="comment"># check http response headers, only headers returned</span></span><br><span class="line">$ curl -I http://www.yahoo.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># change agent</span></span><br><span class="line">$ curl -A <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0&quot;</span> https://example.com/</span><br><span class="line"></span><br><span class="line"><span class="comment"># send request with parameter</span></span><br><span class="line">$ curl -i http://localhost/login?key1=jason&amp;key2=jason2</span><br><span class="line"></span><br><span class="line"><span class="comment"># send request with custom header</span></span><br><span class="line">$ curl -i -H <span class="string">&quot;Host: 10.10.10.3&quot;</span> -H <span class="string">&quot;Content-Type: application/json&quot;</span> http://123.123.123.123/login</span><br><span class="line"></span><br><span class="line"><span class="comment"># bind src when sending</span></span><br><span class="line">$ curl --interface 10.10.10.10 http://123.123.123.123/</span><br><span class="line"></span><br><span class="line"><span class="comment"># send SNI</span></span><br><span class="line"><span class="comment"># first edit /etc/hosts with below content</span></span><br><span class="line"><span class="comment"># 100.0.1.1 app1.xyz.com</span></span><br><span class="line"></span><br><span class="line">$ curl -k --resolve app1.xyz.com https://app1.xyz.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># curl use proxy</span></span><br><span class="line">$ curl -x <span class="variable">$proxy_server</span>:<span class="variable">$port</span> -U <span class="variable">$user</span>:<span class="variable">$passwd</span> www.google.com</span><br></pre></td></tr></table></figure>

<h2 id="ab"><a href="#ab" class="headerlink" title="ab"></a>ab</h2><p>ab provides lots of options for sending http request, like set cookie, header, authentication, ssl etc, by default ab sends <code>GET</code> request with default values. <code>only supports http1.0</code></p>
<p><strong>get</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ab -n 1000 -c 10  http://127.0.0.1:8080/index.html</span><br><span class="line"><span class="comment"># -n 1000 total requests</span></span><br><span class="line"><span class="comment"># -c 10   send 10 at a time (concurrency, total request unchanged)</span></span><br><span class="line"></span><br><span class="line">$ ab -n 1000 -c 10 -C <span class="string">&quot;ck1=123&quot;</span> -C <span class="string">&quot;ck2=124&quot;</span> -H <span class="string">&quot;Accept-Encoding: gzip&quot;</span> -k http://127.0.0.1:8080/index.html</span><br><span class="line"><span class="comment"># with cookie(-C), http keep alive(-k), and headers(-H)</span></span><br><span class="line"></span><br><span class="line">$ ab -B 10.10.10.10 http//127.0.0.1:8080/index.html</span><br><span class="line"><span class="comment"># with binding SRC</span></span><br></pre></td></tr></table></figure>

<p><strong>post with data</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ab -t 30 -c 10 -p ./post.data -T <span class="string">&quot;application/x-www-form-urlencoded&quot;</span> http://local/user</span><br><span class="line"></span><br><span class="line"><span class="comment"># -t means run 30 second with 10 connection with post method</span></span><br><span class="line">$ ab -t 30 -c 10 -p ./post.data -T <span class="string">&quot;application/json&quot;</span> http://localhost/user</span><br><span class="line"></span><br><span class="line"><span class="comment"># with token auth</span></span><br><span class="line">$ ab -t 30 -c 10 -p ./post.data -T <span class="string">&quot;application/json&quot;</span> -H <span class="string">&#x27;Authorization: Token abcd1234&#x27;</span> http://localhost/user</span><br><span class="line"></span><br><span class="line"><span class="comment"># with basic auth</span></span><br><span class="line">$ ab -t 30 -c 10 -p ./post.data -T <span class="string">&quot;application/json&quot;</span> -A <span class="string">&#x27;user:passwd&#x27;</span> http://localhost/user</span><br></pre></td></tr></table></figure>

<h3 id="wrk"><a href="#wrk" class="headerlink" title="wrk"></a>wrk</h3><p><strong>run get with default header</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wrk -t12 -c400 -d30s --latency http://127.0.0.1:8080/index.html</span><br><span class="line"><span class="comment"># run get with(does NOT support setting out binding address)</span></span><br><span class="line"><span class="comment"># -t12    12 threads to run</span></span><br><span class="line"><span class="comment"># -c400   keep 400 connection open during the test</span></span><br><span class="line"><span class="comment"># -d30s   test 30 seconds with get request</span></span><br></pre></td></tr></table></figure>

<p><strong>run get custom header</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wrk -t2 -c10 -d30s --latency -s ./get.lua http://127.0.0.1/index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># get.lua</span></span><br><span class="line">wrk.method = <span class="string">&quot;GET&quot;</span></span><br><span class="line">wrk.headers[<span class="string">&quot;Content-Type&quot;</span>] = <span class="string">&quot;application/json&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>run post with data</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wrk -t2 -c10 -d30s --latency -s ./post.lua http://127.0.0.1/user</span><br><span class="line"></span><br><span class="line"><span class="comment"># post.lua</span></span><br><span class="line">wrk.method = <span class="string">&quot;POST&quot;</span></span><br><span class="line">wrk.body   = <span class="string">&quot;foo=bar&amp;baz=quux&quot;</span></span><br><span class="line">wrk.headers[<span class="string">&quot;Content-Type&quot;</span>] = <span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># post.lua with json format</span></span><br><span class="line">wrk.method = <span class="string">&quot;POST&quot;</span></span><br><span class="line">wrk.body = <span class="string">&quot;&#123;\&quot;firstKey\&quot;: &#x27;somedata&#x27;, \&quot;secondKey\&quot;: &#x27;somedata&#x27;&#125;&quot;</span></span><br><span class="line">wrk.headers[<span class="string">&quot;Content-Type&quot;</span>] = <span class="string">&quot;application/json&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="why-content-length-is-0-with-POST-method-by-curl"><a href="#why-content-length-is-0-with-POST-method-by-curl" class="headerlink" title="why content-length is 0 with POST method by curl"></a>why content-length is 0 with POST method by curl</h3><p>The reason should be the content of the file used by POST <font color='red'>contains zero</font>, as curl first reads the whole file to memory, then calculate the content_length with <strong>strlen(file content)</strong>, hence if the content of the file contains ‘\0’, the content_length !&#x3D; file size, unexpected. here is a example</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># file content is all &#x27;\0&#x27;!!</span></span><br><span class="line">$ <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=data.txt bs=1M count=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># actually, curl just reads the data, but not send it, the Content_Length: 0</span></span><br><span class="line">$ curl -X POST -d <span class="string">&quot;@data.txt&quot;</span> http:/www.test.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># FIX it, generate a file without &#x27;\0&#x27; or with given repeated content like</span></span><br><span class="line">$ <span class="built_in">yes</span> <span class="string">&#x27;this is a test&#x27;</span> | <span class="built_in">head</span> -c 1K &gt; 1K.file</span><br><span class="line">$ <span class="built_in">yes</span> <span class="string">&#x27;this is a test&#x27;</span> | <span class="built_in">head</span> -c 1M &gt; 1M.file</span><br><span class="line">$ curl -X POST -d <span class="string">&quot;@1K.file&quot;</span> http:/www.test.com</span><br></pre></td></tr></table></figure>
<h3 id="send-http-over-unix-socket"><a href="#send-http-over-unix-socket" class="headerlink" title="send http over unix-socket"></a>send http over unix-socket</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if http server listens on unix socket</span></span><br><span class="line"><span class="comment"># --unix-socket (Added in 7.40.0)</span></span><br><span class="line">$ curl --version</span><br><span class="line">$ curl --unix-socket /var/run/tes.sock http://debug/api</span><br></pre></td></tr></table></figure>

<h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><p>Use <code>dd</code> to test io benchmark, as it’s an easy tool to use</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># write to another block device like nbd here</span></span><br><span class="line">$ <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/dev/nbd124 bs=1M count=1000</span><br><span class="line"></span><br><span class="line"><span class="comment"># write testing</span></span><br><span class="line">$ <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=out.disk bs=1M count=1000</span><br><span class="line"><span class="comment"># with direct io for writing</span></span><br><span class="line">$ <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=out.disk bs=1M count=1000 oflag=direct</span><br><span class="line"></span><br><span class="line"><span class="comment"># read testing</span></span><br><span class="line">$ <span class="built_in">dd</span> <span class="keyword">if</span>=out.disk of=/dev/null bs=1M count=1000</span><br><span class="line"></span><br><span class="line"><span class="comment"># check static io stats or runtime io</span></span><br><span class="line">$ iostat</span><br><span class="line">$ iotop</span><br><span class="line"></span><br><span class="line"><span class="comment"># fio is better than dd</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># --rw=str</span></span><br><span class="line"><span class="comment"># read: sequential reads</span></span><br><span class="line"><span class="comment"># write: sequential writes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># randread: random reads</span></span><br><span class="line"><span class="comment"># randwrite: random writes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rw: sequential mix of reads and writes</span></span><br><span class="line"><span class="comment"># randrw: random mix of reads and writes</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># --numJobs=int</span></span><br><span class="line"><span class="comment"># The number of threads spawned by the test. By default, each thread is reported separately. To see the results for all threads as a whole, use --group_reporting.</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># --iodepth=int</span></span><br><span class="line"><span class="comment"># Number of I/O units to keep in flight against the file. That is the amount of outstanding I/O for each thread.</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># --runtime=int</span></span><br><span class="line"><span class="comment">#  The amount of time the test will be running in seconds.</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># --time_based</span></span><br><span class="line"><span class="comment"># If given, run for the specified runtime duration even if the files are completely read or written. The same workload will be repeated as many times as runtime allows.</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line">$ fio --name=fiotest --filename=./test1 --size=1Gb --rw=randread --bs=4K --direct=1 --numjobs=1 --ioengine=libaio --iodepth=1 --group_reporting --runtime=60 --time_based</span><br><span class="line">$ fio --name=fiotest --filename=./test1 --size=1Gb --rw=write --bs=4K --direct=1 --numjobs=1 --ioengine=libaio --iodepth=1 --group_reporting --runtime=60 --time_based</span><br><span class="line">$ fio --name=fiotest --filename=./test1 --size=1Gb --rw=rw --bs=4K --direct=1 --numjobs=1 --ioengine=libaio --iodepth=1 --group_reporting --runtime=60 --time_based</span><br></pre></td></tr></table></figure>

<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><a href="https://www.tcpdump.org/manpages/tcpdump.1.html">tcpdump manpage</a></li>
<li><a href="http://tcpreplay.appneta.com/">tcprelay manpage</a></li>
<li><a href="https://linux.die.net/man/1/sendip">sendip manpage</a></li>
<li><a href="https://httpd.apache.org/docs/2.4/programs/ab.html">ab manpage</a></li>
<li><a href="https://github.com/wg/wrk">wrk manpage</a></li>
<li><a href="https://github.com/tsenart/vegeta">vegeta</a></li>
<li><a href="https://github.com/apache/jmeter">jmeter</a></li>
<li><a href="https://github.com/locustio/locust">locust</a></li>
<li><a href="https://fio.readthedocs.io/en/latest/fio_doc.html">fio doc</a></li>
<li><a href="https://portal.nutanix.com/page/documents/kbs/details?targetId=kA07V000000LX7xSAG">fio example</a></li>
</ul>
]]></content>
      <categories>
        <category>traffic</category>
        <category>tool</category>
      </categories>
      <tags>
        <tag>traffic sender</tag>
        <tag>traffic capture</tag>
        <tag>http benchmark</tag>
        <tag>io benchmark</tag>
      </tags>
  </entry>
  <entry>
    <title>bash-basic</title>
    <url>/2019/12/23/bash-basic/</url>
    <content><![CDATA[<h1 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>As bash is old or native way to run commands, there are lots of scripts written with bash, so it’s <code>a must to know bash</code> and do some basic work.</p>
<p><font color='red'>Better use python instead of bash as you can <code>call bash in python</code> and use python powerful features</font></p>
<span id="more"></span>

<h2 id="printing"><a href="#printing" class="headerlink" title="printing"></a>printing</h2><p>There are several ways for printing and writing multiple lines, <code>echo</code> is the easy way to do</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print multiple lines</span></span><br><span class="line">$ <span class="built_in">echo</span> -e <span class="string">&quot;a\nb&quot;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;a</span></span><br><span class="line"><span class="string">b&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># write multiple lines to a file</span></span><br><span class="line">$ <span class="built_in">echo</span> -e <span class="string">&quot;a\nb&quot;</span> &gt;file</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;a</span></span><br><span class="line"><span class="string">b&quot;</span> &gt;file</span><br><span class="line">$ <span class="built_in">cat</span> &lt;&lt;<span class="string">END &gt;file</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="string">END</span></span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a b&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># printing in multiple lines</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a</span></span><br><span class="line"><span class="string">b&quot;</span></span><br><span class="line"><span class="comment"># write in one line, printing in multiple lines</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;a\nb&quot;</span></span><br></pre></td></tr></table></figure>

<pre><code>a b
a
b
a
b
</code></pre>
<h2 id="special-characters"><a href="#special-characters" class="headerlink" title="special characters"></a>special characters</h2><p>Special characters here mean <code>shell sees them special but not treated as regular pattern</code>, if shell treats them as pattern, its meaning may be different. see an example.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">a.c abd.c abc.c</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep <span class="string">&quot;ab*&quot;</span> ab*</span></span><br><span class="line">abd.c:`a`</span><br><span class="line">abd.c:`ab`c</span><br><span class="line">abd.c:`ab`</span><br><span class="line">abc.c:`ab`b</span><br><span class="line">abc.c:`ab`d</span><br></pre></td></tr></table></figure>
<p><strong><code>grep &quot;ab*&quot; ab* search pattern ab*(a, ab matched, abc not match)</code> from file which starts with ab(abd.c, abc.c all match)</strong></p>
<p><font color='red'>whitespace</font> The most special char in shell is <code>whitespace</code>, <code>whitespace</code> is used as separator for parameters, like function parameter, test parameter etc.</p>
<p><font color='red'>;</font> <code>semi-colon is used to separate instructions if at same line</code>, if each instruction at each line, <code>;</code> can be ignored. <code>$ls;date</code></p>
<p><font color='red'>*</font> <code>any more(0-)</code>characters    <code>#ls ab*</code>—&gt;file ab matches</p>
<p><font color='red'>?</font> <code>any character, just one</code>    <code>#ls ab?</code>  —&gt;file ab not match!!</p>
<p><font color='red'>[]</font> <code>any character inside it becomes normal except \ [] !</code> <code>#ls test.[ch]</code></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">- indicates different meanings depends on its location</span><br><span class="line">[a-z] – linker</span><br><span class="line">[-az] – normal</span><br><span class="line">[az-] - normal</span><br><span class="line"></span><br><span class="line">! must be a start to negate the condition, can&#x27;t be other place</span><br><span class="line">[!a-z]</span><br><span class="line">[\!a-z]</span><br><span class="line">[a!z] error</span><br><span class="line">[a\!z] ok</span><br></pre></td></tr></table></figure>
<p><font color='red'>|</font> command pipe, <code>#ls ab* | xargs cat</code></p>
<p><font color='red'>()</font> group command, <code>run command in subshell</code>, <code>#msg=$(echo hello)</code></p>
<p><font color='red'>&amp;</font>  run in background</p>
<p><font color='red'>‘’</font>  keep all(characters) as literal inside, <code>Any char in &#39;&#39; are escaped</code>, <strong><code>echo &#39;I\&#39;m a boy&#39; #error</code></strong></p>
<p><font color='red'>“”</font>  quotes string and evaluates variable  <code>#echo &quot;$var&quot;</code></p>
<p><strong>most chars in “” (except [$, &#96;, \]) are escaped</strong></p>
<p><font color='red'>\</font> escape character</p>
<p><font color='red'>&#96;&#96;</font> run command and get its output, <strong>#msg&#x3D;`echo hello`</strong></p>
<h3 id="Standard-wildcards-globing"><a href="#Standard-wildcards-globing" class="headerlink" title="Standard wildcards(globing)"></a>Standard wildcards(globing)</h3><p><strong>Standard wildcards (also known as globing patterns)</strong> are used by various command-line utilities to work with multiple files. <code>Standard wildcards are used by nearly any command</code> (including mv, cp, rm and many others). </p>
<ul>
<li><p><code>? (question mark)</code></p>
<blockquote>
<p><code>this can represent any single character</code>. If you specified something at the command line like “hd?” GNU&#x2F;Linux would look for hda, hdb, hdc and every other letter&#x2F;number between a-z, 0-9.</p>
</blockquote>
</li>
<li><p><code>* (asterisk)</code></p>
<blockquote>
<p><code>this can represent any number of characters</code> (including zero, in other words, zero or more characters). If you specified a “cd*” it would use “cda”, “cdrom”, “cdrecord” and anything that starts with “cd” also including “cd” itself. “m*l” could by mill, mull, ml, and anything that starts with an m and ends with an l.</p>
</blockquote>
</li>
<li><p><code>[ ] (square brackets)</code></p>
</li>
</ul>
<blockquote>
<p><code>specifies a range</code>. If you did <code>m[a,o,u]m it can become: mam, mum, mom</code> if you did: m[a-d]m it can become anything that starts and ends with m and has any character a to d in between. For example, these would work: mam, mbm, mcm, mdm. This kind of wildcard specifies an “or” relationship (<strong>you only need one to match</strong>).</p>
</blockquote>
<ul>
<li><p><code>&#123; &#125; (curly brackets, also called brace)</code></p>
<blockquote>
<p><code>terms are separated by commas and each term must be the name of something or a wildcard</code>. This wildcard will copy anything that matches either wildcard(s), or exact name(s) (an “or” relationship, one or the other).</p>
</blockquote>
</li>
<li><p><code>[!]</code></p>
<blockquote>
<p>This construct is similar to the [ ] construct, except rather than matching any characters inside the brackets, <code>it&#39;ll match any character, as long as it is not listed between the [ and ]</code>. This is a logical NOT. For example rm myfile[!9] will remove all myfiles* (ie. myfiles1, myfiles2 etc) but won’t remove a file with the number 9 anywhere within it’s name.</p>
</blockquote>
</li>
</ul>
<h2 id="variable"><a href="#variable" class="headerlink" title="variable"></a>variable</h2><p>Like Python, variable has week type(<code>no need to declare it first</code>), <code>shell checks its type only when it runs</code>, like others, shell has <code>local, global, env</code> variable, if no keyword is specified, <code>default is global!</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line">na=<span class="string">&quot;hi&quot;</span></span><br><span class="line">name=<span class="string">&quot;jason    kk&quot;</span> <span class="comment"># must wihout space at both side of =</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span>         <span class="comment"># max match, space supressed</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&#125; is needed to when link with others, to ensure where the edge of variable!!!!</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;na&#125;</span>me <span class="comment"># string link, nothing needed.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;&quot; is needed to prevent space supressed.</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span>&quot;</span> <span class="comment"># keep orignal, no space supressed.</span></span><br><span class="line"><span class="comment"># &quot;&quot; &#123;&#125; are necessary in some case, but can be ignore in others.</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span>, <span class="variable">$&#123;name&#125;</span>, <span class="string">&quot;<span class="variable">$&#123;name&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;#name&#125;</span>&quot;</span> <span class="comment"># the length of string variable, count of array $&#123;#name[@]&#125; if name is an array</span></span><br></pre></td></tr></table></figure>

<pre><code>jason kk
hime
jason    kk
jason kk, jason kk, jason    kk
11
</code></pre>
<h3 id="local-x2F-global-var"><a href="#local-x2F-global-var" class="headerlink" title="local &#x2F;global var"></a>local &#x2F;global var</h3><p><code>by default, variable is global</code>, but you can only add <code>local</code> keyword in function to strict its scope, <code>local</code> keyword can’t be used outside of a function. but all variables(local global) can be seen in sushell(forked process) as well, but <code>it&#39;s another copy of these variables, changed in subshell not see by parent!!!</code></p>
<p><strong>special var</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$?	Exit status of last task</span><br><span class="line">$$	PID of shell process</span><br><span class="line">$0	Filename of the shell script</span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line"><span class="function"><span class="title">var_func</span></span>() &#123;</span><br><span class="line">  <span class="built_in">local</span> a=12</span><br><span class="line">  b=20 <span class="comment"># global, can be seen outside of the function</span></span><br><span class="line"></span><br><span class="line">  c=$(</span><br><span class="line">    <span class="built_in">let</span> a=a+1</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">  ) <span class="comment"># run in subshell, still see a, get sushell output by $()</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;in function c=<span class="variable">$c</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;in function a=<span class="variable">$a</span>&quot;</span> <span class="comment"># a in unchanged in parent</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># local d=23 error!  local can&#x27;t be used outside of function</span></span><br><span class="line">var_func</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;in main: a=<span class="variable">$a</span>&quot;</span> <span class="comment">#a is undefined with null value(as a in var_func is local)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;in main: b=<span class="variable">$b</span>&quot;</span></span><br></pre></td></tr></table></figure>

<pre><code>in function c=13
in function a=12
in main: a=
in main: b=20
</code></pre>
<h3 id="env-var"><a href="#env-var" class="headerlink" title="env var"></a>env var</h3><p>Env variable is defined outside of the a script, or you can define it in the script, so that all subshells can have it.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line"><span class="built_in">declare</span> env_va=<span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$env_va</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span> <span class="comment"># access default env variable</span></span><br></pre></td></tr></table></figure>

<pre><code>hello
/home/data/Anaconda3/envs/py3.9/bin:/opt/llvm/bin:/home/data/Anaconda3/envs/py3.9/bin:/home/data/Anaconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/home/go:/home/go/bin:/root/.yarn_pkg/bin:/usr/lib64:/usr/local/go/bin:/home/data/Anaconda3/envs/py3.9/libexec/git-core:/root/bin:/root/.yarn_pkg/bin:/home/go/bin:/home/go:/usr/local/go/bin
</code></pre>
<h2 id="array-pay-attention"><a href="#array-pay-attention" class="headerlink" title="array[pay attention]"></a>array[pay attention]</h2><p>you can define an array with one line <code>Fruits=(&#39;Apple&#39; &#39;Banana&#39; &#39;Orange&#39;)</code> or add item at any slot <code>Fruits[1]=&quot;Ab&quot;</code> or remove one element <code>unset Fruits[1]</code>, then you can access <code>one item or all items or range items</code> like below</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- all items---echo $&#123;Fruits[@]&#125;</span><br><span class="line">- one item----echo $&#123;Fruits[0]&#125;</span><br><span class="line">- range-------echo $&#123;Fruits[@]:0:2&#125;# Range (from position 0, length 2)</span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line"><span class="comment"># Fruits=(&#x27;Apple&#x27; &#x27;Banana&#x27; &#x27;Orange&#x27;)</span></span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line"><span class="comment"># no need declare array, just use it directly!!!</span></span><br><span class="line">Fruits[0]=<span class="string">&quot;Apple&quot;</span></span><br><span class="line">Fruits[1]=<span class="string">&quot;Banana&quot;</span></span><br><span class="line">Fruits[3]=<span class="string">&quot;Orange&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;Fruits[0]&#125;</span>       <span class="comment"># Element #0</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;Fruits[@]&#125;</span>&quot;</span>     <span class="comment"># All elements, space-separated</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#Fruits[@]&#125;</span>      <span class="comment"># 3: Number of elements, no count null slot</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#Fruits&#125;</span>         <span class="comment"># String length of the 1st element</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#Fruits[2]&#125;</span>      <span class="comment"># String length of the Nth element, no skip, index 2 is null slot</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;Fruits[@]:0:3&#125;</span>&quot;</span> <span class="comment"># Range (from position 0, length 3), no count null slot</span></span><br><span class="line"></span><br><span class="line">Fruits=(<span class="string">&quot;<span class="variable">$&#123;Fruits[@]&#125;</span>&quot;</span> <span class="string">&quot;Watermelon&quot;</span>)    <span class="comment"># Push</span></span><br><span class="line">Fruits+=(<span class="string">&#x27;Watermelon&#x27;</span>)                  <span class="comment"># Also Push</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;Fruits[@]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fruits is reset with new index</span></span><br><span class="line">Fruits=(<span class="variable">$&#123;Fruits[@]/Ap*/&#125;</span>)              <span class="comment"># Remove by regex match</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;Fruits[@]&#125;</span>&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># index is not change, slot 1 is null!!</span></span><br><span class="line"><span class="built_in">unset</span> <span class="string">&quot;Fruits[1]&quot;</span>                         <span class="comment"># Remove one item</span></span><br><span class="line"><span class="comment"># Fruits=(&quot;$&#123;Fruits[@]&#125;&quot;)                 # Duplicate</span></span><br><span class="line"><span class="comment"># Fruits=(&quot;$&#123;Fruits[@]&#125;&quot; &quot;$&#123;Veggies[@]&#125;&quot;) # Concatenate</span></span><br><span class="line"><span class="comment">#lines=(`cat &quot;logfile&quot;`)                  # Read from file</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;Fruits[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$i</span> &quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<pre><code>Apple
Apple Banana Orange
3
5
0
Apple Banana Orange
Apple Banana Orange Watermelon Watermelon
Banana Orange Watermelon Watermelon
Banana Watermelon Watermelon 
</code></pre>
<h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><p><code>Unsupported declare function parameter like function(a,b), use $1, $2 etc</code></p>
<h3 id="parameter"><a href="#parameter" class="headerlink" title="parameter"></a>parameter</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$#</span>----number of parameters from <span class="built_in">command</span> line(not count script name)</span><br><span class="line"><span class="variable">$1</span>----the first parameter</span><br><span class="line"><span class="comment"># above rule apply function as well</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$0</span>----script name(no parameter) with path together (<span class="built_in">basename</span> <span class="variable">$0</span> ,just the script name)</span><br></pre></td></tr></table></figure>
<p><code>$ ./myspt.sh h1 h2</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$#-----2</span><br><span class="line">$1-----&quot;hi&quot;</span><br><span class="line">$0-----./myspt.sh</span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># the parameters are regarded as one long quoted string</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Using \&quot;\$*\&quot;:&quot;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="string">&quot;$*&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># the string is broken into words by the for loop</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\nUsing \$*:&quot;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> $*; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># it treats each element of $@ as a quoted string:</span></span><br><span class="line"><span class="comment"># this is mostly what you want!!!</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\nUsing \&quot;\$@\&quot;:&quot;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># it treats each element as an unquoted string, so the last one is again split by what amounts to for three four</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\nUsing \$@:&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="variable">$@</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">$ ./myspt.sh h1 h2</span><br><span class="line">Using <span class="string">&quot;$*&quot;</span>:</span><br><span class="line">one two three four</span><br><span class="line"></span><br><span class="line">Using $*:</span><br><span class="line">one</span><br><span class="line">two</span><br><span class="line">three</span><br><span class="line">four</span><br><span class="line"></span><br><span class="line">Using <span class="string">&quot;<span class="variable">$@</span>&quot;</span>:</span><br><span class="line">one</span><br><span class="line">two</span><br><span class="line">three four</span><br><span class="line"></span><br><span class="line">Using <span class="variable">$@</span>:</span><br><span class="line">one</span><br><span class="line">two</span><br><span class="line">three</span><br><span class="line">four</span><br></pre></td></tr></table></figure>

<blockquote>
<p>The implementation of “$<em>“ has always been a problem and realistically should have been replaced with the behavior of “$@”. In almost every case where coders use “$</em>“, they mean “$@”. “$*” can cause bugs and even security holes in your software.</p>
</blockquote>
<p><strong>always use “$@” if you want to check all parameters as it’s mostly what you want</strong></p>
<h3 id="definition"><a href="#definition" class="headerlink" title="definition"></a>definition</h3><ul>
<li><code>no return keyword, output as return</code></li>
<li><code>no explicit parameter list</code></li>
<li>get the return value by command group <code>()</code> or command substitution &#96;&#96;</li>
<li><strong><code>$() is the suggested way</code></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line"><span class="function"><span class="title">max</span></span> () &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="variable">$1</span> &gt; <span class="variable">$2</span> )); <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># get function output</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;max is: <span class="subst">$(max 1 2)</span>&quot;</span></span><br><span class="line"><span class="built_in">let</span> m=`max 1 2`</span><br><span class="line"><span class="built_in">let</span> m=$(max 1 2) <span class="comment"># run in subshell</span></span><br></pre></td></tr></table></figure>

<pre><code>max is: 2
</code></pre>
<h2 id="Subshell"><a href="#Subshell" class="headerlink" title="Subshell"></a>Subshell</h2><p><code>()(group command) runs in subshell</code>, all others run in main shell like <code>&#123;&#125;, (())</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line">(a=12) <span class="comment"># subshell</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  b=12; <span class="comment"># main shell</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((c=13)) <span class="comment"># main shell</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span></span><br></pre></td></tr></table></figure>

<pre><code>, 12, 13
</code></pre>
<h2 id="substitution-pay-attention"><a href="#substitution-pay-attention" class="headerlink" title="substitution[pay attention]"></a>substitution[pay attention]</h2><p><strong>command substitution</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">files=`<span class="built_in">ls</span> *`</span><br></pre></td></tr></table></figure>
<p><strong>variable substitution</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;var:-word&#125;</span> <span class="comment">#if var null or unset, return word, unchanged var</span></span><br><span class="line"><span class="variable">$&#123;var:=word&#125;</span> <span class="comment">#if var null or unset, return word and set var=word</span></span><br><span class="line"><span class="variable">$&#123;var:?word&#125;</span> <span class="variable">$if</span> var null or <span class="built_in">unset</span>, <span class="built_in">print</span> word, unchanged var</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;var:+word&#125;</span> <span class="variable">$if</span> var is <span class="built_in">set</span>, <span class="built_in">return</span> word, unchanged var</span><br></pre></td></tr></table></figure>
<p><strong>wildcard substitution</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> *</span><br><span class="line">$ <span class="built_in">ls</span> [a]*</span><br><span class="line">$ <span class="built_in">ls</span> *.[ch]</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The pattern matching is always greedy!!</span></span><br><span class="line"><span class="comment"># FOO is variable</span></span><br><span class="line">FOO=<span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="variable">$&#123;FOO%suffix&#125;</span>	Remove suffix</span><br><span class="line"><span class="variable">$&#123;FOO#prefix&#125;</span>	Remove prefix</span><br><span class="line"><span class="variable">$&#123;FOO%%suffix&#125;</span>	Remove long suffix</span><br><span class="line"><span class="variable">$&#123;FOO##prefix&#125;</span>	Remove long prefix</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;FOO/from/to&#125;</span>	Replace first match</span><br><span class="line"><span class="variable">$&#123;FOO//from/to&#125;</span>	Replace all</span><br><span class="line"><span class="variable">$&#123;FOO/%from/to&#125;</span>	Replace suffix</span><br><span class="line"><span class="variable">$&#123;FOO/#from/to&#125;</span>	Replace prefix</span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line"></span><br><span class="line">STR=<span class="string">&quot;/path/to/foo.cpp&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;STR%.cpp&#125;</span>    <span class="comment"># /path/to/foo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;STR%.cpp&#125;</span>.o  <span class="comment"># /path/to/foo.o</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;STR##*.&#125;</span>     <span class="comment"># cpp (extension)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;STR##*/&#125;</span>     <span class="comment"># foo.cpp (basepath)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;STR#*/&#125;</span>      <span class="comment"># path/to/foo.cpp</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;STR##*/&#125;</span>     <span class="comment"># foo.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;STR/foo/bar&#125;</span> <span class="comment"># /path/to/bar.cpp</span></span><br><span class="line"></span><br><span class="line">SRC=<span class="string">&quot;/path/to/foo.cpp&quot;</span></span><br><span class="line">BASE=<span class="variable">$&#123;SRC##*/&#125;</span>   <span class="comment">#=&gt; &quot;foo.cpp&quot; (basepath)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$BASE</span></span><br><span class="line">DIR=<span class="variable">$&#123;SRC%$BASE&#125;</span>  <span class="comment">#=&gt; &quot;/path/to/&quot; (dirpath)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$DIR</span></span><br></pre></td></tr></table></figure>

<pre><code>/path/to/foo
/path/to/foo.o
cpp
foo.cpp
path/to/foo.cpp
foo.cpp
/path/to/bar.cpp
foo.cpp
/path/to/
</code></pre>
<h2 id="compare-or-condition"><a href="#compare-or-condition" class="headerlink" title="compare or condition"></a>compare or condition</h2><p>[] is an<code> old way, used for string and number, file</code>, here are options for it,</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">- file     -d 	-c 	-b 	     -f 	-e(exist) 	-r 	-w 	-x(executable)</span><br><span class="line">- string   != 	= 	-n(non-zero string) 	-z(zero string)</span><br><span class="line">- integer(two characters for each operator!!!)  -eq -ne -lt -le -gt -ge(great than)</span><br><span class="line">- logical  -a(and) -o(or) !(negative)</span><br></pre></td></tr></table></figure>

<p><code>[[]] supports all options as []</code>, As a rule of thumb, </p>
<ul>
<li>[[ is used for strings and files.</li>
<li>numbers, use an (())</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">  = Set Equal to</span><br><span class="line"> *= Multiply</span><br><span class="line"> /= divide</span><br><span class="line"> %= Modulo</span><br><span class="line"> += Add</span><br><span class="line"> -= Subract</span><br><span class="line">&lt;&lt;= bitwise shift left</span><br><span class="line">&gt;&gt;= bitwise shift right</span><br><span class="line"> &amp;= bitwise AND</span><br><span class="line"> ^= bitwise XOR</span><br><span class="line"> |= bitwise NOT</span><br><span class="line"> == Test Equality</span><br><span class="line">!= Test Inequality</span><br><span class="line"> &lt; Less than</span><br><span class="line"> &gt; Greater than</span><br><span class="line">&lt;= Less than or equal</span><br><span class="line">&gt;= Greater than or equal</span><br></pre></td></tr></table></figure>
<ul>
<li><code>&amp;&amp; and || used for logical</code></li>
<li><code>[[ support pattern matching [[ STRING =~ PATTERN ]]</code></li>
</ul>
<p>Difference:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file=<span class="string">&quot;file name&quot;</span></span><br><span class="line">[[ -f <span class="variable">$file</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$file</span> is a regular file&quot;</span></span><br><span class="line"><span class="comment"># will work even though $file is not quoted and contains whitespace.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;&quot; is a must as file has whitespace</span></span><br><span class="line">[ -f <span class="string">&quot;<span class="variable">$file</span>&quot;</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$file</span> is a regular file&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Parentheses() in [[ do not need to be escaped:</span></span><br><span class="line">[[ -f <span class="variable">$file1</span> &amp;&amp; (-d <span class="variable">$dir1</span> || -d <span class="variable">$dir2</span>) ]]</span><br><span class="line">[ -f <span class="string">&quot;<span class="variable">$file1</span>&quot;</span> -a \( -d <span class="string">&quot;<span class="variable">$dir1</span>&quot;</span> -o -d <span class="string">&quot;<span class="variable">$dir2</span>&quot;</span> \) ]</span><br></pre></td></tr></table></figure>

<p><strong>Implicit Conversion</strong></p>
<p><font color='red' size=4>The <code>-eq</code>(integer operators) causes the strings to be interpreted as integers if possible including base conversion</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line"><span class="comment"># implicit convertion</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&#x27;1&#x27;</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;equal&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># comment it out to see implicit convertion</span></span><br><span class="line"><span class="comment"># if [ &#x27;1&#x27; -eq &quot;a&quot; ]; then # bash: line 7: [: a: integer expression expected</span></span><br><span class="line"><span class="comment">#    echo &quot;equal&quot;</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pattern matching for [[ ]]</span></span><br><span class="line">dig=123</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$dig</span> =~ ^[0-9]+$ ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> Numeric</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> Non-numeric</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<pre><code>equal
Numeric
</code></pre>
<h2 id="flow-control"><a href="#flow-control" class="headerlink" title="flow control"></a>flow control</h2><p>There are several ways to do flow control, like if&#x2F;while&#x2F;for, let’s see each of them with example.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line"><span class="built_in">let</span> a=1</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -gt 2 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;a is greater than 2&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -gt 1 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;a is greater than 1&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;a equal 0 or 1&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [[ <span class="variable">$a</span> -gt 0 ]]; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">  <span class="built_in">let</span> a=a-1</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">VAR=<span class="string">&quot;a b&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$VAR</span> <span class="comment"># VAR separated by space by default</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$VAR</span>&quot;</span> <span class="comment"># VAR as a whole</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for file in *</span></span><br><span class="line"><span class="comment"># for file in `ls`</span></span><br><span class="line"><span class="comment"># for .. in expanded_variable </span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(<span class="built_in">ls</span>); <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$file</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (())</span></span><br><span class="line"><span class="keyword">for</span> ((i = 0; i &lt; 5; i++)); <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">a=1</span><br><span class="line"><span class="comment"># case for shell pattern matching</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$a</span> <span class="keyword">in</span></span><br><span class="line">  <span class="string">&quot;1&quot;</span> | <span class="string">&quot;2&quot;</span>) <span class="built_in">echo</span> <span class="string">&quot;\$a matches pattern&quot;</span> ;;     <span class="comment"># ;; is a must like break</span></span><br><span class="line">  <span class="string">&quot;12*&quot;</span>) <span class="built_in">echo</span> <span class="string">&quot;\$a matches another pattern&quot;</span> ;; <span class="comment"># with ;; outside of case, as ;; is a break!</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<pre><code>a equal 0 or 1
1
a
b
a b
bash-basic.ipynb
0
1
2
3
4
$a matches pattern
</code></pre>
<h2 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h2><p>Set signal handler with trap command</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">trap</span> quit 2 3 9 <span class="comment">#signal handler</span></span><br><span class="line"><span class="function"><span class="title">quit</span></span>()&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;You can&#x27;t kill me!!!!!!!!!!!!!!!!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="string-slice-of-string-pay-attention"><a href="#string-slice-of-string-pay-attention" class="headerlink" title="string(slice of string)[pay attention]"></a>string(slice of string)[pay attention]</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line"><span class="comment"># string from index 0 !!!</span></span><br><span class="line">name=<span class="string">&quot;John&quot;</span></span><br><span class="line"><span class="comment"># [1-2]</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name:1:2&#125;</span> <span class="comment">#=&gt; &quot;oh&quot; (slicing)</span></span><br><span class="line"><span class="comment"># [0-2)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name::2&#125;</span> <span class="comment">#=&gt; &quot;Jo&quot; (slicing)</span></span><br><span class="line"><span class="comment"># [0-end)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name::-1&#125;</span> <span class="comment">#=&gt; &quot;Joh&quot; (slicing)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># count 4 from right</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name:(-4)&#125;</span> <span class="comment">#=&gt; &quot;n&quot; (slicing from right)</span></span><br></pre></td></tr></table></figure>

<pre><code>oh
Jo
Joh
John
</code></pre>
<h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><h3 id="debug-shell"><a href="#debug-shell" class="headerlink" title="debug shell"></a>debug shell</h3><p><strong>check syntax</strong></p>
<p><code>$bash -n test.sh</code> just check syntax of test.sh</p>
<p><strong>debug shell</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -x <span class="comment">#enable tracing will display all commands and their arguments as they execute.</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;ERROR: Insufficient Args.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> +x <span class="comment">#disable tracing</span></span><br></pre></td></tr></table></figure>

<h3 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h3><ul>
<li>stdin——————-0</li>
<li>stdout——————1</li>
<li>stderr——————2</li>
</ul>
<p><code>&gt;</code> just redirects the <code>stdout</code> to file <code>without stderr</code>.</p>
<p><code>$ls no_file.txt &gt;log.t 2&gt;&amp;1</code></p>
<h3 id="cd-vs-pushd-x2F-popd"><a href="#cd-vs-pushd-x2F-popd" class="headerlink" title="cd vs pushd&#x2F;popd"></a>cd vs pushd&#x2F;popd</h3><p>With <code>cd</code> you need to write the path explicitly, while <code>pushd/popd, you don&#39;t need remember the original path</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pushd /home/lzq </span></span><br><span class="line">(save the current <span class="built_in">dir</span> on stack and go to /home/lzq)</span><br><span class="line"><span class="comment">#popd</span></span><br><span class="line">(<span class="built_in">return</span> to the saved <span class="built_in">dir</span>)</span><br></pre></td></tr></table></figure>

<h3 id="vs-vs-let-vs-expr"><a href="#vs-vs-let-vs-expr" class="headerlink" title="() vs (()) vs let vs expr"></a>() vs (()) vs let vs expr</h3><ul>
<li>() is used for <code>command groups with subshell</code>, you can <code>run any command in subshell</code></li>
<li>(()) and let are just for <code>integer</code>, <code>not in subshell</code></li>
<li>expr is only for <code>integer operation</code> as well as expr is a command, so $ is a must for variable!!!</li>
<li><code>$[]</code> is for <code>integer operation</code> as well</li>
</ul>
<p><strong>NOTE: bash only supports integer operation <code>when do integer operation $ can be omitted for variable</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line">(</span><br><span class="line">  <span class="built_in">echo</span> hello</span><br><span class="line">  var1=<span class="string">&quot;subshell&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var1</span> <span class="comment">#never see var1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $(</span><br><span class="line">  <span class="built_in">echo</span> hello</span><br><span class="line">  var1=<span class="string">&quot;subshell&quot;</span></span><br><span class="line">) <span class="comment"># get output from subshell!!!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (()) only for integer, $ can be omitted.</span></span><br><span class="line">((var2 = <span class="string">&quot;ab&quot;</span>))</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var2</span> <span class="comment">#integer value 0!!!</span></span><br><span class="line"></span><br><span class="line">((var2 = 10))</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># let</span></span><br><span class="line"><span class="built_in">let</span> var2=10</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var2</span></span><br><span class="line"><span class="built_in">let</span> var2=<span class="string">&quot;ab&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var2</span></span><br><span class="line"></span><br><span class="line">a=<span class="string">&quot;1&quot;</span></span><br><span class="line">b=<span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$a</span>&quot;</span> = <span class="string">&quot;<span class="variable">$b</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;equal&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># must add space for each operator!!!</span></span><br><span class="line"><span class="built_in">expr</span> <span class="variable">$RANDOM</span> % 10</span><br><span class="line">b=`<span class="built_in">expr</span> <span class="variable">$RANDOM</span> % 10 + 3`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$b</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> 2 + 3`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;============$(())=========&#x27;</span></span><br><span class="line"><span class="comment"># the last value is used as `return` value</span></span><br><span class="line"><span class="built_in">echo</span> $((<span class="number">2</span>+<span class="number">3</span>))</span><br><span class="line"><span class="built_in">echo</span> $((<span class="number">2</span>+<span class="number">3</span>,<span class="number">4</span>+<span class="number">5</span>,a=<span class="number">15</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;============$[]=========&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> $[2+3]</span><br><span class="line"><span class="built_in">echo</span> $[2+3,4+5]</span><br><span class="line"><span class="built_in">echo</span> $[a=15,5+5]</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br></pre></td></tr></table></figure>

<pre><code>hello

hello
0
10
10
0
3
8
5
============$(())=========
5
15
============$[]=========
5
9
10
15
</code></pre>
<h3 id="vs"><a href="#vs" class="headerlink" title="[] vs [[]]"></a>[] vs [[]]</h3><p><code>[ (&quot;test&quot; command) and [[ (&quot;new test&quot; command) are used to evaluate expressions. [[ works only in Bash, Zsh and the Korn shell, and is more powerful; [ and test are available in POSIX shells.</code></p>
<p><a href="http://mywiki.wooledge.org/BashFAQ/031">difference</a></p>
<h3 id="brace-expansion"><a href="#brace-expansion" class="headerlink" title="brace expansion"></a>brace expansion</h3><p>Used to <code>generate list of string or number</code> with prefix or suffix for each item, <code>prefix or suffix is optional</code>.</p>
<p><code>&#123;&#125; linked each item with prefix and suffix if has</code>, <strong><code>print it as a single string</code></strong><br><strong>use case</strong></p>
<ul>
<li><code>_&#123;a..f&#125;_</code></li>
<li><code>&#123;a,b,c&#125;</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line"><span class="built_in">echo</span> &#123;a,b&#125; <span class="comment"># no space between each item echo &#123;a, b&#125; will get unexpected!!!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> _&#123;a, b&#125;_ <span class="comment"># see the result</span></span><br><span class="line"><span class="comment"># if you want to use space between item, escape it</span></span><br><span class="line"><span class="built_in">echo</span> _&#123;a,\ b&#125;_ <span class="comment"># see the result</span></span><br><span class="line"><span class="built_in">echo</span> not_prefix prefix_&#123;a,b&#125;_suffix not_suffix <span class="comment"># see which part is prefix and suffix</span></span><br><span class="line"><span class="built_in">echo</span> &#123;a..f&#125;</span><br><span class="line"><span class="built_in">echo</span> 1.&#123;1..10&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..5..2&#125;; <span class="keyword">do</span> <span class="comment"># with step 2 default 1</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print each item(item seperated by whitespace) on a new line</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%s\n&quot;</span> &#123;item1,item2&#125;</span><br></pre></td></tr></table></figure>

<pre><code>a b
_&#123;a, b&#125;_
_a_ _ b_
not_prefix prefix_a_suffix prefix_b_suffix not_suffix
a b c d e f
1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.10
1
3
5
item1
item2
</code></pre>
<h3 id="read-a-file"><a href="#read-a-file" class="headerlink" title="read a file"></a>read a file</h3><p>you can read a whole file at one time or read it line by line</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># read whole into memory at once</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> $(<span class="built_in">cat</span> file.txt); <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$line</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># read line by line</span></span><br><span class="line"><span class="comment"># read is keyword !!!</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$line</span></span><br><span class="line"><span class="keyword">done</span> &lt; file.txt</span><br></pre></td></tr></table></figure>

<h3 id="dict-in-shell-pay-attention"><a href="#dict-in-shell-pay-attention" class="headerlink" title="dict in shell [pay attention]"></a>dict in shell [pay attention]</h3><p>In order to use dict, you must declare it first like this </p>
<ul>
<li><code>declare -A sounds</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line"><span class="comment"># dict requires declare first!!!</span></span><br><span class="line"><span class="built_in">declare</span> -A sounds</span><br><span class="line">sounds[dog]=<span class="string">&quot;bark&quot;</span> <span class="comment"># same: sounds[&#x27;dog&#x27;]=&quot;bark&quot; &#x27;&#x27; is only needed when has space in key</span></span><br><span class="line">sounds[cow]=<span class="string">&quot;moo&quot;</span></span><br><span class="line">sounds[bird]=<span class="string">&quot;tweet&quot;</span></span><br><span class="line">sounds[wolf]=<span class="string">&quot;howl&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;sounds[dog]&#125;</span>  <span class="comment"># same: echo $&#123;sounds[&#x27;dog&#x27;]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;sounds[@]&#125;</span>&quot;</span>  <span class="comment"># All values</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;!sounds[@]&#125;</span>&quot;</span> <span class="comment"># All keys</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#sounds[@]&#125;</span>   <span class="comment"># Number of elements</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;!sounds[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$key</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;sounds[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$val</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> sounds[dog] <span class="comment"># Delete dog</span></span><br></pre></td></tr></table></figure>

<pre><code>bark
bark howl moo tweet
dog wolf cow bird
4
dog
wolf
cow
bird
bark
howl
moo
tweet
</code></pre>
<h3 id="difference-with-or-without-“”-for-variable-expansion"><a href="#difference-with-or-without-“”-for-variable-expansion" class="headerlink" title="difference with or without “” for variable expansion"></a>difference with or without “” for variable expansion</h3><p>In most shells, leaving a variable expansion unquoted is like invoking some sort of implicit split+glob operator.</p>
<p><code>$var</code><br>In another language would be written something like:<br><code>glob(split($var))</code></p>
<p><code>$var</code> is first split into a list of words according to complex rules involving the <code>$IFS</code> special parameter (the split part) and then each word resulting of that splitting is considered as a pattern which is expanded.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line">wds=<span class="string">&quot;hello boy&quot;</span></span><br><span class="line"><span class="keyword">for</span> wd <span class="keyword">in</span> <span class="variable">$wds</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$wd</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> wd <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$wds</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$wd</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">o=$(<span class="built_in">ls</span> -l)</span><br><span class="line"><span class="keyword">for</span> lt <span class="keyword">in</span> <span class="variable">$o</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$lt</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> lt <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$o</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;count&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$lt</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<pre><code>hello
boy
hello boy
total
40
-rw-r--r--
1
root
root
37693
Mar
30
14:51
bash-basic.ipynb
count
total 40 -rw-r--r-- 1 root root 37693 Mar 30 14:51 bash-basic.ipynb
</code></pre>
<h3 id="IFS"><a href="#IFS" class="headerlink" title="IFS"></a>IFS</h3><p>IFS: The Internal Field Separator that is used for <strong>word splitting after expansion and to split lines into words</strong> with the read builtin command.  The default value is <code>&lt;space&gt;&lt;tab&gt;&lt;newline&gt;</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line"><span class="comment"># defautl IFS</span></span><br><span class="line">str=<span class="string">&quot;hello boy&quot;</span></span><br><span class="line"><span class="keyword">for</span> elm <span class="keyword">in</span> <span class="variable">$str</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$elm</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">IFS=<span class="string">&quot;,&quot;</span></span><br><span class="line">str=<span class="string">&quot;hello,boy&quot;</span></span><br><span class="line"><span class="keyword">for</span> elm <span class="keyword">in</span> <span class="variable">$str</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$elm</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<pre><code>hello
boy
hello
boy
</code></pre>
<h3 id="include-file"><a href="#include-file" class="headerlink" title="include file"></a>include file</h3><p>Use <code>source</code> or <code>.</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /path/s.sh</span><br><span class="line">. /path/s.sh</span><br><span class="line"><span class="comment">#. (dot) command is an alias to source</span></span><br></pre></td></tr></table></figure>

<h3 id="random-number"><a href="#random-number" class="headerlink" title="random number"></a>random number</h3><p><code>$RANDOM</code> is the random number</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$RANDOM</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$RANDOM</span></span><br></pre></td></tr></table></figure>

<pre><code>3784
8785
</code></pre>
<h3 id="do-another-operation-if-first-command-runs-ok"><a href="#do-another-operation-if-first-command-runs-ok" class="headerlink" title="do another operation if first command runs ok"></a>do another operation if first command runs ok</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># one way</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">ls</span> /tmp &gt;/dev/null;<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;ls runs ok&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;ls runs badly&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">ls</span> /not_exist &gt;/dev/null 2&gt;&amp;1;<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;ls runs ok&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;ls runs badly&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># this way only support ok, no more control</span></span><br><span class="line"><span class="built_in">ls</span> /tmp&gt;/dev/null 2&gt;&amp;1 &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;ls runs ok&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># same as the first way</span></span><br><span class="line"><span class="built_in">ls</span> /tmp&gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;ls runs ok&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;ls runs badly&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> /not_exist&gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;ls runs ok&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;ls runs badly&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<pre><code>ls runs ok
ls runs badly
ls runs ok
ls runs ok
ls runs badly
</code></pre>
<h3 id="quotes"><a href="#quotes" class="headerlink" title="quotes"></a>quotes</h3><p>for assignment in bash, the righ must be a <code>single word</code>, so <code>S=&quot;a b&quot;</code> has the same with <code>S=a\ b</code>, “” to make a string as a whole, like below</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;a b&quot;</span> <span class="comment"># &quot;a b&quot; as a whole</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span> <span class="comment"># execute only once</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">S=<span class="string">&quot;a b&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$S</span>  <span class="comment"># same as for i in a b(&quot;&quot; is removed for var expansion)</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span> <span class="comment"># execute twice!!!</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h3 id="check-string-contains"><a href="#check-string-contains" class="headerlink" title="check string contains"></a>check string contains</h3><p>To check if a string contains a substring</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line"><span class="comment"># wildcard way1</span></span><br><span class="line">STR=<span class="string">&#x27;GNU/Linux is an operating system&#x27;</span></span><br><span class="line">SUB=<span class="string">&#x27;Linux&#x27;</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$STR</span>&quot;</span> == *<span class="string">&quot;<span class="variable">$SUB</span>&quot;</span>* ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;It&#x27;s there.&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># case operator way2</span></span><br><span class="line">STR=<span class="string">&#x27;GNU/Linux is an operating system&#x27;</span></span><br><span class="line">SUB=<span class="string">&#x27;Linux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$STR</span> <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">  *<span class="string">&quot;<span class="variable">$SUB</span>&quot;</span>*)</span><br><span class="line">    <span class="built_in">echo</span>  <span class="string">&quot;It&#x27;s there.&quot;</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Regex Operator way3</span></span><br><span class="line">STR=<span class="string">&#x27;GNU/Linux is an operating system&#x27;</span></span><br><span class="line">SUB=<span class="string">&#x27;Linux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$STR</span>&quot;</span> =~ <span class="string">&quot;<span class="variable">$SUB</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;It&#x27;s there.&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># grep way4</span></span><br><span class="line">STR=<span class="string">&#x27;GNU/Linux is an operating system&#x27;</span></span><br><span class="line">SUB=<span class="string">&#x27;Linux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> grep -q <span class="string">&quot;<span class="variable">$SUB</span>&quot;</span> &lt;&lt;&lt; <span class="string">&quot;<span class="variable">$STR</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;It&#x27;s there&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<pre><code>It&#39;s there.
It&#39;s there.
It&#39;s there.
It&#39;s there
</code></pre>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://devhints.io/bash">bash cheatsheet</a></li>
<li><a href="https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_04.html">shell expansion</a></li>
</ul>
]]></content>
      <categories>
        <category>bash</category>
        <category>demo</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>bootstrap-component-cases</title>
    <url>/2020/08/05/bootstrap-component-cases/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Bootstrap which is the most popular HTML, CSS, and JavaScript framework for developing responsive, mobile-first websites, most of its code are CSS, CSS classes defines how each components looks like.<br><img src="/images/web/css/bootstrap-overview.png" alt="bootstrap"></p>
<span id="more"></span>

<h2 id="Component-CSS-class"><a href="#Component-CSS-class" class="headerlink" title="Component CSS class"></a>Component CSS class</h2><p>Component CSS classes aim to style that kind of html element by setting several CSS properties, hence we should always use that <code>bootstrap class for that kind of html element</code>, so that you got the expected style, one exception is you can use <code>button class</code> to &lt;a&gt; element, even each CSS class is separately, but bootstrap gives some code snippets to use them together to make it looks better, always uses that code snippet like what bootstrap does.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--form-group only adding padding or margin</span></span><br><span class="line"><span class="comment">    you can use form-control without group, but group to make it looks better</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>Email address:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>Email address:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Link Button<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Input Button&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit Button&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Utilities-CSS-class"><a href="#Utilities-CSS-class" class="headerlink" title="Utilities CSS class"></a>Utilities CSS class</h2><p>Bootstrap 4 has a lot of utility&#x2F;helper classes to quickly style elements without using any CSS code, because bootstrap does this for you.</p>
<p>Utilities do NOT target a particular html element, but for all element with common CSS properties<br>like</p>
<ul>
<li>border</li>
<li>background-color</li>
<li>text</li>
<li>flex</li>
<li>block</li>
<li>padding</li>
<li>margin</li>
<li>height&#x2F;width</li>
<li>align</li>
<li>position</li>
</ul>
<p>More detail refer to <a href="https://www.w3schools.com/bootstrap4/bootstrap_utilities.asp">Bootstrap4 Utilities</a></p>
<h2 id="AdminLTE"><a href="#AdminLTE" class="headerlink" title="AdminLTE"></a>AdminLTE</h2><p>AdminLTE is built on top of Bootstrap, AdminLTE provides a range of responsive, reusable, and commonly used components, it keeps all bootstrap class and added new one, so that it’s a super class of bootstrap, all bootstrap based websites can work as well with AdminLTE, the big benefits of using AdminLTE is that it provides lots of components that you can pick it directly and use it in your website.</p>
<p>AdminLTE depends on two main frameworks. Bootstrap 4 and jQuery 3.3.1, you should also include jQuery.min.js and bootstrap.min.js in your project as well, along with AdminLTE, no need to include bootstrap.css!!!</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/admin-lte/3.0.5/css/adminlte.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha512-rVZC4rf0Piwtw/LsgwXxKXzWq3L0P6atiQKBNuXYRbg2FoRbSTIY0k2DxuJcs7dk4e/ShtMzglHKBOJxW8EQyQ==&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--...--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-LtrjvnR4Twt/qOuYxE721u19sVFLVSA4hf/rRt6PrZTmiPltdZcI7q7PXQBYTKyf&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/admin-lte/3.0.5/js/adminlte.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha512-++c7zGcm18AhH83pOIETVReg0dr1Yn8XTRw+0bWSIWAVCAwz1s2PwnSj4z/OOyKlwSXc4RLg3nnjR22q0dhEyA==&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Bootstrap 4</li>
<li>jQuery 3.3.1+</li>
<li>Popper.js 1.14<br>But if you use a component which depends on plugins, you should also add that plugin CDN as well in your page.</li>
</ul>
<p><img src="/images/web/css/adminlte-plugin.png" alt="plugin"></p>
<h3 id="How-to-use-AdminLTE"><a href="#How-to-use-AdminLTE" class="headerlink" title="How to use AdminLTE"></a>How to use AdminLTE</h3><p><strong>1. download the source and run it locally, so that you can see what component looks like and pick the one you needs</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/ColorlibHQ/AdminLTE.git</span><br><span class="line">$ <span class="built_in">cd</span> AdminLTE</span><br><span class="line">$ yarn install</span><br><span class="line">$ yarn dev</span><br></pre></td></tr></table></figure>
<p><strong>2. include the AdminLTE in your project</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/admin-lte/3.0.5/css/adminlte.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha512-rVZC4rf0Piwtw/LsgwXxKXzWq3L0P6atiQKBNuXYRbg2FoRbSTIY0k2DxuJcs7dk4e/ShtMzglHKBOJxW8EQyQ==&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--...--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/admin-lte/3.0.5/js/adminlte.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha512-++c7zGcm18AhH83pOIETVReg0dr1Yn8XTRw+0bWSIWAVCAwz1s2PwnSj4z/OOyKlwSXc4RLg3nnjR22q0dhEyA==&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>3. copy the code snippet that you needs to your project</strong></p>
<p><span style="color: red">Note: you can write code like what you did with bootstrap, but use predefined component from AdminLTE in any case</span></p>
]]></content>
      <categories>
        <category>html</category>
        <category>bootstrap</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>bootstrap</tag>
        <tag>AdminLTE</tag>
      </tags>
  </entry>
  <entry>
    <title>character_encoding</title>
    <url>/2021/04/20/character-encoding/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>What is a character encoding? In the end, when people do things with computers, they tend to work in text forms, whether that’s programs, or whether that is some other input that they give to the computer. It’s usually text. <code>Text is conceptually a list of characters</code>. That’s what separates it from random images on paper. The idea with character encoding is that the computers definitely would prefer numbers. We take these characters, we assign them numbers, integers. Then we <strong><code>figure out a way to transcribe those integers into a list of bytes</code></strong>. That whole process of going <strong>from text to a list of bytes is known as encoding</strong>. The reverse step is known as decoding. For example, this would be the standard ASCII approach to this. Hello is a five letter word, we will split that into five separate characters. Each of these characters is being assigned a number. At least in this case, we take these numbers and say, each of these numbers corresponds to 1 byte in the final output. Once you start working with more characters, that system breaks down because when you say each character is 1 byte, then you’re stuck with 256 characters. That doesn’t work for more complicated use cases like Chinese characters.</p>
<span id="more"></span>
<h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><p>The simplest version that you can do this is ASCII. At least, historically, it’s the most important one of the first character encodings that came into existence. The idea is, we <code>take about 127 character</code>s. Not all of these are printable characters that you could see on paper, and we <code>assign each of the numbers</code>. These are the decimal and hexadecimal values that we give them. We say <code>each of these values will just be encoded as a single byte in the final output</code>. I will use hexadecimal representations a lot. It doesn’t really matter because the exact values don’t matter. <code>ASCII is a 7-bit character encoding</code>. It covers most use cases that appear in the English languages and languages that use a similar alphabet, which aren’t all that many. That’s pretty much it. There’s not a lot else that you can do with it, which is frustrating when you do want to support other languages.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/ASCII-Table-wide.svg/1920px-ASCII-Table-wide.svg.png" alt="ASCII Table"></p>
<h2 id="ISO-8859-and-Windows-code-pages"><a href="#ISO-8859-and-Windows-code-pages" class="headerlink" title="ISO 8859-*, and Windows code pages"></a>ISO 8859-*, and Windows code pages</h2><p>The first step towards <code>making ASCII work for other languages is to extend i</code>t. The idea behind a lot of the character encodings that came next, in particular, the ISO 8859-*, and Windows code pages. <code>ASCII is 7-bit, which means we have another 128 characters availabl</code>e. We’re just going to create a lot of character encodings that covers some specific languages. For example, there’s Latin-1, which stands for ISO 8859-1, but rolls over the tongue a bit more nicely. That is for Western languages, you can write Spanish, French with it, languages like that, German too. Then there’s other encodings for other languages, like there’s the Cyrillic variant in that standard. There’s the Cyrillic Windows code page. These are not necessarily compatible. There’s an example where there’s characters in two different character encodings for the same language, so both for Cyrillic languages. If you encode something as one of them and decode as another, it will come out as garbage. That was also not a great situation overall.<code> This doesn&#39;t really cover, for example, Chinese character use case</code>.</p>
<h2 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h2><p>This is one example of <code>a character encoding that was used for Chinese characters is GBK</code>. The idea is, 128 extra characters, that’s not enough. <code>If there&#39;s a character that&#39;s not ASCII, with the upper bit set, then the next byte will also count towards this character</code>. It’s either <code>1 byte ASCII or 2 byte Chinese character</code>. That gives you about 30,000 more characters, which is still not enough to cover all of the Chinese characters that exist, but it’s practical enough.</p>
<h2 id="UNICODE"><a href="#UNICODE" class="headerlink" title="UNICODE"></a>UNICODE</h2><p>What we ended up with is <strong><code>Unicode, which is not an encoding. It is a character set</code></strong>, which says, each of the characters which I chose because it has a non-ASCII character in it, to <strong><code>each of these characters, we assign the number, and that is Unicode, mapping text(character) to number</code></strong>. That should ideally cover all the use cases that were previously covered by other encodings. <code>Then we specify an actual encoding, and there are multiple of those, which define how to translate these integers into byte sequences</code>, like there’s UTF-8, UTF-16, UTF-32, and quite a few others. UTF-8 and UTF-16 are the most important ones.</p>
<p>The way that <code>Unicode characters are usually spelled out is U+ and then four hex digits, or five sometimes if the characters don&#39;t fit into the four hex digit range</code>. That is how you specify, this is the character I’m talking about, does not specify how it is encoded. The numbering is compatible with Latin-1. The first 256 Unicode characters are the 256 Latin-1 characters. The maximum number that one can have is larger than 1 million, so we’ll have a little more than 1 million characters in total available for Unicode. Hopefully, that’s enough for the future, we’ll see. Right now there’s no issue with that. <code>It also includes emoji</code>, which is something that the Unicode standard is famous for these days.</p>
<h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><p>The most common character encoding that is used with Unicode is UTF-8. It’s a <code>variable length encoding</code>. <code>The higher the character number is, the longer the byte sequence is in which it is encoded</code>. In particular, <code>it&#39;s ASCII compatible</code>. The ASCII characters in UTF-8 are the ASCII characters as they are in code of ASCII, which is very nice. It’s also a nice property of using the scheme. These particular byte sequences don’t really have to worry about how the actual bits are encoded. If there is something broken, some invalid byte in there when you decode it, that won’t break decoding of the rest of the string.</p>
<h3 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h3><p>UTF-16, which is <code>2-byte code units</code>, so <code>65,000 characters that can be encoded in a single 2-byte unit</code>. Ones that do not fit into that range, they’re split into <code>two separate pairs of code units</code>. Because it uses 2 bytes, there are two different variants. I don’t know if you are familiar with that. There’s generally, little endian machines and big endian machines. The little endian ones put the low byte first and then the higher value byte, big endian is the reverse situation. Most modern processors use little endian.</p>
<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul>
<li><a href="https://www.infoq.com/presentations/js-character-encoding/">character-encoding</a></li>
<li><a href="https://www.granneman.com/webdev/coding/characterencoding">encoding</a></li>
</ul>
]]></content>
      <categories>
        <category>char</category>
        <category>encoding</category>
      </categories>
      <tags>
        <tag>encoding</tag>
      </tags>
  </entry>
  <entry>
    <title>c-language-tips</title>
    <url>/2020/01/02/c-language-tips/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><h2 id="parameter-passing"><a href="#parameter-passing" class="headerlink" title="parameter passing"></a>parameter passing</h2><p><code>x86 always uses stack</code> to pass function parameter, while <code>x86-64 always uses registers</code> to pass function if possible(as it has more registers than x86)</p>
<ul>
<li><code>ESP (Extended Stack Pointer), always points to the top of the stack. RSP(x86-64)</code></li>
<li><code>EBP (Extended Stack Base pointer), like a stack boundary for a function, all stack variables are offset from it.RBP(x86-64)</code>, <strong>EBP bottom of stack which has the largest address</strong>.</li>
</ul>
<span id="more"></span>

<ul>
<li><strong>push</strong><ul>
<li>decrease ESP(get a slot), save value to stack(slot, 4 bytes or 8 bytes)</li>
</ul>
</li>
<li><strong>pop</strong><ul>
<li>get the value, increase ESP</li>
</ul>
</li>
</ul>
<p><strong>stack change when call a function on x86-64</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">foobar</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> xx = a + <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> yy = b + <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> zz = c + <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> sum = xx + yy + zz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> xx * yy * zz + sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> foobar(<span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>On x86-64, arguments passed into <code>foobar()</code> use registers, while local variables of that function, along with some other data, are going to be stored on the stack when foobar is called. <code>This set of data on the stack is called a frame for this function</code>. </p>
<p><img src="https://eli.thegreenplace.net/images/2011/08/x64_frame_leaf.png" alt="stack"></p>
<ol>
<li><p>push IP into stack(called by CPU at runtime)</p>
</li>
<li><p>push rbp(parent) into stack</p>
</li>
<li><p>pass parameter into register<br>— <code>after call foobar</code></p>
</li>
<li><p>push local variable into stack</p>
</li>
<li><p>calculate</p>
</li>
<li><p>pop rbp</p>
</li>
<li><p>pop IP</p>
</li>
</ol>
<p>Note: <strong><code>One process just has one stack, not each for a function</code></strong>, but xx,yy,zz location may be different based on complier or os arch, <font color='red' size=4 ><strong>before calling a function</strong>, CPU will put the next ins(IP) onto stack.</font></p>
<p><strong>x86-64 assembly</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4:a.c           **** int foobar(int a, int b, int c)</span><br><span class="line">  5:a.c           **** &#123;</span><br><span class="line"> 11 0000 55       		pushq	%rbp</span><br><span class="line"> 14 0001 4889E5   		movq	%rsp, %rbp</span><br><span class="line"> 16 0004 897DEC   		movl	%edi, -20(%rbp)----&gt;get parameter from register, save to local stack</span><br><span class="line"> 17 0007 8975E8   		movl	%esi, -24(%rbp)</span><br><span class="line"> 18 000a 8955E4   		movl	%edx, -28(%rbp)</span><br><span class="line">  6:a.c           ****     int xx = a + 2;</span><br><span class="line"> 20 000d 8B45EC   		movl	-20(%rbp), %eax</span><br><span class="line"> 21 0010 83C002   		addl	$2, %eax</span><br><span class="line"> 22 0013 8945F0   		movl	%eax, -16(%rbp)---&gt; save result to xx</span><br><span class="line">  7:a.c           ****     int yy = b + 3;</span><br><span class="line"> 24 0016 8B45E8   		movl	-24(%rbp), %eax</span><br><span class="line"> 25 0019 83C003   		addl	$3, %eax</span><br><span class="line"> 26 001c 8945F4   		movl	%eax, -12(%rbp)---&gt; save result to yy</span><br><span class="line">  8:a.c           ****     int zz = c + 4;</span><br><span class="line"> 28 001f 8B45E4   		movl	-28(%rbp), %eax</span><br><span class="line"> 29 0022 83C004   		addl	$4, %eax</span><br><span class="line"> 30 0025 8945F8   		movl	%eax, -8(%rbp)----&gt; save result to zz</span><br><span class="line">  9:a.c           ****     int sum = xx + yy + zz;</span><br><span class="line"> 32 0028 8B55F0   		movl	-16(%rbp), %edx</span><br><span class="line"> 33 002b 8B45F4   		movl	-12(%rbp), %eax</span><br><span class="line"> 34 002e 01C2     		addl	%eax, %edx ---&gt; edx has result xx + yy</span><br><span class="line"> 35 0030 8B45F8   		movl	-8(%rbp), %eax</span><br><span class="line"> 36 0033 01D0     		addl	%edx, %eax</span><br><span class="line"> 37 0035 8945FC   		movl	%eax, -4(%rbp)--&gt;save result to sum</span><br><span class="line"> 10:a.c           **** </span><br><span class="line"> 11:a.c           ****     return xx * yy * zz + sum;</span><br><span class="line"> 39 0038 8B45F0   		movl	-16(%rbp), %eax</span><br><span class="line"> 40 003b 0FAF45F4 		imull	-12(%rbp), %eax</span><br><span class="line"> 41 003f 0FAF45F8 		imull	-8(%rbp), %eax</span><br><span class="line"> 42 0043 89C2     		movl	%eax, %edx</span><br><span class="line"> 43 0045 8B45FC   		movl	-4(%rbp), %eax</span><br><span class="line"> 44 0048 01D0     		addl	%edx, %eax</span><br><span class="line"> 12:a.c           **** &#125;</span><br><span class="line"> ...</span><br><span class="line"> 14:a.c           **** int main()</span><br><span class="line"> 15:a.c           **** &#123;</span><br><span class="line"> 58 004c 55       		pushq	%rbp-----&gt;save rbp</span><br><span class="line"> 61 004d 4889E5   		movq	%rsp, %rbp--&gt;move rbp points to rsp</span><br><span class="line"> 16:a.c           ****     return foobar(77, 88, 99);</span><br><span class="line"> 64 0050 BA630000 		movl	$99, %edx----&gt;use register to pass parameter</span><br><span class="line"> 64      00</span><br><span class="line"> 65 0055 BE580000 		movl	$88, %esi</span><br><span class="line"> 65      00</span><br><span class="line"> 66 005a BF4D0000 		movl	$77, %edi</span><br><span class="line"> 66      00</span><br><span class="line"> 67 005f E8000000 		call	foobar</span><br><span class="line"> 67      00</span><br><span class="line"> 17:a.c           **** &#125;</span><br><span class="line"> 68              		.loc 1 17 0</span><br><span class="line"> 69 0064 5D       		popq	%rbp</span><br></pre></td></tr></table></figure>

<h2 id="function-vs-macro"><a href="#function-vs-macro" class="headerlink" title="function vs macro"></a>function vs macro</h2><p>Both are used to replace similar code that are always used in different places, macro makes writing code simple and easy to read, but the <code>assembly code is not reduced after used macro</code> while function has the same advantages as Macro does, and the <code>assembly code is small, takes small disk space and small memory when loaded after used function</code>. but the disadvantages is that <code>calling a function takes some time if it&#39;s not a inline function</code>. below are some general rules to obey when use function or macro.</p>
<h3 id="rules-to-obey"><a href="#rules-to-obey" class="headerlink" title="rules to obey"></a>rules to obey</h3><ul>
<li><p><strong>large similar use function</strong></p>
<p> here I say similar not same, same code is easy to define a function, but similar code may have some trouble, similar code here the logical process is same, but the variable may be different TYPE, as function parameter only has one TYPE, so it’s not easy for this case, the solution for this is to <code>abstract the same part for each of TYPE, access the same part of it in the function, if TYPES have no same parts(members), define each of a tinny function(different part depends on type)(void*) for each of the TYPE, call the tinny function in the common function, so that common function(with void*) can replace the &#39;similar code&#39;</code> and easy to read and extend for new TYPES.</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A and B function have the same logical but only small part is different.</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">tiny_a</span><span class="params">(<span class="type">void</span> *v)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">A</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    common(a, type)</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">tiny_b</span><span class="params">(<span class="type">void</span> *v)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">B</span><span class="params">(<span class="type">char</span> b)</span> &#123;</span><br><span class="line">    common(b, type)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">common</span><span class="params">(<span class="type">void</span>* v, type)</span> &#123;</span><br><span class="line">    <span class="comment">//same logical</span></span><br><span class="line">    <span class="keyword">if</span> (type == A) &#123;</span><br><span class="line">        tiny_a(v); <span class="comment">//special for A</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type == B) &#123;</span><br><span class="line">        tiny_b(v); <span class="comment">// special for B</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//same logical</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>small similar code two choices depending on the code</strong><ul>
<li>similar code accesses the <code>same type of variable</code>, use inline function(can use macro as well), </li>
<li>similar code accessed the <code>different types of variables</code> use Macro</li>
</ul>
</li>
</ul>
<h3 id="tips-for-using-macro"><a href="#tips-for-using-macro" class="headerlink" title="tips for using macro"></a>tips for using macro</h3><ul>
<li><p>you can pass parameter from one macro to another.</p>
</li>
<li><p><font color='red'># </font>used to get the string of “passed_value” <code>in the body</code></p>
</li>
<li><p><font color='red'>##</font>used to link parameter with other <code>in the body</code></p>
</li>
<li><p>you can <code>NOT use # and ## during parameter passing</code>, there is no effect</p>
</li>
<li><p>do <code>NOT define variable inside macro</code> while <code>used outside of it</code></p>
</li>
<li><p><code>macro is only effect from the beginning to the end of that file, but if you define it in *.h, as you know *.h will be copied to the file(*.c) who includes it</code></p>
</li>
</ul>
<p><strong>difference between ## and # in macro</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#x27;#&#x27; used to get the string of the parameter, you can pass hello without &quot;&quot; but #msg return the value of &quot;hello&quot; !!!</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> print(msg) printf(<span class="string">&quot;msg: %s\n&quot;</span>, #msg)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    print(hello);</span><br><span class="line">    print(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>msg: hello</p>
<p>msg: “hello”</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">file: a.c</span><br><span class="line"><span class="comment">// &#x27;##&#x27; used to link tokens, normally, parameter will replace token in the body of macro</span></span><br><span class="line"><span class="comment">// but how to identify a token in the body of macro</span></span><br><span class="line"><span class="comment">// a token is separated by whitespace or ; or others(parameter) after C compiler parsed.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> print(msg) \</span></span><br><span class="line"><span class="meta">&#123;\</span></span><br><span class="line"><span class="meta">    printf(<span class="string">&quot;%s\n&quot;</span>, b_msg);\   <span class="comment">// here msg is NOT replaced.</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, b_#<span class="meta">#msg);\ <span class="comment">// msg is replaced with hello</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, b_#<span class="meta">#msg##_a);\</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main() &#123;</span><br><span class="line">        print(hello);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@dev:/tmp# gcc -o t a.c</span><br><span class="line">a.c: In function ‘main’:</span><br><span class="line">a.c:6:20: error: ‘b_msg’ undeclared (first use in this function)</span><br><span class="line">     printf(&quot;%s\n&quot;, b_msg);\</span><br><span class="line">                    ^</span><br><span class="line">a.c:12:9: note: in expansion of macro ‘print’</span><br><span class="line">         print(hello);</span><br><span class="line">         ^</span><br><span class="line">a.c:6:20: note: each undeclared identifier is reported only once for each function it appears in</span><br><span class="line">     printf(&quot;%s\n&quot;, b_msg);\</span><br><span class="line">                    ^</span><br><span class="line">a.c:12:9: note: in expansion of macro ‘print’</span><br><span class="line">         print(hello);</span><br><span class="line">         ^</span><br><span class="line">a.c:7:20: error: ‘b_hello’ undeclared (first use in this function)</span><br><span class="line">     printf(&quot;%s\n&quot;, b_##msg);\</span><br><span class="line">                    ^</span><br><span class="line">a.c:12:9: note: in expansion of macro ‘print’</span><br><span class="line">         print(hello);</span><br><span class="line">         ^</span><br><span class="line">a.c:8:20: error: ‘b_hello_a’ undeclared (first use in this function)</span><br><span class="line">     printf(&quot;%s\n&quot;, b_##msg##_a);\</span><br><span class="line">                    ^</span><br><span class="line">a.c:12:9: note: in expansion of macro ‘print’</span><br><span class="line">         print(hello);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ifdef-x2F-if-vs-macro"><a href="#ifdef-x2F-if-vs-macro" class="headerlink" title="ifdef&#x2F;if vs macro"></a>ifdef&#x2F;if vs macro</h3><p><code>macro and ifdef are executed before compiling(**precompile**)</code> but <strong><code>macro is more earlier than ifdef</code></strong>, so first taking replacement with macro, then ifdef.</p>
<ul>
<li><code>how to identify a token(token separated by whitespace) that will be replaced by macro.</code><ul>
<li>function name</li>
<li>parameter</li>
<li>lvalue&#x2F;rvalue</li>
</ul>
</li>
</ul>
<p><strong>if Token is equal(same with macro parameter) with macro, replace it with macro!!!</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HELLO hello</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> HELLO</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM 12</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hello</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello %d \n&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    HELLO(NUM);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>what can be used as a condition in <code>ifdef</code></li>
</ul>
<p><strong><code>literal object(integer operation)</code>, number 12 or char ‘H’ , if you use variable, its evaluation is always 0</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//it&#x27;s ok as replacement take first like 12 &gt;10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM 12</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> NUM &gt; 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> var1 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//as we never define name so name is 0!! var3 is defined</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> name!=<span class="string">&#x27;H&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> var3 30</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//as we never define name and name1, so they always 0, var4 is defined</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> name==name1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> var4 40</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d\n&quot;</span>, var1, var3, var4);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Free-memory-when-process-exits"><a href="#Free-memory-when-process-exits" class="headerlink" title="Free memory when process exits"></a>Free memory when process exits</h2><p>It depends on the operating system. <code>The majority of modern (and all major) operating systems will free memory when process ends</code>.</p>
<p><code>But relying on this is bad practice and it is better free it explicitly</code>. The issue isn’t just that your code looks bad. You may decide you want to integrate your small program into a larger, long running one. Then a while later you have to spend hours tracking down memory leaks.</p>
<p>Relying on a feature of an operating system also makes the code less portable.</p>
<p>Even if your OS (not all do that) frees memory at exit, <strong><code>there are some reasons to free it explicitly</code></strong>.</p>
<ul>
<li>it’s good manner</li>
<li>it adds symmetry, so code looks better</li>
<li>if someone takes this code and place it in a program that uses the libraries only in a small part of his runtime, the resources will be free when not needed.</li>
<li>if you are looking for bad memory leaks, your debugger won’t find these unimportant ones.</li>
<li><font color='red'><strong>OS does not automatically free some resources at exit, like devices (sensors, scanners…),  temporary files, <code>shared memory</code></strong>.</font></li>
</ul>
<h2 id="Send-file-descriptor-to-another-process"><a href="#Send-file-descriptor-to-another-process" class="headerlink" title="Send file descriptor to another process"></a>Send file descriptor to another process</h2><p>File descriptor can be sent only by AF_LOCAL or AF_UNIX, as during sending, <code>Actually the fd number is not transmitted(it&#39;s local for that process), but file descriptor instance(file struct in kernel) is transmitted in skb(scm data)</code>, so that <code>receiver can add the transfered file descriptor instance to its process with new fd in its scope</code>, so that after transmission, <strong>the file descriptor can be accessed by sender and receiver, actually, in most case, the sender will close the fd at its side, hence only receiver accessed that file descriptor.</strong></p>
<p><strong>Steps to take</strong></p>
<ul>
<li>Giving SOL_SOCKET to cmsg_level of a struct cmsghdr</li>
<li>Giving SCM_RIGHTS to cmsg_type of the struct cmsghdr</li>
<li>Placing the file descriptor at last of the struct cmsghdr</li>
<li>Assigning the struct cmsghdr to msg_control of a struct msghdr</li>
<li>Passing the struct msghdr to sendmsg(2) with the Unix domain socket</li>
</ul>
<p>Using CMSG_DATA is easy to get a pointer to last of the struct cmsghdr for 3</p>
<p><strong>Client</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/un.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> handle_error(msg)   \</span></span><br><span class="line"><span class="meta">    do &#123;                    \</span></span><br><span class="line"><span class="meta">        perror(msg);        \</span></span><br><span class="line"><span class="meta">        exit(EXIT_FAILURE); \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">send_fd</span><span class="params">(<span class="type">int</span> socket, <span class="type">int</span>* fds, <span class="type">int</span> n)</span> <span class="comment">// send fd by socket</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">msghdr</span> <span class="title">msg</span> =</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cmsghdr</span>* <span class="title">cmsg</span>;</span></span><br><span class="line">    <span class="type">char</span> buf[CMSG_SPACE(n * <span class="keyword">sizeof</span>(<span class="type">int</span>))], dup[<span class="number">256</span>];</span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> <span class="title">io</span> =</span> &#123; .iov_base = &amp;dup, .iov_len = <span class="keyword">sizeof</span>(dup) &#125;;</span><br><span class="line"></span><br><span class="line">    msg.msg_iov = &amp;io;</span><br><span class="line">    msg.msg_iovlen = <span class="number">1</span>;</span><br><span class="line">    msg.msg_control = buf;</span><br><span class="line">    msg.msg_controllen = <span class="keyword">sizeof</span>(buf);</span><br><span class="line"></span><br><span class="line">    cmsg = CMSG_FIRSTHDR(&amp;msg);</span><br><span class="line">    cmsg-&gt;cmsg_level = SOL_SOCKET;</span><br><span class="line">    cmsg-&gt;cmsg_type = SCM_RIGHTS;</span><br><span class="line">    cmsg-&gt;cmsg_len = CMSG_LEN(n * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">int</span>*)CMSG_DATA(cmsg), fds, n * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sendmsg(socket, &amp;msg, <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        handle_error(<span class="string">&quot;Failed to send message&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sfd, fds[<span class="number">1</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> <span class="title">addr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s &lt;file-name1&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use AF_LOCAL to transfer fd</span></span><br><span class="line">    sfd = socket(AF_UNIX, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sfd == <span class="number">-1</span>)</span><br><span class="line">        handle_error(<span class="string">&quot;Failed to create socket&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_un));</span><br><span class="line">    addr.sun_family = AF_UNIX;</span><br><span class="line">    <span class="built_in">strncpy</span>(addr.sun_path, <span class="string">&quot;/tmp/fd-pass.socket&quot;</span>, <span class="keyword">sizeof</span>(addr.sun_path) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    fds[<span class="number">0</span>] = open(argv[<span class="number">1</span>], O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fds[<span class="number">0</span>] &lt; <span class="number">0</span>)</span><br><span class="line">        handle_error(<span class="string">&quot;Failed to open file 1 for reading&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;Opened fd %d in parent\n&quot;</span>, fds[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// connect with UNIX server to send</span></span><br><span class="line">    <span class="keyword">if</span> (connect(sfd, (<span class="keyword">struct</span> sockaddr*)&amp;addr, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_un)) == <span class="number">-1</span>)</span><br><span class="line">        handle_error(<span class="string">&quot;Failed to connect to socket&quot;</span>);</span><br><span class="line"></span><br><span class="line">    send_fd(sfd, fds, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;Sleep 1000s after sent fd\n&quot;</span>);</span><br><span class="line">    sleep(<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Server</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/un.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> handle_error(msg)   \</span></span><br><span class="line"><span class="meta">    do &#123;                    \</span></span><br><span class="line"><span class="meta">        perror(msg);        \</span></span><br><span class="line"><span class="meta">        exit(EXIT_FAILURE); \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span>* <span class="title function_">recv_fd</span><span class="params">(<span class="type">int</span> socket, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>* fds = <span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">msghdr</span> <span class="title">msg</span> =</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cmsghdr</span>* <span class="title">cmsg</span>;</span></span><br><span class="line">    <span class="type">char</span> buf[CMSG_SPACE(n * <span class="keyword">sizeof</span>(<span class="type">int</span>))], dup[<span class="number">256</span>];</span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> <span class="title">io</span> =</span> &#123; .iov_base = &amp;dup, .iov_len = <span class="keyword">sizeof</span>(dup) &#125;;</span><br><span class="line"></span><br><span class="line">    msg.msg_iov = &amp;io;</span><br><span class="line">    msg.msg_iovlen = <span class="number">1</span>;</span><br><span class="line">    msg.msg_control = buf;</span><br><span class="line">    msg.msg_controllen = <span class="keyword">sizeof</span>(buf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get transferred file descriptor</span></span><br><span class="line">    <span class="keyword">if</span> (recvmsg(socket, &amp;msg, <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        handle_error(<span class="string">&quot;Failed to receive message&quot;</span>);</span><br><span class="line"></span><br><span class="line">    cmsg = CMSG_FIRSTHDR(&amp;msg);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(fds, (<span class="type">int</span>*)CMSG_DATA(cmsg), n * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">ssize_t</span> nbytes;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">    <span class="type">int</span> sfd, cfd, *fds;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    sfd = socket(AF_UNIX, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sfd == <span class="number">-1</span>)</span><br><span class="line">        handle_error(<span class="string">&quot;Failed to create socket&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (unlink(<span class="string">&quot;/tmp/fd-pass.socket&quot;</span>) == <span class="number">-1</span> &amp;&amp; errno != ENOENT)</span><br><span class="line">        handle_error(<span class="string">&quot;Removing socket file failed&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(&amp;addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_un));</span><br><span class="line">    addr.sun_family = AF_UNIX;</span><br><span class="line">    <span class="built_in">strncpy</span>(addr.sun_path, <span class="string">&quot;/tmp/fd-pass.socket&quot;</span>, <span class="keyword">sizeof</span>(addr.sun_path) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bind(sfd, (<span class="keyword">struct</span> sockaddr*)&amp;addr, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_un)) == <span class="number">-1</span>)</span><br><span class="line">        handle_error(<span class="string">&quot;Failed to bind to socket&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// listen on given address</span></span><br><span class="line">    <span class="keyword">if</span> (listen(sfd, <span class="number">5</span>) == <span class="number">-1</span>)</span><br><span class="line">        handle_error(<span class="string">&quot;Failed to listen on socket&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get one connection</span></span><br><span class="line">    cfd = accept(sfd, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (cfd == <span class="number">-1</span>)</span><br><span class="line">        handle_error(<span class="string">&quot;Failed to accept incoming connection&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fds = recv_fd(cfd, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;Reading from passed fd %d\n&quot;</span>, fds[i]);</span><br><span class="line">        <span class="keyword">while</span> ((nbytes = read(fds[i], buffer, <span class="keyword">sizeof</span>(buffer))) &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// read file and write it to stdout</span></span><br><span class="line">            write(<span class="number">1</span>, buffer, nbytes);</span><br><span class="line">        *buffer = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sleep 1000 after read file\n&quot;</span>);</span><br><span class="line">    sleep(<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">free</span>(fds);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (close(cfd) == <span class="number">-1</span>)</span><br><span class="line">        handle_error(<span class="string">&quot;Failed to close client socket&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h2><ul>
<li>Pipe, socketpair, socket(AF_LOCAL)</li>
<li>signal, eventfd</li>
<li>shared memory, file, need lock</li>
</ul>
<h3 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h3><p><strong>Only for parent process—-&gt;child process(can be used by different processes as well by send one fd to process), it’s stream-oriented</strong></p>
<p><img src="https://cyun.tech/images/C/pipe.jpg"></p>
<p>It’s a <code>one-way communication mechanism, with one end opened for reading(fd[0]) and the other end for writing(fd[1])</code>. Therefore, parent and child need to agree on which way to use the pipe, from parent to child or the other way around. A pipe is also a <code>stream communication mechanism</code>, that is all messages <code>sent through the pipe are placed in order</code>,when readers asks for a certain number of bytes from this stream, <strong>he is given as many as bytes as are available, up to the amount of request, Note that these bytes may have come from the same call to write() or from several calls to write() which are concatenated</strong>.</p>
<h3 id="socketpair"><a href="#socketpair" class="headerlink" title="socketpair"></a>socketpair</h3><p><strong>Only for parent process&lt;—-&gt;child process, it can be <code>stream or datagram</code></strong></p>
<p><img src="https://cyun.tech/images/C/socketpair.png"></p>
<p>Two-way communication mechanism, an extension of pipe.</p>
<h3 id="AF-LOCAL-AF-UNIX-socket"><a href="#AF-LOCAL-AF-UNIX-socket" class="headerlink" title="AF_LOCAL(AF_UNIX) socket"></a>AF_LOCAL(AF_UNIX) socket</h3><p><strong>any process&lt;—-&gt;any process</strong></p>
<p>Unix domain allows communication between <code>any two processes that are in same machine</code>.</p>
<h3 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h3><p><strong>any process&lt;—-&gt;any process within same machine</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># send signal to process with kill() API</span><br><span class="line">int kill(pid_t pid, int signal);</span><br></pre></td></tr></table></figure>
<p><strong>tiny, only signal number sent, can not take payload</strong></p>
<h3 id="eventfd"><a href="#eventfd" class="headerlink" title="eventfd"></a>eventfd</h3><p><strong>it’s fd but used for event counter, parent&lt;—-&gt;child</strong></p>
<p><code>between threads or between process</code> to notify something happens by <code>write a counter into kernel and walkup the reader to handle things</code>.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">uint64_t</span> u;</span><br><span class="line">efd = eventfd(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">switch</span>(fork()) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">//child</span></span><br><span class="line">        u = <span class="number">10</span>;</span><br><span class="line">        write(efd, &amp;u, <span class="keyword">sizeof</span>(u));</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">       read(efd, &amp;u, <span class="keyword">sizeof</span>(<span class="type">uint64_t</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>tiny, can only take integer payload</strong></p>
<h3 id="share-memory"><a href="#share-memory" class="headerlink" title="share memory"></a>share memory</h3><p><strong>Any process&lt;—&gt;any process on same machine, most of time a lock is needed.</strong></p>
<h4 id="system-v-style"><a href="#system-v-style" class="headerlink" title="system-v style"></a>system-v style</h4><p>it uses <code>key to identify the named shared memory</code>, so that other process can access the shared memory, but can also <code>without key for private memory for parent/child</code>, as the shared memory is created before fork(), so both see it.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//one process</span></span><br><span class="line"><span class="type">key_t</span> key;</span><br><span class="line">key = <span class="number">1000</span>;</span><br><span class="line">shmget(key, SHMSZ, IPC_CREAT | <span class="number">0666</span>));<span class="comment">// create shared memory with flag: IPC_CREAT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//another process</span></span><br><span class="line"><span class="type">key_t</span> key;</span><br><span class="line">key = <span class="number">1000</span>;</span><br><span class="line">shmget(key, SHMSZ, <span class="number">0666</span>);<span class="comment">//attach to the shared memory identified by key 1000</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Private share memory parent&#x2F;child</strong></li>
</ul>
<p><strong>shmget() with <code>IPC_PRIVATE as the key</code></strong></p>
<p><code>IPC_PRIVATE isn&#39;t a flag field but a key_t type</code>.  If this special value is used for key, the system call ignores everything but the least significant 9 bits of shmflg and  creates a new shared memory segment (on success). The name choice IPC_PRIVATE was perhaps unfortunate, IPC_NEW would more clearly show its function. <code>Both child and parent see the same memory, they always use same memory!!!</code></p>
<h4 id="posix-style"><a href="#posix-style" class="headerlink" title="posix style"></a>posix style</h4><p>Intend to share memory between unrelated processes. <code>One process creates the file, then other process opens it and maps it for sharing (think it as a normal file, actually it&#39;s an identifier of memory)</code></p>
<p>it uses <code>special file to identify the share memory located at /dev/shm</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//one process</span></span><br><span class="line">fd = shm_open(<span class="string">&quot;test&quot;</span>, O_CREAT | O_RDWR, <span class="number">0666</span>);<span class="comment">//create a file at /dev/shm/test, O_CREAT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// set the shared memory size</span></span><br><span class="line">addr = mmap(<span class="literal">NULL</span>, PAGE_SIZE, PROT_READ | PROT_WRITE,</span><br><span class="line">            MAP_SHARED, fd, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// the other</span></span><br><span class="line">shm_fd = shm_open(<span class="string">&quot;test&quot;</span>, O_RDONLY, <span class="number">0666</span>);</span><br><span class="line"><span class="comment">//attach to it</span></span><br><span class="line">addr = mmap(<span class="literal">NULL</span>, PAGE_SIZE, PROT_READ | PROT_WRITE,                    </span><br><span class="line">            MAP_SHARED, fd, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>As shm_open() creates a file descriptor, so user must call shm_unlink() to close it(close fd, decrease the reference counter) </p>
<p><strong>Warning</strong></p>
<p><code>if process does not call shm_unlink, when fd is closed, reference count is not decreased!!! so the shared memory may be never freed at all</code>.</p>
<ul>
<li><strong>share memory between parent&#x2F;child</strong></li>
</ul>
<p>without shm_open(), use <code>MAP_ANONYMOUS</code> flag and fd(-1) as parent&#x2F;child all know the shared memory</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//before fork()</span></span><br><span class="line">    addr = mmap(<span class="literal">NULL</span>, PAGE_SIZE, PROT_READ | PROT_WRITE,</span><br><span class="line">                MAP_SHARED | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>for mmap() with MAP_PRIVATE</strong></li>
</ul>
<p>Create a <code>private copy-on-write mapping</code>.  Updates to the mapping are not visible to other processes mapping the same file, and are not carried through to the underlying file. It is unspecified whether changes made to the file after the mmap() call are visible in the mapped region</p>
<p><code>That means each process has its own copy of it if it writes to shared memory, other process does not see changed part!!!!</code></p>
<h2 id="Multiplexing"><a href="#Multiplexing" class="headerlink" title="Multiplexing"></a>Multiplexing</h2><p>The poll() API performs the similar API as the existing select() API. The only difference between these two APIs is the interface provided to the caller.</p>
<p>The <code>select() API</code> requires that the application pass in a set of bits in which <code>one bit is used to represent each descriptor number</code>(for example if we only create a socket with fd 1000, the first argument for select is 1000+1, and kernel will create 1001 structure in kernel and unnecessary loop!!!, even if we only create one socket). When descriptor numbers are very large, it can overflow the 30KB allocated memory size, forcing multiple iterations of the process. This overhead can adversely affect performance.</p>
<hr>
<p>The <code>poll()</code> API allows the application to <code>pass an array of structures rather than a set of bits</code>. Because each pollfd structure can contain up to 8 bytes, the application only needs to pass one structure for each descriptor (we created), even if descriptor numbers are very large.</p>
<hr>
<p><code>Both poll() and select() require the full list of file descriptors to watch on each invocation</code>. <code>The kernel must then walk the list of each file descriptor to be monitored</code>. When this list grows large, it may contain hundreds or even thousands of file descriptors walking the list on each invocation becomes a scalability bottleneck.</p>
<ul>
<li><p><code>select</code> needs to set monitor fd for each call</p>
</li>
<li><p><code>select</code> limits fd number 1024, not true for <code>poll</code></p>
</li>
<li><p>even with one fd&#x3D;1000, <code>select</code> has to iterate from 0–1000 times, not true for <code>poll</code></p>
</li>
<li><p><code>poll</code> needs set monitor fd only once!!</p>
</li>
<li><p><code>poll</code> no limits fd number</p>
</li>
<li><p>if only with one fd&#x3D;1000, <code>poll</code> iterates only once, it <code>only iterates all the monitored fd to see if it has event</code>.</p>
</li>
</ul>
<hr>
<p><code>epoll</code> circumvents this problem by<code> decoupling the monitor registration from the actual monitoring</code>. One system call initializes an epoll context, another adds monitored file descriptors to or removes them from the context, and a third performs the actual event wait.</p>
<ul>
<li><code>epoll</code> needs set monitor fd only once!!</li>
<li><code>epoll</code> no limits fd number</li>
<li>it only <code>iterates the monitored fd which has event</code>, fast.</li>
</ul>
<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>One API: <code>select()</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">select(fdmax+<span class="number">1</span>, &amp;read_fds, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= fdmax; i++) &#123;</span><br><span class="line">    <span class="comment">// check which one has read event</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fdmax the max fd descriptor we monitors</span></span><br><span class="line"><span class="comment">// read_fds: 1024 bit sets, set the fd bit if we want to monitor it.</span></span><br></pre></td></tr></table></figure>
<p><strong>For each loop</strong></p>
<ul>
<li>tell the<code> max fd and fds that monitors</code></li>
<li>if event happens, check <code>all from 0--max</code> to know event on which fd(both in kernel and user)</li>
</ul>
<p>The major <code>disadvantages</code> include:</p>
<ul>
<li><p>select <code>modifies the passed fd_sets so none of them can be reused</code>. Even if you don’t need to change anything, such as if one of descriptors received data and needs to receive more data, a whole set has to be either recreated again or restored from a backup copy via FD_COPY. And <code>this has to be done each time the select is called</code>.</p>
</li>
<li><p>To find out which descriptors raised the events you have to manually <code>iterate through all the descriptors in the set and call FD_ISSET on each one of them</code>. When you have 2,000 of those descriptors and only one of them is active, likely, the last one, you’re wasting CPU cycles each time you wait.</p>
</li>
<li><p><code>Max number of supported fd 1024</code>, Did I just mention 2,000 descriptors? Well, select cannot support that much. At least on Linux. The maximum number of the supported descriptors is defined by the FD_SETSIZE constant, which Linux happily defines as 1024. And while some operating systems allow you to hack this restriction by redefining the FD_SETSIZE before including the sys&#x2F;select.h, this is not portable. Indeed, Linux would just ignore this hack and the limit will stay the same.</p>
</li>
<li><p><code>Can not close fd if it&#39;s in select() now</code>, You cannot modify the descriptor set from a different thread while waiting. Suppose a thread is executing the code above. Now suppose you have a housekeeping thread which decided that sock1 has been waiting too long for the input data, and it is time to cut the cord. Since this socket could be reused to serve another paying working client, the housekeeping thread wants to close the socket. However the socket is in the fd_set which select is waiting for. Now what happens when this socket is closed? man select has the answer, and you won’t like it. The answer is, “If a file descriptor being monitored by select() is closed in another thread, the result is unspecified”. </p>
</li>
<li><p><code>Can&#39;t send data on fd if it&#39;s in select() now</code> Same problem arises if another thread suddenly decides to send something via sock1. It is not possible to start monitoring the socket for the output event until select returns.</p>
</li>
<li><p>select puts extra burden on you when filling up the descriptor list to calculate the largest descriptor number and provide it as a function parameter.</p>
</li>
</ul>
<p><strong>is there is any reason to use select at all?</strong></p>
<ul>
<li><p>The first reason is <code>portability</code>. select has been around for ages, and you can be sure that every single platform around which has network support and nonblocking sockets will have a working select implementation while it might not have poll at all. And unfortunately I’m not talking about the tubes and ENIAC here; poll is only available on Windows Vista and above which includes Windows XP – still used by the whooping 34% of users as of Sep 2013 despite the Microsoft pressure. Another option would be to still use poll on those platforms and emulate it with select on those which do not have it; it is up to you whether you consider it reasonable investment.</p>
</li>
<li><p>The second reason is more exotic, and is related to the fact that select can – theoretically – <code>handle the timeouts with in the one nanosecond precision, while both poll and epoll can only handle the one millisecond precision</code>. This is not likely to be a concern on a desktop or server system, which clocks doesn’t even run with such precision, but it may be necessary on a realtime embedded platform while interacting with some hardware components. Such as lowering control rods to shut down a nuclear reactor – in this case, please, use select to make sure we’re all stay safe!</p>
</li>
</ul>
<p>The case above would probably be the only case where you would have to use select and could not use anything else. However if you are writing an application which would <code>never have to handle more than a handful of sockets (like, 200)</code>, the difference between using <code>poll and select would not be based on performance</code>, but more on personal preference or other factors.</p>
<h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3><p>One API: <code>poll()</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">poll(ufds, <span class="number">2</span>, <span class="number">3500</span>);</span><br><span class="line"><span class="comment">/* ufds     array of fds monitor</span></span><br><span class="line"><span class="comment"> * 2        the array size (how many fds we want to monitor)</span></span><br><span class="line"><span class="comment"> * 3500     3.5s</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p><strong>For each loop</strong></p>
<ul>
<li>tell <code>only the fds monitors</code> not max fd as select does.</li>
<li>if event happens, check <code>all monitors</code> to see event on which fd(both in kernel and user), iterate all and compare to find th<br>e fd that has events.</li>
</ul>
<p>poll was mainly created to fix the pending problems select had, so it has the following <code>advantages over it</code>:</p>
<ul>
<li><p>There is no <code>hard limit on the number of descriptors poll can monitor</code>, so the limit of 1024 does not apply here.</p>
</li>
<li><p>It does not modify the data passed in the struct pollfd data. Therefore it could be <code>reused between the poll() calls</code> as long as set to zero the revents member for those descriptors which generated the events. The IEEE specification states that “In each pollfd structure, poll() shall clear the revents member, except that where the application requested a report on a condition by setting one of the bits of events listed above, poll() shall set the corresponding bit in revents if the requested condition is true“. However in my experience at least one platform did not follow this recommendation, and man 2 poll on Linux does not make such guarantee either (man 3p poll does though).</p>
</li>
<li><p>It allows more fine-grained control of events comparing to select. For example, it can <code>detect remote peer shutdown without monitoring for read events</code>.</p>
</li>
</ul>
<p><strong>poll still has a few issues which need to be kept in mind:</strong></p>
<ul>
<li><p>Like select, it is still not possible to find out which descriptors have the events triggered without <code>iterating through the whole list and checking the revents</code>. Worse, the same happens in the kernel space as well, as the kernel has to iterate through the list of file descriptors to find out which sockets are monitored, and iterate through the whole list again to set up the events.</p>
</li>
<li><p>Like select, it is <code>not possible to dynamically modify the set or close the socket which is being polled</code></p>
</li>
</ul>
<p><strong>poll should be your preferred method even over epoll if the following is true:</strong></p>
<ul>
<li><p>You need to support more than just Linux, and do not want to use <code>epoll wrappers such as libevent</code> (epoll is Linux only);</p>
</li>
<li><p>Your application needs to monitor <code>less than 1000 sockets at a time</code> (you are not likely to see any benefits from using epoll);</p>
</li>
<li><p>Your application needs to monitor more than 1000 sockets at a time, but the<code>connections are very short-lived</code> (this is a close case, but most likely in this scenario you are not likely to see any benefits from using epoll because the speedup in event waiting would be wasted on adding those new descriptors into the set – see below)</p>
</li>
<li><p>Your application is not designed the way that it changes the events while another thread is waiting for them (i.e. you’re not porting an app using kqueue or IO Completion Ports).</p>
</li>
</ul>
<h3 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h3><p><img src="https://cyun.tech/images/nginx/epoll_basic.png"><br>Two APIs: <code>epoll_ctl() and epoll_wait()</code></p>
<p><strong>For each loop</strong></p>
<ul>
<li><code>no need to tell fds monitors as kernel keeps it from another API</code></li>
<li>if event happens, <code>no need to check</code> to see event on which fd, as <code>epoll() returns only the fd that has events</code>.</li>
</ul>
<p>epoll has some <code>significant advantages over select/poll</code> both in terms of performance and functionality:</p>
<ul>
<li><p>epoll returns only the list of descriptors which triggered the events. <code>No need to iterate through 10,000 descriptors anymore to find that one which triggered the event</code>!</p>
</li>
<li><p>You can <code>attach meaningful context to the monitored event</code> instead of socket file descriptors. In our example we attached the class pointers which could be called directly, saving you another lookup.</p>
</li>
<li><p>You can <code>add sockets or remove them from monitoring anytime, even if another thread is in the epoll_wait function</code>. You can even modify the descriptor events. Everything will work properly, and this behavior is supported and documented. This gives you much more flexibility in implementation.</p>
</li>
<li><p>Since the kernel knows all the monitoring descriptors, it can <code>register the events happening on them even when nobody is calling epoll_wait</code>. This allows implementing interesting features such as edge triggering</p>
</li>
<li><p>It is possible to have the <code>multiple threads waiting on the same epoll queue with epoll_wait()</code>, something you cannot do with select&#x2F;poll. In fact it is not only possible with epoll, but the recommended method in the edge triggering mode.</p>
</li>
</ul>
<p><strong>epoll is not a “better poll”, and it also has disadvantages when comparing to poll:</strong></p>
<ul>
<li><p><code>Changing the event flags</code> (i.e. from READ to WRITE) requires the epoll_ctl syscall, while when using poll this is a simple bitmask operation done entirely in userspace. Switching 5,000 sockets from reading to writing with epoll would require 5,000 syscalls and hence context switches (as of 2014 calls to epoll_ctl still  could not be batched, and each descriptor must be changed separately), while in poll it would require a single loop over the pollfd structure.</p>
</li>
<li><p>Each accepted socket needs to be added to the set, and same as above, with epoll it has to be done by calling epoll_ctl which means there are <code>two required syscalls per new connection socket instead of one for poll</code>. If your server has many <code>short-lived connections which send or receive little traffic, epoll will likely take longer than poll to serve them</code>.</p>
</li>
<li><p>epoll is <code>exclusively Linux domain</code>, and while other platforms have similar mechanisms, they are not exactly the same ,edge triggering, for example, is pretty unique (FreeBSD’s kqueue supports it too though).</p>
</li>
<li><p>High performance processing logic is more complex and hence more difficult to debug, especially for edge triggering which is prone to deadlocks if you miss extra read&#x2F;write.</p>
</li>
</ul>
<p><strong>Therefore you should only use epoll if all following is true:</strong></p>
<ul>
<li><p>Your application runs a thread poll which <code>handles many network connections</code> by a handful of threads. You would lose most of epoll benefits in a single-threaded application, and most likely it won’t outperform poll.</p>
</li>
<li><p>You expect to have a reasonably <code>large number of sockets to monitor</code> (at least 1,000); with a smaller number epoll is not likely to have any performance benefits over poll and may actually worse the performance;</p>
</li>
<li><p>Your connections are relatively long-lived; as stated above epoll will be slower than poll in a situation when a new connection sends a few bytes of data and immediately disconnects because of extra system call required to add the descriptor into epoll set;</p>
</li>
<li><p>Your app depends on other Linux-specific features (so in case portability question would suddenly pop up, epoll wouldn’t be the only roadblock), or you can provide wrappers for other supported systems. In the last case you should strongly consider libevent.</p>
</li>
</ul>
<p><strong>epoll Triggering modes</strong></p>
<p>epoll provides both <font color='red'>edge-triggered and level-triggered modes</font>. <code>In edge-triggered mode, a call to epoll_wait will return only when a new event is enqueued with the epoll object, you should receive all data when event happens, otherwise, next call epoll_wait will block if no new data,  while in level-triggered mode, epoll_wait will return as long as the condition holds.</code></p>
<p>For instance, if a pipe registered with epoll has received data, a call to epoll_wait will return, signaling the presence of data to be read. Suppose, the reader only consumed part of data from the buffer. In level-triggered mode, further calls to epoll_wait will return immediately, as long as the pipe’s buffer contains data to be read. In edge-triggered mode, however, epoll_wait will return only once new data is written to the pipe.</p>
<p><strong>edge-triggered mode must read them all if read event happens</strong></p>
<ul>
<li>how do I know all data is read for this time(read event)?</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">n = recv(fd, buf, buflen)</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//end of file</span></span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">-1</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (error == EAGAIN) &#123;</span><br><span class="line">   <span class="comment">//no data to read, !!!read them all!!!</span></span><br><span class="line">   &#125; <span class="keyword">else</span> (error == EINTR) &#123;</span><br><span class="line">   <span class="comment">//interrupted when block</span></span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &lt; buflen) &#123;</span><br><span class="line"><span class="comment">// !!!read them all!!!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Multi-thread"><a href="#Multi-thread" class="headerlink" title="Multi-thread"></a>Multi-thread</h2><h3 id="pthread-cleanup-pop-and-pthread-cleanup-push"><a href="#pthread-cleanup-pop-and-pthread-cleanup-push" class="headerlink" title="pthread_cleanup_pop and pthread_cleanup_push"></a>pthread_cleanup_pop and pthread_cleanup_push</h3><p>As multi-threads share the address namespace, if a resources is shared by multi-thread for writing, a mutex lock is needed for this, something like this in all threads, but in some case one thread may call <code>pthread_cancel() to abort another thread, if that thread just gets lock but did not run unlock, it will be terminated, no chance to run unlock, hence causes other threads waiting on the lock which will never be freed,deadlock.</code> so we can add a callback that will be called even <code>abort</code> signal  by pthread_cleanup_pop and pthread_cleanup_push.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line"><span class="comment">// do_something()</span></span><br><span class="line">pthread_mutex_unlock(&amp;mutex);</span><br></pre></td></tr></table></figure>

<p><code>pthread_cleanup_push added a callback that will be called even receives abort signal</code>, so we can unlock the mutex in<br>the callback.</p>
<p><strong>the callback executes in three cases.</strong></p>
<ul>
<li>The thread exits (that is, calls pthread_exit()).</li>
<li>The thread acts upon a cancellation request.</li>
<li>The thread calls pthread_cleanup_pop() with a non-zero execute argument</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// void pthread_cleanup_push(void (*routine)(void*), void *arg); </span></span><br><span class="line">pthread_cleanup_push(some_clean_func,...)</span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line"><span class="comment">// do_something</span></span><br><span class="line">pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">pthread_cleanup_pop(<span class="number">0</span>); <span class="meta"># remove the callback, never call it.</span></span><br></pre></td></tr></table></figure>

<h3 id="pthread-join"><a href="#pthread-join" class="headerlink" title="pthread_join"></a>pthread_join</h3><p>In multiple threads, one thread may depend on another thread, for instance, A must execute after B quits, or before A quits we must quit B firstly, that’s why pthread_join(wait another thread exits, blocked caller) comes in. one typical case:</p>
<p><code>In main thread, we create a new thread, if no pthread_join, the two threads may run across</code>, if main thread quits before the new thread (new thread still some work to do), the left work can’t be done, because when the main thread quits, all resources will be freed by OS, the new thread will exit as well!</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">start</span><span class="params">(<span class="type">void</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;This in the thread : %d\n&quot;</span> , i );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> pth;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> ret = pthread_create(&amp;pth, <span class="literal">NULL</span>, start, (<span class="type">void</span> *)(i)); <span class="comment">//start to run now</span></span><br><span class="line">    pthread_join(pth, <span class="literal">NULL</span>); <span class="comment">//wait until thread exits</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;This in the main : %d\n&quot;</span> , i );</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If without pthread_join(pth, NULL), the output is unpredictable!!!! Because you</span></span><br><span class="line"><span class="comment">// don’t know when the main thread will exit.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="thread-safe-vs-multi-safe-vs-signal-safe"><a href="#thread-safe-vs-multi-safe-vs-signal-safe" class="headerlink" title="thread-safe vs multi-safe vs signal-safe"></a>thread-safe vs multi-safe vs signal-safe</h3><h3 id="lockless-queue-x2F-stack"><a href="#lockless-queue-x2F-stack" class="headerlink" title="lockless queue&#x2F;stack"></a>lockless queue&#x2F;stack</h3><p>In order to achieve lockless, there are two main points.</p>
<ul>
<li>use <code>CMPXCHG(x86)</code> directive <code>atomic operation</code></li>
<li>optimize your code and data structure, to <code>compress your code to access critical area in one statement</code> or <code>check and set flags in one ins, then access critical area</code> to block from user level.</li>
</ul>
<p><strong>what does CMPXCHG do</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//simulate it in C code</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">val_compare_and_swap</span> <span class="params">( <span class="type">int</span> *memory_location, <span class="type">int</span> expected_value, <span class="type">int</span> new_value)</span> </span><br><span class="line">&#123; </span><br><span class="line">  <span class="type">int</span> old_value = *memory_location;</span><br><span class="line">  <span class="keyword">if</span> (old_value == expected_value)</span><br><span class="line">     *memory_location = new_value;</span><br><span class="line">  <span class="keyword">return</span> old_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">bool_compare_and_swap</span> <span class="params">( <span class="type">int</span> *memory_location, <span class="type">int</span> expected_value, <span class="type">int</span> new_value)</span> </span><br><span class="line">&#123; </span><br><span class="line">  <span class="type">int</span> old_value = *memory_location;</span><br><span class="line">  <span class="keyword">if</span> (old_value == expected_value) &#123;</span><br><span class="line">     *memory_location = new_value;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Thanks to gcc, we no need to write assembly code to do it, as it provides us two functions with written in assembly(CMPXCHG)</p>
<p><strong>GCC built-in</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> __sync_bool_compare_and_swap (type *ptr, type oldval, type newval, ...)</span><br><span class="line">type __sync_val_compare_and_swap (type *ptr, type oldval, type newval, ...)</span><br></pre></td></tr></table></figure>


<p><strong>lockless stack</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">head</span>;</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));</span><br><span class="line">        <span class="keyword">if</span> (p) &#123;</span><br><span class="line">            p-&gt;val = val;</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">                p-&gt;next = head;</span><br><span class="line">                <span class="comment">//check if head is changed by another thread, if not switch</span></span><br><span class="line">                <span class="comment">//otherwise, do another loop.</span></span><br><span class="line">                <span class="keyword">if</span> (__sync_bool_compare_and_swap(&amp;head, p-&gt;next, p)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="glibc-pthread-mutex-Semaphores-and-futex"><a href="#glibc-pthread-mutex-Semaphores-and-futex" class="headerlink" title="glibc pthread mutex Semaphores and futex"></a>glibc pthread mutex Semaphores and futex</h3><p>Before introduce futex(fast userspace mutex), let’s see how pthread_mutex implement in earlier days, when you call pthread_mutex_lock(), it calls another <code>sytem call whick will do below things in kernel</code>. </p>
<ul>
<li>check if the lock available </li>
<li>if unavailable, sleep the caller.</li>
</ul>
<p>what’s the problem with such solution? let’s say if the lock is <code>not used frequently, we still need to go to kernel to check and get the lock.</code> but for <strong><code>check and get the lock</code> we can <code>move it to user space</code></strong>, so that if lock is not used highly, we do not need to go to kernel as no need to sleep the process which must be done by kernel. this is the core concept that futex does, <strong><code>futex includes two parts one part is in glibc that checks the lock, the other part is in kernel when lock not available, call a system api(futex()) to sleep the caller, futex can also wake a process based on parameter</code></strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//futex 的逻辑可以用如下C语言表示</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lock</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> c</span><br><span class="line">    <span class="title function_">if</span> <span class="params">((c = cmpxchg(val, <span class="number">0</span>, <span class="number">1</span>)) != <span class="number">0</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="number">2</span>)</span><br><span class="line">            c = xchg(val, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">while</span> (c != <span class="number">0</span>) &#123;</span><br><span class="line">            futex_wait((&amp;val, <span class="number">2</span>);</span><br><span class="line">            c = xchg(val, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line">    </span><br><span class="line"><span class="type">void</span> unlock()</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">if</span> (<span class="type">atomic_dec</span>(val) != <span class="number">1</span>)</span><br><span class="line">        futex_wake(&amp;val, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>futex(uaddr, FUTEX_WAKE, 1)</code></p>
<p><code>futex(uaddr, FUTEX_WAIT, 1)</code></p>
<p><strong>From kernel 2.5.7(2002), <font color='red'>glic uses futex to implement pthread_mutex and semaphores, pthread_join() also calls futex to sleep the caller</font></strong></p>
<h3 id="get-thread-id"><a href="#get-thread-id" class="headerlink" title="get thread id"></a>get thread id</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="type">pid_t</span> tid = syscall(SYS_gettid);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, tid);</span><br></pre></td></tr></table></figure>

<h2 id="Multi-process"><a href="#Multi-process" class="headerlink" title="Multi-process"></a>Multi-process</h2><h3 id="wait-vs-waitpid"><a href="#wait-vs-waitpid" class="headerlink" title="wait() vs waitpid()"></a>wait() vs waitpid()</h3><p><code>Always call wait in parent process, otherwise child process will never die(destroyed by os), without wait() call, exited child is in zombie state, memory is freed, but task struct is not freed</code>.</p>
<p><strong>zombie process</strong></p>
<p>When a process <code>exits, OS frees all memory for it and closes all fds</code>, only left <code>task struct</code> which has meta data of exited process like process id, exit state, cpu usage etc, then OS <code>sends SIGCHILD to its parent</code>, before parent call wait or waitpid, the exited process is a zombie, if parent never calls wait&#x2F;waitpid, it’s always zombie, after parent calls wait&#x2F;waitpid, the only left <code>task struct</code> is freed.</p>
<p>The wait() system call <code>suspends execution</code> of the current process until <code>one of its children terminates</code>.  The call wait(&amp;status) is equivalent to: waitpid(-1, &amp;status, 0), but waitpid support non-block mode if no child exited by setting option.</p>
<ul>
<li>WNOHANG     return immediately if no child has exited.</li>
</ul>
<p>The waitpid() system call suspends execution of the current process until <code>a child specified by pid argument has changed state(terminated or stopped)</code>.</p>
<p><code>waitpid(pid, &amp;status, WIFEXITED)</code></p>
<p><code>waitpid(pid, &amp;status, WIFSTOPPED)</code></p>
<ul>
<li><a href="http://man7.org/linux/man-pages/man2/waitid.2.html">wait() api</a></li>
<li><a href="https://www.cnblogs.com/wuchanming/p/4020463.html">zombie process</a></li>
</ul>
<p><strong>Always use <code>waitpid()</code> as it’s powerful,it can return when [any one] or ]particular one] or ]no one exited] while <code>wait()</code> always block, wakeup only when any child quits</strong></p>
<h3 id="execve"><a href="#execve" class="headerlink" title="execve()"></a>execve()</h3><p><a href="http://man7.org/linux/man-pages/man3/exec.3.html">exec() familiy</a> executes the program referred to by pathname.  This causes the program that is currently being run by the calling process to be <code>replaced with a new program, with newly initialized stack, heap, and (initialized and uninitialized) data segments</code>, <strong>except below:</strong></p>
<ul>
<li>File descriptors open except for those whose close-on-exec flag (FD_CLOEXEC) is set</li>
<li>Process ID</li>
<li>Parent process ID</li>
<li>Process group ID</li>
<li>Session membership</li>
<li>Real user ID</li>
<li>Real group ID</li>
<li>Current working directory</li>
<li>File mode creation mask</li>
<li>Process signal mask</li>
<li>Pending signals</li>
</ul>
<p><strong><font color='red'>In short</font></strong></p>
<p>you can <strong><code>think it roughly all are replaced except keeping the file descriptors, signal, pid, uid</code></strong> so make sure close these opened file, there are two ways to do this.</p>
<ul>
<li><p>One way</p>
<blockquote>
<p><strong>Add flag when open a file(socket) with O_CLOEXEC</strong></p>
</blockquote>
</li>
<li><p>The other way</p>
<blockquote>
<p><strong>after open, use fcntl() to set a flag FD_CLOEXEC</strong></p>
</blockquote>
</li>
</ul>
<p><a href="https://www.cnblogs.com/hnrainll/archive/2011/07/23/2114854.html">demo for each function</a></p>
<h2 id="Mix-process-and-thread-call-fork-in-thread"><a href="#Mix-process-and-thread-call-fork-in-thread" class="headerlink" title="Mix process and thread, call fork in thread?"></a>Mix process and thread, call fork in thread?</h2><p><font color='red'><strong>Should never call fork in multi-thread</strong> </font>as there are lots of non-obvious problems that you can’t detect them easily.</p>
<p>The non-obvious problem in this approach(mix them) is that <code>at the moment of the fork(2) call some threads may be in critical sections of code, doing non-atomic operations protected by mutexes</code>. In the child process the threads just disappears and left data half-modified without any possibility to “fix” them, there is no way to say what other threads were doing and what should be done to make the data consistent. Moreover: <code>state of mutexes is undefined, they might be unusable and the only way to use them in the child is to call pthread_mutex_init() to reset them to a usable state</code>. It’s implementation dependent how mutexes behave after fork(2) was called. On my Linux machine locked mutexes are locked in the child.</p>
<p><strong>malloc, syslog(), printf()</strong> use lock internally, be careful with them in multi-thread or multi-process.</p>
<p>More details, refer to <a href="http://www.linuxprogrammingblog.com/threads-and-fork-think-twice-before-using-them">think-twice-before-using-tem</a></p>
<h2 id="pipe-vs-pipe2-vs-socketpair-and-dup-vs-dup2"><a href="#pipe-vs-pipe2-vs-socketpair-and-dup-vs-dup2" class="headerlink" title="pipe vs pipe2 vs socketpair and dup vs dup2"></a>pipe vs pipe2 vs socketpair and dup vs dup2</h2><p>pipe(fd[2])&#x2F;pipe2(fd[2], flag) create a unidirection channel with two fds(<code>fd[0] for read, while fd[1] for write</code>), <code>pipe2 gives more control when creating the channel like set NON_BLOCK</code> etc.</p>
<p>pipe2() is to avoid race conditions by taking the O_CLOEXEC | O_NONBLOCK, <a href="https://man7.org/linux/man-pages/man2/open.2.html">https://man7.org/linux/man-pages/man2/open.2.html</a></p>
<p>socketpair(domain, proto, fd[2]) is similar to pipe, actually, <code>it&#39;s extension of pipe, it&#39;s two-way communication.</code></p>
<p>dup(oldfd)&#x2F;dup2(oldfd, newfd) make duplicate the fd, hence <code>dup2 lets you provide the new fd while dup() pick the smallest unused fd</code></p>
<p><strong><code>dup(oldfd) will duplicate the oldfd, the return value is new fd(dup always pick the smallest fd unused)</code></strong></p>
<p><code>dup2(oldfd, newfd) takes two fd, oldfd must be created before dup2, it will use newfd points to oldfd, if newfd is open, it will silently close it before reuse it.</code></p>
<p><strong>typical use for pipe</strong></p>
<p>parent creates a pipe, then fork child, child&#x2F;parent use pipe for one-way communication.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> fd[<span class="number">2</span>];</span><br><span class="line">pipe(fd);</span><br><span class="line"><span class="type">int</span> pid = fork();</span><br><span class="line"><span class="keyword">if</span>(pid) &#123;</span><br><span class="line">    <span class="comment">//parent read</span></span><br><span class="line">    close(fd[<span class="number">1</span>]);</span><br><span class="line">    read(fd[<span class="number">0</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//child write</span></span><br><span class="line">    close(fd[<span class="number">0</span>]);</span><br><span class="line">    write(fd[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>typical use for dup&#x2F;dup2 along with pipe</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> fd[<span class="number">2</span>];</span><br><span class="line">pipe(fd);</span><br><span class="line"><span class="type">int</span> pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid) &#123;</span><br><span class="line">    <span class="comment">//parent read</span></span><br><span class="line">    close(fd(<span class="number">1</span>));</span><br><span class="line">    read(fd(<span class="number">0</span>));</span><br><span class="line">    close[fd[<span class="number">0</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//child write</span></span><br><span class="line">    close(fd[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">//redirect STDOUT, hence parent will get the output from execv!!!</span></span><br><span class="line">    dup2(fd[<span class="number">1</span>], STDOUT_FILENO);</span><br><span class="line">    execlp(<span class="string">&quot;grep&quot;</span>, <span class="string">&quot;grep&quot;</span>, <span class="string">&quot;pipe&quot;</span>,<span class="literal">NULL</span>);</span><br><span class="line">    close(fd[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="little-endian-and-big-endian"><a href="#little-endian-and-big-endian" class="headerlink" title="little-endian and big-endian"></a>little-endian and big-endian</h2><p>“Little Endian” means that the <code>low-order byte of the number is stored in memory at the lowest address</code>, and the high-order byte at the highest address. (The little end comes first.) For example, a 4 byte Int</p>
<pre><code>`Byte3 Byte2 Byte1 Byte0`
</code></pre>
<p>will be arranged in memory as follows: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Base Address+0   Byte0</span><br><span class="line">Base Address+1   Byte1</span><br><span class="line">Base Address+2   Byte2</span><br><span class="line">Base Address+3   Byte3</span><br></pre></td></tr></table></figure>

<p><strong>Intel processors (those used in PC’s) use “Little Endian” byte order</strong>.<br>“Big Endian” means that the high-order byte of the number is stored in memory at the lowest address, and the low-order byte at the highest address. (The big end comes first.) Our LongInt, would then be stored as: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Base Address+0   Byte3</span><br><span class="line">Base Address+1   Byte2</span><br><span class="line">Base Address+2   Byte1</span><br><span class="line">Base Address+3   Byte0</span><br></pre></td></tr></table></figure>
<p>Motorola processors (those used in Mac’s) use “Big Endian” byte order.</p>
<h2 id="daemonize"><a href="#daemonize" class="headerlink" title="daemonize"></a>daemonize</h2><p>To daemonize, there are two ways to do it.</p>
<ul>
<li><strong>Make itself as daemon</strong><br>1. parent -&gt; fork (child)<br>2. parent exit<br>3. init take orphan child                                                   </li>
<li><strong>It’s daemon, want to daemonize its child(forked from me)</strong><br>1. parent -&gt;fork(child)<br>2. child -&gt; fork(grandchild)<br>3. child exit<br>4. init take orphan grandchild</li>
</ul>
<h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><p>gcc provides lots of built-in keywords like <code>inline, typeof etc</code> for better use.</p>
<p>Note: while <code>-ansi and the various -std options disable certain keywords</code> (asm, inline typeof) in such case, use<code>__asm__, __inline__, __typeof__</code> when -ansi or -std is enable during compiling.</p>
<h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p><code>get type of variable then define internal variable in Macro</code>, this is what ‘typeof’ is always used.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a and b are two pointers</span></span><br><span class="line">typeof(<span class="type">int</span>*) a, b;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a is a pointer while b is int</span></span><br><span class="line">typeof(<span class="type">int</span>) *a, b;</span><br></pre></td></tr></table></figure>


<h3 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h3><p>GCC does <code>not inline any functions without optimizing(-o0)</code> unless you specify the ‘always_inline’ attribute for the function.</p>
<ul>
<li><strong>suggest inline, inline or not determined by compiler</strong><br><code>inline void foo() &#123;&#125;</code></li>
<li><strong>force inline</strong><br><code>inline void foo()__attribute__((always_inline)) &#123;&#125;</code></li>
</ul>
<p><strong>Note: inline keyword is added at function definition not declaration</strong></p>
<p><strong><code>What does compiler do if it inlines that function?</code></strong></p>
<p>Actually for a inline function, compiler will repace the function call with extended code, that means there is <code>no function call happens for inline function</code>, fast but with more code, but there are <code>exceptions here, if we assign inline function to a function pointer</code>, compiler will create function(even it’s inline) for it with an address, otherwise, if this no function in assemble code for inline function. </p>
<p><strong>inline in dot c file</strong></p>
<p>if you<code> define inline function in dot c and want to call it in another dot c</code>, compiler will create a function address for inline function as well, <code>another dot c sees it as a normal function, but in the file it defines, it&#39;s a inline.</code> function.</p>
<p><strong>inline in dot h file</strong></p>
<p>if you define it in dot h, <code>as dot h will be copied to the c file who includes it</code>, so that there are several copied of this inline function <code>like it&#39;s defined in that dot c file so it&#39;s inlined for dot c file</code>. </p>
<p><font color='red'>For short shared function, define it as inline in dot h file with static keyword</font></p>
<h3 id="static-used-in-header"><a href="#static-used-in-header" class="headerlink" title="static used in header"></a>static used in header</h3><p>One important thing that must know is that for <code>header file it will be copied to dot c file who includes it</code>. that means if you <code>static int b = 12</code> in a header file, if it’s included by two dot c files, it has the same effect that two dot c files define <code>static int b = 12</code> for themself.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//File q7a.h:</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> err_code = <span class="number">3</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printErrCode</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//File q7a.c:</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;q7a.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printErrCode</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, err_code);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//File q7main.c:</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;q7a.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    err_code = <span class="number">5</span>;</span><br><span class="line">    printErrCode();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">gcc –Wall –c q7a.c –o q7a.o</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">gcc –Wall –c q7main.c –o q7main.o</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">gcc q7main.o q7a.o –o q7</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">./q7</span></span><br><span class="line">the output is 3</span><br></pre></td></tr></table></figure>

<h3 id="attribute-of-function"><a href="#attribute-of-function" class="headerlink" title="attribute of function"></a>attribute of function</h3><p><strong><code>__attribute__ can be used only in declaration!</code></strong> here only list common attributes that may be used in your daily life.</p>
<ul>
<li>deprecated: indicate you’d better not use me as I’m deprecated, if used, warning will appear&#x2F;</li>
<li><strong>constructor: run before main</strong></li>
<li><strong>destructor:  run after main</strong></li>
<li>section: specify the section that I’m defined</li>
<li>warn_unused_result: warning if result is not used</li>
<li>noinline: prevent me from being considered for inlining.</li>
<li>always_inline: force inline</li>
<li>ununsed: prevent printing warning if not used.</li>
</ul>
<p><code>void fun() __attribute__((deprecated));</code></p>
<h3 id="attribute-of-variable"><a href="#attribute-of-variable" class="headerlink" title="attribute of variable"></a>attribute of variable</h3><ul>
<li>aligned: This attribute specifies a <code>minimum alignment for the variable or structure field</code>, measured in bytes, <strong>if type default alignment is large than this value, use default.</strong> <strong>alignment&#x3D;max(default, aligned)</strong></li>
</ul>
<blockquote>
<p>Whenever you leave out the alignment factor in an aligned attribute specification, the compiler automatically sets the alignment for the declared variable or field to the largest alignment which is ever used for any data type on the target machine you are compiling for. Doing this can often make copy operations more efficient, because the compiler can use whatever instructions copy the biggest chunks of memory when performing copies to or from the variables or fields that you have aligned this way.<br>The <code>aligned attribute can only increase the alignment</code>; but you can decrease it by specifying packed as well</p>
</blockquote>
<ul>
<li>packed: The packed attribute specifies that a variable or structure field should <code>have the smallest possible alignment</code>–one byte for a variable, and one bit for a field, <strong>alignment&#x3D;min(default, packed)</strong></li>
<li>deprecated: see function</li>
<li>section: see function</li>
<li>unused: see function</li>
</ul>
<h3 id="attribute-of-type"><a href="#attribute-of-type" class="headerlink" title="attribute of type"></a>attribute of type</h3><ul>
<li>aligned: same as variable</li>
<li>packed: specifying this attribute for struct and union types is <code>equivalent to specifying the packed attribute on each of the structure or union members</code></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T1</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> a;</span><br><span class="line">    <span class="type">short</span> b;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">int</span> d __attribute__((packed));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//sizeof(struct T1)==10</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T2</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> a;</span><br><span class="line">    <span class="type">short</span> b;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">&#125; __attribute__((packed)); <span class="comment">// like each member __attribute__((packed))</span></span><br><span class="line"><span class="comment">//sizeof(struct T2)==8</span></span><br></pre></td></tr></table></figure>
<ul>
<li>deprecated: see variable.</li>
</ul>
<p><code>typedef int T1 __attribute__((deprecated));</code></p>
<h3 id="built-in-function"><a href="#built-in-function" class="headerlink" title="built-in function"></a>built-in function</h3><ul>
<li>the most&#x2F;less significant bit</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> val = <span class="number">0b1100</span>; <span class="comment">// binary</span></span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;there are %d zero before the fist bit 1 for 1100\n&quot;</span>,__builtin_clz (val));</span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">&quot;there are %d zero after the fist bit 1 for 1100\n&quot;</span>,__builtin_ctz (val));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h1><h2 id="should-add-void-to-function-parameter-who-has-no-parameter"><a href="#should-add-void-to-function-parameter-who-has-no-parameter" class="headerlink" title="should add void to function parameter who has no parameter?"></a>should add void to function parameter who has no parameter?</h2><p>Yes, it’s better do that as if compiling with <code>-Werror=strict-prototypes</code>, it will show error if function did not add void to function that does not need parameter.</p>
<p><code>void hello(void);</code></p>
<h2 id="Eliminate-unused-warning"><a href="#Eliminate-unused-warning" class="headerlink" title="Eliminate unused warning"></a>Eliminate unused warning</h2><p>In some case, you do not want to comment <code>unsed variable</code> out , but avoid compiling warning, or avoid warning for <code>unused return value</code>.</p>
<ul>
<li><code>(void)unsed_var;</code></li>
<li><code>(void)function();</code></li>
</ul>
<h2 id="use-do-while-0-if-want-to-use-block-in-macro"><a href="#use-do-while-0-if-want-to-use-block-in-macro" class="headerlink" title="use do{}while(0) if want to use block in macro"></a>use do{}while(0) if want to use block in macro</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// group macro in block with do/while, limit var scope if defined in macro</span></span><br><span class="line"><span class="comment">// to avoid conflict with caller.</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> hello(msg) \</span></span><br><span class="line"><span class="meta">do &#123; \</span></span><br><span class="line"><span class="meta">    int a = 12; \</span></span><br><span class="line"><span class="meta">    printf(<span class="string">&quot;%d %s&quot;</span>, a, msg); \</span></span><br><span class="line"><span class="meta">&#125; while(0) \</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    hello(<span class="string">&quot;boy&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="dynamic-argument-in-macro"><a href="#dynamic-argument-in-macro" class="headerlink" title="dynamic argument in macro"></a>dynamic argument in macro</h2><p>When the macro is invoked, <strong>all the tokens in its argument list […], including any commas</strong>, become the variable argument. <strong>This sequence of tokens replaces the identifier VA_ARGS</strong> in the macro body wherever it appears.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ENUMS(name, ...) \</span></span><br><span class="line"><span class="meta">    static const char *name[] = &#123;__VA_ARGS__&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    ENUMS(tests, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s, %s\n&quot;</span>, tests[<span class="number">0</span>], tests[<span class="number">1</span>]);\</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="see-assembly-and-source-code"><a href="#see-assembly-and-source-code" class="headerlink" title="see assembly and source code"></a>see assembly and source code</h2><p><code>gcc -c -g -Wa,-a,-ad a.c &gt; test.lst</code></p>
<h2 id="show-convertion-warning-when-compile-code"><a href="#show-convertion-warning-when-compile-code" class="headerlink" title="show convertion warning when compile code"></a>show convertion warning when compile code</h2><p><code>gcc -Wconversion</code></p>
<h2 id="cacheline-aligned"><a href="#cacheline-aligned" class="headerlink" title="cacheline aligned"></a>cacheline aligned</h2><p>In some case, we want a variable(struct) cache line aligned, so that CPU can read them once(cpu read memory cache line every time), so it’s better put related field(if access a, will access b soon, a, b are related) together in a cache line, check struct layout with <a href="https://github.com/acmel/dwarves">pahole</a></p>
<p><strong>two typical cache line size: 32 bytes or 64 bytes.</strong></p>
<h2 id="bit-shift"><a href="#bit-shift" class="headerlink" title="bit shift"></a>bit shift</h2><p>Most of time, bit shift for unsigned integer.</p>
<p><strong>left shift</strong>: always pad with 0  </p>
<p><strong>right shift</strong>:</p>
<ul>
<li>unsigned operator, padding with 0</li>
<li><strong>signed operator, padding with flag bit(for positive 0, 1 for negative)</strong></li>
</ul>
<h2 id="send-x2F-recv-packet-API-difference"><a href="#send-x2F-recv-packet-API-difference" class="headerlink" title="send&#x2F;recv packet API difference"></a>send&#x2F;recv packet API difference</h2><p>pairs of API for sending &#x2F;recving message</p>
<p><code>&quot;connected&quot; socket  can be [STREAM, DGGRAM called connect()]</code></p>
<ul>
<li>read&#x2F;readv: read one buffer&#x2F;several buffers on fd <code>[file like API]</code></li>
<li>write&#x2F;writev: write with one buffer&#x2F;several on ‘connected fd <code>[file like API]</code></li>
<li>recv&#x2F;send: with one buffer on ‘connected’ socket</li>
<li>recvfrom&#x2F;sendto: with on buffer on ‘unconnected’ socket</li>
<li>recvmsg&#x2F;sendmsg: with several buffers on ‘connected’ socket</li>
</ul>
<h2 id="STREAM-vs-Datagram"><a href="#STREAM-vs-Datagram" class="headerlink" title="STREAM vs Datagram"></a>STREAM vs Datagram</h2><p><code>Stream communication</code> implies several things, communication takes place across a connection between two sockets, the communication is reliable, error-free, and <code>no message boundaries are kept</code>, <code>reading from a stream may result in reading the data sent from one or several calls to write() or only part of the data from single call</code>, if there is not enough room for the entire message, or if not all data from a large message has been transferred, the protocol implementing such a style will retransmit message received with errors, it will also return error if one tries to send a message after the connection has been broken.</p>
<p><code>Datagram communication</code> doesn’t use connection, <code>each message is addressed individually</code>, if the address is correct, it will generally be received, although this is not guaranteed, the individual datagram will be kept separate when they are read, that is<code> message boundaries(from user level not from kernel level) are preserved</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TCP-----byte--------stream-----send receive---------------------in order --- -------------may partial</span><br><span class="line">UDP----message------datagram—--send—receive---------------------not guarantee(may lost)---full message</span><br><span class="line">Like TCP:  sender: AA  BB----recver: A   AB    B</span><br><span class="line">	 UDP:  sender: AA  BB---recver:  BB        AA</span><br></pre></td></tr></table></figure>

<p><img src="https://cyun.tech/images/C/stream-vs-datagram.png"></p>
<p>when call sendto(), there are two limitation, one is the socket sendbufer, the other is </p>
<p><code>MAX_MESSAGE_SIZE(udp payload)==65507==65535(max ip length)-20(ip header)-8(udp header)</code> but there ip package will may be fragment due to MTU(1500), so you can send max udp message(not include udp header) is 65507, <code>fragment always happens at IP layer for UDP if possible, but for TCP, there is no IP fragment at sender machine as TCP already split into smaller message before call IP layer</code>, but if socket send buffer is not enough to hold it, sendto() will blocked until kernel send some message and free the room.</p>
<h2 id="TCP-bi-direction"><a href="#TCP-bi-direction" class="headerlink" title="TCP bi-direction"></a>TCP bi-direction</h2><p>For a tcp connection, it’s bi-direction, that means both sides can send and recv data from the other, but you can close one direction, to make one side as reader, the other side as writer only. <code>shutdown()</code> allows you to only stop data transmission in a certain direction, while data transmission in one direction continues. If you can close the write operation of a socket and allow to continue to accept data on the socket until all data is read.</p>
<p><em>More control about TCP close</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">shutdown</span> <span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> how)</span>;</span><br><span class="line"></span><br><span class="line">There are three ways of how:</span><br><span class="line">SHUT_RD (<span class="number">0</span>): Turn off the read function on sockfd. This option will not allow sockfd to read.</span><br><span class="line">SHUT_WR (<span class="number">1</span>): Turn off the write function of sockfd, this option will not allow sockfd to write.</span><br><span class="line">SHUT_RDWR (<span class="number">2</span>): Turn off the read and write function of sockfd.</span><br></pre></td></tr></table></figure>

<h2 id="add-a-wrapper-for-a-function-who-defined-in-dynamic-library"><a href="#add-a-wrapper-for-a-function-who-defined-in-dynamic-library" class="headerlink" title="add a wrapper for a function who defined in dynamic library"></a>add a wrapper for a function who defined in dynamic library</h2><p>this is used when need to add a wrapper for a function that’s defined in dynamic library(so that you don’t see the source code of it!!) like C dynamic library or other dynamic library (dynamic library!!!!!!!!)</p>
<ul>
<li><p>step 1: create you own dynamic library<br>   1.1 program wrapper library<br>   void* malloc(size_t size)<br>   {<br>       void <em>ret;<br>       static void</em> (<em>realmalloc(size_t size)) &#x3D; NULL;<br>       if (realmalloc &#x3D;&#x3D; NULL) {<br>           realmalloc &#x3D; dlsym(RTLD_NEXT, “malloc”); &#x2F;</em> function that will be wrapped<br>       }<br>       ret &#x3D; realmalloc(size);<br>       !!!!add trace here!!!!!!!!!!!!<br>       return ret;<br>   }<br>   1.2 compile it into wrapper.so</p>
</li>
<li><p>step 2: create your program like before, see nothing happens<br>   ptr &#x3D; malloc(64);</p>
</li>
<li><p>setp 2: load it<br>  LD_PRLOAD&#x3D;.&#x2F;wrapper.so .&#x2F;program<br>  (wrapper.so is your dynamic library that wrapps<br>   the dynamic library(like C dynamic library)</p>
</li>
</ul>
<h2 id="NULL-vs-0"><a href="#NULL-vs-0" class="headerlink" title="NULL vs 0"></a>NULL vs 0</h2><p>when evaluate the value of NULL, it’s 0, <code>but if you assign NULL to non-pointer, it&#39;s a warning</code>, but a has value 0!</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="literal">NULL</span>? <span class="number">1</span>: <span class="number">2</span>; <span class="comment">//now a is 2!!!</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;equal&quot;</span>);<span class="comment">//printed</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="function-pointer"><a href="#function-pointer" class="headerlink" title="function pointer"></a>function pointer</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">hello</span><span class="params">(<span class="type">void</span>(*h)())</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// h is function pointer var</span></span><br><span class="line">    h();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BY is a function pointer type</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*BY)</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<h2 id="sizeof-vs-strlen"><a href="#sizeof-vs-strlen" class="headerlink" title="sizeof vs strlen"></a>sizeof vs strlen</h2><p>strlen returns when it sees ‘\0’ while sizeof calculates the size of bytes that the variable takes.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *p = <span class="string">&quot;a&quot;</span>; <span class="comment">//sizeof(p)==8 (x86-64), strlen(p)==1</span></span><br><span class="line"><span class="type">int</span> p[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; <span class="comment">//sizeof(p)==12</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// char *p and char p[] behave same when used in parameter</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">char</span> p [])</span> <span class="comment">// same as char *p!!!</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="what-about-char-p-0-in-a-struct"><a href="#what-about-char-p-0-in-a-struct" class="headerlink" title="what about char p[0] in a struct"></a>what about char p[0] in a struct</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prot</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> a</span><br><span class="line">    <span class="type">char</span> p[<span class="number">0</span>]; <span class="comment">//always as a label for dynamic size allocated after a!!! take no memory</span></span><br><span class="line">    <span class="comment">// struct prot * p = malloc(sizeof(struct prot) + 100);</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">struct</span> prot) == <span class="number">4</span>!!!</span><br></pre></td></tr></table></figure>

<h3 id="what-about-function-in-a-struct"><a href="#what-about-function-in-a-struct" class="headerlink" title="what about function in a struct"></a>what about function in a struct</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prot</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> a</span><br><span class="line">    <span class="type">int</span> <span class="title function_">hello</span><span class="params">()</span> &#123;<span class="built_in">printf</span>(<span class="string">&quot;hello&quot;</span>);&#125; <span class="comment">//define a function inside a struct</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">struct</span> prot) == <span class="number">4</span>!!!</span><br></pre></td></tr></table></figure>

<h2 id="shared-variable-between-source-global-variable"><a href="#shared-variable-between-source-global-variable" class="headerlink" title="shared variable between source(global variable)"></a>shared variable between source(global variable)</h2><ul>
<li>define it at xxx.c</li>
</ul>
<p><code>int global_v = 10;</code></p>
<ul>
<li>export it at xxx.h others can include such header, like <code>other x.c written with extern int global_v as well.</code><br><code>extern int global_v</code>;</li>
</ul>
<h2 id="Can-we-return-a-local-pointer-variable-from-a-function"><a href="#Can-we-return-a-local-pointer-variable-from-a-function" class="headerlink" title="Can we return a local pointer variable from a function"></a>Can we return a local pointer variable from a function</h2><p><strong>Actually you should NOT do this</strong>, as it’s not a good way as if local pointer points to memory on the stack after function call, it will be freed!!!</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">f1</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> * p = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> p; <span class="comment">// as &#x27;abc&#x27; is literal, so its memory is not on stack!!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> * <span class="title function_">f2</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> p[] = <span class="string">&quot;cde&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *str;</span><br><span class="line">    str = f1 ();</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;%s\n&quot;</span>, str); <span class="comment">//we still see right value as str points to the memory which is not on stack!!!</span></span><br><span class="line">    str = f2 ();</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;%s\n&quot;</span>, str); <span class="comment">//segment fault!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="type-length-and-overflow"><a href="#type-length-and-overflow" class="headerlink" title="type length and overflow"></a>type length and overflow</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> c = <span class="number">0x40</span>; <span class="comment">//64</span></span><br><span class="line"><span class="type">char</span> x = <span class="number">64</span>;</span><br><span class="line"><span class="type">char</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(<span class="type">char</span>)(x*b)); <span class="comment">// the highest bit is flag(0(+), 1(-1)), result: -128</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c&lt;&lt;<span class="number">3</span>);       <span class="comment">// result: 512 as %d is used, like int tmp = c&lt;&lt;3</span></span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, (<span class="type">char</span>)(c&lt;&lt;<span class="number">3</span>)); <span class="comment">//truncted result: 0</span></span><br></pre></td></tr></table></figure>

<h2 id="what-does-volatile-really-mean"><a href="#what-does-volatile-really-mean" class="headerlink" title="what does volatile really mean"></a>what does volatile really mean</h2><p>‘volatile’ is a keyword to <strong>prevent compiler optimizing(like cache value, reorder etc) for the described variable</strong>. its value can be changed by code outside the scope of current code at any time. The system <strong>always reads the current value of a volatile object from the memory location rather than keeping its value in temporary register at the point it is requested</strong>, even if a previous instruction asked for a value from the same object</p>
<p>it may be used to<br><font color='red' size=4></p>
<ul>
<li>describe an object corresponding to a memory-mapped input&#x2F;output port(driver also does)</li>
<li>global object accessed by an asynchronously interrupting function(ISR, signal handler)</li>
<li>global object accessed by two threads</font></li>
</ul>
<h3 id="two-threads"><a href="#two-threads" class="headerlink" title="two threads"></a>two threads</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">thread1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* now at thread1 compiler thinks flag is always 1</span></span><br><span class="line"><span class="comment">     * so it optimizes the code as</span></span><br><span class="line"><span class="comment">     * while (1) &#123;</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     * later on even thread2 changes the value, thread1 does not know</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">while</span>(flag)</span><br><span class="line">    &#123;</span><br><span class="line">        sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;flag with 1\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;flag with 0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    sleep(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">/* change the global value */</span></span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="one-thread-and-signal-handler"><a href="#one-thread-and-signal-handler" class="headerlink" title="one thread and signal handler"></a>one thread and signal handler</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">thread1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* now at thread1 compiler thinks flag is always 1</span></span><br><span class="line"><span class="comment">     * so it optimizes the code as</span></span><br><span class="line"><span class="comment">     * while (1) &#123;</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     * later on even signal handler changes the value, thread1 does not know</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">while</span>(flag)</span><br><span class="line">    &#123;</span><br><span class="line">        sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;flag with 1\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;flag with 0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">signal_xx_handler</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* change the global value */</span></span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ISR"><a href="#ISR" class="headerlink" title="ISR"></a>ISR</h3><p>when ISR always mapps port&#x2F;io&#x2F;device register from device exported, we should get its value from memory not cache register as it can be changed by DMA out scope of processor.</p>
<h2 id="how-dynamic-library-is-searched"><a href="#how-dynamic-library-is-searched" class="headerlink" title="how dynamic library is searched"></a>how dynamic library is searched</h2><p><font color='red'>Old way, when program starts, it checks below path for dynamic library searching</font></p>
<ul>
<li>directories from LD_LIBRARY_PATH;</li>
<li>directories from &#x2F;etc&#x2F;ld.so.conf(used for additional library)</li>
<li>&#x2F;lib64;</li>
<li>&#x2F;usr&#x2F;lib64.</li>
</ul>
<p>But check path is slow, hence to improve the speed, A cache is used which is located at <code>/etc/ld.so.cache</code> which stores library and its path, fast.</p>
<p><font color='red'><strong>So new way, dynamic library is searched with below</strong></font></p>
<ul>
<li>$LD_LIBRARY_PATH</li>
<li>&#x2F;etc&#x2F;ld.so.cache</li>
</ul>
<p>ld.so.cache is generated after scanning <code>/etc/ld.conf.conf, /lib64 and /usr/lib64</code>, <code>ldconfig</code> is a tool to do this which is called after each dynamic library is installed by <code>yum/apt</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if you manually remove or copy a library, you need to rebuild the cache</span></span><br><span class="line">(base) [root@dev ]<span class="comment"># ldconfig</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check /etc/ld.so.cache content</span></span><br><span class="line">(base) [root@dev ]<span class="comment"># ldconfig -p</span></span><br><span class="line">538 libs found <span class="keyword">in</span> cache `/etc/ld.so.cache<span class="string">&#x27;</span></span><br><span class="line"><span class="string">        p11-kit-trust.so (libc6,x86-64) =&gt; /lib64/p11-kit-trust.so</span></span><br><span class="line"><span class="string">        libzstd.so.1 (libc6,x86-64) =&gt; /lib64/libzstd.so.1</span></span><br><span class="line"><span class="string">        libz.so.1 (libc6,x86-64) =&gt; /lib64/libz.so.1</span></span><br><span class="line"><span class="string">        libz.so (libc6,x86-64) =&gt; /lib64/libz.so</span></span><br><span class="line"><span class="string">        libyaml-0.so.2 (libc6,x86-64) =&gt; /lib64/libyaml-0.so.2</span></span><br><span class="line"><span class="string">        libxtables.so.10 (libc6,x86-64) =&gt; /lib64/libxtables.so.10</span></span><br><span class="line"><span class="string">        libxshmfence.so.1 (libc6,x86-64) =&gt; /lib64/libxshmfence.so.1</span></span><br><span class="line"><span class="string">        libxml2.so.2 (libc6,x86-64) =&gt; /lib64/libxml2.so.2</span></span><br><span class="line"><span class="string">        libxdot.so.4 (libc6,x86-64) =&gt; /lib64/libxdot.so.4</span></span><br><span class="line"><span class="string">        libxcb.so.1 (libc6,x86-64) =&gt; /lib64/libxcb.so.1</span></span><br><span class="line"><span class="string">        libxcb.so (libc6,x86-64) =&gt; /lib64/libxcb.so</span></span><br><span class="line"><span class="string">        libxcb-xvmc.so.0 (libc6,x86-64) =&gt; /lib64/libxcb-xvmc.so.0</span></span><br><span class="line"><span class="string">        libxcb-xvmc.so (libc6,x86-64) =&gt; /lib64/libxcb-xvmc.so</span></span><br><span class="line"><span class="string">        libxcb-xv.so.0 (libc6,x86-64) =&gt; /lib64/libxcb-xv.so.0</span></span><br></pre></td></tr></table></figure>

<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul>
<li><a href="https://www.cprogramming.com/">c c++ programming</a></li>
<li><a href="http://tldp.org/HOWTO/Program-Library-HOWTO/index.html">linux library howto</a></li>
<li><a href="https://users.cs.cf.ac.uk/Dave.Marshall/C/node27.html">shared memory</a></li>
<li><a href="https://medium.com/@copyconstruct/the-method-to-epolls-madness-d9d2d6378642">epoll</a></li>
<li><a href="https://www.jianshu.com/p/dfd940e7fca2">select vs pool vs epoll</a></li>
</ul>
]]></content>
      <categories>
        <category>c</category>
        <category>tips</category>
      </categories>
      <tags>
        <tag>c language</tag>
      </tags>
  </entry>
  <entry>
    <title>css_basic</title>
    <url>/2020/07/09/css-basic/</url>
    <content><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>CSS like a painter, it styles your house to make it beautiful, it allows you to create rules that specify how the content of an element should appear(for box: background, border, margin, padding, width, height etc, TEXT: font, color), <strong>these setting are html element styles, but set outside of html for better management</strong>, that means you need to know</p>
<ul>
<li>what to be set (html element style property)</li>
<li>how to set it (css syntax)</li>
</ul>
<span id="more"></span>

<p>html element’s styles(border, color, font) can be set with below order(the first one have the highest priority)</p>
<ol>
<li>inline, inside each element(&lt; color&gt;)[used for just one element]</li>
</ol>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;background-color: linen&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a Heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is another paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>internal css(style at header)[used for just one page]</li>
<li>external (css)[used for whole website, many pages can share the same css file]</li>
<li>browser default setting</li>
</ol>
<h2 id="how-css-works"><a href="#how-css-works" class="headerlink" title="how css works"></a>how css works</h2><p>css associates style rules with html elements by SELECTOR DECLARATION</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * selector &#123;property: value&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>&#123; <span class="attribute">color</span>:yellow;&#125;</span><br></pre></td></tr></table></figure>
<p>two ways to apply CSS</p>
<p><strong>external</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;path&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">  //rel points to the *.css file</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>internal</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Always use external for production env, the reason is:</p>
<ol>
<li>multiple pages can share the same css</li>
<li>decouple css with html code, easy for maintenance</li>
<li>client only needs to request file once if shared by pages, fast</li>
</ol>
<p>More rules matched, which one should be used?</p>
<ol>
<li><p>if two selector are identical, that latter one, that means</p>
<ul>
<li>if has inline, always use it</li>
<li>else see the position of external and internal, use later one</li>
<li>else use browser default.</li>
</ul>
</li>
<li><p>if one selector is more specific than the others, the more specific rule applies</p>
</li>
<li><p>special add !important after property value, just this value used for this property!!</p>
</li>
</ol>
<h2 id="CSS-selector"><a href="#CSS-selector" class="headerlink" title="CSS selector"></a>CSS selector</h2><p><strong>Simple Selectors</strong></p>
<p><img src="/images/web/css/css_simple_selector.png" alt="simple selector"></p>
<p><strong>CSS Combinators</strong><br>There are four different combinators in CSS:</p>
<ul>
<li>descendant selector (space), son, grandson etc</li>
<li>child selector (&gt;), direct child, only son</li>
<li>adjacent sibling selector (+), has same parent</li>
<li>general sibling selector (~), has same parent</li>
</ul>
<p><img src="/images/web/css/css_selector_combinator.png" alt="selector combinator"></p>
<p><strong>CSS Pseudo-classes</strong></p>
<p><img src="/images/web/css/css_pseudo_class1.png" alt="pseudo class1 selector"><br><img src="/images/web/css/css_pseudo_class2.png" alt="pseudo class2 selector"></p>
<ul>
<li>active state means mouse clicked not freed state</li>
<li>checked state for input element like check box etc</li>
<li>enabled state for input element as well.</li>
<li>focus state for input element when clicked, cursor is there</li>
<li>invalid state for input element when invalid value, like email but input is not</li>
<li>out-of-range state for input element when value is out of range, like number with range(1,10), input 11</li>
<li>first-child and first-of-type both say direct child</li>
<li>nth-child(n) and nth-of-type(n) both say direct child as n index, index from 1</li>
<li>only-child and only-of-type both say direct child</li>
</ul>
<p>Pseudo-class always combines with selectors, here are some example</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="comment">// when mouse moves over a div, all descendant p changes display.</span></span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.highlight</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">// a tag with &#x27;highlight&#x27; class when mouse moves over, change it&#x27;s color</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Pseudo Elements</strong><br>It’ used to insert content or change first-line or first-letter, the content can be a string or url, more details about the content, refer to <a href="https://www.w3schools.com/cssref/pr_gen_content.asp">content format</a></p>
<p><img src="/images/web/css/css_pseudo_element.png" alt="pseudo element selector"></p>
<p><strong>Attribute Selectors</strong></p>
<p><img src="/images/web/css/css_attribute_selectors.png" alt="attribute selector"></p>
<p><strong>Similar attribute selector</strong></p>
<ul>
<li><p>[attribute|&#x3D;value] 	[lang|&#x3D;en] 	Selects all elements with a lang attribute value starting with “en”<br><code>en must be attribute value, hence match a whole word</code></p>
</li>
<li><p>[attribute^&#x3D;value] 	a[href^&#x3D;”https”] 	Selects every &lt;a&gt; element whose href attribute value begins with “https”<br><code>https can be part of attribute value, part of word</code></p>
</li>
<li><p>[attribute<del>&#x3D;value] 	[title</del>&#x3D;flower] 	Selects all elements with a title attribute containing the word “flower”<br><code>flower must be attribute value, hence match a whole word</code></p>
</li>
<li><p>[attribute*&#x3D;value] 	a[href*&#x3D;”w3schools”] 	Selects every &lt;a&gt; element whose href attribute value contains the substring “w3schools”<br><code>w3schools can be part of attribute value, part of word</code></p>
</li>
</ul>
<p><code>Note: regular pattern ^, $, * just do matching as a string, |, ~ matching with meaning, it must be an attribute value.</code></p>
<h2 id="CSS-property"><a href="#CSS-property" class="headerlink" title="CSS property"></a>CSS property</h2><p><strong>CSS Property Groups</strong></p>
<ul>
<li>Color</li>
<li>Background and Borders</li>
<li>Basic Box</li>
<li>Flexible Box</li>
<li>Text</li>
<li>Text Decoration</li>
<li>Fonts</li>
<li>Writing Modes</li>
<li>Table</li>
<li>Lists and Counters</li>
<li>Animation</li>
<li>Transform</li>
<li>Transition</li>
<li>Basic User Interface</li>
<li>Multi-column</li>
<li>Paged Media</li>
<li>Generated Content</li>
<li>Filter Effects</li>
<li>Image&#x2F;Replaced Content</li>
<li>Masking</li>
<li>Speech</li>
<li>Marquee</li>
</ul>
<p>This is just groups, not specific property, all properties refer to <a href="https://www.w3schools.com/cssref/">css reference</a></p>
<h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="comment">// not transparent</span></span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Background can be set with an image, but the image may be not so big to fill the full content of view, hence we can set ‘repeat’ or ‘position’, ‘scroll’ for the image.</p>
<p><strong>background-size</strong><br>The background-size can be specified in lengths, percentages, or by using one of the two keywords: contain or cover.</p>
<ul>
<li>Without background-size: img stays its original size, if area is large, some part is not cover, if area is small, the overflow part is hidden</li>
<li>cover: the cover keyword scales the background image so that the content area is completely covered by the background image, so part of image may out of area.</li>
<li>contain: the contain keyword scales the background image to be as large as possible (but both <code>its width and its height must fit inside the content area</code>), the part of area may be not covered at all.</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&quot;img_tree.png&quot;</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat; <span class="comment">//repeat-x, repeat-y</span></span><br><span class="line">  <span class="attribute">background-attachment</span>: scroll; <span class="comment">//move when you scroll your view, another value, fixed.</span></span><br><span class="line">  <span class="attribute">background-position</span>: right top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Shorthand for background, write a single property to include all values with fixed order</span></span><br><span class="line"><span class="comment">    background-color</span></span><br><span class="line"><span class="comment">    background-image</span></span><br><span class="line"><span class="comment">    background-repeat</span></span><br><span class="line"><span class="comment">    background-attachment</span></span><br><span class="line"><span class="comment">    background-position</span></span><br><span class="line"><span class="comment">  It does not matter if one of the property values is missing, as long as the other ones are in this order</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">&quot;img_tree.png&quot;</span>) no-repeat scroll right top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The CSS background-origin property specifies where the background image is positioned.</span></span><br><span class="line"><span class="comment">The property takes three different values:</span></span><br><span class="line"><span class="comment">    border-box - the background image starts from the upper left corner of the border</span></span><br><span class="line"><span class="comment">    padding-box - (default) the background image starts from the upper left corner of the padding edge</span></span><br><span class="line"><span class="comment">    content-box - the background image starts from the upper left corner of the content</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>Note: you can set background for every element like <code>body</code>, <code>div</code>, <code>input</code> etc, it’s only <code>applied to that element!!</code></p>
<h3 id="Border"><a href="#Border" class="headerlink" title="Border"></a>Border</h3><p>Border has four sides, top, right, bottom, left, you can set properties like ‘style’, ‘width’, ‘radius’ for each side separately or define two(top, bottom pair, right, left pair) or four side as same. but with Shorthand, the four sides must be same!!!</p>
<ul>
<li>border-xxx-style border-style</li>
<li>border-xxx-width border-width</li>
<li>border-xxx-color border-color</li>
<li>border-radius<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border-top-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Shorthand does NOT include radius with below order</span></span><br><span class="line"><span class="comment">   border-width</span></span><br><span class="line"><span class="comment">   border-style (required)</span></span><br><span class="line"><span class="comment">   border-color</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Margin"><a href="#Margin" class="headerlink" title="Margin"></a>Margin</h3><img src="/images/web/css/margin-border-padding.png" alt="box modal"></li>
</ul>
<p>Margin can be set for each side separately with specific property, or set with one property(Shorthand), the values:</p>
<ul>
<li>auto - the browser calculates the margin(only works for block element)</li>
<li>length - specifies a margin in px, pt, cm, etc.</li>
<li>% - specifies a margin in % of the width of the containing element(mostly % of its parent’s width)</li>
<li>inherit - specifies that the margin should be inherited from the parent element</li>
</ul>
<p><code>Top and bottom margins of elements are sometimes collapsed into a single margin that is equal to the largest of the two margins.</code><br><code>This does not happen on left and right margins! Only top and bottom margins!</code></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="comment">// margin-top, margin-xx</span></span><br><span class="line">  <span class="comment">//Shorthand with top, right, bottom left order</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">25px</span> <span class="number">50px</span> <span class="number">75px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>The width of an element does not include padding, borders, or margins by default. but you can include border, padding with  box-sizing: border-box;</code></p>
<p>For <code>auto</code>, the left margin receives <code>a share of the unused horizontal space</code>, as determined mainly by the layout mode that is used. If the values of margin-left and margin-right are both auto, the calculated space is evenly distributed. if only margin-left set, the unused horizontal space added as margin-left,  move the item right align, more details refer to <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left">margin auto</a>.</p>
<h3 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h3><p>The CSS padding properties are used to generate space around an element’s content, inside of any defined borders, it has the same format as margin.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="comment">// padding-top, padding-xx</span></span><br><span class="line">  <span class="comment">//Shorthand with top, right, bottom left order</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25px</span> <span class="number">50px</span> <span class="number">75px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Width-and-Height"><a href="#Width-and-Height" class="headerlink" title="Width and Height"></a>Width and Height</h3><p>The height and width properties are used to set the height and width of an element.</p>
<p>The height and width properties do not include padding, borders, or margins. It sets the height&#x2F;width of the area inside the padding, border,and margin of the element.</p>
<p>The height and width properties may have the following values:</p>
<ul>
<li>auto - This is default. The browser calculates the height and width</li>
<li>length - Defines the height&#x2F;width in px, cm etc.</li>
<li>% - Defines the height&#x2F;width in percent of the containing block, special for img</li>
<li>inherit - The height&#x2F;width will be inherited from its parent value</li>
</ul>
<p>Note: For img if the max-width property is set to 100%, the image will scale down if it has to, but never scale up to be larger than its original size. same thing for <code>video</code>.</p>
<p>The max-width property is used to set the maximum width of an element, the element size scroll when window changes, it’s respective, but width has fixed size, hence on small window, some of the element may be out of window.</p>
<h3 id="OutLine"><a href="#OutLine" class="headerlink" title="OutLine"></a>OutLine</h3><p>An outline is a line that is drawn around elements, <code>OUTSIDE the borders</code>, to make the element “stand out”, it has the same format as border does, ‘style’, ‘color’, ‘width’. but can’t set each side!!!</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="comment">// NO outline-xxx-width like border</span></span><br><span class="line">  <span class="comment">// outline-width: 5px;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//Shorthand</span></span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">5px</span> solid red;</span><br><span class="line">  <span class="comment">// outline offset from border</span></span><br><span class="line">  <span class="attribute">outline-offset</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><p>Text has several properties you can set by CSS like color, alignment, decoration, transformation, space, shadow.</p>
<ul>
<li>The color property is used to set the color of the text.</li>
<li>The text-align property is used to set the horizontal alignment of a text<br>justify: each line is <code>stretched so that every line has equal width</code></li>
<li>The text-transform property is used to specify uppercase and lowercase letters in a text</li>
<li>The text-indent property is used to specify the indentation of <code>the first line of a text</code></li>
<li>The text-shadow property adds shadow to text.horizontal shadow  and the vertical shadow<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  <span class="attribute">text-align</span>: left;<span class="comment">//&quot;justify&quot;, each line is stretched so that every line has equal width, and the left and right margins are straight (like in magazines and newspapers)</span></span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase; <span class="comment">//capitalize</span></span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">word-spacing</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h3>The CSS font properties define the font family, boldness, size, and the style of a text</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"> <span class="attribute">font-style</span>: italic;</span><br><span class="line"> <span class="attribute">font-weight</span>: bold;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">30px</span>; <span class="comment">/* font-size: 2.5em; 40px/16=2.5em */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The font property is a shorthand property for:</span></span><br><span class="line"><span class="comment">    font-style</span></span><br><span class="line"><span class="comment">    font-variant</span></span><br><span class="line"><span class="comment">    font-weight</span></span><br><span class="line"><span class="comment">    font-size/line-height</span></span><br><span class="line"><span class="comment">    font-family</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: italic bold <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Icon"><a href="#Icon" class="headerlink" title="Icon"></a>Icon</h3><p>The simplest way to add an icon to your HTML page, is with an icon library, such as Font Awesome, Bootstrap Icons, Google Icon</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://kit.fontawesome.com/a076d05399.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-cloud&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="list-CSS"><a href="#list-CSS" class="headerlink" title="list CSS"></a>list CSS</h3><p>The list-style-image property specifies an image as the list item marker.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: circle; <span class="comment">// or use an image list-style-image: url(&#x27;sqpurple.gif&#x27;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: square;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="position-related"><a href="#position-related" class="headerlink" title="position related"></a>position related</h2><p><font size="5" color="red">Normal flow(default): every block-level element(start with new line) appears on a new line, causing each item to appear lower down the page than previous one</font>, even if you specify the width of the boxes and there is space for two elements to sit side-by-side, they will not appear next to each other, this is the default behavior!</p>
<ul>
<li><p>Relative position<br>This moves an element from the position it would be <code>in normal flow</code>, <code>shift it to the top, right, bottom, or left of where it would have been placed</code>, this <code>doesn&#39;t affect the position of surrounding elements</code>, they stay in the position they would be in normal flow<br>(relative—relative to where they would be in normal flow when set offset top, right, bottom, left), <code>if no shift set, relative position has no difference with default</code>.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.relative</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10px</span>; <span class="comment">// move left from normal flow</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#73AD21</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Absolute position<br>This positions the element in [relation to its containing element], It’s taken <code>out of normal flow</code>, it could affect sibling elements, as it has the fixed position in the container.<br>Positioned relative to the nearest <code>positioned ancestor</code> (instead of positioned relative to the viewport, like fixed)<br>However; if an absolute positioned element has no positioned ancestors, it uses the document body, <code>A &quot;positioned&quot; element is one whose position is anything except static</code></p>
</li>
<li><p>Fixed position<br>This is a form of absolute positioning that positions the elements in relation to the browser window!!! as opposed to the containing element! they don’t move when user scrolls up or down the page!<br>(absolute—the browser window!!!) it’s always fixed to the window, out of flow, can affect any element in the view!!!</p>
</li>
</ul>
<p><strong>z-index</strong><br>When positioned with three ways, element may overlap each other,t he z-index property specifies the stack order of an element, an element with greater <code>stack order is always in front of an element with a lower stack order</code>.</p>
<p>Note: z-index only works on positioned elements (position: absolute, position: relative, position: fixed), default 0</p>
<h3 id="Media-Queries"><a href="#Media-Queries" class="headerlink" title="Media Queries"></a>Media Queries</h3><p>Media queries can be used to check many things, such as:</p>
<ul>
<li>width and height of the viewport</li>
<li>orientation (is the tablet&#x2F;phone in landscape or portrait mode?)</li>
<li>resolution</li>
</ul>
<p>it returns feature of given media type, then we use that result do some expression to define different values of element.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//When a media query is true, the corresponding style sheet or style rules are applied, following the normal cascading rules</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">not</span>|<span class="keyword">only</span> mediatype <span class="keyword">and</span> (expressions) &#123;</span><br><span class="line">  CSS-<span class="selector-tag">Code</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//example:</span></span><br><span class="line"><span class="comment">/* When the width is between 600px and 900px OR above 1100px - change the appearance of &lt;div&gt; */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">900px</span>) <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">600px</span>), (<span class="attribute">min-width</span>: <span class="number">1100px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">div</span><span class="selector-class">.example</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">8px</span> solid black;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mediatype:</p>
<ul>
<li>screen</li>
<li>print</li>
</ul>
<p>features</p>
<ul>
<li>height 	The viewport height</li>
<li>max-height 	The maximum height of the display area, such as a browser window</li>
<li>min-height 	The minimum height of the display area, such as a browser window</li>
<li>min-resolution 	The minimum resolution of the device, using dpi or dpcm</li>
<li>max-resolution 	The maximum resolution of the device, using dpi or dpcm</li>
<li>max-width 	The maximum width of the display area, such as a browser window</li>
<li>min-width 	The minimum width of the display area, such as a browser window</li>
<li>width 	The viewport width</li>
</ul>
<h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h2><p>Variables in CSS should be declared within a CSS selector that defines its scope. For a global scope you can use either the :root or the body selector.<br>The variable name must begin with two dashes (–) and is case sensitive!</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="comment">/* global variable */</span></span><br><span class="line">  <span class="attr">--main-bg-color</span>: coral;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#div1</span> &#123;</span><br><span class="line">  <span class="attr">--local-color</span>: red;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--main-bg-color);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--local-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><ul>
<li><a href="https://www.w3schools.com/css/default.asp">css w3school tutorial</a></li>
<li><a href="https://htmlcheatsheet.com/css/">css cheatsheet</a></li>
</ul>
]]></content>
      <categories>
        <category>web</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>css</tag>
        <tag>css selector</tag>
        <tag>css property</tag>
      </tags>
  </entry>
  <entry>
    <title>css_reponsive_web</title>
    <url>/2020/07/30/css-reponsive-web/</url>
    <content><![CDATA[<h1 id="Responsive-Web-Design"><a href="#Responsive-Web-Design" class="headerlink" title="Responsive Web Design"></a>Responsive Web Design</h1><p>Responsive web design is broken down into three main components, including flexible layouts, media queries, and flexible media. </p>
<span id="more"></span>
<h2 id="flexible-layouts"><a href="#flexible-layouts" class="headerlink" title="flexible layouts"></a>flexible layouts</h2><p>The first part, flexible layouts, is the practice of building the layout of a website with a flexible grid, capable of dynamically resizing to any width. Flexible grids are built using relative length units, most commonly percentages or em units. These relative lengths are then used to declare common grid property values such as width, margin, or padding.</p>
<p>Relative length units, specifically related to the viewport size of the browser or device. These new units include vw, vh, vmin, and vmax</p>
<ul>
<li>vw viewports width</li>
<li>vh viewports height</li>
<li>vmin Minimum of the viewport’s height and width </li>
<li>vmax Maximum of the viewport’s height and width</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80vmax</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="media-queries"><a href="#media-queries" class="headerlink" title="media queries"></a>media queries</h2><h2 id="flexible-media"><a href="#flexible-media" class="headerlink" title="flexible media"></a>flexible media</h2><h2 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h2><ul>
<li>Do NOT use large fixed width elements</li>
<li>Do NOT let the content rely on a particular viewport width to render well</li>
<li>Use CSS media queries to apply different styling for small and large screens</li>
<li>Always Design for Mobile(small device) First, This will make the page display faster on smaller devices</li>
<li>Hide Elements With Media Queries(hide something for small device)</li>
<li>Different Images for Different Devices<br><strong>Example</strong><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.menu</span> &#123;</span><br><span class="line">  <span class="comment">// use percent of container not fixed width like width: 500px etc</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If the max-width property is set to 100%, the image will scale down if it has to, but never scale up to be larger than its original size, same thing for video as well.</span></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>Mobile First</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* For mobile phones: */</span></span><br><span class="line"><span class="selector-attr">[class*=<span class="string">&quot;col-&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="comment">/* For desktop: */</span></span><br><span class="line">  <span class="selector-class">.col-1</span> &#123;<span class="attribute">width</span>: <span class="number">8.33%</span>;&#125;</span><br><span class="line">  <span class="selector-class">.col-2</span> &#123;<span class="attribute">width</span>: <span class="number">16.66%</span>;&#125;</span><br><span class="line">  <span class="selector-class">.col-3</span> &#123;<span class="attribute">width</span>: <span class="number">25%</span>;&#125;</span><br><span class="line">  <span class="selector-class">.col-4</span> &#123;<span class="attribute">width</span>: <span class="number">33.33%</span>;&#125;</span><br><span class="line">  <span class="selector-class">.col-5</span> &#123;<span class="attribute">width</span>: <span class="number">41.66%</span>;&#125;</span><br><span class="line">  <span class="selector-class">.col-6</span> &#123;<span class="attribute">width</span>: <span class="number">50%</span>;&#125;</span><br><span class="line">  <span class="selector-class">.col-7</span> &#123;<span class="attribute">width</span>: <span class="number">58.33%</span>;&#125;</span><br><span class="line">  <span class="selector-class">.col-8</span> &#123;<span class="attribute">width</span>: <span class="number">66.66%</span>;&#125;</span><br><span class="line">  <span class="selector-class">.col-9</span> &#123;<span class="attribute">width</span>: <span class="number">75%</span>;&#125;</span><br><span class="line">  <span class="selector-class">.col-10</span> &#123;<span class="attribute">width</span>: <span class="number">83.33%</span>;&#125;</span><br><span class="line">  <span class="selector-class">.col-11</span> &#123;<span class="attribute">width</span>: <span class="number">91.66%</span>;&#125;</span><br><span class="line">  <span class="selector-class">.col-12</span> &#123;<span class="attribute">width</span>: <span class="number">100%</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Typical device</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/* Extra small devices (phones, 600px and down) */</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Medium devices (landscape tablets, 768px and up) */</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Large devices (laptops/desktops, 992px and up) */</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">992px</span>) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Extra large devices (large laptops and desktops, 1200px and up) */</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1200px</span>) &#123;...&#125; </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>responsive web design</tag>
      </tags>
  </entry>
  <entry>
    <title>css_faq</title>
    <url>/2020/07/09/css-faq/</url>
    <content><![CDATA[<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="Align-element-center-x2F-center"><a href="#Align-element-center-x2F-center" class="headerlink" title="Align element center&#x2F;center"></a>Align element center&#x2F;center</h2><ul>
<li><p>Align <code>block element</code> center with <code>margin:auto</code> the browser assigns half the remaining space to margin-left and the other half to margin-right, this is only works for block element so &lt;img&gt; not working, you need to change it <code>display: block</code> or <code>display:inline-block</code>.</p>
</li>
<li><p>Align text center</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="inline-block-inline-block-difference"><a href="#inline-block-inline-block-difference" class="headerlink" title="inline, block, inline-block difference"></a>inline, block, inline-block difference</h2><p>Compared to display: inline, the major difference is that display: inline-block allows to set a width and height on the element, it’s always set for real inline elment that wants width or height.</p>
</li>
</ul>
<p>Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, so the element can sit next to other elements</p>
<p>Note: for real inline element, you can set padding, border, background, but cant NOT set width and height.</p>
<h2 id="what-happens-if-content-is-too-big-to-fix-in-the-container"><a href="#what-happens-if-content-is-too-big-to-fix-in-the-container" class="headerlink" title="what happens if content is too big to fix in the container?"></a>what happens if content is too big to fix in the container?</h2><p>The CSS overflow property controls what happens to content that is too big to fit into an area.</p>
<p>The overflow property specifies whether to clip the content or to add scrollbars when the content of an element is too big to fit in the specified area.</p>
<p>The overflow property has the following values:</p>
<ul>
<li>visible - Default. The overflow is not clipped. The content renders<code> outside the element&#39;s box</code></li>
<li>hidden - The overflow is clipped, and the rest of the content will be <code>invisible</code></li>
<li>scroll - The overflow is clipped, and a scrollbar is always added to see the rest of the content at X&#x2F;Y.</li>
<li>auto - Similar to scroll, but it adds scrollbars only when necessary.</li>
</ul>
<h2 id="web-layout"><a href="#web-layout" class="headerlink" title="web layout"></a>web layout</h2><h2 id="float-property-used-for-what"><a href="#float-property-used-for-what" class="headerlink" title="float property used for what?"></a>float property used for what?</h2><p>The float property is used for <code>positioning and formatting content</code> e.g. let an image float left to the text in a container, <code>the float limited inside the conainer!!!</code>.</p>
<p>The float property can have one of the following values:</p>
<ul>
<li>left - The element floats to the left of <code>its container in the same line</code></li>
<li>right - The element floats to the right of its container</li>
<li>none - The element does not float (will be displayed just where it occurs in the text). This is default</li>
<li>inherit - The element inherits the float value of its parent</li>
</ul>
<p>In its simplest use, the float property can be used to wrap text around images. The image as a child of <code>p</code> tag or sibling of <code>p</code> have different effect. it’s floated inside the container!!!</p>
<p>Another good example, float makes the &lt;li&gt; sit side by side <code>in the same line</code>.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>The display property specifies if&#x2F;how an element is displayed, every HTML element has a default display value depending on what type of element it is. The default display value for most elements is <code>block or inline</code>.</p>
<p>A block-level element always starts on a new line and takes up the full width available (stretches out to the left and right as far as it can), we can prevent this by setting width property to prevent it from stretching out to the edges of its container.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> - <span class="tag">&lt;<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>An inline element does not start on a new line and only takes up as much width as necessary</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cite</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>As mentioned, every element has a default display value. However, you can override this, Setting the display property of an element <code>only changes how the element is displayed</code>, NOT what kind of element it is. So, <code>an inline element with display: block; is not allowed to have other block elements inside it but can set width, height the fake block!!!</code>.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>display: none, take no space from layout, seem no element</li>
<li>visibility:hidden; also hides an element. but it still takes the space(width and height) of layout, just can’t see it!!!</li>
<li>width: 0 and overflow: hidden, can’t see the element as well, but the element still takes(height) of layout. just can’t see it!!!</li>
</ul>
<h3 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h3><p>Flexbox is made for one dimensional layouts, there are two concepts here, flex container and flex items, <code>flex container is a block element, any element with display: flex, it will behaves like a box starts a new line, scretch full width of it&#39;s container</code>, all <code>flex items behaves like inline-block, its width equals its content length</code>, they sit one by one in one direction, but they are flexible, that means their width can grow(should set <code>flex-grow</code>) if there is free space left in the flex container or their width can shrink if there is less space in the conatiner. ther width are not fixed, even you set it explicitly. but there is the default behavior, you can change the default behavior by setting proper property.</p>
<p>As the width are not fixed, what’s the final value of flex items</p>
<ul>
<li><code>initial value(width) = equal to content length or width if set explicitly</code>.</li>
<li>may grow or shrink if allowed to the final width</li>
</ul>
<p><strong>flex container property setting</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex_container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// default: row</span></span><br><span class="line">  <span class="comment">// others: row-reverse, column, colum-reverse</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="comment">//default: nowrap: all items always in the same line</span></span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap</span><br><span class="line"></span><br><span class="line">  //OR shorthand for above two</span><br><span class="line">  flex-flow: row nowrap;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// align-items specifies the default alignment for items inside the flexible container.</span></span><br><span class="line">  <span class="comment">// default: scretch</span></span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>grow and shrink on each flex item</strong><br>The flex-grow property specifies how much the item will grow <code>relative to</code> the rest of the flexible items inside the same container, it <code>grows only when there is free space left after the initial value</code>.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex_item</span> &#123;</span><br><span class="line">  <span class="comment">//default: auto, width == content length.</span></span><br><span class="line">  <span class="comment">//others: flex-basis: 100px, flex-basis: 20%(20% container&#x27;s width)</span></span><br><span class="line">  <span class="attribute">flex-basis</span>: auto;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//default: no grow, shrink euqaly, make on item grow, other not</span></span><br><span class="line">  <span class="comment">// the grow element will take the rest space of its container!!</span></span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//shorthand for above three with below order</span></span><br><span class="line">  <span class="comment">//1. flex-grow</span></span><br><span class="line">  <span class="comment">//2. flex-shrink</span></span><br><span class="line">  <span class="comment">//3. flex-basis</span></span><br><span class="line">  <span class="comment">// default: 0 1 auto</span></span><br><span class="line">  <span class="comment">// others: flex:auto    == 1 1 auto</span></span><br><span class="line">  <span class="comment">//         flex:initial == 0 1 auto</span></span><br><span class="line">  <span class="comment">//         flex:none    == 0 0 auto</span></span><br><span class="line">  </span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">1</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex_item_large</span> &#123;</span><br><span class="line">  <span class="comment">//default: auto, width == content length.</span></span><br><span class="line">  <span class="comment">//others: flex-basis: 100px, flex-basis: 20%(20% container&#x27;s width)</span></span><br><span class="line">  <span class="attribute">flex-basis</span>: auto;</span><br><span class="line">  <span class="comment">//2 times grows tha others</span></span><br><span class="line">  <span class="comment">//let&#x27;s take an example, 60px free space, two flex items, flex items grow, the large one gains 40px, the other one gains 20px. same thing for shrink.</span></span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>More examples refer to <a href="https://www.w3schools.com/cssref/css3_pr_flex.asp">Flex example</a>;</p>
<p><code>Main difference between display: flex; and display: inline-flex; is that display: inline-flex; will make the flex container an inline element while its content maintains its flexbox properties</code>.</p>
<p><strong>ALign of flex</strong></p>
<ul>
<li>align-items: specifies the default alignment for items inside the flexible container <code>vertically</code></li>
<li>justify-content: aligns the flexible container’s items when the items do not use all available space on the main-axis <code>(horizontally)</code></li>
<li>align-content: modifies the behavior of the flex-wrap property. It is similar to align-items, but instead of aligning flex items, it <code>aligns flex lines</code> only valid with wrap property set, as in that case more lines can happen for flex items.</li>
<li>align-self: specifies the alignment for the selected item inside the flexible container, the flexible container’s align-items property.</li>
</ul>
<p>It only works for the direct children(which is called flex items), it does not affect the elements inside each items</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--flex has three flex items</span></span><br><span class="line"><span class="comment">  1. div.inner</span></span><br><span class="line"><span class="comment">  2. &lt;span&gt;</span></span><br><span class="line"><span class="comment">  3. &lt;i&gt;</span></span><br><span class="line"><span class="comment">  4. #Text with yes</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">    Hello</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>World<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fas-book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  Yes</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Wrap means if flex item width is over the container’s width, the item starts with a new line, by default no wrap that means each item will shrink to hold the item in the same line.</p>
<p>Note: Use the align-self property of each item to override the align-items property</p>
<h4 id="can-fixed-item-be-flex-item"><a href="#can-fixed-item-be-flex-item" class="headerlink" title="can fixed item be flex item?"></a>can fixed item be flex item?</h4><p>element with <code>position: fixed</code> itself can NOT be flex item, but Can be flex container. if you check flex layout with developer tool, you will see such item is not flex item!!! that means flex setting not work for such item!!!</p>
<h3 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h3><p>Grid is made for two dimensional layouts, Row and Column. Grid will give you more flexibility, you can <code>control how row and column display</code>. each row is spilitted into columns, the <code>direct children(grid item) fall into each column automatically.</code></p>
<p><strong>Grid Container</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">//default no gaps for row and column</span></span><br><span class="line">  <span class="attribute">grid-row</span>-<span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">grid-column</span>-<span class="attribute">gap</span>: <span class="number">20px</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//OR shorthand, if same value grid-gap 10px;</span></span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Explicity container</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">// explicit 4 columns</span></span><br><span class="line">  <span class="comment">//The size(width) of the columns is determined by the size of the container and on the size of the content of the items in the column</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: auto auto auto auto;</span><br><span class="line">  <span class="comment">//OR only depends its content</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: max-content max-content max-content max-content;</span><br><span class="line">  <span class="comment">//OR fix length repeat(4, 100px) or repeat(4, 10%)</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="comment">//OR</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: repeat(<span class="number">4</span>, <span class="number">10%</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Specify the first two row size(height), it&#x27;s tempalte, that means</span></span><br><span class="line">  <span class="comment">// the second row in real may not there but if it&#x27;s there, it has 300px height.</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As explicit container only says part of column’s width and part of row’s height.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">//Each &lt;flex&gt;-sized track takes a share of the remaining space in proportion to its flex factor</span></span><br><span class="line">  <span class="comment">//the last two columns take all rest space in proportion</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">2</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="comment">//the last columns take all rest space!!</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span> <span class="number">1</span>fr;</span><br><span class="line">  <span class="comment">//if we have 9 grid items, the 9th items starts a new row, we did not say the height for that row</span></span><br><span class="line">  <span class="comment">//it use default row height and default column width which is defined below.</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">300px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//set default row height value for implicit grid row, column in that row use default width set by grid-auto-columns</span></span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="number">50px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//implicit tracks: This can happen either by explicitly positioning into a column that is out of range, or by the auto-placement algorithm creating additional columns.</span></span><br><span class="line">  <span class="attribute">grid-auto-columns</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">grid-auto-columns</span>: <span class="number">100px</span> <span class="number">150px</span> <span class="number">390px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>dynamic columns</strong><br>Above the grid has fixed column number, even there is free space left in the row, but <code>auto-fill</code> keyword creates as many tracks as fit into the grid container without causing the grid to overflow it, same thing for <code>auto-fit</code> except that after grid item placement it will only create as many tracks(columns) as needed and <code>any empty repeated track collapses</code>.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: repeat(auto-fit, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Grid item</strong><br>By default each <code>grid item takes one column from one row</code> but you can change the default behavior to let one item to take more columuns and more rows.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="comment">//item1 takes two rows starting from row 1</span></span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / span <span class="number">2</span>;</span><br><span class="line">  <span class="comment">//item1 starts from row 1, end row3(not include), two rows</span></span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//item1 takes two columns starting from colum 1</span></span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> /span <span class="number">2</span>;</span><br><span class="line">  <span class="comment">//span 2 columns, the start depends on location.</span></span><br><span class="line">  <span class="attribute">grid-column</span>: span <span class="number">2</span>;</span><br><span class="line">  <span class="comment">//item1 starts from column 1, end column3(not include), two columns</span></span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//OR</span></span><br><span class="line">  <span class="comment">//shorthand for above</span></span><br><span class="line">  <span class="comment">// grid-area: grid-row-start / grid-column-start /grid-row-end /grid-column-end;</span></span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span> / <span class="number">1</span> / span <span class="number">2</span> / span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Most of time, we use named area to do this, as it’s easy to understand.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">NOTE:</span> NO &quot;&quot; quotes for each area name!!!</span></span><br><span class="line"><span class="selector-class">.item1</span> &#123; <span class="attribute">grid-area</span>: header; &#125;</span><br><span class="line"><span class="selector-class">.item2</span> &#123; <span class="attribute">grid-area</span>: menu; &#125;</span><br><span class="line"><span class="selector-class">.item3</span> &#123; <span class="attribute">grid-area</span>: main; &#125;</span><br><span class="line"><span class="selector-class">.item4</span> &#123; <span class="attribute">grid-area</span>: right; &#125;</span><br><span class="line"><span class="selector-class">.item5</span> &#123; <span class="attribute">grid-area</span>: footer; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">//as you can see six columns</span></span><br><span class="line">  <span class="comment">//header takes 5 columns + unamed columns</span></span><br><span class="line">  <span class="comment">//menu takes 1 column + across two rows</span></span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">&#x27;header header header header header .&#x27;</span></span><br><span class="line">    <span class="string">&#x27;menu main main main right right&#x27;</span></span><br><span class="line">    <span class="string">&#x27;menu footer footer footer footer footer&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Note</strong></p>
<p>Flex and Grid are note standalone, you can use Flex inside Grid, combine them, also Flex can achieve grid system this’s boostrap4 does.</p>
<h3 id="Bootstrap-grid-system"><a href="#Bootstrap-grid-system" class="headerlink" title="Bootstrap grid system"></a>Bootstrap grid system</h3><p>Bootstrap3 uses float&#x2F;width and more hacks to achieve its grid system, from bootstrap4, it uses CSS flex box to do this, as flex is widely supported by most browsers, CSS Grid is more powerful, but not all browsers support it, but someday in future, after it’s widely supported, bootstrap may change its grid system to use CSS Grid.</p>
<p>CSS grid is currently not an official standard (it is a W3C Candidate Recommendation) although it has been adopted by most major browsers, as of October 2017, Chrome, Firefox, Safari and Edge all support CSS grid without vendor prefixes.[3][4][5] IE 10 and 11 support CSS grid but with an outdated specification. On mobile, all modern browsers support CSS grid except for Opera Mini and UC Browser.</p>
<p><strong>Bootstrap grid vs CSS grid for the same layout</strong><br>responsive layout</p>
<p><img src="/images/web/css/css_grid_layout.png" alt="web layout"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-12 header&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-12 col-md-6 col-lg-4 navigation-menu&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-12 col-md-6 col-lg-8 main-content&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-12 footer&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS Grid is more cleaner</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navigation-menu&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-content&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: repeat(<span class="number">12</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: span <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.navigation-menu</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: span <span class="number">6</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.main-content</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: span <span class="number">6</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.navigation-menu</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: span <span class="number">12</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.main-content</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: span <span class="number">12</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: span <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Browser-extensions-to-CSS"><a href="#Browser-extensions-to-CSS" class="headerlink" title="Browser extensions to CSS"></a>Browser extensions to CSS</h2><p>CSS defines the standard way(property name, value) that all browser <code>should support</code>, but some browsers support it in their own way that’s the extension for, browser extensions are only valid for that particular type of browser, if you only use the standard CSS property, the style may not take effect in some version of browser, so check that if browser supports it at <a href="https://caniuse.com/">canIuse</a>;</p>
<table>
<thead>
<tr>
<th></th>
<th>Firefox</th>
<th>Chrome</th>
<th>Microsoft(IE)</th>
</tr>
</thead>
<tbody><tr>
<td>prefix</td>
<td>-moz-xxx</td>
<td>-webkit-xxx</td>
<td>-ms-xxx</td>
</tr>
</tbody></table>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> border-radius(<span class="variable">$radius</span>) &#123;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">       -moz-<span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">        -ms-<span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="how-to-change-the-cursor-when-it-moves-to-element"><a href="#how-to-change-the-cursor-when-it-moves-to-element" class="headerlink" title="how to change the cursor when it moves to element"></a>how to change the cursor when it moves to element</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor:pointer&quot;</span>&gt;</span>pointer<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor:wait&quot;</span>&gt;</span>wait<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="input-with-icon"><a href="#input-with-icon" class="headerlink" title="input with icon"></a>input with icon</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">&#x27;searchicon.png&#x27;</span>);</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Animated Search Input</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: width <span class="number">0.4s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Note: In real world, you don’t need to write property for each browser as it could be done by tool like <a href="https://postcss.org/">PostCSS</a>;</p>
<h2 id="how-to-make-a-round-or-oval"><a href="#how-to-make-a-round-or-oval" class="headerlink" title="how to make a round or oval"></a>how to make a round or oval</h2><p>let’s say we have an element like div or img how to make it a round or oval, use <code>border-radius: 50%</code></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="comment">// as width == height, so it&#x27;s round, if width != height, it&#x27;s an oval</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="set-multiple-imgs-as-background"><a href="#set-multiple-imgs-as-background" class="headerlink" title="set multiple imgs as background"></a>set multiple imgs as background</h2><p>For some case, you may want to set multiple images as a background for an element, CSS allows us to do this and set peroperties for each imge seperately. The different background images are separated by commas, and <code>the images are stacked on top of each other</code>, where the <code>first image is closest to the viewer</code>, if overlap happens, you see the first image for overlap part.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#example1</span> &#123;</span><br><span class="line">  <span class="comment">// set each img seperately</span></span><br><span class="line">  <span class="attribute">background-image</span>: url(img_flwr.gif), url(paper.gif);</span><br><span class="line">  <span class="attribute">background-position</span>: right bottom, left top;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat, repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ShortHand</span></span><br><span class="line"><span class="selector-id">#example1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: url(img_flwr.gif) right bottom no-repeat, url(paper.gif) left top repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="gradients-only-for-color"><a href="#gradients-only-for-color" class="headerlink" title="gradients only for color!!!"></a>gradients only for color!!!</h2><p>CSS gradients let you display <code>smooth transitions between two or more specified colors</code></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#grad</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: linear-gradient(to right, red , yellow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="How-to-set-shadow"><a href="#How-to-set-shadow" class="headerlink" title="How to set shadow?"></a>How to set shadow?</h2><p>There are two kind of shadowns <code>text-shadow</code> and <code>box-shadow</code>;</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// box shadow</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> grey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="how-to-use-web-font-which-is-not-installed-on-client-computer"><a href="#how-to-use-web-font-which-is-not-installed-on-client-computer" class="headerlink" title="how to use web font which is not installed on client computer."></a>how to use web font which is not installed on client computer.</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="comment">// use font-face to define a font-family which refer to web font</span></span><br><span class="line">  <span class="attribute">font-family</span>: myFirstFont;</span><br><span class="line">  <span class="comment">// client(browser will download the font automatically</span></span><br><span class="line">  <span class="attribute">src</span>: url(sansation_light.woff);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: myFirstFont;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="transition-x2F-transform-x2F-animation"><a href="#transition-x2F-transform-x2F-animation" class="headerlink" title="transition&#x2F;transform&#x2F;animation"></a>transition&#x2F;transform&#x2F;animation</h2><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><p>CSS transforms allow you to move, rotate, scale, and skew elements <code>based on the center of element itself.</code></p>
<ul>
<li>2D transforms: X, Y</li>
<li>3D transforms: X, Y, Z</li>
</ul>
<p><code>Transform performs on any element.</code>  </p>
<p>Both 2D and 3D use the same property, but 2D only support X,Y function, 3D added Y function.</p>
<ul>
<li>The translate() method moves an element from its current position (according to the parameters given for the X-axis and the Y-axis)</li>
<li>The rotate() method rotates an element clockwise or counter-clockwise according to a given degree</li>
<li>The scale() method increases or decreases the size of an element (according to the parameters given for the width and height)</li>
<li>The skew() method skews an element along the X and Y-axis by the given angles.</li>
<li>The matrix() method combines all the 2D transform methods into one, the parameters are as follow: matrix(scaleX(),skewY(),skewX(),scaleY(),translateX(),translateY())</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="comment">// 2 times width, 20deg skew, move 100px on X-axis, 50 px on Y-axis</span></span><br><span class="line">  <span class="attribute">transform</span>: matrix(<span class="number">2</span>, <span class="number">20deg</span>, <span class="number">20deg</span>, <span class="number">0.5</span>, <span class="number">100px</span>, <span class="number">50px</span>);</span><br><span class="line">  <span class="comment">//rotate is only for 2D, not a combine with rotateX and rotateY which is provided by 3D</span></span><br><span class="line">  <span class="attribute">transform</span>: rotate(<span class="number">10deg</span>); <span class="comment">//rotate clockwise</span></span><br><span class="line">  <span class="attribute">transform</span>: rotateX(<span class="number">10deg</span>); <span class="comment">//rotate on X-axis</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h3><p>CSS transitions allows you to change <code>property values smoothly</code>, over a given duration. you have to specify</p>
<ul>
<li>allowed property(default all)</li>
<li>when it happens</li>
<li>how long it keeps<br>At last set the value change to trigger the transition</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="comment">//allowed</span></span><br><span class="line">  <span class="attribute">transition-property</span>: width;</span><br><span class="line">  <span class="comment">//how long</span></span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">2s</span>;</span><br><span class="line">  <span class="comment">//effect others: ease, ease-in, ease-out, ease-in-out</span></span><br><span class="line">  <span class="attribute">transition-timing-function</span>: linear;</span><br><span class="line">  <span class="comment">//delay before happen</span></span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="number">1s</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//shorthand</span></span><br><span class="line">  <span class="attribute">transition</span>: width <span class="number">2s</span> linear <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Change Several Property Values</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="comment">// multiple properties must be in signle line, that means at most one transition property set.</span></span><br><span class="line">  <span class="attribute">transition</span>: width <span class="number">2s</span>, height <span class="number">4s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h3><p>An animation lets an element gradually change from one style to another. the style includes several properites<br>You can change as many CSS properties you want, as many times you want</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="comment">//animation setting</span></span><br><span class="line">  <span class="attribute">animation-name</span>: example;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: linear;</span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite; <span class="comment">// can set 3 times</span></span><br><span class="line">  <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Shorthand</span></span><br><span class="line">  <span class="attribute">animation</span>: example <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> example &#123;</span><br><span class="line">  <span class="comment">// styles for each frame</span></span><br><span class="line">  <span class="number">0%</span>   &#123;<span class="attribute">background-color</span>:red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">  <span class="number">25%</span>  &#123;<span class="attribute">background-color</span>:yellow; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">  <span class="number">50%</span>  &#123;<span class="attribute">background-color</span>:blue; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</span><br><span class="line">  <span class="number">75%</span>  &#123;<span class="attribute">background-color</span>:green; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</span><br><span class="line">  <span class="number">100%</span> &#123;<span class="attribute">background-color</span>:red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="negative-value-in-top-x2F-left-x2F-right-x2F-bottom-and-margin"><a href="#negative-value-in-top-x2F-left-x2F-right-x2F-bottom-and-margin" class="headerlink" title="negative value in top&#x2F;left&#x2F;right&#x2F;bottom and margin"></a>negative value in top&#x2F;left&#x2F;right&#x2F;bottom and margin</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="comment">//the offset if relative to its normal position.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//move left margin of element to left direction 5px: move close to left element</span></span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">5px</span>;</span><br><span class="line">  <span class="comment">//if the right element besides it at same row, the right element move left 5px</span></span><br><span class="line">  <span class="attribute">margin-right</span>: -<span class="number">5px</span>;</span><br><span class="line">  <span class="comment">//move top margin of element to top direction 5px: move close to up element</span></span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">5px</span>;</span><br><span class="line">  <span class="comment">//the closest down element besides it, the down element moves up 5px</span></span><br><span class="line">  <span class="attribute">margin-bottom</span>: -<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>top&#x2F;left&#x2F;right&#x2F;bottom value</p>
<ul>
<li><p>If position: absolute; or position: fixed; - the left property sets the left edge of an element to a unit to the left of the left edge of its nearest positioned ancestor</p>
</li>
<li><p>If position: relative; - the left property sets the left edge of an element to a unit to the left&#x2F;right of its normal position.</p>
</li>
</ul>
<p>The value can be</p>
<ul>
<li>length 	Sets the left edge position in px, cm, etc. Negative values are allowed</li>
<li>% 	    Sets the left edge position in % of containing element. Negative values are allowed, 10% if container is 100px, 10% means 10px!!!</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="comment">// 0px means edge of its container, -10px means move left 10px of its container&#x27;s left edge</span></span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid blue;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="what’s-the-difference-for-width-and-max-width"><a href="#what’s-the-difference-for-width-and-max-width" class="headerlink" title="what’s the difference for width and max-width"></a>what’s the difference for width and max-width</h2><p>width has a fixed length, no matter the viewpoint, if viewpoint is small, scroll bar is added<br>max-width: it limits the max length of the element when brower is large, but when viewpoint is small, no scroll bar!</p>
<p>hence same value for width and max-width, max-width is responsive.</p>
<h2 id="how-to-define-large-button"><a href="#how-to-define-large-button" class="headerlink" title="how to define large button"></a>how to define large button</h2><p>Acutally button size is determined by font-size, if font is large, the button is large as well. but you can set its width like this</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button1</span> &#123;<span class="attribute">width</span>: <span class="number">250px</span>;&#125;</span><br><span class="line"><span class="comment">// depends on container size</span></span><br><span class="line"><span class="selector-class">.button2</span> &#123;<span class="attribute">width</span>: <span class="number">50%</span>;&#125;</span><br><span class="line"><span class="selector-class">.button3</span> &#123;<span class="attribute">width</span>: <span class="number">100%</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="how-to-resize-element-by-drag"><a href="#how-to-resize-element-by-drag" class="headerlink" title="how to resize element by drag"></a>how to resize element by drag</h2><p>The resize property specifies if (and how) an element should be resizable by the user.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="comment">// other values: both, vertical</span></span><br><span class="line">  <span class="attribute">resize</span>: horizontal;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="beatiful-tooltips"><a href="#beatiful-tooltips" class="headerlink" title="beatiful tooltips"></a>beatiful tooltips</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.tooltip</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> dotted black;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.tooltip</span> <span class="selector-class">.tooltiptext</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">visibility</span>: hidden;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">bottom</span>: <span class="number">150%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-left</span>: -<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.tooltip</span> <span class="selector-class">.tooltiptext</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* the parent must set position with relative, otherwise the offset top, left will used body as ancestor */</span></span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">top</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-left</span>: -<span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-width</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-color</span>: black transparent transparent transparent;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.tooltip</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.tooltiptext</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">visibility</span>: visible;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Top Tooltip w/ Bottom Arrow<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tooltip&quot;</span>&gt;</span>Hover over me</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tooltiptext&quot;</span>&gt;</span>Tooltip text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="debug-css-by-firefox"><a href="#debug-css-by-firefox" class="headerlink" title="debug css by firefox"></a>debug css by firefox</h2><p>The Rules view lists <strong>all the rules that apply to the selected element</strong>, <strong>ordered from most-specific to least-specific, some from itself, some from its parent</strong>. see below</p>
<p><strong>cross-line with attribute mean it’s overwritten!</strong></p>
<p><img src="https://mdn.mozillademos.org/files/16437/rules_pane.png" alt="s"></p>
<p>A warning icon appears next to unsupported or invalid styles. This can help you understand why certain styles are not being applied:<br><img src="https://mdn.mozillademos.org/files/16438/invalid_property.png" alt="invalid style"></p>
<p><strong>rule display</strong><br><img src="https://mdn.mozillademos.org/files/16447/rules_pane.png" alt="rule display"></p>
<h2 id="px-x2F-em-x2F-rem-x2F-vw-x2F-fr"><a href="#px-x2F-em-x2F-rem-x2F-vw-x2F-fr" class="headerlink" title="px&#x2F;em&#x2F;rem&#x2F;vw&#x2F;fr"></a>px&#x2F;em&#x2F;rem&#x2F;vw&#x2F;fr</h2><ul>
<li>px: fixed size</li>
<li>em: relative to it’s parent</li>
<li>vw: 1vw &#x3D; 1% of viewport width. If the viewport is 50cm wide, 1vw is 0.5cm. font-size is responsive!!!<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">child &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>; <span class="comment">//relative to parent&#x27;s font-size</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2em</span>; <span class="comment">//relative to itself font-size</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>rem: relative to root</li>
</ul>
<p><strong>Note: font-size: 16px by default</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">10em</span>; <span class="comment">/* 400px */</span></span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">10em</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: solid <span class="number">1px</span> black;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">0.5em</span>; <span class="comment">/* 20px */</span></span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">10em</span>; <span class="comment">/* 200px */</span></span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">10em</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">0.5em</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">10em</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">10em</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: solid <span class="number">1px</span> blue;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  我是父元素div</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    我是子元素p</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是孙元素span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="css-useful-snippet"><a href="#css-useful-snippet" class="headerlink" title="css useful snippet"></a>css useful snippet</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//“Responsive” media</span></span><br><span class="line"><span class="selector-tag">img</span>, <span class="selector-tag">video</span>, <span class="selector-tag">audio</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Box sizing</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*, *<span class="selector-pseudo">::before</span>, *<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">.🦄 &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  place-items: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: translate (-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="what’s-value-for-css-property"><a href="#what’s-value-for-css-property" class="headerlink" title="what’s value for css property."></a>what’s value for css property.</h2><p>As you know that property can be inherited from its parent, but not ALL properties support this, that means for a property that’s not set explicitly from inline style, internal style, external style, its value depends on what type it’s</p>
<p><strong>Value of a property which is Not set explicitly</strong></p>
<ul>
<li>default value (non-inherited properity)</li>
<li>its parent value (inherited property)</li>
</ul>
<p><a href="https://www.w3schools.com/cssref/css_default_values.asp">default value for css</a></p>
<p><code>Actually, most of properties can be NOT inheritid.</code><br><strong>Inherited Property</strong></p>
<ul>
<li>color</li>
<li>font-size</li>
<li>font-family</li>
<li>font-weight</li>
<li>font-xxx</li>
<li>list-style</li>
<li>list-xxx</li>
<li>visibility</li>
<li>text-indent</li>
<li>text-transform</li>
<li>text-align</li>
<li>text-shadow</li>
<li>:hover</li>
</ul>
<h2 id="height-and-width-for-an-element"><a href="#height-and-width-for-an-element" class="headerlink" title="height and width for an element"></a>height and width for an element</h2><h3 id="defaut-value"><a href="#defaut-value" class="headerlink" title="defaut value"></a>defaut value</h3><p>It depends on the type of elmenent, auto means different</p>
<p><strong>inline element you can’t set height and width</strong></p>
<ul>
<li><code>height: auto</code> means the height of its content</li>
<li><code>width: auto</code> means the length of its content</li>
</ul>
<p><strong>block element you can set height and width</strong></p>
<ul>
<li><code>height: auto</code> means the height of it’s content</li>
<li><code>width: auto</code> means scratch the full of its container</li>
</ul>
<p><strong>element with <code>position: fixed</code> like inline but without container</strong><br>As fixed element out of document flow, its width and height equal its content length if not set explicitly<br>otherwise belong to user setting.<br>div with <code>position: fixed</code> will not start a new line and scretch its container, as it out of document flow.</p>
<h3 id="explicit-setting"><a href="#explicit-setting" class="headerlink" title="explicit setting"></a>explicit setting</h3><p>explicit setting has the highest priority than others, element always belongs to it if set.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.a</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Note: position property can effect height and width as well if set in pairs</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.a</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//the height is the entire viewport</span></span><br><span class="line">    <span class="comment">//same thing for left and width as well!!!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.b</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="comment">//bottom not working, start from top 0 with height 100px(which has high priority)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="how-to-use-relative-and-absolute-and-fixed"><a href="#how-to-use-relative-and-absolute-and-fixed" class="headerlink" title="how to use relative and absolute and fixed"></a>how to use relative and absolute and fixed</h2><ul>
<li>static 	Default value. Elements render in order, as they appear in the document flow</li>
<li>absolute 	The element is positioned relative to its first positioned (not static) ancestor element, it must have a parent with(fixed, relative, sticky)</li>
<li>The element is positioned relative to the browser window</li>
<li>The element is positioned relative to its normal position, so “left:20px” adds 20 pixels to the element’s LEFT position</li>
<li>The element is positioned based on the user’s scroll position</li>
</ul>
<p><strong>Note: the absolute and fixed element behaves like inline element not scretch at all even it’s block element. but relative still remains</strong></p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><a href="https://ishadeed.com/article/grid-layout-flexbox-components/">flex-grid good cases</a></li>
<li><a href="https://www.w3schools.com/cssref/">css flex and grid</a></li>
</ul>
]]></content>
      <categories>
        <category>web</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>debugging application</title>
    <url>/2019/09/27/debugging-application/</url>
    <content><![CDATA[<h1 id="debug-application"><a href="#debug-application" class="headerlink" title="debug application"></a>debug application</h1><p>Here are list of frequent commands that are used in daily life and some tips that may be useful to debug application</p>
<span id="more"></span>
<p><strong><mark>tested only on centos7 platform</mark></strong></p>
<h2 id="show-dynamic-library-used-by-an-application"><a href="#show-dynamic-library-used-by-an-application" class="headerlink" title="show dynamic library used by an application"></a>show dynamic library used by an application</h2><div class="tabs" id="way"><ul class="nav-tabs"><li class="tab active"><a href="#way-1">Way 1</a></li><li class="tab"><a href="#way-2">Way 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="way-1"><div class="note success"><p><strong>$ ldd app_binary</strong><br>output:<br>linux-vdso.so.1 &#x3D;&gt;  (0x00007fff76bcd000)<br>libopenvswitch.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libopenvswitch.so.1 (0x00007f19c83c2000)<br>libboost_system.so.1.54.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libboost_system.so.1.54.0 (0x00007f19c81be000)<br>…</p>
</div></div><div class="tab-pane" id="way-2"><div class="note success"><p><strong>$ readelf -d app_binary | grep NEEDED</strong><br>output:<br>0x0000000000000001 (NEEDED)             Shared library: [libopenvswitch.so.1]<br>0x0000000000000001 (NEEDED)             Shared library: [libboost_system.so.1.54.0]<br>…</p>
<p>then find the library path<br><strong>$ locate libopenvswitch.so.1</strong><br>&#x2F;usr&#x2F;lib&#x2F;debug&#x2F;usr&#x2F;lib&#x2F;libopenvswitch.so.1.0.0<br>&#x2F;usr&#x2F;lib&#x2F;libopenvswitch.so.1<br>&#x2F;usr&#x2F;lib&#x2F;libopenvswitch.so.1.0.0</p>
<p>how application searches library</p>
<ul>
<li>directories listed in the LD_LIBRARY_PATH environment variable (DYLD_LIBRARY_PATH on OSX)</li>
<li>directories listed in the executable’s rpath($chrpath -l app)</li>
<li>directories on the system search path, which (on Linux at least) consists of the entries in &#x2F;etc&#x2F;ld.so.conf plus &#x2F;lib and &#x2F;usr&#x2F;lib.</li>
</ul>
</div></div></div></div>

<h2 id="create-and-use-a-static-library"><a href="#create-and-use-a-static-library" class="headerlink" title="create and use a static library"></a>create and use a static library</h2><div class="note success"><p>create static lib from object files<br><strong>$ ar cru libopenvswitch.a stream-ssl.o stream.o</strong><br>later on you may want to add a new object in the lib<br><strong>$ ar crs libopenvswitch.a foo.o</strong></p>
<p>use it in your application<br><strong>$ gcc -o app main.c &#x2F;xx&#x2F;libopenvswitch.a</strong><br>OR<br><strong>$ gcc -o app main.c -lopenvswitch -L&#x2F;path&#x2F;to&#x2F;openvswitch</strong></p>
<p><mark class="label danger">when adding library in gcc command line the order is important, let&#39;s say if A.a depends on B.a, the command should be $ gcc -o app main.c A.a B.a</mark></p>
<p>show all objects in static library<br><strong>$ ar -t libopenvswitch.a</strong><br>extract object file from static library<br><strong>$ ar -xv libopenvswitch.a stream-ssl.o</strong></p>
</div>

<h2 id="create-and-use-a-dynamic-library"><a href="#create-and-use-a-dynamic-library" class="headerlink" title="create and use a dynamic library"></a>create and use a dynamic library</h2><div class="note success"><p><strong>$ gcc -fPIC -g foo.c</strong><br><strong>$ gcc -shared -o libfoo.so foo.o</strong></p>
<p>Use it later on by this way<br><strong>$ gcc -o app main.c libfoo.so</strong><br>Or<br><strong>$ gcc -app main.c -lfoo -L&#x2F;path&#x2F;to&#x2F;foo</strong></p>
</div>

<h2 id="show-symbols-in-dynamics-and-static-library"><a href="#show-symbols-in-dynamics-and-static-library" class="headerlink" title="show symbols in dynamics and static library"></a>show symbols in dynamics and static library</h2><div class="note success"><p><strong>$ readelf -s &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libssl.so</strong><br><strong>$ readelf -Ws &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libssl.a</strong><br><strong>$ readelf -Ws stream-ssl.o</strong><br><mark class="label danger">-W&#x3D;&#x3D;–wide means show full name of the long symbol</mark></p>
</div>

<h2 id="check-process-thread"><a href="#check-process-thread" class="headerlink" title="check process thread"></a>check process thread</h2><div class="note success"><p>show all processes(not thread) of a given program<br><strong>$ pidof program_name</strong></p>
<p>-s     Single shot - this instructs the program to return only one pid<br><strong>$ pidof -s program_name</strong></p>
<p>-x     Scripts too - this causes the program to also return process id’s of shells running the named scripts<br><strong>$ pidof -x shell_scripts</strong></p>
<p>-o omitpid Tells pidof to omit processes with that process id.<br>The special pid %PPID can be used to name the parent process of the pidof program, in other words the calling shell or shell script.<br>example:</p>
<p>if pidof -o %PPID -x “abc.sh”&gt;&#x2F;dev&#x2F;null; then<br>  echo “Process already running”<br>fi</p>
<p>show threads in a process<br><strong>$ ps -Lf $pid</strong><br>Or see from &#x2F;proc<br><strong>$ ls &#x2F;proc&#x2F;$pid&#x2F;task</strong></p>
</div>

<h2 id="do-everything-in-memory"><a href="#do-everything-in-memory" class="headerlink" title="do everything in memory"></a>do everything in memory</h2><div class="note success"><p>As in some case, you have large memory, you can run all commands in memory, it&#39;s fast, but also note these files<br>will be <mark>lost</mark> after reboot.</p>
<p>For example compile kernel in memory<br><strong>$ tar xjvf linux.tar.gz -C &#x2F;dev&#x2F;shm</strong><br><strong>$ cd &#x2F;dev&#x2F;shm&#x2F;linux</strong><br><strong>$ cp &#x2F;boot&#x2F;config-4.3.3-4.3.y.20151215.ol7.x86_64 .config</strong><br><strong>$ make oldconfig &amp;&amp; make -j32</strong><br><strong>$ make -j32 modules_install</strong><br><strong>$ make install</strong></p>
</div>

<h2 id="debug-dynamic-library-info-when-runs-a-program"><a href="#debug-dynamic-library-info-when-runs-a-program" class="headerlink" title="debug dynamic library info when runs a program"></a>debug dynamic library info when runs a program</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ LD_DEBUG=help ls</span><br><span class="line">Valid options for the LD_DEBUG environment variable are:</span><br><span class="line">libs        display library search paths</span><br><span class="line">reloc       display relocation processing</span><br><span class="line">files       display progress for input file</span><br><span class="line">symbols     display symbol table processing</span><br><span class="line">bindings    display information about symbol binding</span><br><span class="line">versions    display version dependencies</span><br><span class="line">scopes      display scope information</span><br><span class="line">all         all previous options combined</span><br><span class="line">statistics  display relocation statistics</span><br><span class="line">unused      determined unused DSOs</span><br><span class="line">help        display this help message and exit</span><br><span class="line">$ LD_DEBUG=libs ls</span><br><span class="line">$ LD_DEBUG=all ls</span><br></pre></td></tr></table></figure>

<h2 id="useful-commands-in-binutils"><a href="#useful-commands-in-binutils" class="headerlink" title="useful commands in binutils"></a>useful commands in binutils</h2><div class="note success"><p>addr2line, ar, gprof, nm, objdump, readelf, gcov, strip, ranlib, size, strings</p>
<p>ranlib: generates an index to the contents of an archive<br>(below will generate symbol index for the archive but actuall, it&#39;s not need as &#39;ar&#39; already takes care of it, you can use &#39;nm -s xxx.a&#39; to check the symbol before runing ranlib)<br><strong>$ ranlib xxx.a</strong></p>
<p>size: list the section size of an object or archive file</p>
<p>strings: list printable strings from files<br>(note strings only return printable characters, strings displays all strings that are at least four characters in length in the files but can change with -n)<br>strings is always used to get string from Binary file!!!</p>
<p><strong>$ strings &#x2F;bin&#x2F;ls | grep Copyright</strong></p>
<p>show c++ symbol with namespace<br><strong>$ nm –demangle xxx.a</strong><br>(–demangle shows symbol like namespace::Builder::hello(int); that is readalbe for human not ABXxxhello33x which is really stored by compiler)</p>
</div>

<h2 id="process-affinity"><a href="#process-affinity" class="headerlink" title="process affinity"></a>process affinity</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task state: ZOMBIE(if child exits, it enters this STATE, waiting parent to read it state, after parent read it by wait() etc, child resource(task_struct) is freed)</span><br><span class="line"></span><br><span class="line">Make sure parent call wait() for its child process when they exit, otherwise resource is leak in kernel as said above!</span><br><span class="line"></span><br><span class="line">priority:</span><br><span class="line">        nice is given when create a process to calculate the static priority</span><br><span class="line">        while scheduling is based on dynamic priority (effective_prio) which considers</span><br><span class="line">        sleep time and static priority</span><br><span class="line"></span><br><span class="line">command</span><br><span class="line">    show nice value</span><br><span class="line">    #ps -axl</span><br><span class="line"></span><br><span class="line">    default priority(20)&lt;-------&gt;nice(0)</span><br><span class="line">    run a program with adjustment nice value</span><br><span class="line">    (nice value for ls ==default_nice_value(0)+(-10)</span><br><span class="line">    #nice -n -10 ls</span><br><span class="line"></span><br><span class="line">    change nice value of processes</span><br><span class="line">    #renice -n 10 -p 1203</span><br><span class="line"></span><br><span class="line">    retrieve task cpu affinity</span><br><span class="line">    #taskset -p 1203</span><br><span class="line"></span><br><span class="line">     cpu7    cpu6  cpu5   cpu4 cpu3  cpu2  cpu1  cpu0</span><br><span class="line">       +      +     +      +    +     +     +     +</span><br><span class="line">       |      |     |      |    |     |     |     |</span><br><span class="line">       +------+-----+-----------+-----+-----+-----+</span><br><span class="line">       |                   |                      |</span><br><span class="line">       |   1111(f)         |       0000(0)        |</span><br><span class="line">       +   cpu mask        +       cpu mask       +</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Let&#x27;s say we have 8 cpus, core id</span><br><span class="line">    begins from 0-7, cpu mask is bits</span><br><span class="line">    each bit represent a cpu, 1/0</span><br><span class="line"></span><br><span class="line">    #taskset -p 1223</span><br><span class="line">    0x03</span><br><span class="line">    affinity mask 0x03 means it runs only on cpu0, cpu1</span><br><span class="line"></span><br><span class="line">    c means use 1, 2, 3 format for cpu not 0x format!!</span><br><span class="line">    #taskset -cp 1223</span><br><span class="line">    pid 1223&#x27;s current affinity list: 0,</span><br><span class="line"></span><br><span class="line">    retrieve task cpu affinity, Only runs on process #0, set it cpu bit with 1</span><br><span class="line">    #taskset -p 0x01 1223</span><br><span class="line">    OR</span><br><span class="line">    #taskset -cp 0 1223</span><br><span class="line"></span><br><span class="line">CPU bandwidth</span><br><span class="line">    /proc/sys/kernel/sched_rt_period_us:</span><br><span class="line">    The scheduling period that is equivalent to 100% CPU</span><br><span class="line">    bandwidth</span><br><span class="line">    /proc/sys/kernel/sched_rt_runtime_us:</span><br><span class="line">    A global limit on how much time realtime scheduling may</span><br><span class="line">    use.</span><br></pre></td></tr></table></figure>

<h2 id="IRQ-affinity-setting"><a href="#IRQ-affinity-setting" class="headerlink" title="IRQ affinity setting"></a>IRQ affinity setting</h2><div class="note success"><p>see cpu affinity for IRQ<br><strong>$ cat &#x2F;proc&#x2F;irq&#x2F;145&#x2F;smp_affinity</strong><br>f<br>(0x1111)<br><strong>$ cat &#x2F;proc&#x2F;irq&#x2F;145&#x2F;smp_affinity_list</strong><br>0-3<br>(cpu0, cpu1, cpu2, cpu3)</p>
</div>

<h2 id="trace-process-by-strace"><a href="#trace-process-by-strace" class="headerlink" title="trace process by strace"></a>trace process by strace</h2><div class="note success"><p>strace&#x2F;ltrace&#x2F;ptrace&#x2F;truss<br>show how much time process spent on system call or library, (the library is C library like, memset, fgets etc)</p>
<p>ptrace is a system call<br>long ptrace(enum __ptrace_request request, pid_t pid, void *addr, void *data);</p>
<p>strace and ltrace are based on ptrace to implement their feature<br>strace&#x2F;truss is used to trace system call and signal when it occurs<br>ltrace is used to trace a process&#39;s library call initially</p>
<p>truss is similar to strace, but it&#39;s for UNIX, not linux</p>
<p><strong><mark>strace is tool we selected for linux</mark></strong><br>#mount -t procfs proc &#x2F;proc<br>#strace -f  -tt -o vim.strace vim</p>
<p>&#x2F;*attach a process to see what system (lib) is calling *&#x2F;<br>#strace -p pid</p>
<p>#strace -f -p pid<br>(monitor parent and all its children, this is what -f option does)</p>
<p>#strace -o filename<br>(save result to a file)<br>#strace -T<br>(show time spent on system call)<br>#strace -t<br>(show time of day)<br>#strace -s 1024<br>(max sie of string to print)<br>#strace -e trace&#x3D;nanosleep<br>     -e trace&#x3D;network<br>     -e trace&#x3D;file<br>     -e trace&#x3D;desc<br>     -e trace&#x3D;signal</p>
<p>(trace a particular event)<br>7) strace -f<br>(trace child as well)<br>8) strace -c<br>(Count time, calls, and errors for each system call and report a summary on program exit)</p>
<p>ltrace also has options above!!!!!</p>
<p>so the usually use case is<br><strong>$ strace -f -c -o result vim</strong></p>
<p>show time, spending time for system call<br><strong>$ strace -f -t -T -o result vim</strong><br>root@manager:~# strace -f -c vim</p>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">% time     seconds  usecs/call     calls    errors syscall</span><br><span class="line">------ ----------- ----------- --------- --------- ----------------</span><br><span class="line"> 21.81    0.000935           3       309           <span class="built_in">read</span></span><br><span class="line"> 15.35    0.000658           2       383       127 <span class="built_in">stat</span></span><br><span class="line">  9.96    0.000427           3       142         5 open</span><br><span class="line">  9.68    0.000415           6        65           munmap</span><br><span class="line">  6.02    0.000258           2       113           mmap</span><br><span class="line">  5.25    0.000225           2       145           close</span><br><span class="line">  4.15    0.000178           2        86        80 openat</span><br><span class="line">  3.48    0.000149           6        25           write</span><br><span class="line">  3.15    0.000135           4        36           mprotect</span><br><span class="line">  2.61    0.000112           2        59           select</span><br><span class="line">  2.59    0.000111           1       160           fcntl</span><br><span class="line">  2.15    0.000092           1       106           fchdir</span><br><span class="line">  2.05    0.000088           2        37           brk</span><br><span class="line">  1.94    0.000083           1        56           <span class="built_in">chdir</span></span><br><span class="line">  1.70    0.000073           1        83           fstat</span><br><span class="line">  1.24    0.000053           1        56           getcwd</span><br><span class="line">  1.19    0.000051           1        56           lseek</span><br><span class="line">  1.10    0.000047           4        12           getdents</span><br><span class="line">  1.03    0.000044           2        21        20 access</span><br><span class="line">  0.84    0.000036          36         1           <span class="built_in">unlink</span></span><br><span class="line">  0.63    0.000027           1        25           ioctl</span><br><span class="line">  0.42    0.000018           1        24           rt_sigaction</span><br><span class="line">  0.30    0.000013           7         2         2 connect</span><br><span class="line">  0.23    0.000010          10         1           rename</span><br><span class="line">  0.19    0.000008           4         2         2 statfs</span><br><span class="line">  0.16    0.000007           1         7           rt_sigprocmask</span><br><span class="line">  0.16    0.000007           4         2           socket</span><br><span class="line">  0.16    0.000007           7         1           fchown</span><br><span class="line">  0.12    0.000005           1         6           getuid</span><br><span class="line">  0.09    0.000004           4         1           sysinfo</span><br><span class="line">  0.05    0.000002           1         2           getrlimit</span><br><span class="line">  0.05    0.000002           2         1         1 futex</span><br><span class="line">  0.02    0.000001           1         1           execve</span><br><span class="line">  0.02    0.000001           1         1           <span class="built_in">uname</span></span><br><span class="line">  0.02    0.000001           1         2           <span class="built_in">umask</span></span><br><span class="line">  0.02    0.000001           1         1           sigaltstack</span><br><span class="line">  0.02    0.000001           1         1           arch_prctl</span><br><span class="line">  0.02    0.000001           1         1           set_tid_address</span><br><span class="line">  0.02    0.000001           1         1           set_robust_list</span><br><span class="line">------ ----------- ----------- --------- --------- ----------------</span><br><span class="line">100.00    0.004287                  2033       237 total</span><br></pre></td></tr></table></figure>

<h2 id="show-shared-memory-on-the-system"><a href="#show-shared-memory-on-the-system" class="headerlink" title="show shared memory on the system"></a>show shared memory on the system</h2><div class="note success"><p>show ipc shared memory<br><strong>$ ipcs</strong><br>show posix shared memory<br><strong>$ ls &#x2F;dev&#x2F;shm</strong></p>
</div>

<h2 id="only-show-mem-x2F-cpu-usage-of-a-particular-pid"><a href="#only-show-mem-x2F-cpu-usage-of-a-particular-pid" class="headerlink" title="only show mem&#x2F;cpu usage of a particular pid"></a>only show mem&#x2F;cpu usage of a particular pid</h2><div class="note success"><p><strong>$ ps -p 13687  -o %mem&#x3D;</strong><br><strong>$ ps -p 13687  -o %cpu&#x3D;</strong></p>
</div>

<h2 id="show-processes-who-opened-a-file-or-dir"><a href="#show-processes-who-opened-a-file-or-dir" class="headerlink" title="show processes who opened a file or dir"></a>show processes who opened a file or dir</h2><div class="note success"><p>who open the dir only(top level)<br><strong>$ lsof $dir</strong><br>search for all open instances of <code>directory s and the files and directories it contains at its top level</code><br><strong>$ lsof +d $s</strong><br>search for all open instances of directory D and all the files and directories it contains to its complete depth<br><strong>$ lsof +D $s</strong></p>
<p>only this file, who opens the file<br><strong>$ lsof $file</strong></p>
</div>

<h2 id="force-a-running-process-to-generate-a-core-dump"><a href="#force-a-running-process-to-generate-a-core-dump" class="headerlink" title="force a running process to generate a core dump"></a>force a running process to generate a core dump</h2><div class="note success"><p>gcore(from gdb) does NOT kill the process<br><strong>$ gcore  $pid</strong><br>(usually to see the snapshot of the process memory)</p>
<p>kill the process as send abort to the process<br><strong>$ kill -SIGABRT $pid</strong></p>
</div>

<h2 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h2><div class="note success"><p>A few days ago, i landed upon unix signals that lead to process termination. I guess i was trying to remember the signals generated in linux when one presses Ctrl+Z and Ctrl+C. Memory did not serve me at that moment and i decided to look these up, one more time. I realized that having a consolidated book which explains these terms clearly is better than searching loads of webpages. I did the later since i had kept my unix os book away from my reach.To my disappointment, there was no single link that listed out all differences in an orderly fashion.</p>
<p>Hence, in this post, i wish to delineate these terms by consolidating my findings from stackoverflow, wikipedia and other unix internals websites. Here it goes:</p>
<p>SIGKILL: Terminates a process immediately. This signal cannot be handled (caught), ignored or blocked. (The “kill -9” command in linux generates the same signal).</p>
<p>SIGTERM: Terminates a process immediately. However, this signal can be handled, ignored or caught in code. If the signal is not caught by a process, the process is killed. Also, this is used for graceful termination of a process. (The “kill” command in linux if specified without any signal number like -9, will send SIGTERM)</p>
<p>SIGINT: Interrupts a process. (The default action is to terminate gracefully). This too, like, SIGTERM can be handled, ignored or caught. The difference between SIGINT and SIGTERM is that the former can be sent from a terminal as input characters. This is the signal generated when a user presses Ctrl+C. (Sidenote: Ctrl+C denotes EOT(End of Transmission) for (say) a network stream)</p>
<p>SIGQUIT: Terminates a process. This is different from both SIGKILL and SIGTERM in the sense that it generates a core dump of the process and also cleans up resources held up by a process. Like SIGINT, this can also be sent from the terminal as input characters. It can be handled, ignored or caught in code. This is the signal generated when a user presses Ctrl+.</p>
<p>SIGSTP: Suspends a process. This too, can be handled, ignored or blocked. Since it does not terminate the process, the process can be resumed by sending a SIGCONT signal. This signal can be generated by pressing Ctrl+Z. (Sidenote: Ctrl+Z stands for substitute character which indicates End-of-File in DOS)</p>
<p>SIGHUP: (From Wikipedia): Hangs up a process when the controlling terminal is disconnected. This especially relates to modem&#x2F;dial in connections. A process has to explicitly handle this signal for it to work. A good use is to “poke” a process and letting the process (as defined by the programmer) decide what to do with the signal is described here. Hence, SIGHUP can be handled, ignored or caught. This is the signal generated when a user presses Ctrl+D.</p>
<p>Some time, you may want to hang a process for low response</p>
<p>$ kill -STOP $pid<br>$ kill -SIGCONT $pid</p>
</div>

<h2 id="show-environment-variables-of-a-running-process"><a href="#show-environment-variables-of-a-running-process" class="headerlink" title="show environment variables of a running process."></a>show environment variables of a running process.</h2><div class="note success"><p><strong>use gdb, environ is a global variable</strong></p>
<p>environment variables of this process, it’s the final place, absolute right!<br>attach to that process<br>gdb&gt; p environ<br>gdb&gt;environ[0]<br>gdb&gt;environ[1]<br>gdb&gt;environ[2]<br>…<br>gdb&gt;environ[x]</p>
<p><strong>check &#x2F;proc&#x2F;PIDxx&#x2F;environ</strong></p>
<p>it only shows the environment variables when process launches, if you added<br>new environment variable by setenv()[C function], it doesn’t have one that<br>added after process launched!!!</p>
</div>

<h2 id="check-process-name-when-knows-pid"><a href="#check-process-name-when-knows-pid" class="headerlink" title="check process name when knows pid"></a>check process name when knows pid</h2><div class="note success"><p><strong>$ cat &#x2F;proc&#x2F;$pid&#x2F;status</strong></p>
</div>

<h2 id="memory-leak-x2F-overflow-tool"><a href="#memory-leak-x2F-overflow-tool" class="headerlink" title="memory leak&#x2F; overflow tool"></a>memory leak&#x2F; overflow tool</h2><div class="note success"><p>Use tools:<br>valgrind and AddressSanitizer</p>
</div>

<h2 id="shutdown-vs-close"><a href="#shutdown-vs-close" class="headerlink" title="shutdown() vs close()"></a>shutdown() vs close()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> shutdown() is useful for deliniating when you are done providing a request to a server using TCP.  A typical use is to send a request to a server followed by a shutdown().  The server will read your request followed by an EOF (read of 0 on most unix implementations).  This tells the server that it has your full request.  You then go read blocked on the socket.  The server will process your request and send the necessary data back to you followed by a close.  When you have finished reading all of the response to your request you will read an EOF thus signifying that you have the whole response.</span><br><span class="line"></span><br><span class="line">The shutdown(s, how) call causes all or part of a full-duplex connection on the socket associated with sockfd to be shut down.</span><br><span class="line">- If how is SHUT_RD, further receptions will be disallowed.</span><br><span class="line">    - No FIN sent, only kernel set the state of socket NOT reading(the peer does not know), should not read any more</span><br><span class="line">    - if read on SHUT_RD, -1(ECONNRESET) reset by peer, or end of file if peer close(fd).</span><br><span class="line"></span><br><span class="line">- If how is SHUT_WR, further transmissions will be disallowed.</span><br><span class="line">    - cause FIN sent to peer and the peer recv EOF()(peer should not send any more, as its peer close reading)`the peer can send data even after receiving EOF`</span><br><span class="line">    - if write again on SHUT_WR socket, exception `SIGPIPE, Broken pipe`.</span><br><span class="line"></span><br><span class="line">- If how is SHUT_RDWR,further receptions and transmissions will be disallowed.</span><br><span class="line">    - Both action above</span><br><span class="line"></span><br><span class="line">- close() can do SHUT_RDWR and tell kernel to free socket resource</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">- shutdown + close()(only for resource free)</span><br><span class="line">- close() only</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="RESET-TCP-from-application"><a href="#RESET-TCP-from-application" class="headerlink" title="RESET TCP from application"></a>RESET TCP from application</h2><p>if application sent RST(RST flag set) on a tcp socket, the socket will go into <code>Closed state imediately(no FIN sent)</code>, the peer that receives RST packet will go into <code>peer Closed state as well</code>, <code>no need ACK for RST packet</code>, this is the quick way to close tcp conenction and free port.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">linger</span> <span class="title">linger</span>;</span></span><br><span class="line"></span><br><span class="line">linger.l_onoff = <span class="number">1</span>;</span><br><span class="line">linger.l_linger = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (setsockopt(fd, SOL_SOCKET, SO_LINGER,</span><br><span class="line">               (<span class="type">const</span> <span class="type">void</span> *) &amp;linger, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> linger)) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* log error */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//RST packet is sent when call close()</span></span><br><span class="line">close(fd);</span><br></pre></td></tr></table></figure>

<h2 id="install-debuginfo-of-kernel-or-application-on-centos"><a href="#install-debuginfo-of-kernel-or-application-on-centos" class="headerlink" title="install debuginfo of kernel or application on centos"></a>install debuginfo of kernel or application on centos</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># debuginfo of kernel(kernel is not built by yourself)</span></span><br><span class="line"><span class="variable">$debuginfo</span>-install -y kernel-$(<span class="built_in">uname</span> -r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debuginfo of application or library installed by yum</span></span><br><span class="line"><span class="variable">$cp</span> CentOS-Debuginfo.repo /etc/yum.repos.d/</span><br><span class="line"><span class="variable">$yum</span> update</span><br><span class="line"><span class="variable">$debuginfo</span>-install libgcc-4.8.5-44.el7.x86_64</span><br></pre></td></tr></table></figure>

<h2 id="show-stack-for-give-process-thread"><a href="#show-stack-for-give-process-thread" class="headerlink" title="show stack for give process(thread)"></a>show stack for give process(thread)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show task of the group</span></span><br><span class="line"><span class="variable">$pstack</span> 11289</span><br><span class="line"></span><br><span class="line"><span class="comment"># only print this process itself</span></span><br><span class="line">$/proc/11289/stack</span><br><span class="line"></span><br><span class="line"><span class="comment"># or generate a core without kill this process</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$gcore</span> <span class="variable">$pid</span></span><br></pre></td></tr></table></figure>

<h2 id="pkg-config"><a href="#pkg-config" class="headerlink" title="pkg-config"></a>pkg-config</h2><p><code>pkg-config</code> is a tool to check dependencies for a library, it outputs <code>version, header path, libs</code> of that library, so that someone who <code>uses this library passes these to compiler for building.</code></p>
<p><code>pkg-config</code> gets all these information by checking <code>xxx.pc</code> from several paths, so that if a library wants to be managed by <code>pkg-config</code>, it must proivde a xxx.pc file at some path.</p>
<hr>
<p><strong>&#x2F;usr&#x2F;lib64&#x2F;pkgconfig&#x2F;glib.pc</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">prefix=/usr</span><br><span class="line">exec_prefix=/usr</span><br><span class="line">libdir=/usr/lib64</span><br><span class="line">includedir=/usr/include</span><br><span class="line"></span><br><span class="line">Name: GLib</span><br><span class="line">Description: C Utility Library</span><br><span class="line">Version: 1.2.10</span><br><span class="line">Libs: -L$&#123;libdir&#125; -lglib</span><br><span class="line">Cflags: -I$&#123;includedir&#125;/glib-1.2 -I$&#123;libdir&#125;/glib/include </span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get default search paths for pkg-config</span></span><br><span class="line"><span class="variable">$pkg</span>-config --variable pc_path pkg-config</span><br><span class="line"></span><br><span class="line"><span class="comment"># change search paths for pkg-config</span></span><br><span class="line">$ <span class="built_in">export</span> PKG_CONFIG_PATH=/usr/lib64/pkgconfig:/usr/share/pkgconfig:/new/path</span><br><span class="line"></span><br><span class="line"><span class="comment"># list all known packages</span></span><br><span class="line"><span class="variable">$pkg</span>-config --list-all</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##################### example ###########################</span></span><br><span class="line"><span class="variable">$pkg</span>-config --modversion gnutls</span><br><span class="line">3.3.29</span><br><span class="line"><span class="variable">$pkg</span>-config --libs  gnutls</span><br><span class="line">-L/usr/lib64 -lgnutls</span><br><span class="line"><span class="variable">$pkg</span>-config --cflags gnutls</span><br><span class="line">-I/usr/include/p11-kit-1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$cat</span> /usr/lib64/pkgconfig/gnutls.pc </span><br><span class="line"><span class="comment"># Process this file with autoconf to produce a pkg-config metadata file.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copyright (C) 2004-2012 Free Software Foundation, Inc.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copying and distribution of this file, with or without modification,</span></span><br><span class="line"><span class="comment"># are permitted in any medium without royalty provided the copyright</span></span><br><span class="line"><span class="comment"># notice and this notice are preserved.  This file is offered as-is,</span></span><br><span class="line"><span class="comment"># without any warranty.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Author: Simon Josefsson</span></span><br><span class="line"></span><br><span class="line">prefix=/usr</span><br><span class="line">exec_prefix=/usr</span><br><span class="line">libdir=/usr/lib64</span><br><span class="line">includedir=/usr/include</span><br><span class="line"></span><br><span class="line">Name: GnuTLS</span><br><span class="line">Description: Transport Security Layer implementation <span class="keyword">for</span> the GNU system</span><br><span class="line">URL: http://www.gnutls.org/</span><br><span class="line">Version: 3.3.29</span><br><span class="line">Libs: -L<span class="variable">$&#123;libdir&#125;</span> -lgnutls</span><br><span class="line">Libs.private: /usr/lib64/libz.so     -lp11-kit    -ltspi -lgmp</span><br><span class="line">Requires.private: nettle, hogweed, libtasn1, p11-kit-1, zlib</span><br><span class="line">Cflags: -I<span class="variable">$&#123;includedir&#125;</span></span><br><span class="line"><span class="comment">##################### example ###########################</span></span><br></pre></td></tr></table></figure>

<h2 id="get-hardware-meta"><a href="#get-hardware-meta" class="headerlink" title="get hardware meta"></a>get hardware meta</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$dmidecode</span></span><br><span class="line"><span class="comment"># dmidecode 3.2</span></span><br><span class="line">Getting SMBIOS data from sysfs.</span><br><span class="line">SMBIOS 2.8 present.</span><br><span class="line">11 structures occupying 539 bytes.</span><br><span class="line">Table at 0x000F70E0.</span><br><span class="line"></span><br><span class="line">Handle 0x0000, DMI <span class="built_in">type</span> 0, 24 bytes</span><br><span class="line">BIOS Information</span><br><span class="line">	Vendor: SeaBIOS</span><br><span class="line">	Version: 1.10.2-1.el7</span><br><span class="line">	Release Date: 04/01/2014</span><br><span class="line">	Address: 0xE8000</span><br><span class="line">	Runtime Size: 96 kB</span><br><span class="line">	ROM Size: 64 kB</span><br><span class="line">	Characteristics:</span><br><span class="line">		BIOS characteristics not supported</span><br><span class="line">		Targeted content distribution is supported</span><br><span class="line">	BIOS Revision: 0.0</span><br><span class="line"></span><br><span class="line">Handle 0x0100, DMI <span class="built_in">type</span> 1, 27 bytes</span><br><span class="line">System Information</span><br><span class="line">	Manufacturer: Red Hat</span><br><span class="line">	Product Name: KVM</span><br><span class="line">	Version: RHEL 7.4.0 PC (i440FX + PIIX, 1996)</span><br><span class="line">	Serial Number: Not Specified</span><br><span class="line">	UUID: Not Settable</span><br><span class="line">	Wake-up Type: Power Switch</span><br><span class="line">	SKU Number: Not Specified</span><br><span class="line">	Family: Red Hat Enterprise Linux</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="lspci-output"><a href="#lspci-output" class="headerlink" title="lspci output"></a>lspci output</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list all pci devices</span></span><br><span class="line"><span class="variable">$ls</span> -al /sys/bus/pci/devices</span><br><span class="line">lrwxrwxrwx 1 root root 0 2009-08-03 10:38 0000:04:00.0 -&gt; ../../../devices/pci0000:00/0000:00:0b.0/0000:04:00.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># We can break the device string &quot;0000:04:00.0&quot; down as follows:</span></span><br><span class="line"><span class="comment"># 0000 : PCI domain (each domain can contain up to 256 PCI buses)</span></span><br><span class="line"><span class="comment"># 04   : the bus number the device is attached to </span></span><br><span class="line"><span class="comment"># 00   : the device number </span></span><br><span class="line"><span class="comment"># .0   : PCI device function</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To get additional information about the device, we can change into the 0000:04:00.0 directory and execute our favorite pager to display one or more pseudo-device entries:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show number instead of name</span></span><br><span class="line">$ lspci -n</span><br><span class="line">00:04.0 0200: 1af4:1000</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># Field 1 : 00:04.0 : bus number (00), device number (04) and function (0) </span></span><br><span class="line"><span class="comment"># Field 2 : 0200    : device class </span></span><br><span class="line"><span class="comment"># Field 3 : 1af4    : vendor ID </span></span><br><span class="line"><span class="comment"># Field 4 : 1000    : device ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To convert the identifiers to human-readable strings, we can look up the identifiers in the PCI ID repository: http://pci-ids.ucw.cz/</span></span><br><span class="line"><span class="comment"># Field 2 : 0200   : class 0200 is listed as a &quot;Network controller&quot;</span></span><br><span class="line"><span class="comment"># Field 3 : 1af4   : vendor ID 1af4 is listed as the &quot;Red Hat, Inc.&quot; </span></span><br><span class="line"><span class="comment"># Field 4 : 1000   : device ID 1000 is listed as a &quot;Virtio network device&quot;</span></span><br><span class="line"></span><br><span class="line">$ lspci</span><br><span class="line">00:04.0 Ethernet controller: Red Hat, Inc. Virtio network device</span><br></pre></td></tr></table></figure>
<h2 id="network-related"><a href="#network-related" class="headerlink" title="network related"></a>network related</h2><h3 id="enable-forwarding-in-kernel"><a href="#enable-forwarding-in-kernel" class="headerlink" title="enable forwarding in kernel"></a>enable forwarding in kernel</h3><div class="note success"><p>open &#x2F;etc&#x2F;sysctl.conf<br>enable net.ipv4.ip_forward&#x3D;1<br>enable ipv6 forwarding set net.ipv6.conf.all.forwarding&#x3D;1<br>then restart sysctl service</p>
<p>Actually, all variables in &#x2F;etc&#x2F;sysctl.conf will be applied to corresponding kernel variables through &#x2F;proc or sysctl API<br><strong>Note:  proc for sysctl is at  &#x2F;proc&#x2F;sys</strong><br><strong>$ cat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward</strong></p>
</div>

<h3 id="IP-address-and-Route"><a href="#IP-address-and-Route" class="headerlink" title="IP address and Route"></a>IP address and Route</h3><div class="note success"><p><strong><mark>IP Address</mark></strong><br>Displaying existing addresses<br><strong>ip [-6] addr show [dev <interface>]</strong></p>
<p>Add an IP address<br><strong>ip [-6] addr add <ipaddress>&#x2F;<prefixlength> dev <interface></strong><br><strong>ip -6 addr add 2001:0db8:0:f101::1&#x2F;64 dev eth0</strong></p>
<p>Removing an IP address<br><strong>ip [-6] addr del <ipv6address>&#x2F;<prefixlength> dev <interface></strong><br><strong>ip -6 addr del 2001:0db8:0:f101::1&#x2F;64 dev eth0</strong></p>
<p><strong><mark>IP Route</mark></strong><br>show ip routes on all interface<br><strong>ip [-6] route show</strong><br>show ip routes on particular interface<br><strong>ip [-6] route show dev eth0</strong></p>
<p>Add an IP route through a gateway<br><strong>ip [-6] route add <ipnetwork>&#x2F;<prefixlength> via <ipaddress> [dev <device>]</strong><br><strong>ip -6 route add 2000::&#x2F;64 via 2001:0db8:0:f101::1</strong></p>
<p>Removing an IP route through a gateway<br><strong>ip [-6] route del <ipnetwork>&#x2F;<prefixlength> via <ipaddress> [dev <device>]</strong><br><strong>ip -6 route del 2000::&#x2F;3 via 2001:0db8:0:f101::1</strong></p>
<p>Add an IP route through an interface<br><strong>ip [-6] route add <ipnetwork>&#x2F;<prefixlength> dev <device> metric 1</strong><br><strong>ip -6 route add 2000::&#x2F;3 dev eth0 metric 1</strong></p>
<p>Removing an IP route through an interface<br><strong>ip [-6] route del <ipnetwork>&#x2F;<prefixlength> dev <device></strong><br><strong>ip -6 route del 2000::&#x2F;3 dev eth0</strong></p>
</div>

<h3 id="Deep-into-route-table"><a href="#Deep-into-route-table" class="headerlink" title="Deep into route table"></a>Deep into route table</h3><div class="note success"><p><mark>Actually, kernel supports 255 route tables with priority, the two main<br>used ones are local table and main table, local table can’t be modified, controlled by kernel<br>while main table is the default table when you use tools to add&#x2F;delete&#x2F;create route, they are in main table</mark></p>
<p><strong>which table should we use when packet comes in?</strong><br>First check local table, if not match, check main table, DO NOT check other table if no<br>policy(ip rule) is configure, otherwise, check other table based on rule, skip local and main</p>
<p><mark>For example, tag skb with mark 1, if skb with mark 1, lookup table 100</mark></p>
<p><strong>iptables -t mangle -A PREROUTING -j MARK –set-mark 1</strong><br><strong>ip rule add fwmark 1 lookup 100</strong><br><strong>ip route add local 0.0.0.0&#x2F;0 dev lo table 100</strong></p>
<p>Show routes in different tables(default is main)<br><strong>ip -6 route show</strong><br><strong>ip -6 route show table main</strong><br><strong>ip -6 route show table all</strong><br><strong>ip -6 route show table local</strong><br><strong>ip -6 route show table 100</strong></p>
</div>

<p>lets explain the output fields for each route with ipv4 as example</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ifconfig</span><br><span class="line">docker0   Link encap:Ethernet  HWaddr 02:42:32:26:c0:ce</span><br><span class="line">          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class="line">          inet6 addr: fe80::42:32ff:fe26:c0ce/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:27408 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:30149 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:1717078 (1.7 MB)  TX bytes:67951999 (67.9 MB)</span><br><span class="line"></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 00:50:56:91:d7:c1</span><br><span class="line">          inet addr:10.107.60.8  Bcast:10.117.7.255  Mask:255.255.252.0</span><br><span class="line">          inet6 addr: fe80::250:56ff:fe91:d7c1/64 Scope:Link</span><br><span class="line">          inet6 addr: fc00:10:117:7:250:56ff:fe91:d7c1/64 Scope:Global</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:20424652 errors:1753 dropped:2707017 overruns:0 frame:0</span><br><span class="line">          TX packets:2390188 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:9346260108 (9.3 GB)  TX bytes:32523341970 (32.5 GB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:754204 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:754204 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1</span><br><span class="line">          RX bytes:74578327 (74.5 MB)  TX bytes:74578327 (74.5 MB)</span><br><span class="line"></span><br><span class="line">(base) root@dev:~/$ ip route show</span><br><span class="line">default via 10.117.7.253 dev eth0 onlink</span><br><span class="line"><span class="comment"># default gateway 10.117.7.253 output eth0</span></span><br><span class="line">10.117.4.0/22 dev eth0  proto kernel  scope <span class="built_in">link</span>  src 10.117.6.8</span><br><span class="line"><span class="comment"># scope link(local network 10.117.4.0/22), src 10.117.6.8 eth0&#x27;s ip</span></span><br><span class="line">172.17.0.0/16 dev docker0  proto kernel  scope <span class="built_in">link</span>  src 172.17.0.2</span><br><span class="line"><span class="comment"># scope link(local network 172.17.0.0/16), src 172.17.0.2 docker0&#x27;s ip</span></span><br><span class="line"><span class="comment">#local network, match subnet.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(base) root@dev:~/<span class="comment"># ip route show table local</span></span><br><span class="line">broadcast 10.117.4.0 dev eth0  proto kernel  scope <span class="built_in">link</span>  src 10.117.6.8</span><br><span class="line"><span class="built_in">local</span> 10.117.6.8 dev eth0  proto kernel  scope host  src 10.117.6.8</span><br><span class="line"><span class="comment"># local mapped to RT_LOCAL(kernel) eth0, scope host-&gt;0 hop, myself</span></span><br><span class="line">broadcast 10.117.7.255 dev eth0  proto kernel  scope <span class="built_in">link</span>  src 10.117.6.8</span><br><span class="line">broadcast 127.0.0.0 dev lo  proto kernel  scope <span class="built_in">link</span>  src 127.0.0.1</span><br><span class="line"><span class="built_in">local</span> 127.0.0.0/8 dev lo  proto kernel  scope host  src 127.0.0.1</span><br><span class="line"><span class="built_in">local</span> 127.0.0.1 dev lo  proto kernel  scope host  src 127.0.0.1</span><br><span class="line"><span class="comment"># local mapped to RT_LOCAL(kernel) lo, scope host-&gt;0 hop, myself</span></span><br><span class="line">broadcast 127.255.255.255 dev lo  proto kernel  scope <span class="built_in">link</span>  src 127.0.0.1</span><br><span class="line">broadcast 172.17.0.0 dev docker0  proto kernel  scope <span class="built_in">link</span>  src 172.17.0.2</span><br><span class="line"><span class="built_in">local</span> 172.17.0.2 dev docker0  proto kernel  scope host  src 172.17.0.2</span><br><span class="line"><span class="comment"># local mapped to RT_LOCAL(kernel) docker0, scope host-&gt;0 hop, myself</span></span><br><span class="line">broadcast 172.17.255.255 dev docker0  proto kernel  scope <span class="built_in">link</span>  src 172.17.0.2</span><br><span class="line"><span class="comment"># local address, match 255.255.255.255, exact match</span></span><br></pre></td></tr></table></figure>
<h3 id="prevent-route-missing-after-reboot"><a href="#prevent-route-missing-after-reboot" class="headerlink" title="prevent route missing after reboot"></a>prevent route missing after reboot</h3><div class="note success"><p>There are two ways to do this</p>
<ol>
<li><p>add static route</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Centos</span></span><br><span class="line"><span class="comment"># /etc/sysconfig/network-scripts/route-eth0 created if not there</span></span><br><span class="line"></span><br><span class="line">default via 10.10.10.1 dev eth0</span><br><span class="line">10.117.0.0/16 via 10.117.1.1 dev eth0</span><br><span class="line"><span class="comment"># from terminal restart network service</span></span><br><span class="line"><span class="variable">$sudo</span> service network restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>save route table and restore it after reboot</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> ip route save &gt;dump</span><br><span class="line"></span><br><span class="line"><span class="comment"># after reboot</span></span><br><span class="line"><span class="variable">$sudo</span> ip route restore &lt;dump</span><br></pre></td></tr></table></figure></li>
</ol>
</div>

<h3 id="show-arp-entry"><a href="#show-arp-entry" class="headerlink" title="show arp entry"></a>show arp entry</h3><div class="note success"><p><strong>$ arp</strong><br>Address                  HWtype  HWaddress           Flags Mask            Iface<br>127.0.0.3                ether   02:00:00:12:34:05   CM                    loopback-279<br>gateway                  ether   02:42:fc:d8:f2:94   C                     ovs-br0</p>
<p>Flags:<br>C—–&gt;entry is completed<br>M——&gt;Permanent entries, user added.</p>
<p><strong>$ arp -a</strong></p>
</div>

<h3 id="save-tcpdump-captured-packet-to-file"><a href="#save-tcpdump-captured-packet-to-file" class="headerlink" title="save tcpdump captured packet to file"></a>save tcpdump captured packet to file</h3><div class="note success"><p><strong>$ tcpdump -i eth0 -s 0 -w &#x2F;home&#x2F;lzq&#x2F;pt.pcap</strong><br>-s limits the size of packet<br>-o indicates no limition!</p>
</div>

<h3 id="packet-shows-as-tcp-segment-of-a-reassembled-pdu-in-wireshark"><a href="#packet-shows-as-tcp-segment-of-a-reassembled-pdu-in-wireshark" class="headerlink" title="packet shows as tcp segment of a reassembled pdu in wireshark"></a>packet shows as tcp segment of a reassembled pdu in wireshark</h3><div class="note success"><p>This is due to application message(PDU) is larger than MSS, tcp splits it into several tcp segments, but tcp segment has no Fragment flag, how does wireshark know several tcp segments belong to same PDU?</p>
<p>wireshark thinks if several tcp segments have the same ACK number but different sequence numbers, they belong to same PDU, refer to </p>
</div>

<h3 id="show-all-sockets"><a href="#show-all-sockets" class="headerlink" title="show all sockets"></a>show all sockets</h3><div class="note success"><p><strong>$ netstat -a -t     #all tcp  sockets</strong><br><strong>$ netstat -a -u     #all udp  sockets</strong><br><strong>$ netstat -a -w     #all raw  sockets</strong><br><strong>$ netstat -a -x     #all unix sockets</strong><br><strong>$ netstat -tulpn    #l means listening p with program name</strong><br><mark class="label danger">Note: if -a is not present, it will only display socket in established state</mark></p>
<p>Show all files opened by a process and -P(show number not name for host, port)<br><strong>$ lsof -p pid -P</strong><br>show which process opens a socket on particular port<br><strong># lsof -i:80</strong></p>
</div>

<h3 id="check-x2F-set-mtu-or-MAC"><a href="#check-x2F-set-mtu-or-MAC" class="headerlink" title="check&#x2F;set mtu or MAC"></a>check&#x2F;set mtu or MAC</h3><div class="note success"><p><strong>$ ifconfig eth1</strong><br><strong>$ ifcofnig eth1 mtu 1500</strong></p>
<p><strong>temporary</strong><br><strong>$ ifconfig eth0 down</strong><br><strong>$ ifconfig eth0 hw ether 00:80:48:BA:d1:30</strong><br><strong>$ ifconfig eth0 up</strong></p>
<p><strong>permanently</strong><br>Ubuntu18<br>edit &#x2F;etc&#x2F;network&#x2F;interfaces<br>    <strong>iface eth0 hwaddress ether 02:01:02:03:04:0</strong><br>Centos8<br>edit &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0<br>    <strong>MACADDR&#x3D;02:01:02:03:04:0</strong></p>
</div>

<h3 id="socket-bind-no-local-address"><a href="#socket-bind-no-local-address" class="headerlink" title="socket bind no-local address"></a>socket bind no-local address</h3><div class="note success"><p>if you bind() normally the ip address must be one of the host, bind can be used<br>in two cases</p>
<ul>
<li>server call socket&#x2F;bind&#x2F;listen&#x2F;accpet, that means only the dst is for bind address, it will accept it, otherwise no</li>
<li>client call bind, socket&#x2F;bind&#x2F;send | sendto, that means, client uses the bind address as the source address when sending packet.</li>
</ul>
<p>but for some case, you want to bind an address which is no-local(none of the host address)<br>which is always need for loadbalancer server!</p>
<p>global setting, so that every application can bind non local address<br><strong>$ echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_nonlocal_bind</strong></p>
<p>enable it on a socket of the process<br><strong>In programe code, call setsocketopt(IP_TRANSPARENT, 1), then</strong><br><strong>$ setcap CAP_NET_ADMIN program</strong></p>
<p>IP_TRANSPARENT (since Linux 2.6.24)<br>Setting this boolean option enables transparent proxying on<br>this socket.  This socket option allows the calling<br>application to bind to a nonlocal IP address and operate both<br>as a client and a server with the foreign address as the local<br>endpoint.</p>
<p><strong>NOTE: this requires that routing be set up in a way that packets going to the foreign address are routed through the TProxy box (i.e., the system hosting the application that employs the IP_TRANSPARENT socket option), make sure packet is not dropped before reaching tproxy module in kernel</strong></p>
<p>Enabling this socket option requires superuser privilege(the CAP_NET_ADMIN capability).</p>
</div>

<h3 id="socket-source-port-selection"><a href="#socket-source-port-selection" class="headerlink" title="socket source port selection"></a>socket source port selection</h3><div class="note success"><p><strong>if not set source port explicitly by bind() source port selected from below range</strong><br>$ cat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_local_port_range<br>32768	60999</p>
<p><strong>change the source port range</strong><br>$ sysctl -w  net.ipv4.ip_local_port_range&#x3D;1024 4095</p>
</div>

<h3 id="create-vlan-interface-and-check-its-real-dev"><a href="#create-vlan-interface-and-check-its-real-dev" class="headerlink" title="create vlan interface and check its real dev"></a>create vlan interface and check its real dev</h3><p>As vlan interface is a virtual device, so it must attach a ‘real’ device, ‘real’ does not mean it must be a physical, it could be another virtual device as well, when send traffic on the vlan interface, it sends out to ‘real’ device after adding vlan id, call ‘real’ device’s dev_queue_xmit().</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># must provide &#x27;real&#x27; device when creating vlan interface, two vlan interfaces can points to same &#x27;real&#x27; deivce.</span></span><br><span class="line">$ ip <span class="built_in">link</span> add <span class="built_in">link</span> ens192 name ens192.100 <span class="built_in">type</span> vlan <span class="built_in">id</span> 100</span><br><span class="line">$ ip <span class="built_in">link</span> <span class="built_in">set</span> dev ens192.100 up</span><br><span class="line">$ ip -d <span class="built_in">link</span> show ens192.100</span><br><span class="line">446: ens192.100@ens192: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:50:56:b2:01:75 brd ff:ff:ff:ff:ff:ff promiscuity 0</span><br><span class="line">    vlan protocol 802.1Q <span class="built_in">id</span> 100 &lt;REORDER_HDR&gt; addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535</span><br><span class="line"></span><br><span class="line">ens192.100@ens192  <span class="string">&#x27;real device&#x27;</span> ens192</span><br><span class="line">vlan protocol 802.1Q <span class="built_in">id</span> 100</span><br><span class="line"></span><br><span class="line">$ ip <span class="built_in">link</span> add <span class="built_in">link</span> ens192 name ens192.200 <span class="built_in">type</span> vlan <span class="built_in">id</span> 200</span><br><span class="line">$ ip <span class="built_in">link</span> <span class="built_in">set</span> dev ens192.200 up</span><br><span class="line">$ ip -d <span class="built_in">link</span> show ens192.200</span><br><span class="line">447: ens192.200@ens192: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:50:56:b2:01:75 brd ff:ff:ff:ff:ff:ff promiscuity 0</span><br><span class="line">    vlan protocol 802.1Q <span class="built_in">id</span> 200 &lt;REORDER_HDR&gt; addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ens192.200@ens192  <span class="string">&#x27;real device&#x27;</span> ens192</span><br><span class="line">vlan protocol 802.1Q <span class="built_in">id</span> 200</span><br></pre></td></tr></table></figure>

<h3 id="check-tcp-fastopen-cookie"><a href="#check-tcp-fastopen-cookie" class="headerlink" title="check tcp fastopen cookie"></a>check tcp fastopen cookie</h3><p>When tcp fastopen is enabled both on client and server side, client send cookie request as TCP option, server sends cookie as TCP opetion as well, client saves it at kernel with key(dstip: port), when next TCP SYN will send the cookie if for same dst:port</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check cookie saved by kernel</span></span><br><span class="line">$ sudo ip tcp_metrics</span><br><span class="line">10.10.10.10 age 4.764sec cwnd 10 rtt 110us rttvar 188us fo_mss 65495 fo_cookie a427a77724e9229f <span class="built_in">source</span> 10.117.6.2</span><br><span class="line"><span class="comment"># fo_cookie is sent by server and save at client in kernel</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check cookie only for dst 10.10.10.10</span></span><br><span class="line">$ sudo ip tcp_metrics 10.10.10.10</span><br><span class="line"></span><br><span class="line"><span class="comment"># flush cookie</span></span><br><span class="line">$ sudo ip tcp_metrics flush</span><br><span class="line">$ sudo ip tcp_metrics flush 10.10.10.10</span><br></pre></td></tr></table></figure>
<p><strong>NOTE when TCP fastopen is enabled(setsockopt), use send() not connect() to setup TCP connection</strong></p>
<h3 id="How-to-know-if-a-network-interface-is-tap-tun-bridge-or-physical"><a href="#How-to-know-if-a-network-interface-is-tap-tun-bridge-or-physical" class="headerlink" title="How to know if a network interface is tap, tun, bridge or physical?"></a>How to know if a network interface is tap, tun, bridge or physical?</h3><p><code>ethtool -i tunOrTapDeviceName</code></p>
<ul>
<li>In case of a TAP device we will get: “bus-info: tap”.</li>
<li>In case of a TUN device we will get: “bus-info: tun”.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ethtool -i vnet0</span><br><span class="line">driver: tun</span><br><span class="line">version: 1.6</span><br><span class="line">firmware-version: </span><br><span class="line">expansion-rom-version: </span><br><span class="line">bus-info: tap</span><br><span class="line">supports-statistics: no</span><br><span class="line">supports-test: no</span><br><span class="line">supports-eeprom-access: no</span><br><span class="line">supports-register-dump: no</span><br><span class="line">supports-priv-flags: no</span><br></pre></td></tr></table></figure>

<h3 id="bind-irq-s-of-ethx-specific-cpu"><a href="#bind-irq-s-of-ethx-specific-cpu" class="headerlink" title="bind irq(s) of ethx specific cpu"></a>bind irq(s) of ethx specific cpu</h3><p><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/performance_tuning_guide/s-cpu-irq">irq binding</a></p>
<p><strong>do it by yourself</strong></p>
<ol>
<li>get irq of the ethx</li>
<li>set affinity of each irq</li>
</ol>
<p><strong>use vendor script</strong></p>
<ul>
<li>Mellanox: &#x2F;usr&#x2F;sbin&#x2F;set_irq_affinity_bynode.sh socket ethN</li>
<li>Chelsio: &#x2F;sbin&#x2F;t4_perftune.sh</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get irq of eth0, for ethx that support multiple queues, for each queues there is a irq number</span></span><br><span class="line"><span class="variable">$grep</span> eth0-TxRx /proc/interrupts | awk <span class="string">&#x27;&#123;printf &quot;  %s\n&quot;, $1&#125;&#x27;</span></span><br><span class="line">103:</span><br><span class="line">104:</span><br><span class="line">105:</span><br><span class="line">106:</span><br><span class="line">107:</span><br><span class="line">108:</span><br><span class="line">109:</span><br><span class="line">110:</span><br><span class="line">111:</span><br><span class="line">112:</span><br><span class="line">113:</span><br><span class="line">114:</span><br><span class="line">115:</span><br><span class="line">116:</span><br><span class="line">117:</span><br><span class="line">118:</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># cpu 0 for irq 103</span></span><br><span class="line"><span class="variable">$echo</span> 1 &gt; /proc/irq/103/smp_affinity</span><br></pre></td></tr></table></figure>

<h3 id="check-rss-of-ethx"><a href="#check-rss-of-ethx" class="headerlink" title="check rss of ethx"></a>check rss of ethx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#+++++++++++++++++++++++++++++ One Way++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line"><span class="comment"># if rss is enabled, ethx should have multiple queues</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># with hardware rss </span></span><br><span class="line"><span class="variable">$ls</span> /sys/class/net/eth0/queues/</span><br><span class="line">rx-0   rx-12  rx-16  rx-2   rx-23  rx-27  rx-30  rx-34  rx-38  rx-41  rx-45  rx-49  rx-52  rx-56  rx-6   rx-7  tx-1   tx-13  tx-17  tx-20  tx-24  tx-28  tx-31  tx-35  tx-39  tx-42  tx-46  tx-5   tx-53  tx-57  tx-60  tx-8</span><br><span class="line">rx-1   rx-13  rx-17  rx-20  rx-24  rx-28  rx-31  rx-35  rx-39  rx-42  rx-46  rx-5   rx-53  rx-57  rx-60  rx-8  tx-10  tx-14  tx-18  tx-21  tx-25  tx-29  tx-32  tx-36  tx-4   tx-43  tx-47  tx-50  tx-54  tx-58  tx-61  tx-9</span><br><span class="line">rx-10  rx-14  rx-18  rx-21  rx-25  rx-29  rx-32  rx-36  rx-4   rx-43  rx-47  rx-50  rx-54  rx-58  rx-61  rx-9  tx-11  tx-15  tx-19  tx-22  tx-26  tx-3   tx-33  tx-37  tx-40  tx-44  tx-48  tx-51  tx-55  tx-59  tx-62</span><br><span class="line">rx-11  rx-15  rx-19  rx-22  rx-26  rx-3   rx-33  rx-37  rx-40  rx-44  rx-48  rx-51  rx-55  rx-59  rx-62  tx-0  tx-12  tx-16  tx-2   tx-23  tx-27  tx-30  tx-34  tx-38  tx-41  tx-45  tx-49  tx-52  tx-56  tx-6   tx-7</span><br><span class="line"></span><br><span class="line"><span class="comment"># no rss</span></span><br><span class="line"><span class="variable">$ls</span> /sys/class/net/eth0/queues/</span><br><span class="line">rx-0 tx-0</span><br><span class="line"></span><br><span class="line"><span class="comment"># with RSS, there are multiple irqs, for each irq there are two queues rx-x and tx-x</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#+++++++++++++++++++++++++++++ Another Way++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line"><span class="variable">$ethtool</span> -l eth0</span><br><span class="line">Channel parameters <span class="keyword">for</span> eth0:</span><br><span class="line">Pre-<span class="built_in">set</span> maximums:</span><br><span class="line">RX:		0</span><br><span class="line">TX:		0</span><br><span class="line">Other:		0</span><br><span class="line">Combined:	1 --------------------------&gt; one queue, no RSS</span><br><span class="line">Current hardware settings:</span><br><span class="line">RX:		0</span><br><span class="line">TX:		0</span><br><span class="line">Other:		0</span><br><span class="line">Combined:	1</span><br><span class="line"></span><br><span class="line"><span class="variable">$ethtool</span> -l eth0</span><br><span class="line">Channel parameters <span class="keyword">for</span> eth0:</span><br><span class="line">Pre-<span class="built_in">set</span> maximums:</span><br><span class="line">RX:		0</span><br><span class="line">TX:		0</span><br><span class="line">Other:		1</span><br><span class="line">Combined:	63-------------------------&gt;63 queueus, RSS supported by hardware!!!</span><br><span class="line">Current hardware settings:</span><br><span class="line">RX:		0</span><br><span class="line">TX:		0</span><br><span class="line">Other:		1</span><br><span class="line">Combined:	63</span><br></pre></td></tr></table></figure>

<h3 id="get-queue-size-of-for-a-network-device"><a href="#get-queue-size-of-for-a-network-device" class="headerlink" title="get queue size of for a network device"></a>get queue size of for a network device</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Check current NIC queue sizes with ethtool -g</span></span><br><span class="line"><span class="variable">$ethtool</span> -g eth0</span><br><span class="line">Ring parameters <span class="keyword">for</span> eth0:</span><br><span class="line">Pre-<span class="built_in">set</span> maximums:</span><br><span class="line">RX:		4096</span><br><span class="line">RX Mini:	0</span><br><span class="line">RX Jumbo:	0</span><br><span class="line">TX:		4096</span><br><span class="line">Current hardware settings:</span><br><span class="line">RX:		512</span><br><span class="line">RX Mini:	0</span><br><span class="line">RX Jumbo:	0</span><br><span class="line">TX:		512</span><br><span class="line"></span><br><span class="line"><span class="comment">#Note: making these changes will, for most drivers, take the interface down and then bring it back up; connections to this interface will be interrupted. This may not matter much for a one-time change, though.</span></span><br><span class="line"><span class="variable">$ethtool</span> -G eth0 rx 4096</span><br></pre></td></tr></table></figure>
<h3 id="get-bus-info-for-a-network-device-like-eth0"><a href="#get-bus-info-for-a-network-device-like-eth0" class="headerlink" title="get bus info for a network device like eth0"></a>get bus info for a network device like eth0</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">################# use ethtool=====================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># you can also get bus info, driver info etc</span></span><br><span class="line"><span class="variable">$ethtool</span> -i eth0</span><br><span class="line">driver: mlx5_core      --------------------&gt; driver info</span><br><span class="line">version: 5.6-1.0.3</span><br><span class="line">firmware-version: 16.33.1048 (MT_0000000241)</span><br><span class="line">expansion-rom-version: </span><br><span class="line">bus-info: 0000:4b:00.0 --------------------&gt; bus info here</span><br><span class="line">supports-statistics: <span class="built_in">yes</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">################ check /sys filesystem ===========</span></span><br><span class="line"><span class="variable">$grep</span> PCI_SLOT_NAME /sys/class/net/*/device/uevent | grep eth0</span><br><span class="line">/sys/class/net/eth0/device/uevent:PCI_SLOT_NAME=0000:4b:00.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># check device for this (it&#x27;s physical function)</span></span><br><span class="line"><span class="variable">$lspci</span> -D | grep 0000:4b:00.0</span><br><span class="line">0000:4b:00.0 Ethernet controller: Mellanox Technologies MT27800 Family [ConnectX-5]</span><br><span class="line"></span><br><span class="line"><span class="comment"># show more details about this device</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$lspci</span> -vv -s 0000:4b:00.0</span><br><span class="line">4b:00.0 Ethernet controller: Mellanox Technologies MT27800 Family [ConnectX-5] ---------------------&gt;Mellanox Connect-5</span><br><span class="line">	Subsystem: Mellanox Technologies Device 0052</span><br><span class="line">	Physical Slot: 19                                                          ----------------------&gt;physical Slot</span><br><span class="line">    ...</span><br><span class="line">	Interrupt: pin A routed to IRQ 18                                          ----------------------&gt; IRQ</span><br><span class="line">	NUMA node: 0                                                               ----------------------&gt; Numa node it belongs to</span><br><span class="line">	Region 0: Memory at 9c000000 (64-bit, prefetchable) [size=32M]</span><br><span class="line">	Expansion ROM at 99000000 [disabled] [size=1M]</span><br><span class="line">    ....</span><br><span class="line">	Capabilities: [180 v1] Single Root I/O Virtualization (SR-IOV)             -----------------------&gt;Caps like SR-IOV</span><br><span class="line">		IOVCap:	Migration-, Interrupt Message Number: 000</span><br><span class="line">		IOVCtl:	Enable- Migration- Interrupt- MSE- ARIHierarchy+</span><br><span class="line">		IOVSta:	Migration-</span><br><span class="line">		Initial VFs: 127, Total VFs: 127, Number of VFs: 0, Function Dependency Link: 00</span><br><span class="line">		VF offset: 2, stride: 1, Device ID: 1018</span><br><span class="line">		Supported Page Size: 000007ff, System Page Size: 00000001</span><br><span class="line">		Region 0: Memory at 00000000a5f00000 (64-bit, prefetchable)</span><br><span class="line">		VF Migration: offset: 00000000, BIR: 0</span><br><span class="line">    ...</span><br><span class="line">	Kernel driver <span class="keyword">in</span> use: mlx5_core                                           -------------------------&gt; driver <span class="keyword">in</span> use</span><br><span class="line">	Kernel modules: mlx5_core</span><br><span class="line"></span><br><span class="line"><span class="comment">####################### another example##################################</span></span><br><span class="line"><span class="variable">$ethtool</span> -i enp75s17f2np0</span><br><span class="line">driver: mlx5_core</span><br><span class="line">version: 5.6-1.0.3</span><br><span class="line">firmware-version: 16.33.1048 (MT_0000000241)</span><br><span class="line">expansion-rom-version: </span><br><span class="line">bus-info: 0000:4b:11.2</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="variable">$lspci</span> -D | grep 0000:4b:11.2</span><br><span class="line">0000:4b:11.2 Ethernet controller: Mellanox Technologies MT27800 Family [ConnectX-5 Virtual Function]----&gt; VF</span><br><span class="line"></span><br><span class="line"><span class="variable">$lspci</span> -vv -s 0000:4b:11.2</span><br><span class="line">4b:11.2 Ethernet controller: Mellanox Technologies MT27800 Family [ConnectX-5 Virtual Function]  -----&gt; Mellanox VF</span><br><span class="line">	Subsystem: Mellanox Technologies Device 0052</span><br><span class="line">	NUMA node: 0                                                                                 ------&gt; no physical slot,no IRQ, numa node it blongs to</span><br><span class="line">	Region 0: [virtual] Memory at 9e900000 (64-bit, prefetchable) [size=1M]</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    Capabilities: [9c] MSI-X: Enable+ Count=6 Masked-                                            -------&gt; MSI-X with six msx-irqs</span><br><span class="line">        Vector table: BAR=0 offset=00002000</span><br><span class="line">        PBA: BAR=0 offset=00003000</span><br><span class="line"></span><br><span class="line">	Kernel driver <span class="keyword">in</span> use: mlx5_core</span><br><span class="line">	Kernel modules: mlx5_core</span><br></pre></td></tr></table></figure>

<h3 id="create-binding-interface-through-sysfs"><a href="#create-binding-interface-through-sysfs" class="headerlink" title="create binding interface through sysfs"></a>create binding interface through sysfs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#first check all existing bindings</span></span><br><span class="line"><span class="variable">$modprobe</span> --first-time bonding</span><br><span class="line"><span class="variable">$cat</span> /sys/class/net/bonding_masters</span><br><span class="line"></span><br><span class="line"><span class="comment"># create binding interface</span></span><br><span class="line"><span class="variable">$echo</span> +bond0 &gt;/sys/class/net/bonding_masters</span><br><span class="line">(after this <span class="comment">#ifconfig -a to check or /sys/class/net/bond1 created)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add slaves to binding interface</span></span><br><span class="line"><span class="variable">$ifconfig</span> eth0 down</span><br><span class="line"><span class="variable">$ifconfig</span> eth1 down</span><br><span class="line"><span class="variable">$echo</span> +eth0 &gt;/sys/class/net/bond1/bonding/slaves</span><br><span class="line"><span class="variable">$echo</span> +eth1 &gt;/sys/class/net/bond1/bonding/slaves</span><br><span class="line"></span><br><span class="line"><span class="comment"># configure binding interface like mode and its address</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$echo</span> active-backup &gt;/sys/class/net/bond1/bonding/mode</span><br><span class="line"><span class="variable">$ifconfig</span> bond1 192.168.100.1 netmask 255.255.255.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable bonding interface</span></span><br><span class="line"><span class="variable">$ifconfig</span> bond1 up</span><br><span class="line"><span class="comment"># (these will bring up all slaves in it)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> remove in revert order with &quot;-&quot; prefix</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
        <category>command</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>linux command</tag>
      </tags>
  </entry>
  <entry>
    <title>css_sass_basic</title>
    <url>/2020/07/09/css-sass-basic/</url>
    <content><![CDATA[<h1 id="SASS"><a href="#SASS" class="headerlink" title="SASS"></a>SASS</h1><p><img src="/images/web/css/less_sass_css.png" alt="CSS precompiler"></p>
<span id="more"></span>

<h2 id="convert-sass-scss-less-to-css"><a href="#convert-sass-scss-less-to-css" class="headerlink" title="convert sass scss less to css"></a>convert sass scss less to css</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$npm</span> install -g less</span><br><span class="line"><span class="variable">$lessc</span> xx.less &gt; xx.css</span><br><span class="line"></span><br><span class="line"><span class="variable">$npm</span> install -g sass</span><br><span class="line"><span class="variable">$sass</span> xx.scss xx.css</span><br><span class="line"><span class="variable">$sass</span> xx.sass xx.css</span><br><span class="line"></span><br><span class="line">watch mode <span class="keyword">for</span> s single scss</span><br><span class="line"><span class="variable">$sass</span> --watch xx.scss:xx.css</span><br><span class="line"></span><br><span class="line">watch mode <span class="keyword">for</span> a <span class="built_in">dir</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$sass</span> --watch a/scss:b/css</span><br></pre></td></tr></table></figure>
<h2 id="sass-syntax"><a href="#sass-syntax" class="headerlink" title="sass syntax"></a>sass syntax</h2><p>There are keywords and special characters in scss<br><strong>each keyword use <code>@keyword</code> like</strong></p>
<ul>
<li>@mixin: define mixin</li>
<li>@use: import module</li>
<li>@extend: inheritance</li>
<li>@inlcude: call mixin</li>
<li>@function: define a function</li>
<li>@if&#x2F;@else&#x2F;@for&#x2F;@while&#x2F;@each&#x2F;@return control</li>
</ul>
<p><strong>special character</strong></p>
<ul>
<li>% placeholder</li>
<li>&amp; access ancestors selector</li>
<li>$ variable</li>
<li># link string and variable if varialbe not used as the value of another property<h3 id="variable"><a href="#variable" class="headerlink" title="variable"></a>variable</h3>variable can be color, number, text.</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* global variable definition, var must start with $ as prefix */</span></span><br><span class="line"><span class="variable">$mainColor</span>: <span class="number">#963</span>;</span><br><span class="line"><span class="variable">$siteWidth</span>: <span class="number">1024px</span>;</span><br><span class="line"><span class="variable">$borderStyle</span>: dotted;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="comment">/* local vairable */</span></span><br><span class="line">  <span class="variable">$mainColor</span>: <span class="number">#100</span>;</span><br><span class="line">  <span class="comment">/* use variable, local var wins */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$mainColor</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$siteWidth</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">head &#123;</span><br><span class="line">  <span class="comment">/* use global one */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$mainColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h3><p>mixin is used to replace several properites, not one for variable, use @include to contain the mixin</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> error(<span class="variable">$bW</span>: <span class="number">2px</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">$bW</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login-error</span> &#123;</span><br><span class="line">  <span class="comment">//@include error() is ok also;</span></span><br><span class="line">  <span class="keyword">@include</span> error;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.logout-error</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> error(<span class="number">10px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="selector-nesting"><a href="#selector-nesting" class="headerlink" title="selector nesting"></a>selector nesting</h3><p>nested selector is child of parent, when converted to css, <code>a space is added between parent and child</code> but for pesudo class and pesudo element they must no space, hence in these two case, we should use <code>&amp;</code> to refer its parent directly.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//converted to css</span></span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a space between section and nav selector</span></span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#0982c1</span>;</span><br><span class="line">      <span class="comment">/* &amp; 引用父选择器  section nav a</span></span><br><span class="line"><span class="comment">       with   &amp;: section nav a:hover</span></span><br><span class="line"><span class="comment">       without&amp;: section nav a :hover   --&gt;not working for hover due to extra space.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><p>extend to inherits all properties from its parent</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">%block_base &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="comment">//extend base class</span></span><br><span class="line">  <span class="keyword">@extend</span> %block_base</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h3><p>must add space before and after operation</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$bW</span>: <span class="number">2px</span>;</span><br><span class="line"><span class="variable">$double_bW</span>: <span class="variable">$bW</span> * <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h3 id="color-function"><a href="#color-function" class="headerlink" title="color function"></a>color function</h3><p>built-in color functions</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lighten(<span class="variable">$color</span>, 10%); /* 返回的颜色在<span class="variable">$color</span>基础上变亮10% */</span><br><span class="line">darken(<span class="variable">$color</span>, 10%); /* 返回的颜色在<span class="variable">$color</span>基础上变暗10% */</span><br><span class="line">saturate(<span class="variable">$color</span>, 10%); /* 返回的颜色在<span class="variable">$color</span>基础上饱和度增加10% */</span><br><span class="line">desaturate(<span class="variable">$color</span>, 10%); /* 返回的颜色在<span class="variable">$color</span>基础上饱和度减少10% */</span><br><span class="line">grayscale(<span class="variable">$color</span>); /* 返回<span class="variable">$color</span>的灰度色*/</span><br><span class="line">complement(<span class="variable">$color</span>); /* 返回<span class="variable">$color</span>的补色 */</span><br><span class="line">invert(<span class="variable">$color</span>); /* 返回<span class="variable">$color</span>的反相色 */</span><br><span class="line">mix(<span class="variable">$color1</span>, <span class="variable">$color2</span>, 50%); /* <span class="variable">$color1</span> 和 <span class="variable">$color2</span> 的 50% 混合色*/</span><br></pre></td></tr></table></figure>
<p>Except color functions, scss also has other built-in functions for number, string, list, map etc, refer to <a href="https://sass-lang.com/documentation/modules">built-in function</a>.</p>
<h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>Import another scss file at compile time, at last(after generate css) you only see one csss</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//old way</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;base&#x27;</span></span><br><span class="line">// find base.scss at current folder</span><br><span class="line"><span class="keyword">@use</span> <span class="string">&#x27;base&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="if-x2F-else"><a href="#if-x2F-else" class="headerlink" title="if&#x2F;else"></a>if&#x2F;else</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@if</span> <span class="number">5</span> &lt; <span class="number">3</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> dotted;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@if</span> null &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> double;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$type</span>: monster;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="variable">$type</span> == ocean &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">  &#125; <span class="keyword">@else</span> if <span class="variable">$type</span> == matador &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125; <span class="keyword">@else</span> if <span class="variable">$type</span> == monster &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//<span class="doctag">note:</span> number and string use same operator &quot;==&quot; and no () for condition;</span></span><br></pre></td></tr></table></figure>
<h3 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* include 3, 1, 2, 3 */</span></span><br><span class="line"><span class="comment">/* @for..from..through to iterate a range of number */</span></span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">2</span> &#123;</span><br><span class="line"><span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//converted to css as you can see #&#123;$i&#125; used to link string and variable!!!</span></span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">4em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@each ...in bot work for list and map</span></span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$var</span> in &lt;list&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$animal</span> in puma, sea-slug, egret, salamander &#123;</span><br><span class="line">    .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</span><br><span class="line">        <span class="attribute">background-image</span>: url(<span class="string">&#x27;/images/#&#123;$animal&#125;.png&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$i</span>: <span class="number">6</span>;</span><br><span class="line"><span class="keyword">@while</span> <span class="variable">$i</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>; &#125;</span><br><span class="line">    <span class="variable">$i</span>: <span class="variable">$i</span> - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="list-x2F-map-built-in"><a href="#list-x2F-map-built-in" class="headerlink" title="list&#x2F;map built-in"></a>list&#x2F;map built-in</h3><p>list items can be seperated by space, comma<br><strong>list functions</strong></p>
<ul>
<li>length($list)</li>
<li>join($list1,$list2,[$separator]) return a new list, the orignal unchanged</li>
<li>append($list,$value,[$separator]), return a new list, the orignal unchanged</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//define a list with different separators(can only be comma or space!!!)</span></span><br><span class="line"><span class="variable">$linkColor</span>: <span class="number">#08c</span> <span class="number">#333</span>; <span class="comment">//第一个值为默认值，第二个鼠标滑过值</span></span><br><span class="line"><span class="variable">$linkColor</span>: <span class="number">#08c</span>,<span class="number">#333</span>; <span class="comment">//第一个值为默认值，第二个鼠标滑过值</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: nth(<span class="variable">$linkColor</span>, <span class="number">1</span>);</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: nth(<span class="variable">$linkColor</span>, <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//append a new element and assign to itself, no quote for green</span></span><br><span class="line">  <span class="variable">$linkColor</span>: append(<span class="variable">$linkColor</span>, green);</span><br><span class="line">  <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: nth(<span class="variable">$linkColor</span>, <span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>map functions</strong></p>
<ul>
<li>map-get($map, $key)</li>
<li>map-keys($map)</li>
<li>map-values($map)<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//define a map</span></span><br><span class="line"><span class="variable">$headings</span>: (</span><br><span class="line">  h1: <span class="number">2em</span>,</span><br><span class="line">  h2: <span class="number">1.5em</span>,</span><br><span class="line">  h3: <span class="number">1.2em</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$header</span>, <span class="variable">$size</span> in <span class="variable">$headings</span> &#123;</span><br><span class="line">  #&#123;<span class="variable">$header</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: map-get(<span class="variable">$headings</span>, h1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="placeholder"><a href="#placeholder" class="headerlink" title="placeholder"></a>placeholder</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">%base &#123;</span><br><span class="line">    <span class="comment">// if %base is not used, this part will be not converted to css file!!</span></span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@function</span> size() &#123;</span><br><span class="line">  <span class="keyword">@return</span> <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.body</span> &#123;</span><br><span class="line">  <span class="comment">//() is a must to call a function</span></span><br><span class="line">  <span class="attribute">font-size</span>: size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ul>
<li><a href="http://caibaojian.com/sass-less-stylus.html">sass less stylus</a></li>
<li><a href="https://sass-lang.com/guide">sass basic</a></li>
<li><a href="https://www.w3schools.com/sass/sass_intro.asp">sass tutorial</a></li>
<li><a href="https://sass-lang.com/documentation">scss document</a></li>
</ul>
]]></content>
      <categories>
        <category>web</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>scss</tag>
        <tag>sass</tag>
      </tags>
  </entry>
  <entry>
    <title>distribute_HA_keepalived</title>
    <url>/2021/06/15/distribute-HA-keepalived/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Load balancing is a method of distributing IP traffic across a cluster of real servers, providing one or more highly available virtual services. When designing load balanced topologies, it is important to <code>account for the availability of the load balancer itself as well as the real servers behind it</code>.</p>
<p>Keepalived provides frameworks for both load balancing and high availability. The load balancing framework relies on the well-known and widely used Linux Virtual Server (IPVS) kernel module, which provides Layer 4 load balancing. Keepalived implements a set of health checkers to dynamically and adaptively maintain and manage load balanced server pools according to their health. </p>
<p>high-availability is achieved by the Virtual Router Redundancy Protocol (VRRP). VRRP is a fundamental brick for router failover. In addition, Keepalived implements a set of hooks to the VRRP finite state machine providing low-level and high-speed protocol interactions. In order to offer fastest network failure detection, <code>Keepalived implements the Bidirectional Forwarding Detection (BFD) protocol</code>. VRRP state transition can take into account BFD hints to drive fast state transition. <code>Keepalived frameworks can be used independently or all together to provide resilient infrastructures.</code></p>
<p>In short, Keepalived provides two main functions:</p>
<ul>
<li>Health checking for LVS systems</li>
<li>Implementation of the VRRPv2 stack to handle load balancer failover<span id="more"></span></li>
</ul>
<p>In this acticle, we only talk about high-availability， load balancer failover.</p>
<h1 id="Inside-keepalived"><a href="#Inside-keepalived" class="headerlink" title="Inside keepalived"></a>Inside keepalived</h1><h2 id="VRRP"><a href="#VRRP" class="headerlink" title="VRRP"></a>VRRP</h2><p>The Virtual Router Redundancy Protocol (VRRP) is a computer networking protocol that provides for <code>automatic assignment of available Internet Protocol (IP) routers to participating hosts</code>. This increases the availability and reliability of routing paths via automatic default gateway selections on an IP subnetwork.</p>
<p>The protocol achieves this by creation of virtual routers, which are an abstract representation of multiple routers, i.e. Primary&#x2F;Active and Secondary&#x2F;Standby routers, acting as a group. <code>The virtual router is assigned to act as a default gateway of participating hosts, instead of a physical router</code>. If the physical router that is routing packets on behalf of the virtual router fails, another physical router is selected to automatically replace it. The physical router that is forwarding packets at any given time is called the Primary&#x2F;Active router.</p>
<p><strong>VRRP provides information on the state of a router, not the routes processed and exchanged by that router</strong>.</p>
<p>Physical routers within the virtual router must <code>communicate within themselves using packets with multicast IP address 224.0.0.18(newly implementation support unicast heartbeat to peers)</code> and IP protocol number 112.</p>
<p>Routers have a priority of between 1 and 254 and the router with the highest priority will become the Primary&#x2F;Active. The default priority is 100.</p>
<p><strong>Elections of Primary&#x2F;Active routers</strong>  </p>
<p>A failure to receive a multicast packet from the Primary&#x2F;Active router for <code>a period longer than three times the advertisement</code> timer causes the Secondary&#x2F;Standby routers to assume that the Primary&#x2F;Active router is dead. The virtual router then transitions into an unsteady state and an election process is initiated to select the next Primary&#x2F;Active router from the Secondary&#x2F;Standby routers. This is fulfilled through the use of multicast packets.</p>
<p><code>Secondary/Standby router(s) are only supposed to send multicast packets during an election process. One exception to this rule is when a physical router is configured with a higher priority than the current Primary/Active, which means that on connection to the network it will preempt the Primary/Active status</code>. This allows a system administrator to force a physical router to the Primary&#x2F;Active state immediately after booting, for example when that particular router is more powerful than others within the virtual router. The Secondary&#x2F;Standby router with the highest priority becomes the Primary&#x2F;Active router by raising its priority above that of the current Primary&#x2F;Active. It will then take responsibility for routing packets sent to the virtual gateway’s MAC address. In cases where Secondary&#x2F;Standby routers all have the same priority, the Secondary&#x2F;Standby router with the highest IP address becomes the Primary&#x2F;Active router.</p>
<p><code>All physical routers acting as a virtual router must be in the same local area network (LAN) segment(newly implementation support unicast)</code>. Communication within the virtual router takes place periodically. This period can be adjusted by changing advertisement interval timers. The shorter the advertisement interval, the shorter the black hole period, though at the expense of more traffic in the subnet.</p>
<p><strong>Once the new master has been elected, it sends out a “gratuitous ARP.”</strong>, every host has an ARP table that ties IP addresses to Ethernet addresses. A gratuitous ARP is an unsolicited message with an IP address to Ethernet address mapping. <strong>All hosts receiving the gratuitous ARP update their tables, which effectively means that the virtual IP address is owned by a new device on the network</strong>.</p>
<p><strong>Note that whether we use VRRP in multicast or unicast mode, we are not using UDP&#x2F;IP or TCP&#x2F;IP. VRRP is its own protocol on top of IP that is independent of either of those</strong></p>
<h2 id="keepalived-cases"><a href="#keepalived-cases" class="headerlink" title="keepalived cases"></a>keepalived cases</h2><p>Even keepalived supports nodes located at different subnet, but the best choice is to run them at same subnet.</p>
<p><strong>different subnets nodes</strong>  </p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># VRRP advertisements ordinarily go out over multicast. This </span><br><span class="line"># configuration paramter causes keepalived to send them</span><br><span class="line"># as unicasts. This specification can be useful in environments</span><br><span class="line"># where multicast isn&#x27;t supported or in instances where you want</span><br><span class="line"># to limit which devices see your VRRP announcements. The IP</span><br><span class="line"># address(es) can be IPv4 or IPv6, and indicate the real IP of</span><br><span class="line"># other members.</span><br><span class="line">unicast_peer &#123;</span><br><span class="line">    10.5.132.122</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>nodes are at same subnet, no across router</strong></p>
<p><img src="https://cyun.tech/images/k8s/keepalived_ha.svg" alt="HA"></p>
<p><strong>Two nodes runs keepalived</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">node1<span class="comment"># apt-get install -y keepalived</span></span><br><span class="line">node2<span class="comment"># apt-get install -y keepalived</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Centos7</span></span><br><span class="line">node1<span class="comment"># yum install -y keepalived</span></span><br><span class="line">node2<span class="comment"># yum install -y keepalived</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># node1 keepalived conf</span></span><br><span class="line"></span><br><span class="line">node1<span class="comment"># cat /etc/keepalived/keepalived.conf</span></span><br><span class="line">global_defs &#123;                                                                   </span><br><span class="line">   notification_email &#123;                                                         </span><br><span class="line">      jason_lkm@163.com</span><br><span class="line">   &#125;                                                                            </span><br><span class="line">   notification_email_from keepalived@cyun.tech                        </span><br><span class="line">   smtp_server 192.168.100.1                                                   </span><br><span class="line">   smtp_connect_timeout 30                                                      </span><br><span class="line">   router_id LVS_DEVEL                                                          </span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">  state MASTER</span><br><span class="line">  interface eth0</span><br><span class="line">  virtual_router_id 51</span><br><span class="line">  priority 100</span><br><span class="line">  advert_int 1</span><br><span class="line">  authentication &#123;</span><br><span class="line">    auth_type PASS</span><br><span class="line">    auth_pass 12345</span><br><span class="line">  &#125;</span><br><span class="line">  virtual_ipaddress &#123;</span><br><span class="line">    10.117.5.123 dev eth0</span><br><span class="line">    <span class="comment">#10.117.5.111 dev eth0</span></span><br><span class="line">    <span class="comment"># should be nginx VIP(it should be public IP in production), nginx should run at this node as well</span></span><br><span class="line">    <span class="comment"># (nginx can listen on any address even it&#x27;s not local or exist on interface)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node1<span class="comment"># service keepalived restart</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#node2 keepalived </span></span><br><span class="line">node2<span class="comment"># cat /etc/keepalived/keepalived.conf</span></span><br><span class="line"></span><br><span class="line">global_defs &#123;                                                                   </span><br><span class="line">   notification_email &#123;                                                         </span><br><span class="line">     jason_lkm@163.com</span><br><span class="line">   &#125;                                                                            </span><br><span class="line">   notification_email_from keepalived@cyun.tech                        </span><br><span class="line">   smtp_server 192.168.100.1                                                   </span><br><span class="line">   smtp_connect_timeout 30                                                      </span><br><span class="line">   router_id LVS_DEVEL                                                          </span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">  state BACKUP</span><br><span class="line">  interface eth0</span><br><span class="line">  virtual_router_id 51</span><br><span class="line">  priority 80</span><br><span class="line">  advert_int 1</span><br><span class="line">  authentication &#123;</span><br><span class="line">    auth_type PASS</span><br><span class="line">    auth_pass 12345</span><br><span class="line">  &#125;</span><br><span class="line">  virtual_ipaddress &#123;</span><br><span class="line">    10.117.5.123 dev eth0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">node2<span class="comment"># service keepalived restart</span></span><br></pre></td></tr></table></figure>

<ul>
<li>vrrp_instance defines an individual instance of the VRRP protocol running on an interface.</li>
<li>state defines the initial state that the instance should start in, but may not be final state due to master selection algorithm.</li>
<li>interface defines the interface that VRRP runs on.</li>
<li>virtual_router_id is the unique identifier, should be same for the all nodes.</li>
<li>priority is the advertised priority used for master&#x2F;slave election.</li>
<li>advert_int specifies the frequency that advertisements are sent at (1 second, in this case).</li>
<li>authentication specifies the information necessary for servers participating in VRRP to authenticate with each other. In this case, a simple password is defined.</li>
<li><strong>virtual_ipaddress defines the IP addresses (there can be multiple) that VRRP is responsible for.</strong></li>
</ul>
<p><strong>If you’re using a host-based firewall, such as firewalld or iptables, then you need to add the necessary rules to permit IP protocol 112 traffic.</strong></p>
<h2 id="Debug-keepalived"><a href="#Debug-keepalived" class="headerlink" title="Debug keepalived"></a>Debug keepalived</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check virtual ip configured or not on master</span></span><br><span class="line">$ ip addr show eth0</span><br><span class="line">$ service keepalived status</span><br><span class="line">$ tcpdump -i eth0 vrrp</span><br><span class="line"></span><br><span class="line"><span class="comment"># if virtual IP is not local</span></span><br><span class="line">$ sysctl -w net.ipv4.ip_nonlocal_bind=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># run keepalived in forground and detail logs!!!</span></span><br><span class="line">$ keepalived -d -D -l -n</span><br></pre></td></tr></table></figure>
<h1 id="split-brain"><a href="#split-brain" class="headerlink" title="split-brain"></a>split-brain</h1><p>In a highly available (HA) system, <code>when the &quot;heartbeat&quot; linking the two nodes is disconnected</code>, the HA system, which was originally a whole and coordinated in action, splits into two independent individuals. Since they lost contact with each other, they thought it was the other party that had malfunctioned. The HA software on the two nodes is like a “brain splitter”. <code>If they compete for &quot;shared resources&quot; and compete for &quot;application services&quot;, serious consequences will occur-or if the shared resources are divided and the &quot;services&quot; on both sides will </code>not&#96;. Coming; or both “services” are up, but at the same time reading and writing “shared storage”, resulting in data corruption (common errors such as online logs polled by the database).</p>
<p><strong>Two active nodes, same virtual IP configured at differetn nodes</strong></p>
<p><strong>Why it happens</strong></p>
<ul>
<li>The heartbeat link between the pair of highly available servers fails, which prevents normal communication. If the heartbeat line is broken (including broken, aging).</li>
<li>Because the network card and related drivers are broken, IP configuration and conflict problems (network card direct connection).</li>
<li>Due to the failure of the equipment connected between the heartbeat cables (network card and switch).</li>
<li>There is a problem with the arbitration machine (using the arbitration scheme).</li>
<li>The iptables firewall is turned on on the high availability server to block the transmission of heartbeat messages.</li>
<li>In the same VRRP instance in the Keepalived configuration, if the virtual_router_id parameter settings on both ends are inconsistent, split-brain problems can also occur.</li>
<li>vrrp instance names are inconsistent and their priorities are the same</li>
</ul>
<h2 id="avoid-it"><a href="#avoid-it" class="headerlink" title="avoid it"></a>avoid it</h2><ul>
<li><p>Add redundant heartbeat wires, for example: double-line wires (heartbeat wires are also HA), to minimize the occurrence of “split brain”</p>
</li>
<li><p>Enable disk lock. The serving party locks the shared disk, and when the “split brain” occurs, let the other party completely “snatch away” the shared disk resources. But there is also a problem with using locked disks. If the party occupying the shared disk does not actively “unlock” it, the other party will never get the shared disk. In reality, if the service node suddenly crashes or crashes, it is impossible to execute the unlock command. The backup node cannot take over shared resources and application services. So someone designed a “smart” lock in HA. That is: the party that is serving only enables the disk lock when it finds that the heartbeat line is all disconnected (the peer end is not detected). Usually it is not locked.</p>
</li>
<li><p>Set up an arbitration mechanism. For example, set the reference IP (such as the gateway IP). When the heartbeat line is completely disconnected, both nodes ping the reference IP. If they fail, the breakpoint is at the local end. Not only the “heartbeat”, but also the external “service” of the local network link is broken, even if the application service is started (or continued) is useless, then actively give up competition and let the end that can ping the reference IP to start the service . More secure, the party that cannot ping the reference IP simply restarts itself to completely release the shared resources that may be occupied.</p>
</li>
<li><p>Script detection and alarm</p>
</li>
</ul>
<p><strong>The last two are commonly used in production env</strong></p>
<h2 id="troubleshooting"><a href="#troubleshooting" class="headerlink" title="troubleshooting"></a>troubleshooting</h2><p>Check why  </p>
<ol>
<li>first make sure, config is correct, check <code>/etc/keepalived/keepalived.conf</code></li>
<li>check route is ok</li>
<li>check iptables to allow vrrp</li>
</ol>
<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul>
<li><a href="https://keepalived.readthedocs.io/en/latest/">Keepalived User Guide</a></li>
<li><a href="https://en.wikipedia.org/wiki/Virtual_Router_Redundancy_Protocol">VRRP wiki</a></li>
<li><a href="https://dzone.com/articles/inside-vrrp-packet-captures">VRRP Example</a></li>
</ul>
]]></content>
      <categories>
        <category>distribute</category>
        <category>keepalived</category>
      </categories>
      <tags>
        <tag>distribute</tag>
        <tag>keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-core-tech-aufs</title>
    <url>/2019/10/11/docker-core-tech-aufs/</url>
    <content><![CDATA[<h1 id="AUFS"><a href="#AUFS" class="headerlink" title="AUFS"></a>AUFS</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2> - advanced multi layered unification filesystem
<p>Aufs is a stackable unification filesystem such as Union fs  which unifies several directories and provides a merged single directory.</p>
<ul>
<li>overlay2 is the preferred storage driver, for all currently supported Linux distributions, and requires no extra configuration.</li>
<li>aufs was the preferred storage driver for Docker 18.06 and older, when running on Ubuntu 14.04 on kernel 3.13 which had no support for overlay2</li>
</ul>
<p>AUFS is not merged into linux main branch, only ubuntu&#x2F;debian support it!!!</p>
<span id="more"></span>

<h2 id="Core-Concept"><a href="#Core-Concept" class="headerlink" title="Core Concept"></a>Core Concept</h2><p>Here is an example to merge two dirs into a single one, let’s explain it in details.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mount -t aufs -o br=/tmp/dir1:/tmp/dir2 none /tmp/uniondir</span></span><br></pre></td></tr></table></figure>
<p>This is the basic usage for aufs, more options refer to <br>each dir is called branch, the dir has order, the first one call top branch(br0), the later called bottom branch(brX)<br><strong>Order is important as</strong></p>
<ul>
<li><mark class="label success">if same file(with path) exists in different branches, the top branch wins</mark></li>
<li><mark class="label success">Only top branch has RW attribute, others has RO if not set explicitly</mark></li>
</ul>
<h2 id="AUFS-create-x2F-modify-x2F-delete"><a href="#AUFS-create-x2F-modify-x2F-delete" class="headerlink" title="AUFS create&#x2F;modify&#x2F;delete"></a>AUFS create&#x2F;modify&#x2F;delete</h2><p>check aufs is supported or not</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grep aufs /proc/filesystems</span></span><br><span class="line">nodev   aufs</span><br></pre></td></tr></table></figure>
<p>then mount two dirs into single one</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mount -t aufs -o br=/tmp/dir1:/tmp/dir2 none /tmp/udir</span></span><br><span class="line">here is the output after mount</span><br><span class="line"><span class="comment"># tree .</span></span><br><span class="line">.</span><br><span class="line">|-- dir1</span><br><span class="line">|   -- file1</span><br><span class="line">|-- dir2</span><br><span class="line">|   -- file2</span><br><span class="line">-- udir</span><br><span class="line">    |-- file1</span><br><span class="line">    -- file2</span><br></pre></td></tr></table></figure>
<h3 id="Create-file"><a href="#Create-file" class="headerlink" title="Create file"></a>Create file</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># touch udir/file3</span></span><br><span class="line"><span class="comment"># tree .</span></span><br><span class="line">.</span><br><span class="line">|-- dir1</span><br><span class="line">|   |-- file1</span><br><span class="line">|   -- file3</span><br><span class="line">|-- dir2</span><br><span class="line">|   -- file2</span><br><span class="line">-- udir</span><br><span class="line">    |-- file1</span><br><span class="line">    |-- file2</span><br><span class="line">    -- file3</span><br></pre></td></tr></table></figure>
<p><mark>As you can see new file is created at RW branch</mark></p>
<h3 id="modify-file"><a href="#modify-file" class="headerlink" title="modify file"></a>modify file</h3><p><strong>modify file from RW branch</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo &#x27;f1&#x27; &gt;&gt;udir/file1</span></span><br><span class="line"><span class="comment"># cat dir1/file1</span></span><br><span class="line">f1</span><br><span class="line"><span class="comment"># cat udir/file1</span></span><br><span class="line">f1</span><br><span class="line"><span class="comment"># tree .</span></span><br><span class="line">.</span><br><span class="line">|-- dir1</span><br><span class="line">|   |-- file1</span><br><span class="line">|   -- file3</span><br><span class="line">|-- dir2</span><br><span class="line">|   -- file2</span><br><span class="line">-- udir</span><br><span class="line">    |-- file1</span><br><span class="line">    |-- file2</span><br><span class="line">    -- file3</span><br></pre></td></tr></table></figure>
<p><mark>file is updated both in aufs and it’s source</mark></p>
<p><strong>modify file from RO branch</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo &#x27;f2&#x27; &gt;&gt;udir/file2</span></span><br><span class="line"><span class="comment"># cat udir/file2</span></span><br><span class="line">f2</span><br><span class="line"><span class="comment"># cat dir2/file2 (unchanged original file2 is empty)</span></span><br><span class="line"><span class="comment"># tree .</span></span><br><span class="line">.</span><br><span class="line">|-- dir1</span><br><span class="line">|   |-- file1</span><br><span class="line">|   |-- file2 ----------&gt;copied file2</span><br><span class="line">|   -- file3</span><br><span class="line">|-- dir2</span><br><span class="line">|   -- file2</span><br><span class="line">-- udir</span><br><span class="line">    |-- file1</span><br><span class="line">    |-- file2</span><br><span class="line">    -- file3</span><br></pre></td></tr></table></figure>
<p><mark>file is coped to RW branch, the original one unchanged</mark></p>
<h3 id="Delete-file"><a href="#Delete-file" class="headerlink" title="Delete file"></a>Delete file</h3><p><strong>delete file from RW</strong><br>File is deleted from disk as well</p>
<p><strong>delete file from RO branch</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tree -a .</span></span><br><span class="line">.</span><br><span class="line">|-- dir1</span><br><span class="line">|   |-- file1</span><br><span class="line">|   |-- .wh..wh.aufs</span><br><span class="line">|   |-- .wh..wh.orph</span><br><span class="line">|   -- .wh..wh.plnk</span><br><span class="line">|-- dir2</span><br><span class="line">|   -- file2</span><br><span class="line">-- udir</span><br><span class="line">    |-- file1</span><br><span class="line">    -- file2</span><br><span class="line"><span class="comment"># rm udir/file2  ----&gt;remove file2 from aufs</span></span><br><span class="line"><span class="comment"># tree -a .</span></span><br><span class="line">.</span><br><span class="line">|-- dir1</span><br><span class="line">|   |-- file1</span><br><span class="line">|   |-- .wh.file2  --------------&gt;whiteout file is created</span><br><span class="line">|   |-- .wh..wh.aufs</span><br><span class="line">|   |-- .wh..wh.orph</span><br><span class="line">|   -- .wh..wh.plnk</span><br><span class="line">|-- dir2</span><br><span class="line">|   -- file2</span><br><span class="line">-- udir</span><br><span class="line">    -- file1    ----------------&gt;can not see file2 from udir</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># rm dir1/.wh.file2  --------&gt;remove whiteout file for file2</span></span><br><span class="line"><span class="comment"># tree -a .</span></span><br><span class="line">.</span><br><span class="line">|-- dir1</span><br><span class="line">|   |-- file1</span><br><span class="line">|   |-- .wh..wh.aufs</span><br><span class="line">|   |-- .wh..wh.orph</span><br><span class="line">|   -- .wh..wh.plnk</span><br><span class="line">|-- dir2</span><br><span class="line">|   -- file2</span><br><span class="line">-- udir</span><br><span class="line">    |-- file1</span><br><span class="line">    -- file2   ------&gt;file2 is back after remove whiteout file</span><br></pre></td></tr></table></figure>
<p><mark>Note: actually file is hided, so that you can&#39;t see it from udir<br>as a whiteout file is created in the RW branch to tell aufs does not show the file which is deleted<mark></p>
<h2 id="check-mount-point-and-info"><a href="#check-mount-point-and-info" class="headerlink" title="check mount point and info"></a>check mount point and info</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/tmp/udir must exist before mount</span><br><span class="line"><span class="comment"># mount -t aufs -o br=/tmp/dir1:/tmp/dir2 none /tmp/udir</span></span><br><span class="line"><span class="comment"># mount | grep aufs</span></span><br><span class="line">none on /tmp/udir <span class="built_in">type</span> aufs (rw,relatime,si=226e11c4af0fb920) ---&gt; si is the <span class="built_in">id</span> <span class="keyword">for</span> thi mount</span><br><span class="line"></span><br><span class="line">use this si to check the mount info <span class="keyword">for</span> it.</span><br><span class="line"><span class="comment"># ls -l /sys/fs/aufs/si_226e11c4af0fb920/</span></span><br><span class="line">total 0</span><br><span class="line">-r--r--r-- 1 root root 4096 Oct 14 11:05 br0</span><br><span class="line">-r--r--r-- 1 root root 4096 Oct 14 11:05 br1</span><br><span class="line">-r--r--r-- 1 root root 4096 Oct 14 11:05 brid0</span><br><span class="line">-r--r--r-- 1 root root 4096 Oct 14 11:05 brid1</span><br><span class="line">-r--r--r-- 1 root root 4096 Oct 14 11:05 xi_path</span><br><span class="line"></span><br><span class="line"><span class="comment"># cat /sys/fs/aufs/si_226e11c4af0fb920/br0</span></span><br><span class="line">/tmp/dir1=rw         ---&gt;<span class="built_in">source</span> <span class="built_in">dir</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cat /sys/fs/aufs/si_226e11c4af0fb920/br1</span></span><br><span class="line">/tmp/dir2=ro         ---&gt;<span class="built_in">source</span> <span class="built_in">dir</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
        <category>core-tech</category>
      </categories>
      <tags>
        <tag>aufs</tag>
        <tag>filesystem</tag>
      </tags>
  </entry>
  <entry>
    <title>distribute_zookeeper</title>
    <url>/2021/04/23/distribute-zookeeper/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Apache ZooKeeper is basically a <code>distributed(cluster) coordination service for managing a large set of hosts</code>. Coordinating and managing the service in the distributed environment is really a very complicated process. Apache ZooKeeper, with its simple architecture and API, solves this issue. <code>ZooKeeper allows the developer to focus on the core application logic without being worried about the distributed nature of the application</code>.</p>
<p>Apache ZooKeeper <code>is basically a service that is used by the cluster to coordinate between themselves</code> and maintain the shared data with the robust synchronization techniques.</p>
<p>Apache ZooKeeper is <code>itself a distributed application</code> providing services for writing the distributed application.</p>
<span id="more"></span>
<h1 id="Distributed-Application"><a href="#Distributed-Application" class="headerlink" title="Distributed Application"></a>Distributed Application</h1><p>A distributed application is the application that can run on the multiple systems in a network simultaneously by coordinating among themselves in order to complete the specific task in an efficient manner. The distributed application can complete the complex and the time-consuming tasks in minutes as compared to the non-distributed application that will take hours to complete the task.</p>
<p>The distributed application uses the computing capabilities of all the machines involved. We can further reduce the time to complete the task by configuring the distributed application to run on more nodes in the cluster.</p>
<p><code>A distributed application consists of two parts</code>, that is, Server and Client application. The server applications are actually distributed and they have a common interface so that the clients can connect to any server in a cluster and get the same result. The client applications were the tools for interacting with the distributed application.</p>
<p><strong>Benefits of Distributed Applications</strong></p>
<ul>
<li>Reliability − If the single node or the few systems fails, then it doesn’t make the whole system fail.</li>
<li>Scalability − We can easily increase the performance when needed by adding more machines with the minor changes in the application configuration without any downtime.</li>
<li>Transparency − It hides the complexity of the entire system and depicts itself as a single entity or application.</li>
</ul>
<h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><p><strong>The various services provided by Apache ZooKeeper are as follows</strong></p>
<ul>
<li>Naming service − This service is for identifying the nodes in the cluster by the name. This service is similar to DNS, but for nodes.</li>
<li>Configuration management − This service provides the latest and up-to-date configuration information of a system for the joining node.</li>
<li>Cluster management − This service keeps the status of the Joining or leaving of a node in the cluster and the node status in real-time.</li>
<li>Leader election − This service elects a node as a leader for the coordination purpose.</li>
<li>Locking and synchronization service − This service locks the data while modifying it. It helps in automatic fail recovery while connecting the other distributed applications such as Apache HBase.</li>
<li>Highly reliable data registry − It offers data availability even when one or a few nodes goes down.</li>
</ul>
<h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><p><img src="https://techvidvan.com/tutorials/wp-content/uploads/sites/2/2020/08/Zookeeper-Architecture-TV.jpg" alt="Architecture "></p>
<ul>
<li><p>Server: The server sends an acknowledge when any client connects. In the case when there is no response from the connected server, the <code>client automatically redirects</code> the message to another server.</p>
</li>
<li><p>Client: Client is one of the nodes in the distributed application cluster. It helps you to accesses information from the server. Every client sends a message to the server at regular intervals that helps the server to know that the client is alive.</p>
</li>
<li><p>Leader: One of the servers is designated a Leader. It gives all the information to the clients as well as an acknowledgment that the server is alive. It would performs <code>automatic recovery if any of the connected nodes failed</code>.</p>
</li>
<li><p>Follower: Server node which follows leader instruction is called a follower.</p>
<ul>
<li>Client <code>read requests are handled by the correspondingly connected Zookeeper server</code></li>
<li>The client <code>writes requests are handled by the Zookeeper leader</code>.</li>
</ul>
</li>
<li><p>Ensemble&#x2F;Cluster: Group of Zookeeper servers which is called ensemble or a Cluster. You can use ZooKeeper infrastructure in the cluster mode to have the system at the optimal value when you are running the Apache.</p>
</li>
</ul>
<h2 id="Writes-in-Zookeeper"><a href="#Writes-in-Zookeeper" class="headerlink" title="Writes in Zookeeper"></a>Writes in Zookeeper</h2><p>In Zookeeper, all the writes go through the Master(leader) node. <code>Due to this all the writes are sequential</code>. While performing the write operation in Zookeeper, each of the servers which are attached to that client persists data along with the master. <code>This updates all the servers(follower, leader etc) about the data</code>. This also means that we cannot make concurrent writes. The guarantee for linear writes can be problematic if we use Zookeeper for writing dominant workload.</p>
<h2 id="Reads-in-Zookeeper"><a href="#Reads-in-Zookeeper" class="headerlink" title="Reads in Zookeeper"></a>Reads in Zookeeper</h2><p><code>Zookeeper is best at reads. Reads can be concurrent</code>. In Zookeeper, <code>concurrent reads are performed as each client is attached to a different server and all the clients can read data from the servers simultaneously</code>. It may sometimes happen that the <code>client may have an outdated view</code>. This gets updated within a little time.</p>
<h2 id="Data-Model"><a href="#Data-Model" class="headerlink" title="Data Model"></a>Data Model</h2><p><img src="https://techvidvan.com/tutorials/wp-content/uploads/sites/2/2020/08/Zookeeper-Data-Model-TV.jpg" alt="data model"></p>
<ul>
<li>The zookeeper data model follows a Hierarchal namespace where each node is called a ZNode. A node is a system where the cluster runs.</li>
</ul>
<p><strong>Key Znode features you need to know:</strong></p>
<ul>
<li>Znodes can store data and have children Znode at same time</li>
<li>It can store information like the current version of data changes in Znode, transaction Id of the latest transaction performed on the Znode.</li>
<li>Each znode can have its access control list(ACL), like the permissions in Unix file systems. Zookeeper supports: create, read, write, delete, admin(set&#x2F;edit permissions) permissions.</li>
<li>Znodes ACL supports username&#x2F;password-based authentication on individual znodes too.</li>
<li>Clients can set a watch on these Znodes and get notified if any changes occur in these znodes.</li>
<li>These change&#x2F;events could be a change in znodes data, change in any of znodes children, new child Znode creation or if any child Znode is deleted under the znode on which watch is set.</li>
</ul>
<p><strong>The main purpose of the Zookeeper data model is:</strong></p>
<ul>
<li>To maintain the <code>synchronization in a zookeeper cluster</code></li>
<li>To explain the <code>metadata of each Znode</code>.</li>
</ul>
<h3 id="Node-Types-in-Zookeeper"><a href="#Node-Types-in-Zookeeper" class="headerlink" title="Node Types in Zookeeper"></a>Node Types in Zookeeper</h3><ul>
<li><p>Persistence Znode<br>Persistence Znode are the nodes that <code>stay alive even when the client who created the node is disconnected</code>. All the server nodes in the ensemble assume themselves to be the Persistence Znodes, To remove these Znodes, you need to delete them manually(use delete operation)</p>
</li>
<li><p>Ephemeral Znode<br>The Ephemeral Znode are the nodes that stay alive until the client is alive or connected to them. <code>They die when the client gets disconnected</code>. <strong>Ephemeral Znode are not allowed to have children</strong>. They play an important role in the leader elections.<br>Zookeeper clients keep sending the ping request to keep the session alive. If Zookeeper does not see any ping request from the client for a period of configured session timeout, Zookeeper considers the client as dead and deletes the client session and the Znode created by the client.</p>
</li>
<li><p>Sequential Znode<br>Sequential Znode can be either the Persistence Znode or the Ephemeral Znode. While creating a new Sequential Znode, the ZooKeeper <code>sets the path of the Znode by attaching the 10 digit sequence number to the original name</code>. This znode plays an important role in the Locking and Synchronization</p>
</li>
</ul>
<h3 id="Watches"><a href="#Watches" class="headerlink" title="Watches"></a>Watches</h3><p>Zookeeper, a watch event is a one-time trigger which is <code>sent to the client that set watch</code>. It occurred when data from that watch changes. <code>watch allows clients to get notifications when znode changes</code>. read operations like getData(), getChidleren(), exist have the option of setting a watch.</p>
<p>Watches are ordered, the order of watch events corresponds to the order of the updates. A client will able to see a watch event for znode before seeing the new data which corresponds to that znode.<br>Access Control list</p>
<h3 id="ZNode-ACL"><a href="#ZNode-ACL" class="headerlink" title="ZNode ACL"></a>ZNode ACL</h3><p>Zookeeper uses ACLs to control access to its znodes. ACL is made up of a pair of (Scheme: id, permission)</p>
<p><strong>Build in ACL schemes:</strong></p>
<ul>
<li>world: has a single id, anyone</li>
<li>auth: Not use any id, It represents any authenticated user</li>
<li>digest: use a username: password</li>
<li>host: Allows you to use client’s hostname as ACL id identity</li>
<li>IP: use the client host IP address as ACL id identity</li>
</ul>
<p><strong>ACL Permissions:</strong></p>
<ul>
<li>CREATE</li>
<li>READ</li>
<li>WRITE</li>
<li>DELETE</li>
<li>ADMIN</li>
</ul>
<p><code>E.x. (IP: 192.168.0.0/16, READ)</code></p>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p><img src="https://www.guru99.com/images/1/011019_1316_ApacheZooKe3.png"></p>
<ul>
<li>Before executing any request, it is important that the client must establish a session with service</li>
<li>All operations clients are sent to service are automatically associated with a session</li>
<li>The client may connect to any server in the cluster. But it will <code>connect to only a single server</code></li>
<li>The session provides “order guarantees”. <code>The requests in the session are executed in FIFO order</code></li>
<li>The main states for a session are 1) Connecting, 2) Connected 3) Closed 4) Not Connected.<h2 id="Leader-Selection"><a href="#Leader-Selection" class="headerlink" title="Leader Selection"></a>Leader Selection</h2>We will discuss three algorithms for the leader election.</li>
</ul>
<p><strong>Approach 1:</strong></p>
<pre><code>A client(any server belonging to the cluster) creates a persistent znode /election in Zookeeper.
All clients add a watch to /election znode and listen to any children znode deletion or addition under /election znode.
Now each server joining the cluster will try to create an ephemeral znode /leader under node /election with data as hostname, ex: node1.domain.com
Since multiple servers in the cluster will try to create znode with the same name(/leader), only one will succeed, and that server will be considered as a leader.
Once all servers in the cluster completes above step, they will call getChildren(“/election”) and get the data(hostname) associated with child znode “/leader”, which will give the leader’s hostname.
At any point, if the leader server goes down, Zookeeper will kill the session for that server after the specified session timeout. In the process, it will delete the node /leader as it was created by leader server and is an ephemeral node and then Zookeeper will notify all the servers that have set the watch on /election znode, as one of the children has been deleted.
Once all server gets notified that the leader is dead or leader’s znode(/leader) is deleted, they will retry creating “/leader” znode and again only one server will succeed, making it a new leader.
Once the /leader node is created with the hostname as the data part of the znode, zookeeper will again notify all servers (as we have set the watch in step 2).
All servers will call getChildren() on “/election” and update the new leader in their memory.
</code></pre>
<p>The problem with the above approach is, each time &#x2F;leader node is deleted,<br>Zookeeper will send the notification to all servers and all servers will try to write to zookeeper to become a new leader at the same time creating a herd effect. If we have a large number of servers, this approach would not be the right idea.<br>Ways to avoid, herd effect could be:<br>(i) by restricting the number of servers that take part in the election and allow only a few servers to update &#x2F;election znode<br>OR<br>(ii) by using sequential znode, which I will explain in the next approach.</p>
<p><strong>Approach 2: Using Ephemeral Sequential Znode</strong></p>
<pre><code>A client(any server belonging to the cluster) creates a persistent znode /election.
All clients add a watch to /election znode and listen to any children znode deletion or addition under /election znode.
Now each server joining the cluster will try to create an ephemeral sequential znode /leader-&lt;sequential number&gt; under node /election with data as hostname, ex: node1.domain.com
Let’s say three servers in a cluster created znodes under /election, then the znode names would be:
/election/leader-00000001
/election/leader-00000002
/election/leader-00000003
Znode with least sequence number will be automatically considered as the leader.
Once all server completes the creation of znode under /election, they will perform getChildren(“/election”) and get the data(hostname) associated with least sequenced child node “/election/leader-00000001”, which will give the leader hostname.
At any point, if the current leader server goes down, Zookeeper will kill the session for that server after the specified session timeout. In the process, it will delete the node “/election/leader-00000001” as it was created by the leader server and is an ephemeral node and then Zookeeper will send a notification to all the server that was watching znode /election.
Once all server gets the leader’s znode-delete notification, they again fetch all children under /election znode and get the data associated with the child znode that has the least sequence number(/election/leader-00000002) and store that as the new leader in its own memory.
</code></pre>
<p>In this approach, we saw, if an existing leader dies, the servers are not sending an extra write request to the zookeeper to become the leader, leading to reduce network traffic.<br>But, even with this approach, we will face some degree of herd effect we talked about in the previous approach. When the leader server dies, notification is sent to all servers in the cluster, creating a herd effect.<br>But, this is a design call that you need to take. Use approach 1 or 2, if you need all servers in your cluster to store the current leader’s hostname for its purpose.<br>If you do not want to store current leader information in each server&#x2F;follower and only the leader needs to know if he is the current leader to do leader specific tasks. You can further simplify the leader election process, which we will discuss in approach 3.</p>
<p><strong>Approach 3: Using Ephemeral Sequential Znode but notify only one server in the event of a leader going down.</strong></p>
<pre><code>Create a persistent znode /election.
Now each server joining the cluster will try to create an ephemeral sequential znode /leader-&lt;sequential number&gt; under node /election with data as hostname, ex: node1.domain.com
Let’s say three servers in a cluster created znodes under /election, then the znode names would be:
/election/leader-00000001
/election/leader-00000002
/election/leader-00000003
Znode with least sequence number will be automatically considered as a leader.
Here we will not set the watch on whole/election znode for any children change(add/delete child znode), instead, each server in the cluster will set watch on child znode with one less sequence.
The idea is if a leader goes down only the next candidate who would become a leader should get the notification.
So, in our example:
- The server that created the znode /election/leader-00000001 will have no watch set.
-The server that created the znode /election/leader-00000002 will watch for deletion of znode /election/leader-00000001
-The server that created the znode /election/leader-00000003 will watch for deletion of znode /election/leader-00000002
Then, if the current leader goes down, zookeeper will delete the node /election/leader-00000001 and send the notification to only the next leader i.e. the server that created node /election/leader-00000002
</code></pre>
<p>That’s all on leader election logic. These are simple algorithms. There could be a situation when you want only those servers to take part in a leader election which has the latest data if you are creating a distributed database.<br>In that case, you might want to create one more node that keeps this information, and in the event of the leader going down, only those servers that have the latest data can take part in an election.</p>
<h2 id="Distributed-Locks"><a href="#Distributed-Locks" class="headerlink" title="Distributed Locks"></a>Distributed Locks</h2><p>Suppose we have <code>“n” servers trying to update a shared resource simultaneously</code>, say a shared file. If we do not write these files in a mutually exclusive way, it may lead to data inconsistencies in the shared file.</p>
<p>We will manipulate operations on znode to implement a distributed lock, so that, different servers can acquire this lock and perform a task.</p>
<p>The algorithm for managing distributed locks is the same as the leader election with a slight change.</p>
<pre><code>Instead of the /election parent node, we will use /lock as the parent node.
The rest of the steps will remain the same as in the leader election algorithm. Any server which is considered a leader is analogous to server acquiring the lock.
The only difference is, once the server acquires the lock, the server will perform its task and then call the delete operation on the child znode it has created so that the next server can acquire lock upon delete notification from zookeeper and perform the task.
</code></pre>
<h2 id="Use-cases"><a href="#Use-cases" class="headerlink" title="Use cases"></a>Use cases</h2><p><strong>Group Membership&#x2F;Managing Cluster state</strong></p>
<p>In Zookeeper it is pretty simple to maintain group membership info using persistent and ephemeral znodes. I will talk about a simple case where you want to <code>maintain information about all servers in a cluster and what servers are currently alive</code>.</p>
<p>We will use a <code>persistent znode to keep track of all the servers that join the cluster</code> and zookeeper’s ability to delete an ephemeral znodes upon client session termination will come handy in maintaining the list of active&#x2F;live servers.</p>
<pre><code>Create a parent znode /all_nodes, this znode will be used to store any server that connects to the cluster.

Create a parent znode /live_nodes, this znode will be used to store only the live nodes in the cluster and will &lt;store ephemeral child znodes&gt;. If any server crashes or goes down, respective child ephemeral znode will be deleted.

Any server connecting to the cluster will create &lt;a new persistent znode&gt; under /all_nodes say /node1.domain.com. Let’s say another two node joins the cluster. Then the znode structure will look like:
/all_nodes/node1.domain.com
/all_nodes/node2.domain.com
/all_nodes/node3.domain.com

You can store any information specific to the node in znode’s data
Any server connecting to the cluster will create &lt;a new ephemeral znode&gt; under /live_nodes say /node1.domain.com. Let’s say another two-node joins the cluster. Then the znode structure will look like:
/live_nodes/node1.domain.com
/live_nodes/node2.domain.com
/live_nodes/node3.domain.com

Add a watch for any change in children of /all_nodes. If any server is added or deleted to/from the cluster, all server in the cluster needs to be notified.

Add a watch for any change in children of /live_nodes. This way all servers will be notified if any server in the cluster goes down or comes alive.
</code></pre>
<h1 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h1><p>As for demo only, we start only one zookeeper instance(standalone mode), in production env, it’s better start a zookeeper cluster which may have 3, 5, odd nodes for performance and HA.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ubuntu18</span></span><br><span class="line">$ sudo apt install openjdk-8-jdk-headless</span><br><span class="line"><span class="comment"># Centos7</span></span><br><span class="line">$ yum install -y java-11-openjdk-headless</span><br><span class="line"></span><br><span class="line">$ wget https://apachemirror.wuchna.com/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz</span><br><span class="line">$ tar xvf apache-zookeeper-3.6.3-bin.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> apache-zookeeper-3.6.3-bin</span><br><span class="line">$ <span class="built_in">cp</span> conf/zoo_sample.cfg conf/zoo.cfg</span><br><span class="line">$ bin/zkServer.sh start</span><br><span class="line"></span><br><span class="line"><span class="comment"># check info</span></span><br><span class="line">$ bin/zkServer.sh status</span><br><span class="line">$ bin/zkServer.sh</span><br><span class="line">/usr/bin/java</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /home/ubuntu/zookeeper/apache-zookeeper-3.6.3-bin/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: <span class="literal">false</span>.</span><br><span class="line">Mode: standalone</span><br></pre></td></tr></table></figure>
<h2 id="client-CLI-command"><a href="#client-CLI-command" class="headerlink" title="client CLI command"></a>client CLI command</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/zkCli.sh</span><br><span class="line">....</span><br><span class="line"><span class="comment"># create persistence znode</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] create /jason</span><br><span class="line">create /jason <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create Sequential znode</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] create -s /node <span class="string">&#x27;hi node1&#x27;</span></span><br><span class="line">Created /node0000000005</span><br><span class="line"></span><br><span class="line"><span class="comment"># create Ephemeral znode</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] create -e /node <span class="string">&#x27;tmp&#x27;</span></span><br><span class="line">Created /node</span><br><span class="line"></span><br><span class="line"><span class="comment"># update a znode</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] <span class="built_in">set</span> /node <span class="string">&#x27;update tmp&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create a child znode</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 0]  create /node/server1 <span class="string">&#x27;s1&#x27;</span></span><br><span class="line">Ephemerals cannot have children: /node/server1</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 0]  create /jason/server1 <span class="string">&#x27;s1&#x27;</span></span><br><span class="line">Created /jason/server1</span><br><span class="line"></span><br><span class="line"><span class="comment"># list child znode</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] <span class="built_in">ls</span> /jason</span><br><span class="line">[server1]</span><br><span class="line"></span><br><span class="line"><span class="comment"># stats of znode</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] get /jason</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 31] get -s  /jason</span><br><span class="line">hello</span><br><span class="line">cZxid = 0x15</span><br><span class="line">ctime = Fri Apr 23 06:10:35 UTC 2021</span><br><span class="line">mZxid = 0x15</span><br><span class="line">mtime = Fri Apr 23 06:10:35 UTC 2021</span><br><span class="line">pZxid = 0x1d</span><br><span class="line">cversion = 1</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 5</span><br><span class="line">numChildren = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove a specified znode and recursively all its children.</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] deleteall /jason</span><br><span class="line"></span><br><span class="line"><span class="comment"># add a watcher and get its value</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] get -w /jason\</span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] removewatches  /jason</span><br><span class="line"></span><br><span class="line"><span class="comment"># set ACL</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 63] setAcl /jason world:anyone:rw</span><br><span class="line">[zk: localhost:2181(CONNECTED) 64] getAcl /jason</span><br><span class="line"><span class="string">&#x27;world,&#x27;</span>anyone</span><br><span class="line">: rw</span><br></pre></td></tr></table></figure>

<h2 id="Three-nodes-cluster"><a href="#Three-nodes-cluster" class="headerlink" title="Three nodes cluster"></a>Three nodes cluster</h2><p>each node must install zookeeper with cfg</p>
<p><strong>node1  zoo.cfg</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/zookeeper/data</span><br><span class="line">clientPort=2181</span><br><span class="line"></span><br><span class="line">server.1=11.117.4.56:2888:3888</span><br><span class="line">server.2=11.117.4.57:2888:3888</span><br><span class="line">server.3=11.117.4.58:2888:3888</span><br><span class="line">$ mkdir /zookeeper/data</span><br><span class="line">$ echo 1 &gt; /zookeeper/data/myid</span><br></pre></td></tr></table></figure>

<p><strong>node2 zoo.cfg</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zoo.cfg:</span><br><span class="line"></span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/zookeeper/data</span><br><span class="line">clientPort=2181</span><br><span class="line"></span><br><span class="line">server.1=11.117.4.56:2888:3888</span><br><span class="line">server.2=11.117.4.57:2888:3888</span><br><span class="line">server.3=11.117.4.58:2888:3888</span><br><span class="line">$ mkdir /zookeeper/data</span><br><span class="line">$ echo 2 &gt; /zookeeper/data/myid</span><br></pre></td></tr></table></figure>

<p><strong>node3 zoo.cfg</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zoo.cfg:</span><br><span class="line"></span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/zookeeper/data</span><br><span class="line">clientPort=2181</span><br><span class="line"></span><br><span class="line">server.1=11.117.4.56:2888:3888</span><br><span class="line">server.2=11.117.4.57:2888:3888</span><br><span class="line">server.3=11.117.4.58:2888:3888</span><br><span class="line"></span><br><span class="line">$ mkdir /zookeeper/data</span><br><span class="line">$ echo 3 &gt; /zookeeper/data/myid</span><br></pre></td></tr></table></figure>

<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><ul>
<li><p>why we need more than one zookeeper servers?</p>
<blockquote>
<p>Two main reason: high availability and performance</p>
</blockquote>
</li>
<li><p>why is zookeeper server nubmer odd?</p>
<blockquote>
<p>because even and odd have the same high availability.</p>
</blockquote>
</li>
<li><p>how does zookeeper handle inconsistence?</p>
<blockquote>
<p>it handles the inconsistency of data by atomicity, using <a href="https://distributedalgorithm.wordpress.com/2015/06/20/architecture-of-zab-zookeeper-atomic-broadcast-protocol/">ZAB protocol</a></p>
</blockquote>
</li>
</ul>
<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul>
<li><a href="https://www.guru99.com/zookeeper-tutorial.html">tutorial</a></li>
<li><a href="https://bikas-katwal.medium.com/zookeeper-introduction-designing-a-distributed-system-using-zookeeper-and-java-7f1b108e236e">zk design</a></li>
<li><a href="http://www.chaozh.com/blog/2015/11/15/whats-good-in-zookeeper-design/">use cases</a></li>
<li><a href="https://izualzhy.cn/zookeeper-c-api-introduction#7-%E5%AE%9E%E6%88%98">C bindings</a></li>
</ul>
]]></content>
      <categories>
        <category>distribute</category>
        <category>zookeeper</category>
      </categories>
      <tags>
        <tag>distribute</tag>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-core-tech-cgroups</title>
    <url>/2019/10/14/docker-core-tech-cgroups/</url>
    <content><![CDATA[<h1 id="cgroups"><a href="#cgroups" class="headerlink" title="cgroups"></a>cgroups</h1> provides a mechanism for aggregating/partitioning sets of tasks, and all their future children, into hierarchical groups with specialized behavior(under resource controller) like
<ul>
<li><strong>Resource Limiting (i.e. not to exceed a memory limit) mostly used</strong></li>
<li>Prioritization (i.e. groups may have larger share of CPU)</li>
<li>Isolation (i.e. isolate GPUs for particular processes)</li>
<li><strong>Accounting (i.e. monitor resource usage for processes)</strong></li>
<li>Control (i.e. suspending and resuming processes)<span id="more"></span></li>
</ul>
<p>Definitions:</p>
<ul>
<li><p>A <mark><em>cgroup</em></mark> associates a set of tasks with a set of parameters(control resource) for one<br>or more subsystems.</p>
</li>
<li><p>A <mark><em>subsystem</em></mark> is a module that makes use of the task grouping<br>facilities provided by cgroups to treat groups of tasks in<br>particular ways. A subsystem is typically a <strong>“resource controller”</strong> that<br>schedules a resource or applies per-cgroup limits, but it may be<br>anything that wants to act on a group of processes, e.g. a<br>virtualization subsystem.</p>
</li>
<li><p>A <mark><em>hierarchy</em></mark> is a set of cgroups arranged in a tree, such that<br><strong>every task in the system is in exactly one of the cgroups in the<br>hierarchy, and a set of subsystems(CPU, Memory)</strong>; each subsystem has system-specific<br>state attached to each cgroup in the hierarchy.  Each hierarchy has<br>an instance of the cgroup virtual filesystem associated with it.</p>
</li>
</ul>
<!--more-->
<h2 id="cgroup-pseudo-filesystem"><a href="#cgroup-pseudo-filesystem" class="headerlink" title="cgroup pseudo filesystem"></a>cgroup pseudo filesystem</h2><p><img src="/images/docker/cgroup-user-view.jpg" alt="cgroup uv"></p>
<p><strong>Here are most cgroups(subsys) supported by linux</strong></p>
<div class="note info"><ul>
<li>cpuset – assigns tasks to individual CPUs and memory nodes in a cgroup</li>
<li><strong>cpu – schedules CPU access to cgroups(how much cpu used and how long)</strong></li>
<li>cpuacct – reports CPU resource usage of tasks of a cgroup</li>
<li><strong>memory – set limits on memory use and reports memory usage for a cgroup, normal page memory not huge page</strong></li>
<li><strong>hugetlb</strong> - allows to use virtual memory pages of large sizes and to enforce resource limits on these pages</li>
<li>devices – allows or denies access to devices (i.e. gpus) for tasks of a cgroup</li>
<li>freezer – suspends and resumes tasks in a cgroup</li>
<li>net_cls – tags network packets in a cgroup to allow network traffic priorities</li>
<li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/resource_management_guide/ch-subsystems_and_tunable_parameters#blkio-weight">blkio</a> – tracks I&#x2F;O ownership, allowing control of access to block I&#x2F;O resources</li>
</ul>
</div>

<p><mark>Rules for cgroup</mark></p>
<ul>
<li>Each <strong>subsystem</strong> (memory, CPU…) has <strong>a hierarchy</strong> (tree)</li>
<li><strong>Hierarchies are independent</strong><ul>
<li>(the trees for e.g. memory and CPU can be different)</li>
</ul>
</li>
<li><strong>Each process belongs to exactly 1 node in each hierarchy</strong><ul>
<li>(think of each hierarchy as a different dimension or axis)</li>
</ul>
</li>
<li>Each hierarchy(subsystem) starts with 1 node (the root)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># like for cpu subsystem  root node is at</span></span><br><span class="line"><span class="comment"># tasks # attach a task(thread) and show list of threads</span></span><br><span class="line"><span class="comment"># cgroup.procs # show list of processes</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ls</span> /sys/fs/cgroup/cpu/</span><br><span class="line">cgroup.clone_children  cpuacct.stat       cpuacct.usage_percpu       cpuacct.usage_sys   cpu.cfs_quota_us  docker/            release_agent  user.slice/</span><br><span class="line">cgroup.procs           cpuacct.usage      cpuacct.usage_percpu_sys   cpuacct.usage_user  cpu.shares        init.scope/        system.slice/</span><br><span class="line">cgroup.sane_behavior   cpuacct.usage_all  cpuacct.usage_percpu_user  cpu.cfs_period_us   cpu.stat          notify_on_release  tasks</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>All processes initially belonged to the root of each hierarchy</strong></li>
<li>Each node &#x3D; group of processes(sharing the same resources)</li>
</ul>
<p><strong>NOTE</strong></p>
<ul>
<li><code>All subdirs shared the setting of its parent</code>, total amount should not exceed its parent, even tasks in subdir not present in parent’s tasks, see example below.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> remove a cgroup dir using: rmdir not rm -rf</span></span><br><span class="line">$ <span class="built_in">mkdir</span> /sys/fs/cgroup/cpu/agent</span><br><span class="line"><span class="comment"># total two CPU</span></span><br><span class="line">$ <span class="built_in">echo</span> 100000 &gt;/sys/fs/cgroup/cpu/agent/cpu.cfs_period_us</span><br><span class="line">$ <span class="built_in">echo</span> 200000 &gt;/sys/fs/cgroup/cpu/agent/cpu.cfs_quota_us</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> /sys/fs/cgroup/cpu/agent/tasks</span><br><span class="line"><span class="comment"># no tasks here even each subdirs has its own task!!!</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">mkdir</span> /sys/fs/cgroup/cpu/agent/sub1</span><br><span class="line">$ <span class="built_in">cat</span> /sys/fs/cgroup/cpu/agent/sub1/cpu.cfs_period_us</span><br><span class="line">100000</span><br><span class="line">$ <span class="built_in">cat</span> /sys/fs/cgroup/cpu/agent/sub1/cpu.cfs_quota_us</span><br><span class="line">-1</span><br><span class="line">$ <span class="built_in">cat</span> /sys/fs/cgroup/cpu/agent/sub1/tasks</span><br><span class="line">9877</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">mkdir</span> /sys/fs/cgroup/cpu/agent/sub2</span><br><span class="line">$ <span class="built_in">cat</span> /sys/fs/cgroup/cpu/agent/sub2/cpu.cfs_period_us</span><br><span class="line">100000</span><br><span class="line">$ <span class="built_in">cat</span> /sys/fs/cgroup/cpu/agent/sub2/cpu.cfs_quota_us</span><br><span class="line">$ <span class="built_in">cat</span> /sys/fs/cgroup/cpu/agent/sub2/tasks</span><br><span class="line">9853</span><br></pre></td></tr></table></figure>

<h3 id="cpu-subsystem"><a href="#cpu-subsystem" class="headerlink" title="cpu subsystem"></a>cpu subsystem</h3><p>sys path: <code>/sys/fs/cgroup/cpu</code>, it’s used for <strong>cpu state(usage), weight and limitation</strong> for tasks attached to this group, here are several key parameters of this subsystem.</p>
<ul>
<li><p>cpu.shares(relative weight to other cpu cgroups)</p>
<blockquote>
<p>it’s <strong>relative weight</strong> to other cgroups under cpu subsystem, when access to host CPU cycles, by default it’s 1024, it works only when other cgroups have tasks attached and competing for host CPU cycles, say cgroupA has task A with default cpu.shares, cgroupB has task B with cpu.shares 2048, if both taskA and taskB are running, taskB get host CPU cycles twice than taskA, while if taskB is slept or quits, taskA will get all host CPU cycles, as no others are competing with it.<br><font color='red'>As it’s relative weight, It does not guarantee or reserve any specific CPU access.!!!</font></p>
</blockquote>
</li>
<li><p>cpu.cfs_period_us</p>
<blockquote>
<p>specifies a period of time in microseconds not millisecond(ms) (represented here as “us”) for how regularly a cgroup’s access to CPU resources should be reallocated. <code>If tasks in a cgroup should be able to access a single CPU for 0.2 seconds out of every 1 second, set cpu.cfs_quota_us to 200000 and cpu.cfs_period_us to 1000000</code>. The upper limit of the cpu.cfs_quota_us parameter is 1 second(1000 milliseconds) and the lower limit is 1000 microseconds(1 milliseconds)</p>
</blockquote>
</li>
<li><p>cpu.cfs_quota_us and cpu.cfs_period_us(<code>hard limit for tasks in the group</code>)</p>
<blockquote>
<p>CPU quota control <code>how much CPU time tasks in cgroup can use during a period, cpu_quota is the number of microseconds of CPU time</code>, cpu period is counting unit for cpu quota, they should <strong>work together to limit the upper bound(max cpu) for that cgroup(tasks in it)</strong>. by default period is 100000 us, while quota is -1(no limit). if quota is 100000(&#x3D;&#x3D;cpu period), like tasks in this group can use one host CPU, but if quota is 200000 larger than period, like tasks in this groups can use two Host CPUs.</p>
</blockquote>
</li>
</ul>
<p><strong>NOTE</strong></p>
<ul>
<li>cgroup controls resource to all tasks in the same group, say for cpu quota and cpu period, counting all tasks for the same cpu use, not per task</li>
<li>child process forked from task in the cgroup, obey the same limitation with its parent(child task is added parent cgroup automatically)</li>
<li><code>even quota is two CPU, but if only one task in the cgroup without multi-thread on, at most one CPU is used!!!!</code></li>
</ul>
<p><mark>cpu.shares and cpu.cfs_quota_us, cpu.cfs.period_us can work together!!! </mark></p>
<p><strong>host has <code>two cpus</code>, both taskA and taskB are always running, no other task is running for ideal.</strong></p>
<div class="note info"><ul>
<li>taskA in groupA with share 1024, 1 cpu(cpu.cfs_period_us 100000 cfs_quota_us 100000)</li>
<li>taskB in groupB with share 2048, 0.5cpu(cpu.cfs_period_us 100000 cfs_quota_us 50000)</li>
<li>for each period, host provides 2*100000, taskB can get 0.67 due to share setting, but taskB has hard limit 0.5cpu, hence after task B get 0.5cpu, it’s paused, so that taskA continues to run, after one period, <code>taskA gets 1 cpu, taskB gets 0.5cpu(another 0.5cpu is idea), but taskB gets 0.5cpu before taskA gets its 0.5cpu</code></li>
</ul>
</div>

<details class="note "><summary><p>warn</p>
</summary>
<ul>
<li>taskA in groupA with share 1024, 1 cpu(cpu.cfs_period_us 100000 cfs_quota_us 100000)</li>
<li>taskB in groupB with share 1024, 0.5cpu(cpu.cfs_period_us 100000 cfs_quota_us 50000)</li>
<li>for each period, host provides 2*100000, taskA and taskB gets its 0.5cpu at the same, then taskB paused, taskA continues to run, after one period, <code>taskA gets 1 cpu, taskB gets 0.5cpu(another 0.5cpu is idea)</code>.</li>
</ul>

</details>

<p><strong>docker parameters related</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># let&#x27;s say there are four CPUS on host, if all containers are running CPU intensive workload</span></span><br><span class="line"><span class="comment"># first container takes one CPU</span></span><br><span class="line"><span class="comment"># second container takes one CPU</span></span><br><span class="line"><span class="comment"># third container takes two CPU</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># but if third container quits or sleep, the other two both take two CPUS !!!</span></span><br><span class="line">$ docker run -it --<span class="built_in">rm</span>  --cpu-shares 1024 ubuntu /bin/bash</span><br><span class="line">$ docker run -it --<span class="built_in">rm</span>  --cpu-shares 1024 ubuntu /bin/bash</span><br><span class="line">$ docker run -it --<span class="built_in">rm</span>  --cpu-shares 2048 ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># --cpu-period &amp; --cpu-quota</span></span><br><span class="line"><span class="comment"># CPU quota (cpu_quota) is a feature of Linux Control Groups (cgroup). CPU quota control `how much CPU time a container can use`, `cpu_quota is the number of microseconds of CPU time` a container can use `per cpu_period`.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cpu_quota allows setting an `upper bound on the amount of CPU time a container gets`. Linux enforces the limit even if CPU time is available. Quotas can hinder utilization while `providing a predictable upper bounds on CPU time.`</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># one Host CPU for this docker</span></span><br><span class="line">$ docker run -it --<span class="built_in">rm</span>  --cpu-period 100000 --cpu-quota 100000 ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># --cpus=&lt;value&gt;</span></span><br><span class="line"><span class="comment"># Specify how much of the available CPU resources a container can use. For instance, if the host machine has two CPUs and you set --cpus=&quot;1.5&quot;, the container is guaranteed at most one and a half of the CPUs. This is the equivalent of setting --cpu-period=&quot;100000&quot; and --cpu-quota=&quot;150000&quot;. short way for cpu-period and cpu-quota</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># In order to set cpu_quota correctly, you need to know how many cpu can be used by container, then set cpu_quota and cpu_period correctly.</span></span><br><span class="line">$ docker run -it --<span class="built_in">rm</span>  --cpus=1.5 ubuntu /bin/bash</span><br><span class="line"><span class="comment"># Same as below</span></span><br><span class="line">$ docker run -it --<span class="built_in">rm</span>  --cpu-period=100000 --cpu-quota=150000 ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="memory-subsystem"><a href="#memory-subsystem" class="headerlink" title="memory subsystem"></a>memory subsystem</h3><p>The memory subsystem generates automatic <code>reports on memory resources used by the tasks in a cgroup, and sets limits on memory use of those tasks.</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ls</span> /sys/fs/cgroup/memory/</span><br><span class="line">cgroup.clone_children  memory.force_empty              memory.kmem.tcp.limit_in_bytes      memory.memsw.failcnt             memory.oom_control          memory.use_hierarchy</span><br><span class="line">cgroup.event_control   memory.kmem.failcnt             memory.kmem.tcp.max_usage_in_bytes  memory.memsw.limit_in_bytes      memory.pressure_level       notify_on_release</span><br><span class="line">cgroup.procs           memory.kmem.limit_in_bytes      memory.kmem.tcp.usage_in_bytes      memory.memsw.max_usage_in_bytes  memory.soft_limit_in_bytes  release_agent</span><br><span class="line">cgroup.sane_behavior   memory.kmem.max_usage_in_bytes  memory.kmem.usage_in_bytes          memory.memsw.usage_in_bytes      memory.stat                 system.slice</span><br><span class="line">machine.slice          memory.kmem.slabinfo            memory.limit_in_bytes               memory.move_charge_at_immigrate  memory.swappiness           tasks</span><br><span class="line">memory.failcnt         memory.kmem.tcp.failcnt         memory.max_usage_in_bytes           memory.numa_stat                 memory.usage_in_bytes       user.slice</span><br></pre></td></tr></table></figure>

<p>let’s focus on memory limitation parameters <code>memory.limit_in_bytes, memory.memsw.limit_in_bytes, memory.oom_control, memory.soft_limit_in_bytes, memory.swappiness</code></p>
<ul>
<li><p>memory.limit_in_bytes<br>  sets the maximum amount of user memory (including file cache). If no units are specified, the value is interpreted as bytes. However, it is possible to use suffixes to represent larger units(k&#x2F;K, m&#x2F;M, g&#x2F;G). <code>echo 1G &gt; /cgroup/memory/lab1/memory.limit_in_bytes</code></p>
</li>
<li><p>memory.memsw.limit_in_bytes<br>  sets the maximum amount for <code>the sum of memory and swap usage</code>. If no units are specified, the value is interpreted as bytes, However, it is possible to use suffixes to represent larger units(k&#x2F;K, m&#x2F;M, g&#x2F;G).</p>
<p>  It is important to <code>set the memory.limit_in_bytes parameter before setting the memory.memsw.limit_in_bytes parameter</code>:, This is because memory.memsw.limit_in_bytes becomes available only after all memory limitations (previously set in memory.limit_in_bytes) are exhausted. <code>memory.limit_in_bytes = 2G and memory.memsw.limit_in_bytes = 4G</code> for a certain cgroup will allow processes in that cgroup to allocate 2 GB of memory and, once exhausted, allocate another 2 GB of swap only.</p>
</li>
<li><p>memory.soft_limit_in_bytes<br>  enables flexible sharing of memory. Under normal circumstances, control groups are allowed to use as much of the memory as needed, constrained only by their hard limits set with the memory.limit_in_bytes parameter. However, when the system detects memory contention or low memory, control groups are forced to restrict their consumption to their soft limits(reclaim memory).If lowering the memory usage to the soft limit does not solve the contention, cgroups are pushed back as much as possible to make sure that one control group does not starve the others of memory. <code>Note that soft limits take effect over a long period of time, since they involve reclaiming memory for balancing between memory cgroups</code>.</p>
</li>
<li><p>memory.oom_control<br>  contains a flag (0 or 1) that enables or disables the Out of Memory killer for a cgroup. <code>If enabled (0), tasks that attempt to consume more memory than they are allowed are immediately killed by the OOM killer</code>. The OOM killer is <code>enabled by default</code> in every cgroup using the memory subsystem; to disable it, write 1 to the memory.oom_control file.</p>
<p>  When the OOM killer is disabled, tasks that attempt to use more memory than <code>they are allowed are paused until additional memory is freed</code>.</p>
</li>
<li><p>memory.swappiness<br>  sets the tendency of the kernel to swap out process memory used by tasks in this cgroup instead of reclaiming pages from the page cache. This is the same tendency, calculated the same way, as set in &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;swappiness for the system as a whole. The default value is 60. <code>Values lower than 60 decrease the kernel&#39;s tendency to swap out process memory, values greater than 60 increase the kernel&#39;s tendency to swap out process memory</code>, and values <code>greater than 100 permit the kernel to swap out pages that are part of the address space of the processes in this cgroup</code>.</p>
<p>  Note that a value of <code>0 does not prevent process memory being swapped out</code>; swap out might still happen when there is a shortage of system memory because the global virtual memory management logic does not read the cgroup value. To lock pages completely, use mlock() instead of cgroups. </p>
<p>  <strong>NOTE:</strong><br>  Increasing this value will make the system more inclined to utilize swap space, <code>leaving more memory free for caches</code>.<br>  Decreasing this value will make the system less inclined to swap, and <code>may improve application responsiveness.</code></p>
<p>  Tuning vm.swappiness incorrectly may hurt performance or may have a different impact between light and heavy workloads. <strong>Changes to this parameter should be made in small increments and should be tested under the same conditions that the system normally operates.</strong></p>
</li>
</ul>
<p>&lt;font color&#x3D;’red’, size&#x3D;4&gt;NOTE</font></p>
<p>if <code>soft_limit_in_bytes</code> is unlimited while <code>limit_in_bytes</code> is set, when processes in this group reach  <code>limit_in_bytes</code>, kernel will try to swap some memory of the processes to disk, so that it may be below the limit, but if there is no swap left of the system or it reaches <code>memsw.limit_in_bytes</code>, in these case, one of the process(high score) should be killed by OOM killer.</p>
<h2 id="cgroup-subsystem-kernel"><a href="#cgroup-subsystem-kernel" class="headerlink" title="cgroup subsystem kernel"></a>cgroup subsystem kernel</h2><p>Here is the source code for each subsystem</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cpuset_subsys - defined <span class="keyword">in</span> kernel/cpuset.c.</span><br><span class="line">freezer_subsys - defined <span class="keyword">in</span> kernel/cgroup_freezer.c.</span><br><span class="line">mem_cgroup_subsys - defined <span class="keyword">in</span> mm/memcontrol.c; Aka memcg - memory control <span class="built_in">groups</span>.</span><br><span class="line">blkio_subsys - defined <span class="keyword">in</span> block/blk-cgroup.c.</span><br><span class="line">net_cls_subsys - defined <span class="keyword">in</span> net/sched/cls_cgroup.c ( can be built as a kernel module)</span><br><span class="line">net_prio_subsys - defined <span class="keyword">in</span> net/core/netprio_cgroup.c ( can be built as a kernel module)</span><br><span class="line">devices_subsys - defined <span class="keyword">in</span> security/device_cgroup.c.</span><br><span class="line">perf_subsys (perf_event) - defined <span class="keyword">in</span> kernel/events/core.c</span><br><span class="line">hugetlb_subsys - defined <span class="keyword">in</span> mm/hugetlb_cgroup.c.</span><br><span class="line">cpu_cgroup_subsys - defined <span class="keyword">in</span> kernel/sched/core.c</span><br><span class="line">cpuacct_subsys - defined <span class="keyword">in</span> kernel/sched/core.c</span><br></pre></td></tr></table></figure>
<p><img src="/images/docker/cgroup-kernel-view1.jpg" alt="cgroup kernel part1"></p>
<p><img src="/images/docker/cgroup-kernel-view2.jpg" alt="cgroup kernel part2"></p>
<p><strong>css_set:(set of groups from different subsystems)</strong><br>When a process forks, the child will be in all the same cgroups that the parent is in. While either process could be moved around, they very often are not. This means that it is quite common for a collection of processes (and the threads within them) to all be in the same set of cgroups. To make use of this commonality, <mark>the struct css_set exists. It identifies a set of cgroups (css stands for “cgroup subsystem state”) and each thread is attached to precisely one css_set</mark>. All css_sets are linked together in a hash table so that when a process or thread is moved to a new cgroup, a pre-existing css_set can be reused, if one exists with the required set of cgroups</p>
<h1 id="cgroupv2"><a href="#cgroupv2" class="headerlink" title="cgroupv2"></a>cgroupv2</h1><p><strong>Why cgroupv2(kernel&gt;&#x3D;4.5)?</strong><br>There was a lot of <a href="https://lwn.net/Articles/484251/">criticism</a> and <a href="https://www.youtube.com/watch?v=PzpG40WiEfM">issues</a> about the implementation of cgroups, which seems to present <code>a number of inconsistencies and a lot of chaos</code>. For example, when creating subgroups (cgroups within cgroups), several cgroup controllers propagate parameters to their immediate subgroups, while other controllers do not. Or, for a different example, some controllers use interface files (such as the cpuset controller’s clone_children) that appear in all controllers even though they only affect one. also due to different subsystem(cpu, memory, blkio), limitation only affect within that subsystem, hence when buffer io is enabled(enabled by default), write&#x2F;read only happens at page cache, blkio who works at block layer, does not know it, hence can not limit disk io correctly! but with cgroupv2, as memory, blkio can be enabled at same group, so blkio with v2 can works as expected!!!</p>
<p><strong>The biggest change to cgroups in v2 is a focus on simplicity to the hierarchy</strong>. Where v1 used independent trees for each controller (such as &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu&#x2F;GROUPNAME and &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memory&#x2F;GROUPNAME), v2 will unify those in &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;GROUPNAME. In the same vein, <strong>if Process X joins &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;test, every controller enabled for test will control Process X</strong></p>
<p>For example, in cgroups v2, memory protection is configured in four files:</p>
<ul>
<li>memory.min: this memory will never be reclaimed.</li>
<li>memory.low: memory below this threshold is reclaimed if there’s no other reclaimable memory in other cgroups.</li>
<li>memory.high: the kernel will attempt to keep memory usage below this configuration.</li>
<li>memory.max: if memory reaches this level the OOM killer (a system used to sacrifice one or more processes to free up memory for the system when all else fails) is invoked on the cgroup</li>
</ul>
<p><a href="https://chrisdown.name/talks/cgroupv2/cgroupv2-fosdem.pdf">cgroupv1 vs cgroupv2</a></p>
<p><a href="https://zorrozou.github.io/docs/%E8%AF%A6%E8%A7%A3Cgroup%20V2.html">cgroupv2 usage</a> and <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_monitoring_and_updating_the_kernel/using-cgroups-v2-to-control-distribution-of-cpu-time-for-applications_managing-monitoring-and-updating-the-kernel">redhat cgroupv2 guideline</a></p>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="check-cgroups-of-a-given-process"><a href="#check-cgroups-of-a-given-process" class="headerlink" title="check cgroups of a given process"></a>check cgroups of a given process</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /proc/$pid/cgroup</span></span><br></pre></td></tr></table></figure>
<h3 id="change-a-cgroup-of-a-given-process"><a href="#change-a-cgroup-of-a-given-process" class="headerlink" title="change a cgroup of a given process"></a>change a cgroup of a given process</h3><p>change cpu cgroup of given process</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># you can create a sub group under a subsystem or under another group</span></span><br><span class="line"><span class="comment"># tasks # attach a task(thread) and show list of threads</span></span><br><span class="line"><span class="comment"># cgroup.procs # show list of processes</span></span><br><span class="line"><span class="variable">$echo</span> <span class="variable">$pid</span> &gt; /sys/fs/cgroup/cpu/<span class="variable">$sub_group</span>/cgroup.procs</span><br></pre></td></tr></table></figure>
<h3 id="check-root-node-of-particular-cgroup-subsystem"><a href="#check-root-node-of-particular-cgroup-subsystem" class="headerlink" title="check root node of particular cgroup(subsystem)"></a>check root node of particular cgroup(subsystem)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls /sys/fs/cgroup/xx</span></span><br></pre></td></tr></table></figure>
<h3 id="create-cgroup-sub-group-of-a-given-cgroup-subsystem"><a href="#create-cgroup-sub-group-of-a-given-cgroup-subsystem" class="headerlink" title="create cgroup(sub group of a given cgroup subsystem)"></a>create cgroup(sub group of a given cgroup subsystem)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create a cpu control group, you can create cgroup alone without process, later on add process to it</span><br><span class="line"><span class="comment"># cd /sys/fs/cgroup/cpu/</span></span><br><span class="line"><span class="comment"># mkdir test_cg</span></span><br><span class="line">after this system will add attributes files(control files) automatically, <span class="keyword">then</span> you can change</span><br><span class="line">parameters <span class="keyword">for</span> this group to control cpu etc</span><br></pre></td></tr></table></figure>
<p><mark>the created cgroup will be deleted after reboot!!!, when created, there is no process in this group</mark></p>
<p><strong>when you delete a cgroup, all its processes move to its parent group.</strong></p>
<h3 id="run-a-program-in-a-given-cgroup"><a href="#run-a-program-in-a-given-cgroup" class="headerlink" title="run a program in a given cgroup"></a>run a program in a given cgroup</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cgexec</span> -g controllers:path_to_cgroup <span class="built_in">command</span> arguments </span><br><span class="line"><span class="comment"># must create cgroup before!!!</span></span><br><span class="line"><span class="comment"># path: -g memory:test/sub</span></span><br><span class="line"><span class="variable">$cgexec</span> -g memory:<span class="built_in">test</span> stress-ng -m 1 --vm-bytes 128M -t 10s --metrics-brief</span><br><span class="line"><span class="variable">$cgexec</span> -g memory:<span class="built_in">test</span> -g cpu:<span class="built_in">test</span> stress-ng -m 1 --vm-bytes 128M -t 10s --metrics-brief</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
        <category>core-tech</category>
      </categories>
      <tags>
        <tag>cgroups</tag>
        <tag>resource controller</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-core-tech-ns</title>
    <url>/2019/10/14/docker-core-tech-ns/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Namespaces provide processes with their own view of the system, limit what you can see(and therefore use)</p>
<span id="more"></span>

<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><img src="https://8gwifi.org/docs/img/linux-namespace1.png" alt="Namespaces"></p>
<p>There are multiple namespaces:</p>
<ul>
<li><p>pid<br>each PID namespace has it own numbering(start at 1), when PID 1 goes away, the whole namespace is killed. Even you run process in a PID namespace, root pid namespace still sees it, but the pid number is different in both namespaces, but others non-root pid namespace does NOT see it.</p>
</li>
<li><p>net<br>processes within a given network namespace get their own private network stack, including:</p>
<ul>
<li>network interfaces</li>
<li>routing tables</li>
<li>iptables rules</li>
<li>sockets(inet socket, <strong>NOT unix socket</strong>)<br><mark>network interface belongs to exactly one net namespace, same for (inet)socket, the newly create net namespace only contains a loopback, no others, when a network space is deleted, all its movable network devices are moved back to the default network namespace, while unmovable devices(device who have NETIF_F_NETNS_LOCAL in their features) and virtual devices are not moved to the default network namespace</mark></li>
</ul>
</li>
<li><p>mnt(mount)<br>processes can have ‘private’ mounts, mounts&#x2F;unmounts in that mount namespace are invisible to the rest of the system</p>
</li>
<li><p>uts<br>gethostname&#x2F;sethostname can be different at uts namespace, you can change hostname in this namespace, but not affect others(namespace)</p>
</li>
<li><p>ipc<br>Allow a process to have its own</p>
<ul>
<li>IPC semaphores</li>
<li>IPC message queues</li>
<li>IPC shared memory</li>
</ul>
</li>
<li><p>user<br>Allows to map UID&#x2F;GID(that means you can see mapped uid&#x2F;gid in user namespace, you can’t know the real pid&#x2F;gid in container with this mapping)</p>
<ul>
<li>UID 0-1999 in container C1 is mapped to UID 10000-11999 on host(security improvement)</li>
</ul>
</li>
</ul>
<h2 id="mount-namespace"><a href="#mount-namespace" class="headerlink" title="mount namespace"></a>mount namespace</h2><p>Mount namespaces provide isolation of the list of mounts seen by the processes in each namespace instance.  Thus, the processes in each of the mount namespace instances will see distinc  t single-directory hierarchies.</p>
<p>A new mount namespace is created using either clone(2) or unshare(2) with the CLONE_NEWNS flag.  When a new mount namespace is created, its mount list is initialized as follows:</p>
<ul>
<li>If the namespace is created using clone(2), the mount list of the child’s namespace is a copy of the mount list in the parent process’s mount namespace.</li>
<li>If the namespace is created using unshare(2), the mount list of the new namespace is a copy of the mount list in the caller’s previous mount namespace.</li>
</ul>
<p>Subsequent modifications to the mount list (mount(2) and umount(2)) in either mount namespace will not (by default MS_PRIVATE) affect the mount list seen in the other namespace, this is controlled by propagation types</p>
<p><strong>propagation types</strong></p>
<ul>
<li><p>MS_SHARED<br>This mount shares events with members of a peer group(parent process). Mount and unmount events immediately under this mount will propagate to the other mounts that are members of the peer group.  Propagation here means that the same mount or unmount will automatically occur under all of the other mounts in the peer group.  Conversely, mount and unmount events that take place under peer mounts will propagate to this mount.</p>
</li>
<li><p>MS_PRIVATE(default)<br>This mount is private; it does not have a peer group. Mount and unmount events do not propagate into or out of this mount.</p>
</li>
<li><p>MS_SLAVE<br>Mount and unmount events propagate into this mount from a (master) shared peer group.  Mount and unmount events under this mount do not propagate to any peer.</p>
</li>
</ul>
<p>Note that a mount can be the slave of another peer group while at the same time sharing mount and unmount events with a peer group of which it is a member.  (More precisely, <code>one peer group can be the slave of another peergroup</code>.)</p>
<ul>
<li>MS_UNBINDABLE<br>This is like a private mount, and in addition this mount can’t be bind mounted.  Attempts to bind mount this mount (mount(2) with the MS_BIND flag) will fail.</li>
</ul>
<p>When a recursive bind mount (mount(2) with the MS_BIND and MS_REC flags) is performed on a directory subtree, any bind mounts within the subtree are automatically pruned<br>(i.e., not replicated) when replicating that subtree to<br>produce the target subtree.</p>
<h2 id="kernel-view"><a href="#kernel-view" class="headerlink" title="kernel view"></a>kernel view</h2><p>each namespace is identified by an inode(unique), if two processes are in the same namespace if they see the same inode for equivalent namespace types.</p>
<p><img src="/images/docker/namespace-kview.jpg" alt="namespace in kernel"></p>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="how-to-create-different-namespaces"><a href="#how-to-create-different-namespaces" class="headerlink" title="how to create different namespaces"></a>how to create different namespaces</h3><ul>
<li>namespaces are created with the <strong>clone()</strong> system call(with extra flags when creating a new process), <strong>when the last process of a namespace exits, it’s destroyed automatically by kernel</strong> with system call(but can be preserved)</li>
<li>process can ‘join’ a namespace by <strong>setns()</strong></li>
</ul>
<p><strong>clone flags for namespace</strong></p>
<ul>
<li>CLONE_NEWNS</li>
<li>CLONE_NEWNET</li>
<li>CLONE_NEWPID</li>
<li>CLONE_NEWIPC</li>
<li>CLONE_NEWUTS</li>
<li>CLONE_NEWUSER</li>
</ul>
<p><mark>All needs CAP_SYS_ADMIN except CLONE_NEWUSER</mark></p>
<h3 id="how-to-check-namespaces-of-given-process"><a href="#how-to-check-namespaces-of-given-process" class="headerlink" title="how to check namespaces of given process"></a>how to check namespaces of given process</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -al /proc/<span class="variable">$pid</span>/ns</span><br><span class="line">dr-x--x--x 2 root root 0 Oct 25 16:24 .</span><br><span class="line">dr-xr-xr-x 9 root root 0 Oct 11 22:15 ..</span><br><span class="line">lrwxrwxrwx 1 root root 0 Oct 25 16:24 ipc -&gt; ipc:[4026531839]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Oct 25 16:24 mnt -&gt; mnt:[4026531840]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Oct 25 16:24 net -&gt; net:[4026531956]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Oct 25 16:24 pid -&gt; pid:[4026531836]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Oct 25 16:24 user -&gt; user:[4026531837]</span><br><span class="line">lrwxrwxrwx 1 root root 0 Oct 25 16:24 uts -&gt; uts:[4026531838]</span><br></pre></td></tr></table></figure>

<h3 id="how-to-communicate-between-network-namespaces"><a href="#how-to-communicate-between-network-namespaces" class="headerlink" title="how to communicate between network namespaces"></a>how to communicate between network namespaces</h3><p><strong>use veth pairs or unix socket</strong></p>
<h3 id="how-to-check-if-device-is-netns-local-or-not"><a href="#how-to-check-if-device-is-netns-local-or-not" class="headerlink" title="how to check if device is netns local or not"></a>how to check if device is netns local or not</h3><p>if device with NETIF_F_NETNS_LOCAL, it’s not allowed to move between network namespace; example for this devices</p>
<ul>
<li><p>loopback, vxlan, pp, bridge</p>
</li>
<li><p>use <strong>ethtool</strong> to check if device is set or not.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ethtool -k eth0 | grep <span class="built_in">local</span></span><br><span class="line">netns-local: off [fixed]</span><br><span class="line"></span><br><span class="line">$ ethtool -k lo | grep <span class="built_in">local</span></span><br><span class="line">netns-local: on [fixed]</span><br></pre></td></tr></table></figure>
<h3 id="how-to-check-mounted-point-of-the-system"><a href="#how-to-check-mounted-point-of-the-system" class="headerlink" title="how to check mounted point of the system"></a>how to check mounted point of the system</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># this is the real mounts from kernel</span></span><br><span class="line">$ <span class="built_in">cat</span> /proc/mounts</span><br><span class="line"></span><br><span class="line"><span class="comment"># it just read file from /etc/mtab</span></span><br><span class="line">$ mount</span><br></pre></td></tr></table></figure>
<h3 id="how-to-run-a-program-in-another-namespace-from-shell"><a href="#how-to-run-a-program-in-another-namespace-from-shell" class="headerlink" title="how to run a program in another namespace from shell"></a>how to run a program in another namespace from shell</h3><p>There are two command for this</p>
</li>
<li><p><code>unshare</code> to run command in <code>new namespace or existing namespace</code></p>
</li>
<li><p><code>nsenter</code> to run command in <code>another process&#39;s namespace</code></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unshare [options] &lt;program&gt; [&lt;argument&gt;...]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> -m, --mount[=&lt;file&gt;]      unshare mounts namespace</span><br><span class="line"> -u, --uts[=&lt;file&gt;]        unshare UTS namespace (hostname etc)</span><br><span class="line"> -i, --ipc[=&lt;file&gt;]        unshare System V IPC namespace</span><br><span class="line"> -n, --net[=&lt;file&gt;]        unshare network namespace</span><br><span class="line"> -p, --pid[=&lt;file&gt;]        unshare pid namespace</span><br><span class="line"> -U, --user[=&lt;file&gt;]       unshare user namespace</span><br><span class="line"> -f, --fork                fork before launching &lt;program&gt;</span><br><span class="line">     --mount-proc[=&lt;<span class="built_in">dir</span>&gt;]  mount proc filesystem first (implies --mount)</span><br><span class="line"> -r, --map-root-user       map current user to root (implies --user)</span><br><span class="line">     --propagation slave|shared|private|unchanged</span><br><span class="line">                           modify mount propagation <span class="keyword">in</span> mount namespace</span><br><span class="line"> -s, --setgroups allow|deny  control the setgroups syscall <span class="keyword">in</span> user namespaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># without namespace option provided, it uses the same as its parent!!!</span></span><br><span class="line"><span class="comment"># PRIVATE mount namespace</span></span><br><span class="line"><span class="comment"># after copied mount list from parent, they will never affect each other</span></span><br><span class="line">$ unshare -m /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># shared mount namespace</span></span><br><span class="line"><span class="comment"># after copied mount list from parent, they will always affect each other</span></span><br><span class="line"><span class="comment"># mount on one, will also mount automatically on peer!!!</span></span><br><span class="line">$ unshare --propagation shared -m /bin/bash</span><br></pre></td></tr></table></figure>
<h3 id="network-namespace-command-list"><a href="#network-namespace-command-list" class="headerlink" title="network namespace command list"></a>network namespace command list</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show all net ns</span></span><br><span class="line">$ ip netns list</span><br><span class="line"></span><br><span class="line"><span class="comment"># create netns</span></span><br><span class="line">$ ip netns add ns1</span><br><span class="line">$ <span class="built_in">ls</span> /var/run/netns</span><br><span class="line"></span><br><span class="line"><span class="comment"># move eth0 to ns1</span></span><br><span class="line">$ ip <span class="built_in">link</span> <span class="built_in">set</span> dev eth0 netns ns1</span><br><span class="line"></span><br><span class="line"><span class="comment"># run command in netns</span></span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns1 bash</span><br><span class="line"><span class="comment"># then</span></span><br><span class="line">$ ifconfig -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># show all processes joined a netns</span></span><br><span class="line">$ ip netns pids ns1</span><br><span class="line"></span><br><span class="line"><span class="comment"># check which netns a process belongs to</span></span><br><span class="line">$ ip netns identify <span class="variable">$pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># delete a namespace</span></span><br><span class="line">$ ip netns delete ns1</span><br><span class="line"></span><br><span class="line"><span class="comment"># how two netns communicate(ping with each other or send() packet through socket)</span></span><br><span class="line"><span class="comment"># use veth pair, two virtual net devices(like a pipe), put them at different netns.</span></span><br><span class="line">$ ip <span class="built_in">link</span> add name v1 <span class="built_in">type</span> veth peer name v1_peer</span><br><span class="line"></span><br><span class="line"><span class="comment"># check veth pair</span></span><br><span class="line">$ ip -d <span class="built_in">link</span> show v1</span><br><span class="line">443: v1@v1_peer: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 76:01:28:8f:09:4f brd ff:ff:ff:ff:ff:ff promiscuity 0 </span><br><span class="line">--&gt;  veth addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 </span><br><span class="line"></span><br><span class="line">$ ip -d <span class="built_in">link</span> show v1_peer</span><br><span class="line">442: v1_peer@v1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether aa:12:<span class="built_in">df</span>:8a:ce:4c brd ff:ff:ff:ff:ff:ff promiscuity 0 </span><br><span class="line">--&gt;  veth addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 </span><br><span class="line"></span><br><span class="line"><span class="comment"># @v1 means its peer name, veth means veth pair</span></span><br><span class="line"></span><br><span class="line">$ ip <span class="built_in">link</span> <span class="built_in">set</span> dev v1 netns ns1</span><br><span class="line">$ ip <span class="built_in">link</span> <span class="built_in">set</span> dev v1_peer netns ns2</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns1 ifconfig v1 192.168.1.1/24 up</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns2 ifconfig v1_peer 192.168.1.2/24 up</span><br><span class="line"></span><br><span class="line"><span class="comment"># now the two netns can ping each other</span></span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns1 bash</span><br><span class="line">$ ping 192.168.1.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># how process runs in a netns communicates with internet.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># One way:</span></span><br><span class="line"><span class="comment"># 1. move a physical ethx into that namespace</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># The other(mostly used)</span></span><br><span class="line"><span class="comment"># create a tunnel(veth pairs)between the netns and default ns, then create a bridge that contains a physical interface and one end of the tunnel that in root netns, the other side is in netns.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># create bridge and add a physical device to it</span></span><br><span class="line"></span><br><span class="line">$ sudo brctl addbr br0</span><br><span class="line">$ ifconfig eth0 0.0.0.0</span><br><span class="line">$ sudo brctl addif br0 eth0</span><br><span class="line">$ ifconfig br0 up</span><br><span class="line">$ dhclient br0</span><br><span class="line"></span><br><span class="line"><span class="comment"># add veth paris and add one end to the bridge</span></span><br><span class="line">$ sudo ip <span class="built_in">link</span> add name veth1 <span class="built_in">type</span> veth peer name veth1_peer</span><br><span class="line">$ sudo ifconfig veth1 up</span><br><span class="line">$ sudo brctl addif br0 veth1</span><br><span class="line"></span><br><span class="line"><span class="comment"># add peer to netns and get ip from bridge</span></span><br><span class="line">$ sudo ip <span class="built_in">link</span> <span class="built_in">set</span> dev veth1_peer netns ns1</span><br><span class="line">$ sudo ip netns <span class="built_in">exec</span> ns1 bash</span><br><span class="line">$ dhclient veth1_peer (inside netns)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
        <category>ns</category>
      </categories>
      <tags>
        <tag>namespace</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-core-tech-chroot</title>
    <url>/2019/10/11/docker-core-tech-chroot/</url>
    <content><![CDATA[<h1 id="Chroot"><a href="#Chroot" class="headerlink" title="Chroot"></a>Chroot</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Every process&#x2F;command in Linux&#x2F;Unix like systems has a current working directory called root directory. <mark>chroot changes the root directory for currently running processes as well as its child processes.</mark></p>
<p>it creates a virtualized environment in a Unix(linux) operating system, separating it from the main operating system’s directory structure. This process essentially generates a confined space with <mark class="label success">its own root directory, to run software programs</mark>. This virtual environment runs separately from the main operating system&#39;s root directory.</p>
<p>Any software program run in this environment can only access files within its own directory tree. It <mark>cannot access files outside of that directory tree</mark>. This confined virtual environment is often called a <mark class="label success">"chroot jail".</mark></p>
<span id="more"></span>
<p><strong>Use cases</strong></p>
<ul>
<li>Privilege separation for unprivileged process such as Web-server or DNS server.</li>
<li>Setting up a test environment.</li>
<li>Run programs or ABI in-compatibility programs without crashing application or system. different apps in the same system can use different libraries, it’s what container image needs.</li>
<li>System recovery.</li>
<li>Reinstall the bootloader such as Grub or Lilo.</li>
<li>Password recovery – Reset a forgotten password and more.</li>
</ul>
<h2 id="Example-to-use-chroot"><a href="#Example-to-use-chroot" class="headerlink" title="Example to use chroot"></a>Example to use chroot</h2><p><strong>Two ways to change root directory</strong></p>
<ul>
<li>chroot() system call(binary with CAP_SYS_CHROOT capability)</li>
<li>chroot linux command (super user)</li>
</ul>
<p>let&#39;s use chroot as the example to show how we should do on linux(ubuntu)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">format:</span><br><span class="line"><span class="comment"># chroot /path/to/new/root command (must run with super user)</span></span><br><span class="line"><span class="built_in">command</span> is the <span class="built_in">command</span>(<span class="keyword">in</span> new root) that will run after <span class="built_in">chroot</span>, <span class="keyword">if</span> not provided /bin/sh by default</span><br></pre></td></tr></table></figure>
<mark class="label warning">Note: in order to run this command in new root dir, the new root dir must have such command and its dependency before chroot !!!</mark>

<p><mark>tested on ubuntu16.04</mark></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir /tmp/new_root</span></span><br><span class="line"><span class="comment"># mkdir -p /tmp/new_root/&#123;bin,lib64,lib/x86_64-linux-gnu&#125;</span></span><br><span class="line"><span class="comment"># cp /bin/bash /tmp/new_root/bin</span></span><br><span class="line"></span><br><span class="line">check bash depends</span><br><span class="line"><span class="comment"># ldd /bin/bash</span></span><br><span class="line">        linux-vdso.so.1 =&gt;  (0x00007ffc6cd67000)</span><br><span class="line">        libtinfo.so.5 =&gt; /lib/x86_64-linux-gnu/libtinfo.so.5 (0x00007f9bf4c85000)</span><br><span class="line">        libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f9bf4a81000)</span><br><span class="line">        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f9bf46b7000)</span><br><span class="line">        /lib64/ld-linux-x86-64.so.2 (0x00007f9bf4eae000)</span><br><span class="line"></span><br><span class="line">Copy required libs to new root</span><br><span class="line"><span class="comment"># cp /lib/x86_64-linux-gnu/libtinfo.so.5  /lib/x86_64-linux-gnu/libdl.so.2 /tmp/new_root/lib/x86_64-linux-gnu</span></span><br><span class="line"><span class="comment"># cp /lib/x86_64-linux-gnu/libc.so.6 /tmp/new_root/lib/x86_64-linux-gnu</span></span><br><span class="line"><span class="comment"># cp /lib64/ld-linux-x86-64.so.2 /tmp/new_root/lib64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chroot /tmp/new_root /bin/bash</span></span><br><span class="line">bash-4.3<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">bash-4.3<span class="comment"># ls</span></span><br><span class="line">\<span class="built_in">command</span> not found</span><br><span class="line"></span><br><span class="line">bash-4.4<span class="comment"># echo $PATH</span></span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin</span><br></pre></td></tr></table></figure>
<p><mark> here we just copy bash, if you run ls, you need to copy ls and it dependency as well</mark></p>
]]></content>
      <categories>
        <category>docker</category>
        <category>core-tech</category>
      </categories>
      <tags>
        <tag>chroot</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-faq</title>
    <url>/2019/10/18/docker-faq/</url>
    <content><![CDATA[<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><p>Frequently asked questions about Docker.</p>
<span id="more"></span>

<h2 id="how-to-capture-packet-for-a-container"><a href="#how-to-capture-packet-for-a-container" class="headerlink" title="how to capture packet for a container"></a>how to capture packet for a container</h2><p>There are two ways to capture packet for a given container</p>
<p><strong>way1: capture in the given container</strong></p>
<p>go to that container, use tcpdump(install it first if not available) in it.</p>
<p>required:</p>
<ul>
<li>container has tcpdump</li>
<li>container no tcpdump but can install tcpdump on it from local or internet(change the container)</li>
</ul>
<p><strong>way2: capture in another container which shares the same net with the given container</strong></p>
<p>In some case, you can’t change the given container or it’s complex to install tcpdump on the given container, so create a template container which has tcpdump installed and shared the same network with given container.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build -t tcpdump - &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">FROM ubuntu</span></span><br><span class="line"><span class="string">RUN apt-get update &amp;&amp; apt-get install -y tcpdump &amp;&amp; \</span></span><br><span class="line"><span class="string">apt-get install -y net-tools &amp;&amp; \</span></span><br><span class="line"><span class="string">rm -rf /var/lib/apt/lists/* &amp;&amp; apt-get clean</span></span><br><span class="line"><span class="string">CMD /bin/bash</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create an image called tcpdump with tcpdump installed</span></span><br><span class="line"><span class="comment"># then create a container with this image shares network with another container</span></span><br><span class="line"><span class="comment"># rm means container will be destroy when exit.</span></span><br><span class="line">$ docker run --<span class="built_in">rm</span> -it --net=container:99c1bd6b342c tcpdump</span><br><span class="line"><span class="comment"># this will create unnamed container from image tcpdump and shared network with the container that you want to capture packet.</span></span><br></pre></td></tr></table></figure>


<h2 id="how-to-deploy-docker-env-on-lots-of-machine"><a href="#how-to-deploy-docker-env-on-lots-of-machine" class="headerlink" title="how to deploy docker env on lots of machine?"></a>how to deploy docker env on lots of machine?</h2><p>Use <code>Docker Machine</code>, docker machine provides a client to deploy docker env on lots machine(windows, mac, linux).</p>
<h2 id="whats-dockerd-docker-containerd-docker-containerd-shim-docker-runc"><a href="#whats-dockerd-docker-containerd-docker-containerd-shim-docker-runc" class="headerlink" title="whats dockerd, docker-containerd,docker-containerd-shim, docker-runc"></a>whats dockerd, docker-containerd,docker-containerd-shim, docker-runc</h2><p><img src="/images/docker/docker-daemons.JPG" alt="docker daemon"></p>
<p><mark>docker-container-shim runs in host, not in container, while, entrypoint is the first process runs in container</mark></p>
<p>docker 公司将 <strong>libcontainer 捐出并改名为 runC 项目</strong>，交由一个完全中立的基金会管理，然后以 runC 为依据，大家共同<strong>制定一套容器和镜像的标准和规范 OCI</strong></p>
<p>2016 年 4 月，docker 1.11 版本之后开始引入了 containerd 和 runC，Docker 开始依赖于 containerd 和 runC 来管理容器，<strong>containerd 也可以操作满足 OCI 标准规范的其他容器工具，之后只要是按照 OCI 标准规范开发的容器工具，都可以被 containerd 使用</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker</span><br><span class="line">docker                  docker-containerd-ctr   dockerd</span><br><span class="line">docker-containerd       docker-containerd-shim  docker-runc</span><br></pre></td></tr></table></figure>
<ul>
<li><p>docker<br>docker 的命令行工具，是给用户和 docker daemon 建立通信的客户端。</p>
</li>
<li><p>dockerd<br>dockerd 是 docker 架构中一个常驻在后台的系统进程，称为 docker daemon，dockerd 实际调用的还是 containerd 的 api 接口（<strong>rpc</strong> 方式实现）,docker daemon 的作用主要有以下两方面：</p>
<ul>
<li>接收并处理 docker client 发送的请求</li>
<li>管理所有的 docker 容器<br>有了 containerd 之后，dockerd 可以独立升级，以此避免之前 dockerd 升级会导致所有容器不可用的问题。</li>
</ul>
</li>
<li><p>containerd<br>containerd 是 dockerd 和 runc 之间的一个中间交流组件，<strong>docker 对容器的管理和操作基本都是通过 containerd 完成的</strong>.</p>
</li>
</ul>
<p>containerd 的主要功能有：<br>    - 容器生命周期管理<br>    - 镜像管理<br>    - 存储管理<br>    - 容器网络接口及网络管理<br>    - 日志管理</p>
<ul>
<li><p>containerd-shim<br>containerd-shim 是一个真实运行容器的载体，每启动一个容器都会起一个新的containerd-shim的一个进程， 它直接通过指定的三个参数：容器id，boundle目录（containerd 对应某个容器生成的目录，一般位于：&#x2F;var&#x2F;run&#x2F;docker&#x2F;libcontainerd&#x2F;containerID，其中包括了容器配置和标准输入、标准输出、标准错误三个管道文件），运行时二进制（默认为runC）来调用 runc 的 api 创建一个容器，上面的 docker 进程图中可以直观的显示。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps -ef</span><br><span class="line">...</span><br><span class="line">docker-containerd-shim 0d55f781ae78a903e68fe6b7941e78c82ca4362b550ca5e7dfc522c113d29226 /var/run/docker/libcontainerd/0d55f781ae78a903e68fe6b7941e78c82ca4362b550ca5e7dfc522c113d29226 docker-runc</span><br></pre></td></tr></table></figure>
<p>  其主要作用是：<br>  它允许容器运行时(即 runC)在启动容器之后退出，简单说就是不必为每个容器一直运行一个容器运行时(runC)<br>  即使在 containerd 和 dockerd 都挂掉的情况下，容器的标准 IO 和其它的文件描述符也都是可用的<br>  向 containerd 报告容器的退出状态<br>  有了它就可以在不中断容器运行的情况下升级或重启 dockerd，对于生产环境来说意义重大。</p>
</li>
<li><p>runC<br>runC 是 Docker 公司按照 OCI 标准规范编写的一个操作容器的命令行工具，其前身是 libcontainer 项目演化而来，runC 实际上就是 libcontainer 配上了一个轻型的客户端，是一个命令行工具端，根据 OCI（开放容器组织）的标准来创建和运行容器，实现了容器启停、资源隔离等功能。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># even without docker, dockerd, docker-containerd, we still can run a container using runC, here is an example to run busybox:</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">mkdir</span> /container</span><br><span class="line">$ <span class="built_in">cd</span> /container/</span><br><span class="line">$ <span class="built_in">mkdir</span> rootfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备容器镜像的文件系统,从 busybox 镜像中提取</span></span><br><span class="line">$ docker <span class="built_in">export</span> $(docker create busybox) | tar -C rootfs -xvf -</span><br><span class="line">$ <span class="built_in">ls</span> rootfs/</span><br><span class="line">bin  dev  etc  home  proc  root  sys  tmp  usr  var</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有了rootfs之后，我们还要按照 OCI 标准有一个配置文件 config.json 说明如何运行容器，</span></span><br><span class="line"><span class="comment"># 包括要运行的命令、权限、环境变量等等内容，runc 提供了一个命令可以自动帮我们生成</span></span><br><span class="line">$ docker-runc spec</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">config.json  rootfs</span><br><span class="line"></span><br><span class="line">$ docker-runc run simplebusybox    <span class="comment">#启动容器</span></span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">bin   dev   etc   home  proc  root  sys   tmp   usr   var</span><br></pre></td></tr></table></figure>
<p><mark>rootfs之后，我们还要按照 OCI 标准有一个配置文件 config.json 说明如何运行容器，</mark></p>
<h2 id="docker-daemon-uses-registry-mirror-and-open-tcp-socket"><a href="#docker-daemon-uses-registry-mirror-and-open-tcp-socket" class="headerlink" title="docker daemon uses registry mirror and open tcp socket"></a>docker daemon uses registry mirror and open tcp socket</h2><p>create file &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d&#x2F;override.conf then restart service with <code>systemctl restart docker</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375 \</span><br><span class="line">          --registry-mirror https://registry.docker-cn.com</span><br></pre></td></tr></table></figure>

<h2 id="push-local-image-to-docker-hub-for-users-use"><a href="#push-local-image-to-docker-hub-for-users-use" class="headerlink" title="push local image to docker hub for users use"></a>push local image to docker hub for users use</h2><p>First you must have a docker hub account like xxx, and tag your image with this format.</p>
<p><code>xxx/yyy, xxx is you account id, yyy can be any string</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker tag yourapp xxx/yyy</span><br><span class="line">$ docker tag local_image xxx/yyy</span><br><span class="line">$ docker tag local_image xxx/yyy:new_tag</span><br><span class="line">$ docker login</span><br><span class="line">$ docker push xxx/yyy</span><br><span class="line"></span><br><span class="line"><span class="comment"># other people can download from docker hub</span></span><br><span class="line">$ docker pull xxx/yyy</span><br></pre></td></tr></table></figure>

<h2 id="what’s-the-most-used-repo-for-docker"><a href="#what’s-the-most-used-repo-for-docker" class="headerlink" title="what’s the most used repo for docker."></a>what’s the most used repo for docker.</h2><ul>
<li>docker hub:   <a href="https://hub.docker.com/">https://hub.docker.com/</a></li>
<li>google hub:   <a href="https://console.cloud.google.com/gcr/images/google-containers/GLOBAL">https://console.cloud.google.com/gcr/images/google-containers/GLOBAL</a></li>
</ul>
<h2 id="how-to-get-a-particular-attribute-of-a-container"><a href="#how-to-get-a-particular-attribute-of-a-container" class="headerlink" title="how to get a particular attribute of a container"></a>how to get a particular attribute of a container</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker inspect --format=<span class="string">&#x27;&#123;&#123;.HostConfig.CpuQuota&#125;&#125;&#x27;</span> <span class="variable">$container_id</span></span><br></pre></td></tr></table></figure>

<h2 id="how-to-map-a-host-block-device-to-container"><a href="#how-to-map-a-host-block-device-to-container" class="headerlink" title="how to map a host block device to container"></a>how to map a host block device to container</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run --device=/dev/sdb:/dev/xvda -it ubuntu /bin/bash</span><br><span class="line"><span class="comment"># /dev/sdb is host device</span></span><br><span class="line"><span class="comment"># /dev/xvda is device in container</span></span><br><span class="line"><span class="comment"># default permission: rwm(read, write, create)</span></span><br><span class="line">$ docker run --device=/dev/sdb:/dev/xvda:r -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<h2 id="how-to-IO-limit-of-a-container"><a href="#how-to-IO-limit-of-a-container" class="headerlink" title="how to IO limit of a container"></a>how to IO limit of a container</h2><p>Refer to <a href="https://jimmysong.io/docker-handbook/docs/io_resource_limit.html">docker io throttle</a>, <strong>only supports DirectIO due to blkio cgroup limitation.</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># these two policies can work together, not it only supports DirectIO, not buffer io</span></span><br><span class="line">--blkio-weight=0                Block IO weight (relative weight) accepts a weight value between 10 and 1000, default weight <span class="keyword">for</span> each device</span><br><span class="line">--blkio-weight-device=<span class="string">&quot;&quot;</span>        Block IO weight (relative device weight, format: DEVICE_NAME:WEIGHT), override default weight, example: --blkio-weight-device <span class="string">&quot;/dev/sda:100&quot;</span></span><br><span class="line"></span><br><span class="line">--device-read-bps=[]            Limit <span class="built_in">read</span> rate (bytes per second) from a device</span><br><span class="line">--device-read-iops=[]           Limit <span class="built_in">read</span> rate (IO count per second) from a device</span><br><span class="line">--device-write-bps=[]           Limit write rate (bytes per second) to a device</span><br><span class="line">--device-write-iops=[]          Limit write rate (IO count per second) to a device</span><br><span class="line"></span><br><span class="line">$ docker run -it --<span class="built_in">rm</span> --device-write-bps /dev/sda:1mb ubuntu /bin/bash</span><br><span class="line"><span class="comment"># /dev/sda is host device, it limits the rate of this container if it accesses /dev/sda</span></span><br><span class="line"></span><br><span class="line">$ docker run -it --<span class="built_in">rm</span> --device-write-iops /dev/sda:10 ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># blkio-weight is relative weight, that means if only one processA(docker process or other) with weight 100 access /dev/sda, it uses the 100% IO bandwidth,</span></span><br><span class="line"><span class="comment"># if another processB access /dev/sda at same time who belongs to another blkio group with weight 200, 1/3 bandwidth for processA, 2/3 IO bandwith for processB</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test inside each container with directIO</span></span><br><span class="line">124343<span class="comment"># time dd if=/dev/zero of=test.out bs=1M count=1024 oflag=direct</span></span><br></pre></td></tr></table></figure>

<h2 id="limit-cpu-of-a-container"><a href="#limit-cpu-of-a-container" class="headerlink" title="limit cpu of a container"></a>limit cpu of a container</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--cpu-shares , -c</span><br><span class="line">Set this flag to a value greater or less than the default of 1024 to increase or reduce the container’s weight, and give it access to a greater or lesser proportion of the host machine’s CPU cycles. This is only enforced when CPU cycles are constrained. When plenty of CPU cycles are available, all containers use as much CPU as they need. In that way, this is a soft <span class="built_in">limit</span>. It prioritizes container CPU resources <span class="keyword">for</span> the available CPU cycles. </span><br><span class="line"></span><br><span class="line"><span class="comment"># !!!It does not guarantee or reserve any specific CPU access.!!!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># let&#x27;s say there are four CPUS on host, if all containers are running CPU intensive workload</span></span><br><span class="line"><span class="comment"># first container takes one CPU</span></span><br><span class="line"><span class="comment"># second container takes one CPU</span></span><br><span class="line"><span class="comment"># third container takes two CPU</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># but if third container quits or sleep, the other two both take two CPUS !!!</span></span><br><span class="line"></span><br><span class="line">$ docker run -it --<span class="built_in">rm</span>  --cpu-shares 1024 ubuntu /bin/bash</span><br><span class="line">$ docker run -it --<span class="built_in">rm</span>  --cpu-shares 1024 ubuntu /bin/bash</span><br><span class="line">$ docker run -it --<span class="built_in">rm</span>  --cpu-shares 2048 ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line">--cpu-period &amp; --cpu-quota</span><br><span class="line">CPU quota (cpu_qota) is a feature of Linux Control Groups (cgroup). CPU quota control `how much CPU time a container can use`, `cpu_quota is the number of microseconds of CPU time` a container can use `per cpu_period`. For example configuring:</span><br><span class="line"></span><br><span class="line">cpu_quota to 50,000</span><br><span class="line">cpu_period to 100,000</span><br><span class="line"></span><br><span class="line">The container will be allocated 50,000 microseconds per 100,000 microsecond period. `A bit like (see below) the use of 0.5 CPUs`. Quota can be greater than the period. For example:</span><br><span class="line"></span><br><span class="line">    cpu_quota to 200,000</span><br><span class="line">    cpu_period to 100,000</span><br><span class="line"></span><br><span class="line">Now the container can use `200,000 microseconds of CPU time every 100,000 microseconds`. To use the CPU time there will either need to be multiple processes <span class="keyword">in</span> the container, or a multi-threaded process. `This configuration is a bit like (see below) having 2 CPUs`.</span><br><span class="line"></span><br><span class="line">cpu_quota allows setting an `upper bound on the amount of CPU time a container gets`. Linux enforces the <span class="built_in">limit</span> even <span class="keyword">if</span> CPU time is available. Quotas can hinder utilisation <span class="keyword">while</span> `providing a predictable upper bounds on CPU time.`</span><br><span class="line"></span><br><span class="line">--cpuset-cpus</span><br><span class="line">Limit the specific CPUs or cores a container can use. A comma-separated list or hyphen-separated range of CPUs a container can use, <span class="keyword">if</span> you have more than one CPU. The first CPU is numbered 0. A valid value might be 0-3 (to use the first, second, third, and fourth CPU) or 1,3 (to use the second and fourth CPU).</span><br><span class="line"></span><br><span class="line">--cpus=&lt;value&gt; 	Specify how much of the available CPU resources a container can use. For instance, <span class="keyword">if</span> the host machine has two CPUs and you <span class="built_in">set</span> --cpus=<span class="string">&quot;1.5&quot;</span>, the container is guaranteed at most one and a half of the CPUs. This is the equivalent of setting --cpu-period=<span class="string">&quot;100000&quot;</span> and --cpu-quota=<span class="string">&quot;150000&quot;</span>. shortway <span class="keyword">for</span> cpu-period and cpu-quota</span><br><span class="line"></span><br><span class="line"><span class="comment"># In order to set cpu_quota correctly, you need to know how many cpu can be used by container, then set cpu_quota and cpu_period correctly.</span></span><br><span class="line">$ docker run -it --<span class="built_in">rm</span>  --cpuset-cpus 0-1 --cpus=1.5 ubuntu /bin/bash</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">$ docker run -it --<span class="built_in">rm</span>  --cpuset-cpus 0-1 --cpu-period=100000 --cpu-quota=150000 ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># only alow cpu0 and cpu1 to run this container</span></span><br><span class="line">$ docker run -it --<span class="built_in">rm</span>  --cpuset-cpus 0-1 ubuntu /bin/bash</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="expose-Nvidia-GPU-to-a-container"><a href="#expose-Nvidia-GPU-to-a-container" class="headerlink" title="expose Nvidia GPU to a container"></a>expose Nvidia GPU to a container</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># must install nvidia runtime first on host</span></span><br><span class="line">$ apt-get install nvidia-container-runtime</span><br><span class="line"><span class="comment"># run from image ubuntu with nvidia-smi command as entrypoint</span></span><br><span class="line">$ docker run -it --<span class="built_in">rm</span> --gpus device=GPU-3a23c669-1f69-c64e-cf85-44e9b07e7a2a ubuntu nvidia-smi</span><br></pre></td></tr></table></figure>

<h2 id="limit-memory-used-by-a-container"><a href="#limit-memory-used-by-a-container" class="headerlink" title="limit memory used by a container"></a>limit memory used by a container</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># options followed by a suffix of b, k, m, g, to indicate bytes, kilobytes, megabytes, or gigabytes</span></span><br><span class="line">-m or --memory= The maximum amount of memory the container can use. If you <span class="built_in">set</span> this option, the minimum allowed value is 6m (6 megabyte).</span><br><span class="line"></span><br><span class="line"><span class="comment"># !!!it&#x27;s just cgroup limitation, it does not reserved such memory for a container!!!</span></span><br><span class="line">$ docker run -it --<span class="built_in">rm</span>  -m 100M ubuntu /bin/bash</span><br><span class="line">$ docker run -it --<span class="built_in">rm</span>  -m 10G ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># update docker memory or cpu when it&#x27;s running</span></span><br><span class="line"><span class="variable">$docker</span> update --memory 123289600 --memory-swap 123289600 ubuntu</span><br><span class="line"><span class="variable">$docker</span> update --cpus 1 ubuntu</span><br></pre></td></tr></table></figure>

<h2 id="check-stats-for-container"><a href="#check-stats-for-container" class="headerlink" title="check stats for container"></a>check stats for container</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># it will show container memory limit and how much it&#x27;s used now</span></span><br><span class="line">$ docker stats <span class="variable">$container_id</span></span><br><span class="line">CONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O</span><br><span class="line">5ed                 12.44%              104.8 MB / 104.9 MB   99.92%              4.861 kB / 648 B    9.138 GB / 10.16 GB</span><br></pre></td></tr></table></figure>

<h2 id="run-container-automatically-when-dockerd-start"><a href="#run-container-automatically-when-dockerd-start" class="headerlink" title="run container automatically when dockerd start"></a>run container automatically when dockerd start</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># run your ccontainer with  --restart=always</span></span><br><span class="line">$ docker run --restart=always -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<h2 id="expose-a-port-from-container"><a href="#expose-a-port-from-container" class="headerlink" title="expose a port from container"></a>expose a port from container</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># in this way you when you access host port, it redirect to contianer port</span></span><br><span class="line"><span class="comment"># host port: 6000</span></span><br><span class="line"><span class="comment"># container port: 22</span></span><br><span class="line">$ docker run --restart=always -p 6000:22 -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<h2 id="start-a-container-with-given-ip-and-hostname"><a href="#start-a-container-with-given-ip-and-hostname" class="headerlink" title="start a container with given ip and hostname"></a>start a container with given ip and hostname</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check subnet of bridge that container uses</span></span><br><span class="line">$ docker network <span class="built_in">ls</span></span><br><span class="line">$ docker network inspect bridge</span><br><span class="line"><span class="comment"># set with hostname and ip</span></span><br><span class="line">$ docker run --restart=always -p 6000:22 --hostname <span class="built_in">test</span> --ip 172.16.0.2 -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<h2 id="change-docker-store-x2F-var-x2F-lib-x2F-docker-to-other-dir"><a href="#change-docker-store-x2F-var-x2F-lib-x2F-docker-to-other-dir" class="headerlink" title="change docker store &#x2F;var&#x2F;lib&#x2F;docker to other dir"></a>change docker store &#x2F;var&#x2F;lib&#x2F;docker to other dir</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. Modify /lib/systemd/system/docker.service to tell docker to use our own directory </span><br><span class="line">   instead of default /var/lib/docker. In this example, I am using /p/var/lib/docker</span><br><span class="line">   </span><br><span class="line">   Apply below patch.</span><br><span class="line"></span><br><span class="line">   $ diff -uP -N /lib/systemd/system/docker.service.orig /lib/systemd/system/docker.service</span><br><span class="line">   --- /lib/systemd/system/docker.service.orig	2018-12-05 21:24:20.544852391 -0800</span><br><span class="line">   +++ /lib/systemd/system/docker.service	2018-12-05 21:25:57.909455275 -0800</span><br><span class="line">   @@ -10,7 +10,7 @@</span><br><span class="line">    <span class="comment"># the default is not to use systemd for cgroups because the delegate issues still</span></span><br><span class="line">    <span class="comment"># exists and systemd currently does not support the cgroup feature set required</span></span><br><span class="line">    <span class="comment"># for containers run by docker</span></span><br><span class="line">  -ExecStart=/usr/bin/dockerd -H unix://</span><br><span class="line">  +ExecStart=/usr/bin/dockerd -g /p/var/lib/docker -H unix://</span><br><span class="line">   ExecReload=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">   TimeoutSec=0</span><br><span class="line">   RestartSec=2</span><br><span class="line"></span><br><span class="line">2. Stop docker service</span><br><span class="line">   $ systemctl stop docker</span><br><span class="line">3. Do daemon-reload as we changed docker.service file   </span><br><span class="line">   $ systemctl daemon-reload</span><br><span class="line">4. rsync existing docker data to our new location   </span><br><span class="line">   $ rsync -aqxP /var/lib/docker/ /p/var/lib/docker/</span><br><span class="line">5. Start docker service   </span><br><span class="line">   $ systemctl start docker</span><br></pre></td></tr></table></figure>

<h2 id="inside-docker-permission-denied-to-run-some-command"><a href="#inside-docker-permission-denied-to-run-some-command" class="headerlink" title="inside docker permission denied to run some command"></a>inside docker permission denied to run some command</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># run docker with --privileged=true and must run with /usr/sbin/init</span></span><br><span class="line">$ docker run --restart=always -p 6000:22 --hostname <span class="built_in">test</span> --ip 172.16.0.2 --privileged=<span class="literal">true</span> -it ubuntu /usr/sbin/init</span><br></pre></td></tr></table></figure>

<h2 id="retireve-docker-run-command-from-container"><a href="#retireve-docker-run-command-from-container" class="headerlink" title="retireve docker run command from container"></a>retireve docker run command from container</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># use docker inspect to get all parameter of run</span></span><br><span class="line">$ pip install runlike</span><br><span class="line"></span><br><span class="line">$ runlike -p  centos7_org</span><br><span class="line">docker run \</span><br><span class="line">        --name=centos7_org \</span><br><span class="line">        --hostname=1cde10a63a09 \</span><br><span class="line">        --mac-address=02:42:ac:11:00:02 \</span><br><span class="line">        --<span class="built_in">env</span>=PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \</span><br><span class="line">        --restart=always \</span><br><span class="line">        --label=<span class="string">&#x27;org.label-schema.license=GPLv2&#x27;</span> \</span><br><span class="line">        --label=<span class="string">&#x27;org.label-schema.build-date=20201113&#x27;</span> \</span><br><span class="line">        --label=<span class="string">&#x27;org.label-schema.schema-version=1.0&#x27;</span> \</span><br><span class="line">        --label=<span class="string">&#x27;org.label-schema.vendor=CentOS&#x27;</span> \</span><br><span class="line">        --label=<span class="string">&#x27;org.opencontainers.image.created=2020-11-13 00:00:00+00:00&#x27;</span> \</span><br><span class="line">        --label=<span class="string">&#x27;org.opencontainers.image.title=CentOS Base Image&#x27;</span> \</span><br><span class="line">        --label=<span class="string">&#x27;org.opencontainers.image.licenses=GPL-2.0-only&#x27;</span> \</span><br><span class="line">        --label=<span class="string">&#x27;org.label-schema.name=CentOS Base Image&#x27;</span> \</span><br><span class="line">        --label=<span class="string">&#x27;org.opencontainers.image.vendor=CentOS&#x27;</span> \</span><br><span class="line">        --runtime=runc \</span><br><span class="line">        -t \</span><br><span class="line">        centos:7 \</span><br><span class="line">        /bin/bash</span><br></pre></td></tr></table></figure>

<h2 id="run-df-x2F-free-x2F-cpu-inside-container"><a href="#run-df-x2F-free-x2F-cpu-inside-container" class="headerlink" title="run df&#x2F;free&#x2F;cpu inside container"></a>run df&#x2F;free&#x2F;cpu inside container</h2><p>As there is no namespace for memory, cpu, block, hence when you run <code>free</code>, <code>fdisk -l</code>, <code>cat /proc/cpuinfo</code>, it shows infomation about the host!!!, it’s not one that container can use, what you see is not <code>true</code>, it’s not what container can use, it’s also <code>true</code>, it’s true for host.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it centos bash</span><br><span class="line"><span class="comment"># it&#x27;s host memory</span></span><br><span class="line">[root@423eb7c3e9a5] <span class="comment"># free -h</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          7.8Gi       538Mi       6.9Gi       8.0Mi       390Mi       7.0Gi</span><br><span class="line">Swap:         7.9Gi          0B       7.9Gi</span><br><span class="line"></span><br><span class="line"><span class="comment"># it&#x27;s host fs</span></span><br><span class="line">[root@423eb7c3e9a5 opt]<span class="comment"># df -h</span></span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">overlay                   50G   23G   28G  46% /</span><br><span class="line">tmpfs                     64M     0   64M   0% /dev</span><br><span class="line">tmpfs                    3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">shm                       64M     0   64M   0% /dev/shm</span><br><span class="line">/dev/vg1/lv1              89M  4.9M   84M   6% /opt</span><br><span class="line">/dev/mapper/centos-root   50G   23G   28G  46% /etc/hosts</span><br><span class="line">tmpfs                    3.9G     0  3.9G   0% /proc/asound</span><br><span class="line">tmpfs                    3.9G     0  3.9G   0% /proc/acpi</span><br><span class="line">tmpfs                    3.9G     0  3.9G   0% /proc/scsi</span><br><span class="line">tmpfs                    3.9G     0  3.9G   0% /sys/firmware</span><br><span class="line"></span><br><span class="line"><span class="comment"># it&#x27;s host cpu info</span></span><br><span class="line">[root@423eb7c3e9a5 opt]<span class="comment"># cat /proc/cpuinfo </span></span><br><span class="line">processor       : 0</span><br><span class="line">vendor_id       : GenuineIntel</span><br><span class="line">cpu family      : 6</span><br><span class="line">model           : 165</span><br><span class="line">model name      : Intel(R) Core(TM) i7-10700T CPU @ 2.00GHz</span><br><span class="line">stepping        : 5</span><br><span class="line">cpu MHz         : 1992.000</span><br><span class="line">cache size      : 16384 KB</span><br><span class="line">physical <span class="built_in">id</span>     : 0</span><br><span class="line">siblings        : 8</span><br><span class="line">core <span class="built_in">id</span>         : 0</span><br><span class="line">cpu cores       : 8</span><br><span class="line">apicid          : 0</span><br><span class="line">initial apicid  : 0</span><br><span class="line">fpu             : <span class="built_in">yes</span></span><br><span class="line">fpu_exception   : <span class="built_in">yes</span></span><br><span class="line">cpuid level     : 22</span><br><span class="line">wp              : <span class="built_in">yes</span></span><br><span class="line">flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc eagerfpu pni pclmulqdq ssse3 cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single fsgsbase avx2 invpcid rdseed clflushopt md_clear flush_l1d arch_capabilities</span><br><span class="line">bogomips        : 3984.00</span><br><span class="line">clflush size    : 64</span><br><span class="line">cache_alignment : 64</span><br><span class="line">address sizes   : 39 bits physical, 48 bits virtual</span><br><span class="line">power management:</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># check disk size that can be used by container, please check https://cyun.tech/docker-persist-data</span></span><br><span class="line"><span class="comment"># all limits you have with containers using something like the overlay2 filesystem are inherited from the parent filesystem. </span></span><br><span class="line"><span class="comment"># Since docker does everything under /var/lib/docker, your available disk space on that filesystem are the same as the limits you&#x27;ll see inside of a container.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check cpu and memory can be used for this container, run docker inspec</span></span><br><span class="line">$ docker inspect centos | grep Cpuset</span><br><span class="line">89:            <span class="string">&quot;CpusetCpus&quot;</span>: <span class="string">&quot;0-1&quot;</span>,</span><br><span class="line">90:            <span class="string">&quot;CpusetMems&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">$ docker inspect centos | grep Memory</span><br><span class="line">76:            <span class="string">&quot;Memory&quot;</span>: 2147483648,</span><br></pre></td></tr></table></figure>

<h2 id="limit-rootfs-size-per-container"><a href="#limit-rootfs-size-per-container" class="headerlink" title="limit rootfs size per container"></a>limit rootfs size per container</h2><p>By default, docker sees the same disk size as host and can use it as well, but in some case we want to limit storage size used by container, <code>--storage-opt size=xxx</code> can do this, but limit to some storage driver <code>devicemapper, btrfs, overlay2, windowsfilter and zfs</code>  For the <code>devicemapper, btrfs, windowsfilter and zfs</code> drivers, user cannot pass a size less than the <code>Default BaseFS Size</code>. For the <code>overlay2</code> storage driver, the size option is only available if the backing fs is <code>xfs and mounted with the pquota mount option</code>. Under these conditions, user can pass any size less than the backing fs size.</p>
<p>XFS supports <a href="https://www.thegeekdiary.com/how-to-enable-disk-quotas-on-an-xfs-file-system/">disk quotas</a> <code>by user, by group, and by project</code>. Project disk quotas allow you to limit the amount of disk space on individual directory hierarchies. You can configure both hard and soft limits on the number of disk blocks (or disk space), and the number of inodes, which limit the number of files a user can create. Quotas do not apply to the root user.</p>
<p>You must first <code>enable quotas for users, groups, and/or projects by using a mount option when mounting for the XFS file system</code>. After enabling quotas, use the <code>xfs_quota command to set limits</code> to view quota information.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># enable disk project quotas on /var</span></span><br><span class="line">$ <span class="built_in">cat</span> /etc/fstab</span><br><span class="line">...</span><br><span class="line">/dev/mapper/centos_dev-var /var                     xfs     rw,pquota        0 0 </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># report the overall quota state information:</span></span><br><span class="line">$ xfs_quota -x -c state</span><br><span class="line">User quota state on /var (/dev/mapper/centos_dev-var)</span><br><span class="line">  Accounting: OFF</span><br><span class="line">  Enforcement: OFF</span><br><span class="line">  Inode: <span class="comment">#20328 (5 blocks, 5 extents)</span></span><br><span class="line">Group quota state on /var (/dev/mapper/centos_dev-var)</span><br><span class="line">  Accounting: OFF</span><br><span class="line">  Enforcement: OFF</span><br><span class="line">  Inode: <span class="comment">#227342 (1 blocks, 1 extents)</span></span><br><span class="line">Project quota state on /var (/dev/mapper/centos_dev-var)</span><br><span class="line">  Accounting: ON</span><br><span class="line">  Enforcement: ON</span><br><span class="line">  Inode: <span class="comment">#227342 (1 blocks, 1 extents)</span></span><br><span class="line">Blocks grace time: [7 days]</span><br><span class="line">Inodes grace time: [7 days]</span><br><span class="line">Realtime Blocks grace time: [7 days]</span><br><span class="line"></span><br><span class="line"><span class="comment"># show quota</span></span><br><span class="line">$ xfs_quota -x -c <span class="string">&#x27;report -h&#x27;</span> /var</span><br><span class="line">Project quota on /var (/dev/mapper/centos_dev-var)</span><br><span class="line">                        Blocks              </span><br><span class="line">Project ID   Used   Soft   Hard Warn/Grace   </span><br><span class="line">---------- --------------------------------- </span><br><span class="line"><span class="comment">#0           2.2G      0      0  00 [------]</span></span><br><span class="line"></span><br><span class="line">$ docker run -it --storage-opt size=10G fedora /bin/bash</span><br><span class="line"></span><br><span class="line">$ xfs_quota -x -c <span class="string">&#x27;report -h&#x27;</span> /var</span><br><span class="line">Project quota on /var (/dev/mapper/centos_dev-var)</span><br><span class="line">                        Blocks              </span><br><span class="line">Project ID   Used   Soft   Hard Warn/Grace   </span><br><span class="line">---------- --------------------------------- </span><br><span class="line"><span class="comment">#0           2.2G      0      0  00 [------]</span></span><br><span class="line"><span class="comment">#2             8K    10G    10G  00 [------]</span></span><br><span class="line"><span class="comment">#3             8K    10G    10G  00 [------]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># what quota does</span></span><br><span class="line"><span class="comment"># initialize project with ID: 100</span></span><br><span class="line">$ <span class="built_in">mkdir</span> -p /data/volumes/xfs32m/5m</span><br><span class="line">$ xfs_quota -x -c <span class="string">&#x27;project -s -p /data/volumes/xfs32m/5m 100&#x27;</span> /data/volumes/xfs32m</span><br><span class="line"></span><br><span class="line"><span class="comment"># set a 5M quota on project, id=100</span></span><br><span class="line">$ xfs_quota -x -c <span class="string">&#x27;limit -p bsoft=5m bhard=5m 100&#x27;</span> /data/volumes/xfs32m</span><br></pre></td></tr></table></figure>

<h2 id="change-storage-driver"><a href="#change-storage-driver" class="headerlink" title="change storage driver"></a>change storage driver</h2><p>Refer to <a href="https://docs.docker.com/storage/storagedriver/overlayfs-driver/#prerequisites">storagedriver</a></p>
<h2 id="Get-Pid-of-container"><a href="#Get-Pid-of-container" class="headerlink" title="Get Pid of container"></a>Get Pid of container</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pid we see from host, inside container, it&#x27;s Pid 1!!!</span></span><br><span class="line"><span class="variable">$docker</span> inspect --format &#123;&#123;.State.Pid&#125;&#125; <span class="variable">$container_id</span></span><br><span class="line"><span class="variable">$docker</span> inspect --format &#123;&#123;.State.Pid&#125;&#125; <span class="variable">$container_name</span></span><br><span class="line">16755</span><br></pre></td></tr></table></figure>

<h2 id="enter-docker-namespace-without-docker-exec"><a href="#enter-docker-namespace-without-docker-exec" class="headerlink" title="enter docker namespace without docker exec"></a>enter docker namespace without docker exec</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$docker</span> inspect --format &#123;&#123;.State.Pid&#125;&#125; <span class="variable">$container_name</span></span><br><span class="line">16755</span><br><span class="line"></span><br><span class="line">              /proc/pid/ns/mnt    the mount namespace</span><br><span class="line">              /proc/pid/ns/uts    the UTS namespace</span><br><span class="line">              /proc/pid/ns/ipc    the IPC namespace</span><br><span class="line">              /proc/pid/ns/net    the network namespace</span><br><span class="line">              /proc/pid/ns/pid    the PID namespace</span><br><span class="line">              /proc/pid/ns/user   the user namespace</span><br><span class="line">              /proc/pid/root      the root directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># mount, uts, ipc, net, pid, user namespace</span></span><br><span class="line"><span class="variable">$nsenter</span> -t 16755 --mount --net --uts --ipc --pid --user --root /bin/bash</span><br><span class="line"><span class="comment"># same as</span></span><br><span class="line"><span class="variable">$docker</span> <span class="built_in">exec</span> -it <span class="variable">$container_name</span> /bin/bash</span><br></pre></td></tr></table></figure>

<h2 id="keep-container-running-when-docker-service-restarting"><a href="#keep-container-running-when-docker-service-restarting" class="headerlink" title="keep container running when docker service restarting"></a>keep container running when docker service restarting</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$ cat /etc/docker/daemon.json </span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;live-restore&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="run-dockerd-in-forground-with-profiling"><a href="#run-dockerd-in-forground-with-profiling" class="headerlink" title="run dockerd in forground with profiling"></a>run dockerd in forground with profiling</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /usr/bin/docker-containerd-current -l unix:///var/run/docker/libcontainerd/docker-containerd.sock --shim docker-containerd-shim --metrics-interval=0 --start-timeout 2m --state-dir /var/run/docker/libcontainerd/containerd --runtime docker-runc --pprof-address 127.0.0.1:5151 --debug</span><br></pre></td></tr></table></figure>

<h2 id="update-docker-config-after-created-it"><a href="#update-docker-config-after-created-it" class="headerlink" title="update docker config after created it"></a>update docker config after created it</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># build-dev is container&#x27;s name</span></span><br><span class="line"><span class="variable">$docker</span> inspect --format=<span class="string">&quot;&#123;&#123;.Id&#125;&#125;&quot;</span> build-dev</span><br><span class="line">6b667579c2a963767bb97b5ed35e4d56ca9a428da8b9fd067fac14b25712048a</span><br><span class="line"></span><br><span class="line"><span class="comment"># stop docker service, otherwise, edit config.v2.json will be lost as docker will rewrite this file if edited outside!!!</span></span><br><span class="line"><span class="variable">$service</span> stop docker</span><br><span class="line"><span class="variable">$vim</span> /var/lib/docker/containers/6b667579c2a963767bb97b5ed35e4d56ca9a428da8b9fd067fac14b25712048a/config.v2.json</span><br><span class="line"><span class="variable">$service</span> start docker</span><br></pre></td></tr></table></figure>

<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://docs.docker.com/engine/reference/commandline/run/">docker run parameter</a></li>
<li><a href="https://docs.docker.com/config/containers/resource_constraints/">docker cpu, memory, gpu parameter</a></li>
<li><a href="https://docs.docker.com/engine/reference/commandline/run/#set-storage-driver-options-per-container">docker run options</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>docker-create-image</title>
    <url>/2019/10/14/docker-create-image/</url>
    <content><![CDATA[<h1 id="Create-docker-image"><a href="#Create-docker-image" class="headerlink" title="Create docker image"></a>Create docker image</h1><p>There are several ways to create an image, you can create it by</p>
<div class="note info"><ul>
<li>$ docker commit   # from an exist container</li>
<li>$ docker load     # from a saved tar package</li>
<li>$ docker build    # from a Dockerfile or from standard input</li>
</ul>
</div>

<span id="more"></span>
<p>Here I only say how to create an image from Dockerfile, for other two ways, please refer to <a href="/2019/10/11/docker-frequently-used-commands/" title="docker-frequently-used-commands">docker command</a> that I posted earlier.</p>
<p>Basically speaking, Dockerfile is a sequence of ‘instructions’ in order, docker parses these ‘instructions’ one by one created layer when necessary, at last generates an image with these layers and conf.</p>
<p>Here is an overview of all instructions that docker provided, I will explain some of them later on with more details.</p>
<p><img src="/images/docker/dockerfile-ins.png" alt="docker instructions"></p>
<h2 id="instructions"><a href="#instructions" class="headerlink" title="instructions"></a>instructions</h2><p>Here is just a basic usage of some commands, details refer to </p>
<ul>
<li>FROM: Sets the base image for subsequent</li>
<li>MAINTAINER: set the author field of the generated images(deprecated use LABEL instead)</li>
<li>RUN: Execute commands in a new layer on top of the current image and commit the result</li>
<li>CMD: Allow only one CMD as the start command when container starts</li>
<li>LABEL: Add metadata to an image</li>
<li>EXPOSE: Informs container runtime that the container listens on the specified network ports at runtime</li>
<li>ENV: Sets an environment variable</li>
<li>ADD: Copy new files, directories, or remote file URLs from into the filesystem of the container, it can process tar, deb etc uncompressed then copy</li>
<li>COPY: Copy new files or directories into the filesystem of the container</li>
<li>ENTRYPOINT: Allows you to configure a container that will run as an executable</li>
<li>VOLUME: Creates a mount point and marks it as holding externally mounted volumes from native host or other containers</li>
</ul>
<p>Here is an example of Dockerfile, see comments for more details</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from base image to create new</span></span><br><span class="line">FROM ubuntu:18.04</span><br><span class="line">LABEL maintainer=<span class="string">&quot;jason_lkm@163.com&quot;</span></span><br><span class="line">LABEL version=<span class="string">&quot;1.0&quot;</span></span><br><span class="line"><span class="comment"># remember to delete intermediate files for apt</span></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">    automake \</span><br><span class="line"> &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/* \</span><br><span class="line"> &amp;&amp; apt-get clean</span><br><span class="line"><span class="comment"># set start command</span></span><br><span class="line">CMD [<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;hello&quot;</span>]</span><br><span class="line"><span class="comment"># if run docker with docker -P(no parameter for it), map random port from host to 80(EXPOSE here)</span></span><br><span class="line"><span class="comment"># if docker doesn&#x27;t run with -P, here is an description at all!!!!</span></span><br><span class="line">EXPOSE 80/udp</span><br><span class="line"><span class="comment"># better use &#x27;-p&#x27; to explicitly map host port to docker port when docker run</span></span><br><span class="line"><span class="comment"># docker run -p 8080:80 nginx # map host 8080 to container 80, will create a DNAT rule on host</span></span><br><span class="line"><span class="comment">#    0     0 DNAT       tcp  --  !docker0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 to:172.17.0.1:80</span></span><br><span class="line"></span><br><span class="line">ENV NAME=<span class="string">&quot;jason&quot;</span> EMAIL=<span class="string">&quot;jason@163.com&quot;</span></span><br><span class="line"><span class="comment"># ADD COPY support pattern matching</span></span><br><span class="line">ADD ./test.tar /test</span><br><span class="line">COPY ./*.txt /</span><br><span class="line">COPY ./b.c /</span><br><span class="line"><span class="comment"># create volume for each container automatically, remember to delete volume</span></span><br><span class="line"><span class="comment"># when remove that docker</span></span><br><span class="line"><span class="comment"># /data is dst path</span></span><br><span class="line">VOLUME [<span class="string">&quot;/data&quot;</span>]</span><br></pre></td></tr></table></figure>

<div class="note info"><h3 id="There-are-several-rules-that-you-must-obey-to-avoid-trouble"><a href="#There-are-several-rules-that-you-must-obey-to-avoid-trouble" class="headerlink" title="There are several rules that you must obey to avoid trouble"></a>There are several rules that you must obey to avoid trouble</h3><ul>
<li><strong>Write one CMD in Dockerfile, if many, the last on takes effect</strong></li>
<li><strong>Better to use CMD or ENTRYPOINT, not both, if both used, CMD will be passed to ENTRYPOINT as parameter</strong></li>
<li><strong>CMD may be overwritten by command from cli $docker run nginx &#x2F;bin&#x2F;bash, &#x2F;bin&#x2F;bash overwrites CMD in nginx image</strong></li>
<li><strong>Remove unnecessary files when do apt-get</strong></li>
<li><strong>Avoid RUN apt-get upgrade and dist-upgrade</strong></li>
</ul>
</div>

<p><mark>NOTE: ins in Dockerfile may be overwritten by parameter from cli, like ENTRYPOINT may be overwritten by docker run –entrypoint, so check what conf container uses by<br>$docker inspect $container_id(name) </mark></p>
<h2 id="how-build-works"><a href="#how-build-works" class="headerlink" title="how build works"></a>how build works</h2><p>When you issue a docker build command, the <strong>current working directory is called the build context</strong>,  all recursive contents of files and directories in the current directory are sent to the Docker daemon, <strong>but only the ones used by Dockerfile is copied to image, other is not used!!!</strong>, docker client(issuer) and docker daemon can be at different machines, in that case, make sure there is no unnecessary files under current dir, as all files will be sent to docker daemon, it may take long timer if the current dir is large, after docker daemon receives all and parses Dockerfile and execute each instruction one by one with order, create layer if necessary or set conf for this image, at last save image to the local registry of machine where docker daemon is running.</p>
<p><mark>Actually before it runs, docker daemon created a temporary for this image and chroot to it, so that the destination path(<code>ADD ./test.tar /</code>) in Dockefile is for the new rootfs</mark></p>
<p><img src="/images/docker/docker_build_image.png" alt="how build docker image works"></p>
<h2 id="build-an-image"><a href="#build-an-image" class="headerlink" title="build an image"></a>build an image</h2><p><strong>from a file</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">Dockerfile</span><br><span class="line">$ docker build --no-cache -t <span class="variable">$image_name</span>:<span class="variable">$tagname</span> .</span><br><span class="line"><span class="comment"># it will read Dockerfile from current dir</span></span><br><span class="line"><span class="comment"># and send all files/dirs to docker daemon</span></span><br></pre></td></tr></table></figure>
<p><strong>from standard input</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># t is image name</span></span><br><span class="line">$ docker build -t tcpdump - &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">FROM ubuntu</span></span><br><span class="line"><span class="string">RUN apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="string">apt-get install -y tcpdump &amp;&amp; \</span></span><br><span class="line"><span class="string">apt-get install -y net-tools &amp;&amp; \</span></span><br><span class="line"><span class="string">rm -rf /var/lib/apt/lists/* &amp;&amp; \</span></span><br><span class="line"><span class="string">apt-get clean</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CMD /bin/bash</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<h2 id="check-info-about-image"><a href="#check-info-about-image" class="headerlink" title="check info about image"></a>check info about image</h2><ul>
<li>check instructions used by an image<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">history</span> <span class="variable">$image_id</span>(name) --no-trunc</span><br><span class="line">$ docker <span class="built_in">history</span> <span class="variable">$image_id</span>(name)</span><br><span class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">5a9061639d0a        26 hours ago        /bin/sh -c <span class="comment">#(nop)  CMD [&quot;nginx&quot; &quot;-g&quot; &quot;daemon…   0B</span></span><br><span class="line">&lt;missing&gt;           26 hours ago        /bin/sh -c <span class="comment">#(nop)  STOPSIGNAL SIGTERM           0B</span></span><br><span class="line">&lt;missing&gt;           26 hours ago        /bin/sh -c <span class="comment">#(nop)  EXPOSE 80                    0B</span></span><br><span class="line">&lt;missing&gt;           26 hours ago        /bin/sh -c <span class="built_in">ln</span> -sf /dev/stdout /var/log/nginx…   22B</span><br></pre></td></tr></table></figure></li>
<li>check instructions with full content of an image<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /var/lib/docker/image/aufs/imagedb/content/sha256/5a9061639d0aeca4b13f8e18b985eea79e55168969d069febdb6723993ebba7d  | python -m json.tool</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">...</span><br><span class="line"><span class="string">&quot;history&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="string">&quot;2019-10-17T04:43:59.291372925Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created_by&quot;</span>: <span class="string">&quot;/bin/sh -c ln -sf /dev/stdout /var/log/nginx/access.log     &amp;&amp; ln -sf /dev/stderr /var/log/nginx/error.log&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="string">&quot;2019-10-17T04:43:59.546729941Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created_by&quot;</span>: <span class="string">&quot;/bin/sh -c #(nop)  EXPOSE 80&quot;</span>,</span><br><span class="line">            <span class="string">&quot;empty_layer&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="string">&quot;2019-10-17T04:43:59.807233891Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created_by&quot;</span>: <span class="string">&quot;/bin/sh -c #(nop)  STOPSIGNAL SIGTERM&quot;</span>,</span><br><span class="line">            <span class="string">&quot;empty_layer&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="string">&quot;2019-10-17T04:44:00.059327535Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created_by&quot;</span>: <span class="string">&quot;/bin/sh -c #(nop)  CMD [\&quot;nginx\&quot; \&quot;-g\&quot; \&quot;daemon off;\&quot;]&quot;</span>,</span><br><span class="line">            <span class="string">&quot;empty_layer&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<mark>As you can see some instructions Did NOT create layer at all, see ‘empty_layer’ field.</mark></li>
<li>check the config for an image<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">$ docker inspect 5a9061639d0a</span><br><span class="line">this will show what<span class="string">&#x27;s the cmd, env, entrypoint, volume, rootfs etc for this image</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
        <category>image</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>image</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-frequently-used-commands</title>
    <url>/2019/10/11/docker-frequently-used-commands/</url>
    <content><![CDATA[<h1 id="Docker-CLI"><a href="#Docker-CLI" class="headerlink" title="Docker CLI"></a>Docker CLI</h1><p>Before going into docker cli, let’s see how docker client, daemon and registry works, here is an overview of these two part and how they work with each other.</p>
<span id="more"></span>
<p><img src="https://cyun.tech/images/docker/client-daemon-registry.JPG" alt="client-daemon-registry"></p>
<p>As you can see client, daemon, registry are three different parts, they can run in <mark>one machine or different machines</mark>, by default, <mark class="label success">daemon listens on Unix socket, CLI connects with that socket, registry can be your company registry or docker official hub</mark>, </p>
<p>You can use docker cli or call REST API to communicate with docker daemon, <strong><mark>docker cli is just a wrapper of rest api</mark></strong></p>
<p>All docker commands are available here </p>
<h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h2><p><font color='red'><strong>Frequently used one</strong></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># run with bridge mode with specific address</span></span><br><span class="line">$ docker run --name mycentos --restart=always -p 6000:22 --hostname <span class="built_in">test</span> --ip 172.16.0.2 --privileged=<span class="literal">true</span> -itd centos /usr/sbin/init</span><br><span class="line"></span><br><span class="line"><span class="comment"># run with host network</span></span><br><span class="line">$ docker run --name mycentos --restart=always -p 6000:22 --hostname <span class="built_in">test</span> --net=host  --privileged=<span class="literal">true</span> -itd centos /usr/sbin/init</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Run a container in interactive mode with tty</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run = docker create + docker start</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -t: Allocate a pseudo-TTY, When set to true Docker can allocate a pseudo-tty and attach to the standard input of any container</span></span><br><span class="line"><span class="comment"># -i: Keep STDIN open even if not attached.</span></span><br><span class="line">$ docker run -it nginx bash</span><br><span class="line"><span class="comment"># this will pull nginx(image) and create a container and start it with bash command</span></span><br><span class="line"><span class="comment"># Note: bash overwrite CMD provide in nginx so nginx daemon is not started in this docker</span></span><br><span class="line"></span><br><span class="line">$ docker run --<span class="built_in">rm</span> -it nginx bash</span><br><span class="line">control + C</span><br><span class="line"><span class="comment"># --rm means this docker will be removed when it exited</span></span><br><span class="line">$ docker ps -a <span class="comment"># will not show it as it&#x27;s removed</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Run a container in detached mode or non-detached mode</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># detach(run in background) then later on you attach to it</span></span><br><span class="line">$ docker run --name my-nginx -d nginx</span><br><span class="line">$ docker attach <span class="variable">$container_id</span></span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">$ docker run nginx</span><br><span class="line"><span class="comment"># both will run nginx image from CMD provided in docker image CMD [&quot;nginx&quot; &quot;-g&quot; &quot;daemon&quot;]</span></span><br><span class="line"><span class="comment"># as docker run will create container if not exist(user docker create) so it&#x27;s also</span></span><br><span class="line"><span class="comment"># has lots of args like create provide https://docs.docker.com/engine/reference/commandline/run/</span></span><br></pre></td></tr></table></figure></li>
<li><p>Check start logs of a specific container</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker logs <span class="variable">$container_id</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># if docker failed to write such log, check syslog as well</span></span><br><span class="line"><span class="comment"># /var/log/syslog</span></span><br></pre></td></tr></table></figure></li>
<li><p>List containers and its size(disk used)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps <span class="comment"># only active containers</span></span><br><span class="line">$ docker ps -a <span class="comment"># all containers even it&#x27;s stopped.</span></span><br><span class="line">$ docker ps --size</span><br><span class="line">$ docker stats <span class="comment"># show running stats CPU, MEM, IO, NET</span></span><br></pre></td></tr></table></figure></li>
<li><p>create&#x2F;stop&#x2F;start&#x2F;restart&#x2F;rm container</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker create --name my-nginx nginx</span><br><span class="line">$ docker start <span class="variable">$container_id</span>(name)</span><br><span class="line">$ docker stop <span class="variable">$container_id</span>(name)</span><br><span class="line">$ docker restart <span class="variable">$container_id</span>(name)</span><br><span class="line">$ docker <span class="built_in">rm</span> <span class="variable">$container_id</span>(name)</span><br><span class="line"><span class="comment"># Actually create provides lots of args when create a docker to set it config</span></span><br><span class="line"><span class="comment"># like volume, mount points, cpu, entrypoint, CMD, env etc</span></span><br><span class="line"><span class="comment"># https://docs.docker.com/engine/reference/commandline/create/</span></span><br></pre></td></tr></table></figure></li>
<li><p>Run a new command in an running container</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it <span class="variable">$container_id</span>(name) bash</span><br></pre></td></tr></table></figure></li>
<li><p>copy file in&#x2F;out container</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">cp</span> <span class="variable">$container_id</span>(name):/home/text.txt /root/text.txt</span><br><span class="line">$ docker <span class="built_in">cp</span> /root/text.txt <span class="variable">$container_id</span>(name):/home/text.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>inspect a container</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker inspect $container_id</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><ul>
<li>pull an image from registry<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull nginx:latest</span><br></pre></td></tr></table></figure></li>
<li>build an image<br>Details refer to <a href="/2019/10/14/docker-create-image/" title="docker-create-image">Dockfile inside</a></li>
<li>check history of an image<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">history</span> <span class="variable">$image_id</span></span><br><span class="line"><span class="comment"># OR to show history full description</span></span><br><span class="line">$ docker <span class="built_in">history</span> <span class="variable">$image_id</span> --no-trunc</span><br></pre></td></tr></table></figure></li>
<li>list images<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker images</span><br></pre></td></tr></table></figure></li>
<li>remove image(s)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker rmi <span class="variable">$image_id</span></span><br></pre></td></tr></table></figure></li>
<li>tag an image<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker tag <span class="variable">$image_id</span> <span class="variable">$new_image_tag</span> <span class="comment"># will create a new image</span></span><br><span class="line">$ docker images</span><br></pre></td></tr></table></figure></li>
<li>create an image from a running container<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker commit <span class="variable">$container_id</span> <span class="variable">$new_image_name</span> <span class="comment"># add the image to local repo</span></span><br><span class="line"><span class="comment"># OR export it to a local file</span></span><br><span class="line">$ docker <span class="built_in">export</span> -o new_image.tar <span class="variable">$container_id</span></span><br><span class="line">$ docker import new_image.tar <span class="variable">$new_image_name</span>:latest</span><br></pre></td></tr></table></figure></li>
<li>backup&#x2F;restore an image<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># save an image to tar file</span></span><br><span class="line">$ docker save nginx:latest &gt;/root/back.tar <span class="comment"># must be absolute path with repo and tag later on when load</span></span><br><span class="line"><span class="comment"># still have such info</span></span><br><span class="line">$ docker load &lt;/root/back.tar <span class="comment"># must be absolute path</span></span><br></pre></td></tr></table></figure>
<h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker network <span class="built_in">ls</span></span><br><span class="line">$ docker network inspect <span class="variable">$network_id</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker search xxx <span class="comment"># search image from registry</span></span><br></pre></td></tr></table></figure>
<h2 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker volume <span class="built_in">ls</span></span><br><span class="line">$ docker volume inspect <span class="variable">$volume_name</span></span><br><span class="line">$ docker volume create <span class="variable">$volume_name</span></span><br><span class="line">$ docker volume <span class="built_in">rm</span> <span class="variable">$volume_name</span></span><br><span class="line"><span class="comment"># volume can be used at docker create or docker run</span></span><br></pre></td></tr></table></figure>
<h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ul>
<li>check docker info<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker info</span><br><span class="line">Client:</span><br><span class="line"> Context:    default</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"> Plugins:</span><br><span class="line">  app: Docker App (Docker Inc., v0.9.1-beta3)</span><br><span class="line">  buildx: Docker Buildx (Docker Inc., v0.8.2-docker)</span><br><span class="line">  scan: Docker Scan (Docker Inc., v0.17.0)</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Containers: 0</span><br><span class="line">  Running: 0</span><br><span class="line">  Paused: 0</span><br><span class="line">  Stopped: 0</span><br><span class="line"> Images: 0</span><br><span class="line"> Server Version: 20.10.15</span><br><span class="line"></span><br><span class="line"> Storage Driver: overlay2                ------important</span><br><span class="line">  Backing Filesystem: xfs</span><br><span class="line">  Supports d_type: <span class="literal">true</span></span><br><span class="line">  Native Overlay Diff: <span class="literal">true</span></span><br><span class="line">  userxattr: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"> Logging Driver: json-file              -------important</span><br><span class="line"> Cgroup Driver: cgroupfs</span><br><span class="line"> Cgroup Version: 1</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line"> Docker Root Dir: /var/lib/docker        -----important</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"> Registry: https://index.docker.io/v1/</span><br><span class="line"> ...</span><br><span class="line">$ docker version</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
        <category>command</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker command</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-image-container-on-disk</title>
    <url>/2019/10/11/docker-image-container-on-disk/</url>
    <content><![CDATA[<h1 id="Image-and-Container-Concept"><a href="#Image-and-Container-Concept" class="headerlink" title="Image and Container Concept"></a>Image and Container Concept</h1><p>The major difference between a container and an image is the <code>top writable layer</code>. All writes to the container that add new or modify existing data are stored in this writable layer. When the container is deleted, the writable layer is also deleted. The underlying image layers remain unchanged.</p>
<p>Because each container has its own writable container layer, and all changes are stored in this container layer, multiple containers can share access to the same underlying image and yet have their own data state</p>
<p><img src="https://docs.docker.com/storage/storagedriver/images/sharing-layers.jpg"></p>
<span id="more"></span>
<ul>
<li>Image layers</li>
<li><strong>Init layer(there is Init layer between image layer and container layer on ubuntu actually) which is system related info like &#x2F;dev host etc.</strong></li>
<li>Container layer(R&#x2F;W layer)</li>
</ul>
<h2 id="Image-on-disk-x2F-var-x2F-lib-x2F-docker"><a href="#Image-on-disk-x2F-var-x2F-lib-x2F-docker" class="headerlink" title="Image on disk &#x2F;var&#x2F;lib&#x2F;docker"></a>Image on disk &#x2F;var&#x2F;lib&#x2F;docker</h2><p>Let’s see what’s the file layout for image and container. here is the layout for it<br><img src="https://cyun.tech/images/docker/image-on-disk.png" alt="image layout"></p>
<p><mark>Below output is the file layout after create a  container(official ubuntu image)</mark></p>
<h3 id="docker-x2F-aufs-directory"><a href="#docker-x2F-aufs-directory" class="headerlink" title="docker&#x2F;aufs directory"></a>docker&#x2F;aufs directory</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> /var/lib/docker/aufs</span><br><span class="line">diff  layers  mnt</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>diff&#x2F;</strong>: content of each layer(image layer and init  layer and container layer)</li>
<li><strong>layers&#x2F;</strong>: As layer has relationship, file in it shows all layers it based on</li>
<li><strong>mnt&#x2F;</strong>: As in diff&#x2F;, it only shows content of each layer, here it shows content of all layers it based on(actually it’s aufs mount point(single dir)).</li>
</ul>
<p><mark>Note: without container runs, all are empty!<br>when container runs only the contain layer mount point has content!!!</mark></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@dev:/var/lib/docker<span class="comment"># tree -L 2 aufs</span></span><br><span class="line">aufs</span><br><span class="line">|-- diff</span><br><span class="line">|   |-- 268f3ca66142b2b9791504df67c604a5f0bf331064f4e1f899fcdd33686b602d</span><br><span class="line">|   |-- 38fd587650e8a0befc2a177395a2afa380abcd32ac78316c6a38ea6b01bdadd7</span><br><span class="line">|   |-- 39d5b8fbe7446545c8e982bc3c2e0a0e955a81c99a88a85121252800406c88cf</span><br><span class="line">|   |-- 9bd9ca976269998def585a7848e180207f88cdec9e95b11e930532cfe84780e6</span><br><span class="line">|   |-- afc8986c55fb3ec896070d3f475a61ababf6e5e458107e7d8d449df6b53055cf</span><br><span class="line">|   `-- afc8986c55fb3ec896070d3f475a61ababf6e5e458107e7d8d449df6b53055cf-init</span><br><span class="line">|-- layers</span><br><span class="line">|   |-- 268f3ca66142b2b9791504df67c604a5f0bf331064f4e1f899fcdd33686b602d</span><br><span class="line">|   |-- 38fd587650e8a0befc2a177395a2afa380abcd32ac78316c6a38ea6b01bdadd7</span><br><span class="line">|   |-- 39d5b8fbe7446545c8e982bc3c2e0a0e955a81c99a88a85121252800406c88cf</span><br><span class="line">|   |-- 9bd9ca976269998def585a7848e180207f88cdec9e95b11e930532cfe84780e6</span><br><span class="line">|   |-- afc8986c55fb3ec896070d3f475a61ababf6e5e458107e7d8d449df6b53055cf</span><br><span class="line">|   `-- afc8986c55fb3ec896070d3f475a61ababf6e5e458107e7d8d449df6b53055cf-init</span><br><span class="line">`-- mnt</span><br><span class="line">    |-- 268f3ca66142b2b9791504df67c604a5f0bf331064f4e1f899fcdd33686b602d</span><br><span class="line">    |-- 38fd587650e8a0befc2a177395a2afa380abcd32ac78316c6a38ea6b01bdadd7</span><br><span class="line">    |-- 39d5b8fbe7446545c8e982bc3c2e0a0e955a81c99a88a85121252800406c88cf</span><br><span class="line">    |-- 9bd9ca976269998def585a7848e180207f88cdec9e95b11e930532cfe84780e6</span><br><span class="line">    |-- afc8986c55fb3ec896070d3f475a61ababf6e5e458107e7d8d449df6b53055cf</span><br><span class="line">    `-- afc8986c55fb3ec896070d3f475a61ababf6e5e458107e7d8d449df6b53055cf-init</span><br></pre></td></tr></table></figure>

<h3 id="docker-x2F-containers-directory"><a href="#docker-x2F-containers-directory" class="headerlink" title="docker&#x2F;containers directory"></a>docker&#x2F;containers directory</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@dev:/var/lib/docker<span class="comment"># tree -L 2 containers/</span></span><br><span class="line">containers/</span><br><span class="line">`-- 1eb906e718d8271061ac894972533234af4c563364bd7522f482b1d427095270</span><br><span class="line">    |-- 1eb906e718d8271061ac894972533234af4c563364bd7522f482b1d427095270-json.log</span><br><span class="line">    |-- config.v2.json</span><br><span class="line">    |-- hostconfig.json</span><br><span class="line">    |-- hostname</span><br><span class="line">    |-- hosts</span><br><span class="line">    |-- resolv.conf</span><br><span class="line">    |-- resolv.conf.hash</span><br><span class="line">    `-- shm</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>containers&#x2F;</strong>: includes the <mark>config and runtime</mark> info about this container etc</li>
</ul>
<h3 id="docker-x2F-image"><a href="#docker-x2F-image" class="headerlink" title="docker&#x2F;image"></a>docker&#x2F;image</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">image/</span><br><span class="line">`-- aufs</span><br><span class="line">    |-- imagedb</span><br><span class="line">    |   |-- content</span><br><span class="line">    |   |   `-- sha256</span><br><span class="line">    |   |       `-- 2ca708c1c9ccc509b070f226d6e4712604e0c48b55d7d8f5adc9be4a4d36029a ---&gt;image <span class="built_in">id</span></span><br><span class="line">    |   `-- metadata</span><br><span class="line">    |       `-- sha256</span><br><span class="line">    |-- layerdb</span><br><span class="line">    |   |-- mounts</span><br><span class="line">    |   |   `-- 1eb906e718d8271061ac894972533234af4c563364bd7522f482b1d427095270   ----&gt;container <span class="built_in">id</span></span><br><span class="line">    |   |       |-- init-id</span><br><span class="line">    |   |       |-- mount-id                                                       ----&gt;mount point <span class="keyword">for</span> this container</span><br><span class="line">    |   |       `-- parent</span><br><span class="line">    |   |-- sha256</span><br><span class="line">    |   |   |-- 5308e2e4a70bd4344383b8de54f8a52b62c41afb5caa16310326debd1499b748</span><br><span class="line">    |   |   |   |-- cache-id                                                       ---&gt;<span class="built_in">local</span> <span class="built_in">id</span> <span class="keyword">for</span> this layer aufs/diff/cache-id</span><br><span class="line">    |   |   |   |-- diff                                                           ---&gt;<span class="built_in">id</span> of this layer</span><br><span class="line">    |   |   |   |-- parent</span><br><span class="line">    |   |   |   |-- size</span><br><span class="line">    |   |   |   `-- tar-split.json.gz                                              --&gt;content <span class="keyword">for</span> this layer</span><br><span class="line">    |   |   |-- a1aa3da2a80a775df55e880b094a1a8de19b919435ad0c71c29a0983d64e65db</span><br><span class="line">    |   |   |   |-- cache-id</span><br><span class="line">    |   |   |   |-- diff</span><br><span class="line">    |   |   |   |-- size</span><br><span class="line">    |   |   |   `-- tar-split.json.gz</span><br><span class="line">    |   |   |-- bd416bed302bc2f061a2f6848a565483a5f265932d2d4fa287ef511b7d1151c8</span><br><span class="line">    |   |   |   |-- cache-id</span><br><span class="line">    |   |   |   |-- diff</span><br><span class="line">    |   |   |   |-- parent</span><br><span class="line">    |   |   |   |-- size</span><br><span class="line">    |   |   |   `-- tar-split.json.gz</span><br><span class="line">    |   |   `-- dab02287e04c8b8207210b90b4056bd865fcfab91469f39a1654075f550c5592</span><br><span class="line">    |   |       |-- cache-id</span><br><span class="line">    |   |       |-- diff</span><br><span class="line">    |   |       |-- parent</span><br><span class="line">    |   |       |-- size</span><br><span class="line">    |   |       `-- tar-split.json.gz</span><br><span class="line">    |</span><br><span class="line">    `-- repositories.json</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>imagedb&#x2F;content&#x2F;sha256&#x2F;$image_id</strong>: content of the image like env, volume, layers used by this image etc</li>
<li><strong>imagedb&#x2F;content&#x2F;metadata&#x2F;sha256&#x2F;$image_id</strong>: metadata for this image</li>
<li><strong>layerdb&#x2F;mounts&#x2F;$container_id</strong>: mount point for this container</li>
<li><strong>layerdb&#x2F;sha256&#x2F;$chain_id</strong>: content of this layer(layer id is stored at $cache_id&#x2F;diff), content is compressed,<br>the uncompressed data is stored at &#x2F;var&#x2F;lib&#x2F;docker&#x2F;aufs&#x2F;diff&#x2F;sha256&#x2F;$cache_id for this layer, cache_id at $chain_id&#x2F;cache-id</li>
</ul>
<h3 id="file-changes-when-create-a-container"><a href="#file-changes-when-create-a-container" class="headerlink" title="file changes when create a container"></a>file changes when create a container</h3><p>what changes happens when create a container, please refer to <a href="/2019/10/11/docker-storage-driver/" title="docker-storage-driver">storage driver</a></p>
]]></content>
      <categories>
        <category>docker</category>
        <category>image</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker image</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-network</title>
    <url>/2019/10/14/docker-network/</url>
    <content><![CDATA[<h1 id="Docker-network"><a href="#Docker-network" class="headerlink" title="Docker network"></a>Docker network</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Docker’s networking subsystem is pluggable, using drivers. Several drivers exist by default, and provide core networking functionality:</p>
<span id="more"></span>
<ul>
<li><p><strong>bridge</strong>: The <mark>default network driver</mark>. If you don’t specify a driver, this is the type of network you are creating. Bridge networks are usually used when your applications run in standalone containers that need to communicate, will use a <strong>separate network namespace for this container, add veth pairs, one in the bridge, one in the container.</strong></p>
</li>
<li><p><strong>host</strong>: For standalone containers, remove network isolation between the container and the Docker host, and use <mark>the host’s networking, use same network namespace(root) with host</mark> directly. host is only available for swarm services on Docker 17.06 and higher</p>
</li>
<li><p>overlay and macvlan</p>
</li>
<li><p><strong>none</strong>: For this container, disable all networking. Usually used in conjunction with a custom network driver. will use a <strong>separate network namespace but only with loopback interface.</strong></p>
</li>
</ul>
<p>More details about docker network, refer to </p>
<h2 id="Bridge-mode"><a href="#Bridge-mode" class="headerlink" title="Bridge mode"></a>Bridge mode</h2><p>As host and none driver are simple, as <code>host uses network namespace with host, while none uses a separate namespace but only with loopback interface</code>, host driver has high performance but less isolation, none for customer defining it own network.</p>
<p>So here let’s explain Bridge driver with more details and see how traffic goes in container and goes out with ping command in docker</p>
<p><img src="https://cyun.tech/images/docker/docker-network-ping-flow.png" alt="ping from docker"></p>
<p>From simplicity, ignore arp, dns, <mark>$ ping baidu </mark> from container.</p>
<div class="note info"><p>Request packet out:</p>
<ol>
<li>First container checks its routing table, it sees that for baidu(arp, dns ignore),it should send packet to Gateway 172.17.0.2(<code>docker0[each bridge has such virtual device] which is in root network namespace</code>), as eth0(in container) and docker0 are in same subnet, so the request packet is sent by container with below info</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">src mac: eth0(in container) mac</span><br><span class="line">dst mac: docker0 mac</span><br><span class="line">src ip: eth0(container) ip: 172.17.0.1</span><br><span class="line">dst ip: baidu&#x27;s ip</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>The packet goes directly to vethx（as it’s the peer of eth0 in container)</p>
</li>
<li><p>When packet reaches vethx, bridge CAM table is used to search which port should be sent by check the dst mac, as dst mac is docker0 mac, so <code>packet is sent to docker0 without any change(because it&#39;s bridge(switch))</code>.</p>
</li>
<li><p>When docker0 receives this packet, PREROUTING hook is called for each table with priority(conntrack-&gt;nat), as no connection for this request now, so conntrack table does not match, then check if any rule matches in nat table, still no match here. hence looking up routing table.<br><code>there are raw mangle tables in PREROUTING hook, we did not check that because it&#39;s empty, just ignore it for simple, only check nat table at PREROUTING</code></p>
</li>
<li><p>By looking up routing table, the default route is matched with gateway 10.117.7.253, out iface eth0(host), then goes to FORWARD phase, check rules in that HOOK point.</p>
</li>
<li><p>The first rule in FORWARD(filter table) matches, jump to DOCKER-ISOLATION-STAGE-1</p>
</li>
<li><p>Also the first rule in DOCKER-ISOLATION-STAGE-1 matches, jump to DOCKER-ISOLATION-STAGE-2</p>
</li>
<li><p>The second rule in DOCKER-ISOLATION-STAGE-2 matches with target RETURN, so goes back to DOCKER-ISOLATION-STAGE-1, the second rule in DOCKER-ISOLATION-STAGE-2 matches with target RETURN, goes back to FORWARD chain, the fourth rule in FORWARD matches with target ACCEPT, FORWARFD hooks is done.<br><code>In FORWARD hook, we only check filter table, but there are other table: mangle as well, as it&#39;s empty, ignore checking it for simple</code></p>
</li>
<li><p>Now packet reaches POSTROUTING HOOK, the first rule matches with target MASQUERADE(special SNAT with interface ip), <code>create connection at conntrack table after SNAT</code>, then packet gos out on eth0 with below info</p>
</li>
</ol>
<p><code>In POSTROUTING Hook, we only check nat table as well, but there are other tables: mangle as well, as it&#39;s empty, ignore checking it for simple</code></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">src mac: eth0(in host) mac</span><br><span class="line">dst mac: gateway mac(10.117.7.253 mac)</span><br><span class="line">src ip : eth0(in host) ip  ---&gt;because SNAT(MASQUERADE)</span><br><span class="line">dst ip: baidu ip</span><br></pre></td></tr></table></figure>
</div>

<div class="note warning"><p>Reply packet IN:<br>when reply packet comes back with below info</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">src mac: gateway mac(10.117.7.253)</span><br><span class="line">dst mac: eth0(<span class="keyword">in</span> host) mac</span><br><span class="line">src ip: baidu ip</span><br><span class="line">dst ip: eth0in (host) ip</span><br></pre></td></tr></table></figure>
<p>The first step is to check hooks in PREROUTING, as we already created a connection at conntrack table, hence we found that entry before checking rule in nat table(PREROUTING), as we found the connection track, skip nat table rules in PREROUTING(most for DNAT), As we found the connection in conntrack, do DNAT for the packet, no need to check nat table, after DNAT, packet with below info</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">src mac: gateway mac</span><br><span class="line">dst mac: eth0(host) mac</span><br><span class="line">src ip: baidu ip</span><br><span class="line">dst ip: eth0(in container) ip(172.17.0.1)</span><br></pre></td></tr></table></figure>
<ol>
<li><p>After PREROUTING(DNAT), looks up routing table with above info<br>the third route matches, with out iface docker0, then goes to FORWARD HOOKS</p>
</li>
<li><p>At FORWARD HOOK, the first rule matches, jump to DOCKER-ISOLATION-STAGE-1</p>
</li>
<li><p>At DOCKER-ISOLATION-STAGE-1, the second rule matches with target RETURN, hence goes back to FORWARD, the second rule in FORWARD matches with target ACCEPT(terminated here)</p>
</li>
<li><p>Check POSTROUTING rules, no one matches, hence packet goes out on docker0 with below info</p>
</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">src mac: docker0 mac</span><br><span class="line">dst mac: eth0(container)172.17.0.1 mac</span><br><span class="line">src ip: baidu ip</span><br><span class="line">dst ip: eth0(container)172.17.0.1</span><br></pre></td></tr></table></figure>
<p>As dst mac learned from vethxx, so packet reaches there, hence reaches eth0(container) as well, we’re done!!!</p>
</div>

<h2 id="command-to-set-docker-network"><a href="#command-to-set-docker-network" class="headerlink" title="command to set docker network"></a>command to set docker network</h2><p>This is parameter for docker run to set network for a container</p>
<p><code>--network=&quot;bridge&quot;</code> : Connect a container to a network</p>
<ul>
<li><p>‘bridge’: create a network stack on the default Docker bridge</p>
</li>
<li><p>‘none’: no networking<br> ‘container:&lt;name|id&gt;’: reuse another container’s network stack</p>
</li>
<li><p>‘host’: use the Docker host network stack</p>
</li>
<li><p>‘&lt;network-name&gt;|&lt;network-id&gt;’: connect to a user-defined network</p>
</li>
</ul>
<p><mark>As you can see docker can use network of another docker that means they share<br>the same network(same network namespace, no new veth pair for this container!!!</mark></p>
<h3 id="use-default-bridge-network"><a href="#use-default-bridge-network" class="headerlink" title="use default bridge network"></a>use default bridge network</h3><p>By default, docker creates three networks, if you do not set network when you run a container<br>bridge is used, you can check details about each network</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker network <span class="built_in">ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">d40edaa25285        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">22a73a59ecee        host                host                <span class="built_in">local</span></span><br><span class="line">d812e787ee49        none                null                <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">$ docker network inspect bridge</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;d40edaa25285c66d856252d9396eaa03167b108e2a00c80a41ec73ddf90bfbae&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2019-10-18T17:30:49.803348286+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;172.17.0.0/16&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.2&quot;</span> <span class="comment">#gateway for this bridge</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment"># containers who uses this bridge and it&#x27;s ip and mac</span></span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;b10936e9e3f7a8703e8360ffb994e1736455d54ef77bd72f32c99d8be3573550&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;nervous_lamport&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;04dead82abb38c42c55c547c77ac10cf65701528c5ac5b05576b2d910fcc2e2f&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.17.0.1/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.default_bridge&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_icc&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_ip_masquerade&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.host_binding_ipv4&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="string">&quot;docker0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.driver.mtu&quot;</span>: <span class="string">&quot;1500&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ ifconfig docker0</span><br><span class="line">docker0   Link encap:Ethernet  HWaddr 02:42:32:26:c0:ce</span><br><span class="line">          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class="line">          inet6 addr: fe80::42:32ff:fe26:c0ce/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:21131 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:21649 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:1212359 (1.2 MB)  TX bytes:66638333 (66.6 MB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># show bridge info with brctl command</span></span><br><span class="line">$ brctl show</span><br><span class="line">bridge name     bridge <span class="built_in">id</span>               STP enabled     interfaces</span><br><span class="line">docker0         8000.02423226c0ce       no              vethd0a3d97</span><br><span class="line"></span><br><span class="line"><span class="comment"># check veth paris one in host, the other is in container</span></span><br><span class="line"><span class="comment"># vethd0a3d97 is the veth pair which is in the host bridge</span></span><br><span class="line"><span class="comment"># the peer is @if44(index is 44) which is in container</span></span><br><span class="line"></span><br><span class="line">$ ip <span class="built_in">link</span></span><br><span class="line">45: vethd0a3d97@if44: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP mode DEFAULT group default</span><br><span class="line">    <span class="built_in">link</span>/ether 62:75:74:03:97:c1 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line"></span><br><span class="line">$ docker <span class="built_in">exec</span> -it b10936e9e3f7 ip <span class="built_in">link</span></span><br><span class="line">44: eth0@if45: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:ac:11:00:01 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># check the default route for this container, as you can see gateway is 172.17.0.2(docker0)</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it b10936e9e3f7 netstat -nrl</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface</span><br><span class="line">0.0.0.0         172.17.0.2      0.0.0.0         UG        0 0          0 eth0</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li><mark>docker network is separated from container, you can create it and rm it</mark></li>
<li><mark>veth paris are created and removed automatically when start or stop a container</mark></li>
</ul>
<p>Let’s create another container which still uses default bridge.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brctl show</span><br><span class="line">bridge name     bridge <span class="built_in">id</span>               STP enabled     interfaces</span><br><span class="line">docker0         8000.02423226c0ce       no              veth7e4c2a0</span><br><span class="line">                                                        vethd0a3d97</span><br><span class="line"><span class="comment">#check veth pairs</span></span><br><span class="line">$ ip <span class="built_in">link</span></span><br><span class="line">45: vethd0a3d97@if44: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP mode DEFAULT group default</span><br><span class="line">    <span class="built_in">link</span>/ether 62:75:74:03:97:c1 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">51: veth7e4c2a0@if50: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP mode DEFAULT group default</span><br><span class="line">    <span class="built_in">link</span>/ether 6e:8a:8e:f8:ac:8c brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class="line"></span><br><span class="line">$ docker network inspect bridge</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;d40edaa25285c66d856252d9396eaa03167b108e2a00c80a41ec73ddf90bfbae&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2019-10-18T17:30:49.803348286+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;172.17.0.0/16&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.2&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;1128a3a6f4d0c3fe7f910253b368ec33f49e931765231f89a31bfa27174f2a19&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;laughing_sanderson&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;2fa47920e37e3b5956327a5a3d500b55d51743003f9a895a850f170d0bfc033f&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:03&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.17.0.3/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;b10936e9e3f7a8703e8360ffb994e1736455d54ef77bd72f32c99d8be3573550&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;nervous_lamport&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;04dead82abb38c42c55c547c77ac10cf65701528c5ac5b05576b2d910fcc2e2f&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.17.0.1/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.default_bridge&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_icc&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.enable_ip_masquerade&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.host_binding_ipv4&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="string">&quot;docker0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;com.docker.network.driver.mtu&quot;</span>: <span class="string">&quot;1500&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="use-customized-bridge-network"><a href="#use-customized-bridge-network" class="headerlink" title="use customized bridge network"></a>use customized bridge network</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># let create a bridge network with my_bridge from docker cli</span></span><br><span class="line">$ docker network create --driver bridge my_bridge</span><br><span class="line">35e2bf6f7cfce89c07c5ba6493c47fb1561be53c4e5d5f1364907a3b549c281a</span><br><span class="line"></span><br><span class="line"><span class="comment"># show docker network</span></span><br><span class="line">$ docker network  <span class="built_in">ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">d40edaa25285        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">22a73a59ecee        host                host                <span class="built_in">local</span></span><br><span class="line">35e2bf6f7cfc        my_bridge           bridge              <span class="built_in">local</span></span><br><span class="line">d812e787ee49        none                null                <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show system bridge</span></span><br><span class="line">$ brctl show</span><br><span class="line">bridge name     bridge <span class="built_in">id</span>               STP enabled     interfaces</span><br><span class="line">br-35e2bf6f7cfc         8000.0242e911394e       no</span><br><span class="line"></span><br><span class="line"><span class="comment"># run a container with my_bridge</span></span><br><span class="line">$ docker run -it -d --net my_bridge  ubuntu:tool</span><br><span class="line">983f5af3b0e39093e599d8cc1f169be8fd94e76b4c4dbbee5abadc41634ef6af</span><br><span class="line"></span><br><span class="line">$ brctl show</span><br><span class="line">bridge name     bridge <span class="built_in">id</span>               STP enabled     interfaces</span><br><span class="line">br-35e2bf6f7cfc         8000.0242e911394e       no              veth83832ea</span><br><span class="line"></span><br><span class="line"><span class="comment"># inspect my_bridge</span></span><br><span class="line">$ docker network inspect my_bridge</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;my_bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;35e2bf6f7cfce89c07c5ba6493c47fb1561be53c4e5d5f1364907a3b549c281a&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2019-10-22T10:57:28.647218559+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;172.18.0.0/16&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.18.0.1&quot;</span> <span class="comment"># gateway is different with docker0(another bridge)</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;983f5af3b0e39093e599d8cc1f169be8fd94e76b4c4dbbee5abadc41634ef6af&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;frosty_murdock&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;9f6c861df34fa5901ba460d411dd0cb38df545c58126d920d8479dc72911d472&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:12:00:02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.18.0.2/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># each bridge has a virtual device with bridge name(system name not bridge name used by docker)</span></span><br><span class="line">$ ifconfig</span><br><span class="line">br-35e2bf6f7cfc Link encap:Ethernet  HWaddr 02:42:e9:11:39:4e</span><br><span class="line">          inet addr:172.18.0.1  Bcast:172.18.255.255  Mask:255.255.0.0</span><br><span class="line">          inet6 addr: fe80::42:e9ff:fe11:394e/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:10 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:1186 (1.1 KB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># check gw for the container</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it 983f5af3b0e3 netstat -nrl</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface</span><br><span class="line">0.0.0.0         172.18.0.1      0.0.0.0         UG        0 0          0 eth0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
        <category>network</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-persist-share-data</title>
    <url>/2019/10/14/docker-persist-data/</url>
    <content><![CDATA[<h1 id="Persisting-Data"><a href="#Persisting-Data" class="headerlink" title="Persisting Data"></a>Persisting Data</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Sometimes you want to share data between container or you want to persist data even docker is deleted, there there two ways for it</p>
<ul>
<li>bind mount</li>
<li>volume</li>
</ul>
<span id="more"></span>
<p><code>Volumes are the preferred mechanism for persisting data generated by and used by Docker containers</code>. While bind mounts are dependent on the directory structure of the host machine, volumes are completely managed by Docker. </p>
<p><strong>Volumes have several advantages over bind mounts:</strong>  </p>
<ul>
<li>Volumes are easier to back up or migrate than bind mounts.</li>
<li>You can manage volumes using Docker CLI commands or the Docker API.</li>
<li>Volumes work on both Linux and Windows containers.</li>
<li>Volumes can be more safely shared among multiple containers.</li>
<li>Volume drivers let you store volumes on remote hosts or cloud providers, to encrypt the contents of volumes, or to add other functionality.</li>
<li>New volumes can have their content pre-populated by a container.</li>
</ul>
<p><img src="https://docs.docker.com/storage/images/types-of-mounts-volume.png" alt="volume and bind mount"></p>
<p><strong>Ignore tmpfs(in memory), it&#39;s for non-persisting data, data will be disappear if docker is stop or restart</strong></p>
<p><mark>Note: volume dir is at &#x2F;var&#x2F;lib&#x2F;docker, controlled by docker cli, so volume is independent of container, even <strong>you delete container, volume is still there if not delete explicitly by cli</strong></mark></p>
<h2 id="docker-option-for-persisting-data"><a href="#docker-option-for-persisting-data" class="headerlink" title="docker option for persisting data"></a>docker option for persisting data</h2><p>There are two options you can use to do this, one is <strong>-v(–volume )</strong>, the other is <strong>–mount</strong>, <mark><strong>new user should use –mount</strong></mark></p>
<ul>
<li><p>–mount: <code>Consists of multiple key-value pairs, separated by commas and each consisting of a &lt;key&gt;=&lt;value&gt; tuple</code>. The –mount syntax is more verbose than -v or –volume, but the order of the keys is not significant, and the value of the flag is easier to understand.</p>
<ul>
<li>The <code>type</code> of the mount, which can be <code>bind, volume, or tmpfs</code>. This topic discusses volumes, so the type is always volume.</li>
<li>The <code>source</code> of the mount. For named volumes, this is the <code>name of the volume</code>. For anonymous volumes, this field is omitted. May be specified as <code>source or src</code>.</li>
<li>The <code>destination</code> takes as its value the path where the file or directory is mounted in the container. May be specified as <code>destination, dst, or targe</code>t.</li>
<li>The <code>readonly</code> option, if present, causes the bind mount to be mounted into the container as read-only.</li>
<li>The volume-opt option, which can be specified more than once, takes a key-value pair consisting of the option name and its value.</li>
</ul>
</li>
</ul>
<p><mark>–mount needs docker version &gt;&#x3D;17.06, check it $docker version</mark></p>
<h3 id="bind-mount"><a href="#bind-mount" class="headerlink" title="bind mount"></a>bind mount</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For type=bind, must specify the source(from host)</span></span><br><span class="line">$ docker run -d \</span><br><span class="line">  -it \</span><br><span class="line">  --name devtest \</span><br><span class="line">  --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=<span class="string">&quot;<span class="subst">$(pwd)</span>&quot;</span>/target,target=/app \</span><br><span class="line">  nginx:latest</span><br></pre></td></tr></table></figure>

<h3 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker volume create my-vol</span><br><span class="line">$ docker volume <span class="built_in">ls</span></span><br><span class="line">$ docker volume inspect my-vol</span><br><span class="line"></span><br><span class="line"><span class="comment"># use an existing volume so that two container can share data by volume id</span></span><br><span class="line"><span class="comment"># Container 1</span></span><br><span class="line">$ docker run -d \</span><br><span class="line">  --name devtest1 \</span><br><span class="line">  --mount src=myvol,dst=/app \</span><br><span class="line">  nginx:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># Container 2</span></span><br><span class="line">$ docker run -d \</span><br><span class="line">  --name devtest2 \</span><br><span class="line">  --mount <span class="built_in">source</span>=myvol,target=/app \</span><br><span class="line">  nginx:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use non-existing volume(without source)</span></span><br><span class="line"><span class="comment"># in this case docker will create a volume automatically</span></span><br><span class="line"><span class="comment"># but this volume will not deleted automatically when container is deleted</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Container 1</span></span><br><span class="line">$ docker run -d \</span><br><span class="line">  --name devtest1 \</span><br><span class="line">  --mount target=/app \</span><br><span class="line">  nginx:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># Container 2 use volumes same as Container 1</span></span><br><span class="line">$ docker run -d \</span><br><span class="line">  --name devtest2 \</span><br><span class="line">  --volumes-from devtest1 \</span><br><span class="line">  nginx:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line">$ docker inspect devtest1</span><br><span class="line"></span><br><span class="line">$ docker stop devtest1</span><br><span class="line">$ docker <span class="built_in">rm</span> devtest1</span><br><span class="line"></span><br><span class="line"><span class="comment"># need to remove volume explicitly!!!</span></span><br><span class="line">$ docker volume <span class="built_in">rm</span> my-vol</span><br><span class="line"><span class="comment"># </span></span><br></pre></td></tr></table></figure>
<p><mark>volume should be deleted manually even if it’s created automatically sometime </mark></p>
<h3 id="mount-block-device-into-container"><a href="#mount-block-device-into-container" class="headerlink" title="mount block device into container"></a>mount block device into container</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create a raw disk</span></span><br><span class="line">$ <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/tmp/loop.raw bs=1M count=100</span><br><span class="line"><span class="comment"># setup raw disk as a block device(/dev/loop0)</span></span><br><span class="line">$ losetup /dev/loop0 /tmp/loop.raw</span><br><span class="line"></span><br><span class="line"><span class="comment"># create disk and format with fs </span></span><br><span class="line">$ pvcreate /dev/loop0</span><br><span class="line">$ vgcreate vg1 /dev/loop0</span><br><span class="line">$ lvcreate --size 90M --name lv1 vg1</span><br><span class="line">$ mkfs.xfs /dev/vg1/lv1</span><br><span class="line"></span><br><span class="line">$ docker run --<span class="built_in">rm</span> -it --mount=<span class="string">&#x27;type=volume,dst=/opt,volume-driver=local,volume-opt=type=xfs,volume-opt=device=/dev/vg1/lv1&#x27;</span> centos bash</span><br></pre></td></tr></table></figure>

<h3 id="tmpfs"><a href="#tmpfs" class="headerlink" title="tmpfs"></a>tmpfs</h3><p>tmpfs mounts only for linux. When you create a container with a tmpfs mount, the container can create files outside the container’s writable layer</p>
<mark class="label success">This is useful to `temporarily store` sensitive files that you don’t want to persist in either the host or the container writable layer.</mark>

<p><mark>Unlike volumes and bind mounts, <strong>you can’t share tmpfs mounts between containers</strong></mark></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">  -it \</span><br><span class="line">  --name tmptest \</span><br><span class="line">  --mount <span class="built_in">type</span>=tmpfs,destination=/app \</span><br><span class="line">  nginx:latest</span><br></pre></td></tr></table></figure>

<h2 id="Volume-size"><a href="#Volume-size" class="headerlink" title="Volume size?"></a>Volume size?</h2><p>There is no limitation for volume when creating it, you can’t set limit for it, <code>the size of volume is determined by the disk(block) of host it resides</code>. same thing for tmpfs as well, its size is determined by host tmpfs system(default it’s size half of total memory). <code>volume, bind mount, tmpfs, block device appear same in the container(dst directory)</code>, that means inside a container, you see a directory, the size or data that can be stored at that direcotry depends on the size of block on host. but if you use <code>fdisk, lsblk</code> inside the contianer, you see the host block size, not the size can be used by the container, the storage size can be used by container has two parts.</p>
<ul>
<li>volume size determined by host block size, check volume source <code>docker inspect</code>, then check which block as source</li>
<li>writalbe layer determined by host block where the writalbe layer exists(<code>default /var/lib/docker, check which block for /var</code>)</li>
</ul>
<h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><ul>
<li><a href="https://docs.docker.com/storage/volumes/">docker volume</a></li>
<li><a href="https://docs.docker.com/storage/bind-mounts/">docker bind mount</a></li>
<li><a href="https://docs.docker.com/storage/tmpfs/">docker tmpfs mount</a></li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
        <category>persist-data</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>volume</tag>
        <tag>bind</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-storage-driver</title>
    <url>/2019/10/11/docker-storage-driver/</url>
    <content><![CDATA[<h1 id="Storage-driver"><a href="#Storage-driver" class="headerlink" title="Storage driver"></a>Storage driver</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Docker supports many storage drivers like below, but if you work on ubuntu<br>use AUFS if linux kernel version is less than 4.0 otherwise use overlay(overlay2) as it has better performance.<br><img src="https://cyun.tech/images/docker/storage-driver-history.png" alt="storage driver"></p>
<span id="more"></span>
<p><strong>Note: AUFS is not accepted by linux kernel(not in main) but it&#39;s initially default  storage driver for docker.</strong></p>
<h2 id="how-docker-uses-AUFS"><a href="#how-docker-uses-AUFS" class="headerlink" title="how docker uses AUFS"></a>how docker uses AUFS</h2><p>Aufs merges different dirs into single one, basic usage, refer to <a href="/2019/10/11/docker-core-tech-aufs/" title="docker-core-tech-aufs">Aufs-basic</a>, here let’s say how aufs works for docker.</p>
<mark class="label success">Actually, Aufs($ mount -t aufs xx) only happens when you <mark>create</mark> a container(event it's not started), at that time docker creates a RW layer(called container layer), then mounts different layers[container layer + image layers] into single dir, when you start this container, chroot to this single dir as the root dir for it, that's it.</mark>

<p><mark>Note: this mount point(single dir) and RW layer is deleted only when the container is removed.</mark></p>
<h3 id="x2F-var-x2F-lib-x2F-docker-changes-when-created-container"><a href="#x2F-var-x2F-lib-x2F-docker-changes-when-created-container" class="headerlink" title="&#x2F;var&#x2F;lib&#x2F;docker changes when created container"></a>&#x2F;var&#x2F;lib&#x2F;docker changes when created container</h3><mark class="label danger">let's take a real example on ubuntu to see how it works</mark>, in order to understand it correctly, it's better read <a href="/2019/10/11/docker-image-container-on-disk/" title="docker-image-container-on-disk">how image stored on ubuntu</a> firstly.

<p>Initially, we only have one image, ubuntu:latest which has four layers that’s where we begin</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              latest              2ca708c1c9cc        3 weeks ago         64.19 MB</span><br></pre></td></tr></table></figure>

<p>later on we create a container with this image</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker create  --name myubuntu  ubuntu:latest</span><br><span class="line">ba2377cb603f8c5ef44619af1bb8734a870139939913777896438e34facd3a3e</span><br><span class="line"></span><br><span class="line">$ docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS               NAMES</span><br><span class="line">ba2377cb603f        ubuntu:latest       <span class="string">&quot;/bin/bash&quot;</span>         About a minute ago   Created                                 myubuntu</span><br></pre></td></tr></table></figure>

<p>Let’s see what changes for each docker directory.</p>
<p><strong><mark>aufs&#x2F;diff change </mark></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Before created</span><br><span class="line">$ <span class="built_in">ls</span> -l /var/lib/docker/aufs/diff</span><br><span class="line">total 16</span><br><span class="line">drwxr-xr-x  6 root root 4096 Oct 14 09:50 268f3ca66142b2b9791504df67c604a5f0bf331064f4e1f899fcdd33686b602d</span><br><span class="line">drwxr-xr-x 21 root root 4096 Oct 14 09:50 38fd587650e8a0befc2a177395a2afa380abcd32ac78316c6a38ea6b01bdadd7</span><br><span class="line">drwxr-xr-x  3 root root 4096 Oct 14 09:50 39d5b8fbe7446545c8e982bc3c2e0a0e955a81c99a88a85121252800406c88cf</span><br><span class="line">drwxr-xr-x  3 root root 4096 Oct 14 09:50 9bd9ca976269998def585a7848e180207f88cdec9e95b11e930532cfe84780e6</span><br><span class="line"></span><br><span class="line">After created</span><br><span class="line">$ <span class="built_in">ls</span> -l /var/lib/docker/aufs/diff</span><br><span class="line">total 24</span><br><span class="line">drwxr-xr-x  4 root root 4096 Oct 14 10:15 0d6eb9abafaca00679acf48400264dbb2704a996ae2781a615809ec672859a47</span><br><span class="line">drwxr-xr-x  6 root root 4096 Oct 14 10:15 0d6eb9abafaca00679acf48400264dbb2704a996ae2781a615809ec672859a47-init</span><br><span class="line"><span class="comment"># above are two new added layers(RW layer + init Layer) for this container</span></span><br><span class="line"><span class="comment"># RW layer is empty</span></span><br><span class="line"><span class="comment"># init layer is system related, some system required info</span></span><br><span class="line">aufs/diff/0d6eb9abafaca00679acf48400264dbb2704a996ae2781a615809ec672859a47-init/</span><br><span class="line">|-- dev</span><br><span class="line">|   |-- console</span><br><span class="line">|   |-- pts</span><br><span class="line">|   `-- shm</span><br><span class="line">`-- etc</span><br><span class="line">    |-- hostname</span><br><span class="line">    |-- hosts</span><br><span class="line">    |-- mtab -&gt; /proc/mounts</span><br><span class="line">    `-- resolv.conf</span><br><span class="line"></span><br><span class="line">drwxr-xr-x  6 root root 4096 Oct 14 09:50 268f3ca66142b2b9791504df67c604a5f0bf331064f4e1f899fcdd33686b602d</span><br><span class="line">drwxr-xr-x 21 root root 4096 Oct 14 09:50 38fd587650e8a0befc2a177395a2afa380abcd32ac78316c6a38ea6b01bdadd7</span><br><span class="line">drwxr-xr-x  3 root root 4096 Oct 14 09:50 39d5b8fbe7446545c8e982bc3c2e0a0e955a81c99a88a85121252800406c88cf</span><br><span class="line">drwxr-xr-x  3 root root 4096 Oct 14 09:50 9bd9ca976269998def585a7848e180207f88cdec9e95b11e930532cfe84780e6</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong><mark>aufs&#x2F;layer change </mark></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Before created</span><br><span class="line">$ <span class="built_in">ls</span> -l /var/lib/docker/aufs/layers/</span><br><span class="line">total 12</span><br><span class="line">-rw-r--r-- 1 root root 130 Oct 14 09:50 268f3ca66142b2b9791504df67c604a5f0bf331064f4e1f899fcdd33686b602d</span><br><span class="line">-rw-r--r-- 1 root root   0 Oct 14 09:50 38fd587650e8a0befc2a177395a2afa380abcd32ac78316c6a38ea6b01bdadd7</span><br><span class="line">-rw-r--r-- 1 root root 195 Oct 14 09:50 39d5b8fbe7446545c8e982bc3c2e0a0e955a81c99a88a85121252800406c88cf</span><br><span class="line">-rw-r--r-- 1 root root  65 Oct 14 09:50 9bd9ca976269998def585a7848e180207f88cdec9e95b11e930532cfe84780e6</span><br><span class="line"></span><br><span class="line"><span class="comment"># After created</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> -l /var/lib/docker/aufs/layers/</span><br><span class="line">total 20</span><br><span class="line">-rw-r--r-- 1 root root 330 Oct 14 10:15 0d6eb9abafaca00679acf48400264dbb2704a996ae2781a615809ec672859a47</span><br><span class="line">-rw-r--r-- 1 root root 260 Oct 14 10:15 0d6eb9abafaca00679acf48400264dbb2704a996ae2781a615809ec672859a47-init</span><br><span class="line"></span><br><span class="line"><span class="comment"># Above are two new added layers relationship files</span></span><br><span class="line"></span><br><span class="line">-rw-r--r-- 1 root root 130 Oct 14 09:50 268f3ca66142b2b9791504df67c604a5f0bf331064f4e1f899fcdd33686b602d</span><br><span class="line">-rw-r--r-- 1 root root   0 Oct 14 09:50 38fd587650e8a0befc2a177395a2afa380abcd32ac78316c6a38ea6b01bdadd7</span><br><span class="line">-rw-r--r-- 1 root root 195 Oct 14 09:50 39d5b8fbe7446545c8e982bc3c2e0a0e955a81c99a88a85121252800406c88cf</span><br><span class="line">-rw-r--r-- 1 root root  65 Oct 14 09:50 9bd9ca976269998def585a7848e180207f88cdec9e95b11e930532cfe84780e6</span><br></pre></td></tr></table></figure>


<p><strong><mark>aufs&#x2F;mnt change </mark></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Before created</span></span><br><span class="line">$ <span class="built_in">ls</span> -l /var/lib/docker/aufs/mnt/</span><br><span class="line">total 16</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 14 09:50 268f3ca66142b2b9791504df67c604a5f0bf331064f4e1f899fcdd33686b602d</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 14 09:50 38fd587650e8a0befc2a177395a2afa380abcd32ac78316c6a38ea6b01bdadd7</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 14 09:50 39d5b8fbe7446545c8e982bc3c2e0a0e955a81c99a88a85121252800406c88cf</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 14 09:50 9bd9ca976269998def585a7848e180207f88cdec9e95b11e930532cfe84780e6</span><br><span class="line"></span><br><span class="line"><span class="comment"># After created</span></span><br><span class="line">$ <span class="built_in">ls</span> -l /var/lib/docker/aufs/mnt/</span><br><span class="line">total 24</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 14 10:15 0d6eb9abafaca00679acf48400264dbb2704a996ae2781a615809ec672859a47</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 14 10:15 0d6eb9abafaca00679acf48400264dbb2704a996ae2781a615809ec672859a47-init</span><br><span class="line"></span><br><span class="line"><span class="comment"># Above is mount point for RW layer and init layer, it&#x27;s only mounted when docker runs here just create</span></span><br><span class="line"><span class="comment"># an empty directory!!!!</span></span><br><span class="line"></span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 14 09:50 268f3ca66142b2b9791504df67c604a5f0bf331064f4e1f899fcdd33686b602d</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 14 09:50 38fd587650e8a0befc2a177395a2afa380abcd32ac78316c6a38ea6b01bdadd7</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 14 09:50 39d5b8fbe7446545c8e982bc3c2e0a0e955a81c99a88a85121252800406c88cf</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 14 09:50 9bd9ca976269998def585a7848e180207f88cdec9e95b11e930532cfe84780e6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ mount -t aufs -o br=aufs/diff/0d6eb9abafaca00679acf48400264dbb2704a996ae2781a615809ec672859a47:aufs/diff/0d6eb9abafaca00679acf48400264dbb2704a996ae2781a615809ec672859a47-init xxx none aufs/mnt/0d6eb9abafaca00679acf48400264dbb2704a996ae2781a615809ec672859a47</span><br><span class="line"><span class="comment"># mount happens only container runs!!!!</span></span><br><span class="line"><span class="comment"># Before container run</span></span><br><span class="line">root@dev:/var/lib/docker<span class="comment"># tree aufs/mnt/0d6eb9abafaca00679acf48400264dbb2704a996ae2781a615809ec672859a47/</span></span><br><span class="line">aufs/mnt/0d6eb9abafaca00679acf48400264dbb2704a996ae2781a615809ec672859a47/</span><br><span class="line">0 directories, 0 files</span><br><span class="line"></span><br><span class="line"><span class="comment"># After container runs</span></span><br></pre></td></tr></table></figure>


<p><strong><mark>containers&#x2F; change </mark></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Before created</span></span><br><span class="line">root@dev:/var/lib/docker<span class="comment"># ls -l containers/</span></span><br><span class="line">total 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># After created</span></span><br><span class="line">root@dev:/var/lib/docker<span class="comment"># ls -l containers/</span></span><br><span class="line">total 4</span><br><span class="line">drwx------ 2 root root 4096 Oct 14 10:15 ba2377cb603f8c5ef44619af1bb8734a870139939913777896438e34facd3a3e</span><br><span class="line"><span class="comment"># it stores conf and runtime info for this container</span></span><br></pre></td></tr></table></figure>

<p><strong><mark>image&#x2F;aufs&#x2F;layerdb&#x2F;mounts change </mark></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Before created</span></span><br><span class="line">root@dev:/var/lib/docker<span class="comment"># ls -l image/aufs/layerdb/mounts/</span></span><br><span class="line">total 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># After created</span></span><br><span class="line"></span><br><span class="line">root@dev:/var/lib/docker<span class="comment"># ls -l image/aufs/layerdb/mounts/</span></span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 14 10:15 ba2377cb603f8c5ef44619af1bb8734a870139939913777896438e34facd3a3e</span><br><span class="line"></span><br><span class="line">root@dev:/var/lib/docker<span class="comment"># tree image/aufs/layerdb/mounts/ba2377cb603f8c5ef44619af1bb8734a870139939913777896438e34facd3a3e/</span></span><br><span class="line">image/aufs/layerdb/mounts/ba2377cb603f8c5ef44619af1bb8734a870139939913777896438e34facd3a3e/</span><br><span class="line">|-- init-id</span><br><span class="line">|-- mount-id</span><br><span class="line">`-- parent</span><br><span class="line"></span><br><span class="line">root@dev:/var/lib/docker<span class="comment"># cat image/aufs/layerdb/mounts/ba2377cb603f8c5ef44619af1bb8734a870139939913777896438e34facd3a3e/mount-id</span></span><br><span class="line">0d6eb9abafaca00679acf48400264dbb2704a996ae2781a615809ec672859a47</span><br><span class="line"><span class="comment"># it stores the mount point(mount-id) for this container</span></span><br></pre></td></tr></table></figure>
<p>That&#39;s almost the changes from storage view when you create a container.</p>
]]></content>
      <categories>
        <category>docker</category>
        <category>storage-driver</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker storage</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-tools</title>
    <url>/2023/07/10/docker-tools/</url>
    <content><![CDATA[<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker compose"></a>docker compose</h2><p>Docker Compose is a tool for <code>running multi-container applications on Docker defined using the Compose file format</code>. A Compose file is used to define how one or more containers that make up your application are configured. Once you have a Compose file, you can <code>create and start your application with a single command: docker compose up</code>, A commpose file defines your application, a componse file has several services, each service is one container!</p>
<span id="more"></span>

<p>You can <code>imagine docker compose as a wrapper for docker command</code> but supports operating containers at application level, meaning start&#x2F;stop application, no matter how many container it has, it just makes the work earlier.</p>
<p><code>docker compose</code> vs <code>docker-compose</code>: docker-compose is orignal tool this the target mentioned above, but docker-compose is written in Python while most Docker developments are in Go, so they decided to recreate <code>docker compose</code> project in Go with the same and more features, <code>docker compose will eventually replace docker-compose</code>, but no timeline for that yet, so if you’r new to this, use <code>docker compose</code>.</p>
<p>Install the docker compose, please refer to <a href="https://github.com/docker/compose#where-to-get-docker-compose">guide to install docker compose</a></p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>when you run <code>docker compose</code> command, it scans a file named <code>docker-compose.yml</code> from current directory if not specified by user.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage:  docker compose [OPTIONS] COMMAND</span><br><span class="line"></span><br><span class="line">Define and run multi-container applications with Docker.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --dry-run                    Execute command in dry run mode</span><br><span class="line">  -f, --file stringArray           Compose configuration files</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  build       Build or rebuild services</span><br><span class="line">  config      Parse, resolve and render compose file in canonical format</span><br><span class="line">  cp          Copy files/folders between a service container and the local filesystem</span><br><span class="line">  create      Creates containers for a service.</span><br><span class="line">  down        Stop and remove containers, networks</span><br><span class="line">  events      Receive real time events from containers.</span><br><span class="line">  exec        Execute a command in a running container.</span><br><span class="line">  images      List images used by the created containers</span><br><span class="line">  kill        Force stop service containers.</span><br><span class="line">  logs        View output from containers</span><br><span class="line">  ls          List running compose projects</span><br><span class="line">  pause       Pause services</span><br><span class="line">  port        Print the public port for a port binding.</span><br><span class="line">  ps          List containers</span><br><span class="line">  pull        Pull service images</span><br><span class="line">  push        Push service images</span><br><span class="line">  restart     Restart service containers</span><br><span class="line">  rm          Removes stopped service containers</span><br><span class="line">  run         Run a one-off command on a service.</span><br><span class="line">  start       Start services</span><br><span class="line">  stop        Stop services</span><br><span class="line">  top         Display the running processes</span><br><span class="line">  unpause     Unpause services</span><br><span class="line">  up          Create and start containers</span><br><span class="line">  version     Show the Docker Compose version information</span><br></pre></td></tr></table></figure>

<p><strong>docker-compose.yml example</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">node:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">app_main</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">-c</span> <span class="string">&quot;yarn install &amp;&amp; yarn start&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8000</span><span class="string">:8000</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/app</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./:/app</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_HOST:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span></span><br><span class="line">      <span class="attr">MYSQL_DB:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">mongo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">app_mongo</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27017</span><span class="string">:27017</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">~/mongo:/data/db</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mongodb:</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ls</span></span><br><span class="line">docker-compose.yml  Dockerfile</span><br><span class="line"><span class="variable">$cat</span> Dockerfile</span><br><span class="line">FROM hello-world</span><br><span class="line"></span><br><span class="line"><span class="variable">$cat</span> docker-compose.yml</span><br><span class="line">version: <span class="string">&#x27;2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  hello_world:</span><br><span class="line">    <span class="comment"># build this container from image directly</span></span><br><span class="line">    image: hello-world</span><br><span class="line">  hello-world-local:</span><br><span class="line">    <span class="comment"># build this container from Dockerfile</span></span><br><span class="line">    build:</span><br><span class="line">      context: .</span><br><span class="line"></span><br><span class="line"><span class="variable">$docker</span> compose <span class="built_in">ls</span> -a</span><br><span class="line">NAME                STATUS              CONFIG FILES</span><br><span class="line">compose             exited(2)           /tmp/compose/docker-compose.yml</span><br><span class="line"><span class="variable">$docker</span> compose ps -a</span><br><span class="line">NAME                          IMAGE                       COMMAND             SERVICE             CREATED              STATUS                          PORTS</span><br><span class="line">compose-hello-world-local-1   compose-hello-world-local   <span class="string">&quot;/hello&quot;</span>            hello-world-local   About a minute ago   Exited (0) About a minute ago   </span><br><span class="line">compose-hello_world-1         hello-world                 <span class="string">&quot;/hello&quot;</span>            hello_world         About a minute ago   Exited (0) About a minute ago   </span><br></pre></td></tr></table></figure>


<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://github.com/docker/awesome-compose">awesome-compose-projects</a></li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
        <category>command</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>encode-toml</title>
    <url>/2021/08/03/encode-toml/</url>
    <content><![CDATA[<h1 id="Toml"><a href="#Toml" class="headerlink" title="Toml"></a>Toml</h1><p>TOML stands for Tom’s Obvious, Minimal Language. It is a data serialization language designed to be a minimal configuration file format that’s easy to read due to obvious semantics. It is an alternative to YAML and JSON. It aims to be more human friendly than JSON and simpler that YAML.</p>
<span id="more"></span>

<h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Comments in TOML look like this.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################</span></span><br><span class="line"><span class="comment"># SCALAR TYPES #</span></span><br><span class="line"><span class="comment">################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Our root object (which continues for the entire document) will be a map,</span></span><br><span class="line"><span class="comment"># which is equivalent to a dictionary, hash or object in other languages.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The key, equals sign, and value must be on the same line</span></span><br><span class="line"><span class="comment"># (though some values can be broken over multiple lines).</span></span><br><span class="line"><span class="attr">key</span> = <span class="string">&quot;value&quot;</span></span><br><span class="line"><span class="attr">string</span> = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="attr">number</span> = <span class="number">42</span></span><br><span class="line"><span class="attr">float</span> = <span class="number">3.14</span></span><br><span class="line"><span class="attr">boolean</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">dateTime</span> = <span class="number">1979</span>-<span class="number">05</span>-<span class="number">27</span>T07:<span class="number">32</span>:<span class="number">00</span>-<span class="number">08</span>:<span class="number">00</span></span><br><span class="line"><span class="attr">scientificNotation</span> = <span class="number">1</span>e+<span class="number">12</span></span><br><span class="line"><span class="attr">&quot;key can be quoted&quot;</span> = <span class="literal">true</span> <span class="comment"># Both &quot; and &#x27; are fine</span></span><br><span class="line"><span class="attr">&quot;key may contain&quot;</span> = <span class="string">&quot;letters, numbers, underscores, and dashes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A bare key must be non-empty, but an empty quoted key is allowed</span></span><br><span class="line"><span class="attr">&quot;&quot;</span> = <span class="string">&quot;blank&quot;</span>     <span class="comment"># VALID but discouraged</span></span><br><span class="line"><span class="attr">&#x27;&#x27;</span> = <span class="string">&#x27;blank&#x27;</span>     <span class="comment"># VALID but discouraged</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"><span class="comment"># String #</span></span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># All strings must contain only valid UTF-8 characters.</span></span><br><span class="line"><span class="comment"># We can escape characters and some of them have a compact escape sequence.</span></span><br><span class="line"><span class="comment"># For example, \t add a tabulation. Refers to the spec to get all of them.</span></span><br><span class="line"><span class="attr">basicString</span> = <span class="string">&quot;are surrounded by quotation marks. \&quot;I&#x27;m quotable\&quot;. Name\tJos&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">multiLineString</span> = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">are surrounded by three quotation marks</span></span><br><span class="line"><span class="string">on each side and allow newlines.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">literalString</span> = <span class="string">&#x27;are surrounded by single quotes. Escaping are not allowed.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">multiLineLiteralString</span> = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">are surrounded by three single quotes on each side</span></span><br><span class="line"><span class="string">and allow newlines. Still no escaping.</span></span><br><span class="line"><span class="string">The first newline is trimmed in raw strings.</span></span><br><span class="line"><span class="string">   All other whitespace</span></span><br><span class="line"><span class="string">   is preserved. #! are preserved?</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For binary data it is recommended that you use Base64, another ASCII or UTF8</span></span><br><span class="line"><span class="comment"># encoding. The handling of that encoding will be application specific.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########</span></span><br><span class="line"><span class="comment"># Integer #</span></span><br><span class="line"><span class="comment">###########</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Integers can start with a +, a - or nothing.</span></span><br><span class="line"><span class="comment">## Leading zeros are not allowed. Hex, octal, and binary forms are not allowed.</span></span><br><span class="line"><span class="comment">## Values that cannot be expressed as a series of digits are not allowed.</span></span><br><span class="line"><span class="attr">int1</span> = +<span class="number">42</span></span><br><span class="line"><span class="attr">int2</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">int3</span> = -<span class="number">21</span></span><br><span class="line"><span class="attr">integerRange</span> = <span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## You can use underscores to enhance readability. Each</span></span><br><span class="line"><span class="comment">## underscore must be surrounded by at least one digit.</span></span><br><span class="line"><span class="attr">int4</span> = <span class="number">5_349_221</span></span><br><span class="line"><span class="attr">int5</span> = <span class="number">1_2_3_4_5</span>     <span class="comment"># VALID but discouraged</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########</span></span><br><span class="line"><span class="comment"># Float #</span></span><br><span class="line"><span class="comment">#########</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Floats are an integer followed by a fractional and/or an exponent part.</span></span><br><span class="line"><span class="attr">flt1</span> = <span class="number">3.1415</span></span><br><span class="line"><span class="attr">flt2</span> = -<span class="number">5</span>e6</span><br><span class="line"><span class="attr">flt3</span> = <span class="number">6.626</span>E-<span class="number">34</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########</span></span><br><span class="line"><span class="comment"># Boolean #</span></span><br><span class="line"><span class="comment">###########</span></span><br><span class="line"></span><br><span class="line"><span class="attr">bool1</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">bool2</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">boolMustBeLowercase</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############</span></span><br><span class="line"><span class="comment"># Datetime #</span></span><br><span class="line"><span class="comment">############</span></span><br><span class="line"></span><br><span class="line"><span class="attr">date1</span> = <span class="number">1979</span>-<span class="number">05</span>-<span class="number">27</span>T07:<span class="number">32</span>:<span class="number">00</span>Z <span class="comment"># UTC time, following RFC 3339/ISO 8601 spec</span></span><br><span class="line"><span class="attr">date2</span> = <span class="number">1979</span>-<span class="number">05</span>-<span class="number">26</span>T15:<span class="number">32</span>:<span class="number">00</span>+<span class="number">08</span>:<span class="number">00</span> <span class="comment"># with RFC 3339/ISO 8601 offset</span></span><br><span class="line"><span class="attr">date3</span> = <span class="number">1979</span>-<span class="number">05</span>-<span class="number">27</span>T07:<span class="number">32</span>:<span class="number">00</span> <span class="comment"># without offset</span></span><br><span class="line"><span class="attr">date4</span> = <span class="number">1979</span>-<span class="number">05</span>-<span class="number">27</span> <span class="comment"># without offset or time</span></span><br></pre></td></tr></table></figure>

<h2 id="array-and-table"><a href="#array-and-table" class="headerlink" title="array and table"></a>array and table</h2><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################</span></span><br><span class="line"><span class="comment"># COLLECTION TYPES #</span></span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########</span></span><br><span class="line"><span class="comment"># Array #</span></span><br><span class="line"><span class="comment">#########</span></span><br><span class="line"></span><br><span class="line"><span class="attr">array1</span> = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line"><span class="attr">array2</span> = [ <span class="string">&quot;Commas&quot;</span>, <span class="string">&quot;are&quot;</span>, <span class="string">&quot;delimiters&quot;</span> ]</span><br><span class="line"><span class="attr">array3</span> = [ <span class="string">&quot;Don&#x27;t mix&quot;</span>, <span class="string">&quot;different&quot;</span>, <span class="string">&quot;types&quot;</span> ]</span><br><span class="line"><span class="attr">array4</span> = [ [ <span class="number">1.2</span>, <span class="number">2.4</span> ], [<span class="string">&quot;all&quot;</span>, <span class="string">&#x27;strings&#x27;</span>, <span class="string">&quot;&quot;&quot;are the same&quot;&quot;&quot;</span>, <span class="string">&#x27;&#x27;&#x27;type&#x27;&#x27;&#x27;</span>] ]</span><br><span class="line"><span class="attr">array5</span> = [</span><br><span class="line">  <span class="string">&quot;Whitespace&quot;</span>, <span class="string">&quot;is&quot;</span>, <span class="string">&quot;ignored&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#########</span></span><br><span class="line"><span class="comment"># Table #</span></span><br><span class="line"><span class="comment">#########</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tables (or hash tables or dictionaries) are collections of key/value</span></span><br><span class="line"><span class="comment"># pairs. They appear in square brackets on a line by themselves.</span></span><br><span class="line"><span class="comment"># Empty tables are allowed and simply have no key/value pairs within them.</span></span><br><span class="line"><span class="section">[table]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Under that, and until the next table or EOF are the key/values of that table.</span></span><br><span class="line"><span class="comment"># Key/value pairs within tables are not guaranteed to be in any specific order.</span></span><br><span class="line"><span class="section">[table-1]</span></span><br><span class="line"><span class="attr">key1</span> = <span class="string">&quot;some string&quot;</span></span><br><span class="line"><span class="attr">key2</span> = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="section">[table-2]</span></span><br><span class="line"><span class="attr">key1</span> = <span class="string">&quot;another string&quot;</span></span><br><span class="line"><span class="attr">key2</span> = <span class="number">456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dots are prohibited in bare keys because dots are used to signify nested tables.</span></span><br><span class="line"><span class="comment"># Naming rules for each dot separated part are the same as for keys.</span></span><br><span class="line"><span class="section">[dog.&quot;tater.man&quot;]</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;pug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># In JSON land, that would give you the following structure:</span></span><br><span class="line"><span class="comment"># &#123; &quot;dog&quot;: &#123; &quot;tater.man&quot;: &#123; &quot;type&quot;: &quot;pug&quot; &#125; &#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Whitespace around dot-separated parts is ignored, however, best practice is to</span></span><br><span class="line"><span class="comment"># not use any extraneous whitespace.</span></span><br><span class="line"><span class="section">[a.b.c]</span>            <span class="comment"># this is best practice</span></span><br><span class="line"><span class="section">[ d.e.f ]</span>          <span class="comment"># same as [d.e.f]</span></span><br><span class="line"><span class="section">[ j . &quot;ʞ&quot; . &#x27;l&#x27; ]</span>  <span class="comment"># same as [j.&quot;ʞ&quot;.&#x27;l&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You don&#x27;t need to specify all the super-tables if you don&#x27;t want to. TOML knows</span></span><br><span class="line"><span class="comment"># how to do it for you.</span></span><br><span class="line"><span class="comment"># [x] you</span></span><br><span class="line"><span class="comment"># [x.y] don&#x27;t</span></span><br><span class="line"><span class="comment"># [x.y.z] need these</span></span><br><span class="line"><span class="section">[x.y.z.w]</span> <span class="comment"># for this to work</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># As long as a super-table hasn&#x27;t been directly defined and hasn&#x27;t defined a</span></span><br><span class="line"><span class="comment"># specific key, you may still write to it.</span></span><br><span class="line"><span class="section">[a.b]</span></span><br><span class="line"><span class="attr">c</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="section">[a]</span></span><br><span class="line"><span class="attr">d</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Will generate the following in JSON:</span></span><br><span class="line"><span class="comment"># &#123; &quot;a&quot;: &#123;&quot;b&quot;: &#123;&quot;c&quot;: 1&#125;, &quot;d&quot;: 2 &#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You cannot define any key or table more than once. Doing so is invalid.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DO NOT DO THIS</span></span><br><span class="line"><span class="section">[a]</span></span><br><span class="line"><span class="attr">b</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="section">[a]</span></span><br><span class="line"><span class="attr">c</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DO NOT DO THIS EITHER</span></span><br><span class="line"><span class="section">[a]</span></span><br><span class="line"><span class="attr">b</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="section">[a.b]</span></span><br><span class="line"><span class="attr">c</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># All table names must be non-empty.</span></span><br><span class="line"><span class="section">[]</span>     <span class="comment"># INVALID</span></span><br><span class="line"><span class="section">[a.]</span>   <span class="comment"># INVALID</span></span><br><span class="line"><span class="section">[a..b]</span> <span class="comment"># INVALID</span></span><br><span class="line"><span class="section">[.b]</span>   <span class="comment"># INVALID</span></span><br><span class="line"><span class="section">[.]</span>    <span class="comment"># INVALID</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################</span></span><br><span class="line"><span class="comment"># Inline table #</span></span><br><span class="line"><span class="comment">################</span></span><br><span class="line"></span><br><span class="line"><span class="attr">inlineTables</span> = &#123; areEnclosedWith = <span class="string">&quot;&#123; and &#125;&quot;</span>, mustBeInline = <span class="literal">true</span> &#125;</span><br><span class="line"><span class="attr">point</span> = &#123; x = <span class="number">1</span>, y = <span class="number">2</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">###################</span></span><br><span class="line"><span class="comment"># Array of Tables #</span></span><br><span class="line"><span class="comment">###################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># An array of tables can be expressed by using a table name in double brackets.</span></span><br><span class="line"><span class="comment"># Each table with the same double bracketed name will be an item in the array.</span></span><br><span class="line"><span class="comment"># The tables are inserted in the order encountered.</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[products]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;array of table&quot;</span></span><br><span class="line"><span class="attr">sku</span> = <span class="number">738594937</span></span><br><span class="line"><span class="attr">emptyTableAreAllowed</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[products]]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[products]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;Nail&quot;</span></span><br><span class="line"><span class="attr">sku</span> = <span class="number">284758393</span></span><br><span class="line"><span class="attr">color</span> = <span class="string">&quot;gray&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Will generate the following in JSON:</span></span><br><span class="line"><span class="comment"># &#123;&quot;products&quot;: [&#123;&quot;name&quot;: &quot;array of table&quot;&#125;, &#123;&quot;name&quot;:&quot;Nail&quot;&#125;]&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>nested arrays of tables</strong></p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># You can create nested arrays of tables as well. Each double-bracketed</span></span><br><span class="line"><span class="comment"># sub-table will belong to the nearest table element above it.</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[fruit]]</span></span><br><span class="line">  <span class="attr">name</span> = <span class="string">&quot;apple&quot;</span> <span class="comment"># I am a property in fruit table/map</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[fruit.geometry]</span></span><br><span class="line">    <span class="attr">shape</span> = <span class="string">&quot;round&quot;</span></span><br><span class="line">    <span class="attr">note</span> = <span class="string">&quot;I am a property in geometry table/map&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[[fruit.color]]</span></span><br><span class="line">    <span class="attr">name</span> = <span class="string">&quot;red&quot;</span></span><br><span class="line">    <span class="attr">note</span> = <span class="string">&quot;I am an array item in apple fruit&#x27;s table/map&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[[fruit.color]]</span></span><br><span class="line">    <span class="attr">name</span> = <span class="string">&quot;green&quot;</span></span><br><span class="line">    <span class="attr">note</span> = <span class="string">&quot;I am in the same array as red&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[fruit]]</span></span><br><span class="line">  <span class="attr">name</span> = <span class="string">&quot;banana&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[[fruit.color]]</span></span><br><span class="line">    <span class="attr">name</span> = <span class="string">&quot;yellow&quot;</span></span><br><span class="line">    <span class="attr">note</span> = <span class="string">&quot;I am an array item in banana fruit&#x27;s table/map&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul>
<li><a href="https://github.com/toml-lang/toml">Toml official website</a></li>
<li><a href="https://www.toml-lint.com/">Online Toml Validator</a></li>
<li><a href="https://learnxinyminutes.com/docs/toml/">Learn Toml Minutes</a></li>
</ul>
]]></content>
      <categories>
        <category>encode</category>
        <category>toml</category>
      </categories>
      <tags>
        <tag>encode</tag>
        <tag>toml</tag>
      </tags>
  </entry>
  <entry>
    <title>encode_yaml</title>
    <url>/2021/03/26/encode-yaml/</url>
    <content><![CDATA[<h1 id="Yaml"><a href="#Yaml" class="headerlink" title="Yaml"></a>Yaml</h1><p>YAML is a human friendly data serialization standard for all programming languages, it’s superset of JSON.</p>
<span id="more"></span>

<h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">################</span></span><br><span class="line"><span class="comment"># SCALAR TYPES #</span></span><br><span class="line"><span class="comment">################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Our root object (which continues for the entire document) will be a map,</span></span><br><span class="line"><span class="comment"># which is equivalent to a dictionary, hash or object in other languages.</span></span><br><span class="line"><span class="attr">key:</span> <span class="string">value</span></span><br><span class="line"><span class="attr">another_key:</span> <span class="string">Another</span> <span class="string">value</span> <span class="string">goes</span> <span class="string">here.</span></span><br><span class="line"><span class="attr">a_number_value:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">scientific_notation:</span> <span class="number">1e+12</span></span><br><span class="line"><span class="comment"># The number 1 will be interpreted as a number, not a boolean. if you want</span></span><br><span class="line"><span class="comment"># it to be interpreted as a boolean, use true</span></span><br><span class="line"><span class="attr">boolean:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">null_value:</span> <span class="literal">null</span></span><br><span class="line"><span class="attr">key with spaces:</span> <span class="string">value</span></span><br><span class="line"><span class="comment">############################################################################</span></span><br><span class="line"><span class="comment">#   Notice that strings don&#x27;t need to be quoted. However, they can be      #</span></span><br><span class="line"><span class="comment">############################################################################</span></span><br><span class="line"><span class="attr">however:</span> <span class="string">&#x27;A string, enclosed in quotes.&#x27;</span></span><br><span class="line"><span class="attr">&#x27;Keys can be quoted too.&#x27;:</span> <span class="string">&quot;Useful if you want to put a &#x27;:&#x27; in your key.&quot;</span></span><br><span class="line"><span class="attr">single quotes:</span> <span class="string">&#x27;have &#x27;</span><span class="string">&#x27;one&#x27;</span><span class="string">&#x27; escape pattern&#x27;</span></span><br><span class="line"><span class="attr">double quotes:</span> <span class="string">&quot;have many: \&quot;, \0, \t, \u263A, \x0d\x0a == \r\n, and more.&quot;</span></span><br><span class="line"><span class="comment"># UTF-8/16/32 characters need to be encoded</span></span><br><span class="line"><span class="attr">Superscript two:</span> <span class="string">\u00B2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment"># Multiple-line strings can be written either as a &#x27;literal block&#x27; (using |)   #</span></span><br><span class="line"><span class="comment"># or a &#x27;folded block&#x27; (using &#x27;&gt;&#x27;).</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">literal_block:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    This entire block of text will be the value of the &#x27;literal_block&#x27; key,</span></span><br><span class="line"><span class="string">    with line breaks being preserved.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="string">The</span> <span class="string">literal</span> <span class="string">continues</span> <span class="string">until</span> <span class="string">de-dented,</span> <span class="string">and</span> <span class="string">the</span> <span class="string">leading</span> <span class="string">indentation</span> <span class="string">is</span></span><br><span class="line">    <span class="string">stripped.</span></span><br><span class="line"></span><br><span class="line">        <span class="string">Any</span> <span class="string">lines</span> <span class="string">that</span> <span class="string">are</span> <span class="string">&#x27;more-indented&#x27;</span> <span class="string">keep</span> <span class="string">the</span> <span class="string">rest</span> <span class="string">of</span> <span class="string">their</span> <span class="string">indentation</span> <span class="bullet">-</span></span><br><span class="line">        <span class="string">these</span> <span class="string">lines</span> <span class="string">will</span> <span class="string">be</span> <span class="string">indented</span> <span class="string">by</span> <span class="number">4</span> <span class="string">spaces.</span></span><br><span class="line"><span class="attr">folded_style:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">    This entire block of text will be the value of &#x27;folded_style&#x27;, but this</span></span><br><span class="line"><span class="string">    time, all newlines will be replaced with a single space.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="string">Blank</span> <span class="string">lines,</span> <span class="string">like</span> <span class="string">above,</span> <span class="string">are</span> <span class="string">converted</span> <span class="string">to</span> <span class="string">a</span> <span class="string">newline</span> <span class="string">character.</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;More-indented&#x27;</span> <span class="string">lines</span> <span class="string">keep</span> <span class="string">their</span> <span class="string">newlines,</span> <span class="string">too</span> <span class="bullet">-</span></span><br><span class="line">        <span class="string">this</span> <span class="string">text</span> <span class="string">will</span> <span class="string">appear</span> <span class="string">over</span> <span class="string">two</span> <span class="string">lines.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"><span class="comment"># COLLECTION TYPES #</span></span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line"><span class="comment"># Nesting uses indentation. 2 space indent is preferred (but not required!!!)</span></span><br><span class="line"><span class="comment">##########################################################################</span></span><br><span class="line"><span class="attr">a_nested_map:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">value</span></span><br><span class="line">  <span class="attr">another_key:</span> <span class="string">Another</span> <span class="string">Value</span></span><br><span class="line">  <span class="attr">another_nested_map:</span></span><br><span class="line">    <span class="attr">hello:</span> <span class="string">hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Maps don&#x27;t have to have string keys.</span></span><br><span class="line"><span class="attr">0.25:</span> <span class="string">a</span> <span class="string">float</span> <span class="string">key</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Keys can also be complex, like multi-line objects</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="comment"># We use ? followed by a space to indicate the start of a complex key.</span></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"><span class="string">?</span> <span class="string">|</span></span><br><span class="line"><span class="string">  This is a key</span></span><br><span class="line"><span class="string">  that has multiple lines</span></span><br><span class="line"><span class="string"></span><span class="string">:</span> <span class="string">and</span> <span class="string">this</span> <span class="string">is</span> <span class="string">its</span> <span class="string">value</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># YAML also allows mapping between sequences with the complex key syntax</span></span><br><span class="line"><span class="comment"># Some language parsers might complain</span></span><br><span class="line"><span class="comment"># An example</span></span><br><span class="line"><span class="string">?</span> <span class="bullet">-</span> <span class="string">Manchester</span> <span class="string">United</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Real</span> <span class="string">Madrid</span></span><br><span class="line"><span class="string">:</span> [<span class="number">2001-01-01</span>, <span class="number">2002-02-02</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sequences (equivalent to lists or arrays) look like this</span></span><br><span class="line"><span class="comment"># (note that the &#x27;-&#x27; counts as indentation):</span></span><br><span class="line"><span class="attr">a_sequence:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Item</span> <span class="number">1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Item</span> <span class="number">2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">0.5</span>  <span class="comment"># sequences can contain disparate types.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Item</span> <span class="number">4</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">value</span></span><br><span class="line">    <span class="attr">another_key:</span> <span class="string">another_value</span></span><br><span class="line">  <span class="bullet">-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">This</span> <span class="string">is</span> <span class="string">a</span> <span class="string">sequence</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">inside</span> <span class="string">another</span> <span class="string">sequence</span></span><br><span class="line">  <span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span> <span class="string">Nested</span> <span class="string">sequence</span> <span class="string">indicators</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">can</span> <span class="string">be</span> <span class="string">collapsed</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Since YAML is a superset of JSON, you can also write JSON-style maps and</span></span><br><span class="line"><span class="comment"># sequences:</span></span><br><span class="line"><span class="attr">json_map:</span> &#123;<span class="attr">&quot;key&quot;:</span> <span class="string">&quot;value&quot;</span>&#125;</span><br><span class="line"><span class="attr">json_seq:</span> [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;takeoff&quot;</span>]</span><br><span class="line"><span class="attr">and quotes are optional:</span> &#123;<span class="attr">key:</span> [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">takeoff</span>]&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Extra-Features"><a href="#Extra-Features" class="headerlink" title="Extra Features"></a>Extra Features</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#######################</span></span><br><span class="line"><span class="comment"># EXTRA YAML FEATURES #</span></span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># YAML also has a handy feature called &#x27;anchors&#x27;, which let you easily duplicate</span></span><br><span class="line"><span class="comment"># content across your document. Both of these keys will have the same value:</span></span><br><span class="line"><span class="attr">anchored_content:</span> <span class="string">&amp;anchor_name</span> <span class="string">This</span> <span class="string">string</span> <span class="string">will</span> <span class="string">appear</span> <span class="string">as</span> <span class="string">the</span> <span class="string">value</span> <span class="string">of</span> <span class="string">two</span> <span class="string">keys.</span></span><br><span class="line"><span class="attr">other_anchor:</span> <span class="meta">*anchor_name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Anchors can be used to duplicate/inherit properties</span></span><br><span class="line"><span class="attr">base:</span> <span class="meta">&amp;base</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Everyone</span> <span class="string">has</span> <span class="string">same</span> <span class="string">name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The regexp &lt;&lt; is called Merge Key Language-Independent Type. It is used to</span></span><br><span class="line"><span class="comment"># indicate that all the keys of one or more specified maps should be inserted</span></span><br><span class="line"><span class="comment"># into the current map.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">foo:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*base</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">bar:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*base</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># foo and bar would also have name: Everyone has same name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># YAML also has tags, which you can use to explicitly declare types.</span></span><br><span class="line"><span class="attr">explicit_string:</span> <span class="type">!!str</span> <span class="number">0.5</span></span><br><span class="line"><span class="comment"># Some parsers implement language specific tags, like this one for Python&#x27;s</span></span><br><span class="line"><span class="comment"># complex number type.</span></span><br><span class="line"><span class="attr">python_complex_number:</span> <span class="type">!!python/complex</span> <span class="number">1</span><span class="string">+2j</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We can also use yaml complex keys with language specific tags</span></span><br><span class="line"><span class="string">?</span> <span class="type">!!python/tuple</span> [<span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="string">:</span> <span class="string">Fifty</span> <span class="string">Seven</span></span><br><span class="line"><span class="comment"># Would be &#123;(5, 7): &#x27;Fifty Seven&#x27;&#125; in Python</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"><span class="comment"># EXTRA YAML TYPES #</span></span><br><span class="line"><span class="comment">####################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Strings and numbers aren&#x27;t the only scalars that YAML can understand.</span></span><br><span class="line"><span class="comment"># ISO-formatted date and datetime literals are also parsed.</span></span><br><span class="line"><span class="attr">datetime:</span> <span class="number">2001-12-15T02:59:43.1Z</span></span><br><span class="line"><span class="attr">datetime_with_spaces:</span> <span class="number">2001-12-14 21:59:43.10 -5</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2002-12-14</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The !!binary tag indicates that a string is actually a base64-encoded</span></span><br><span class="line"><span class="comment"># representation of a binary blob.</span></span><br><span class="line"><span class="attr">gif_file:</span> <span class="type">!!binary</span> <span class="string">|</span></span><br><span class="line"><span class="string">  R0lGODlhDAAMAIQAAP//9/X17unp5WZmZgAAAOfn515eXvPz7Y6OjuDg4J+fn5</span></span><br><span class="line"><span class="string">  OTk6enp56enmlpaWNjY6Ojo4SEhP/++f/++f/++f/++f/++f/++f/++f/++f/+</span></span><br><span class="line"><span class="string">  +f/++f/++f/++f/++f/++SH+Dk1hZGUgd2l0aCBHSU1QACwAAAAADAAMAAAFLC</span></span><br><span class="line"><span class="string">  AgjoEwnuNAFOhpEMTRiggcz4BNJHrv/zCFcLiwMWYNG84BwwEeECcgggoBADs=</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="comment"># YAML also has a set type, which looks like this:</span></span><br><span class="line"><span class="attr">set:</span></span><br><span class="line">  <span class="string">?</span> <span class="string">item1</span></span><br><span class="line">  <span class="string">?</span> <span class="string">item2</span></span><br><span class="line">  <span class="string">?</span> <span class="string">item3</span></span><br><span class="line"><span class="attr">or:</span> &#123;<span class="string">item1</span>, <span class="string">item2</span>, <span class="string">item3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sets are just maps with null values; the above is equivalent to:</span></span><br><span class="line"><span class="attr">set2:</span></span><br><span class="line">  <span class="attr">item1:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">item2:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">item3:</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul>
<li><a href="https://yaml.org/">YAML official website</a></li>
<li><a href="http://www.yamllint.com/">Online YAML Validator</a></li>
<li><a href="https://learnxinyminutes.com/">Learn YAML Minutes</a></li>
</ul>
]]></content>
      <categories>
        <category>encode</category>
        <category>yaml</category>
      </categories>
      <tags>
        <tag>encode</tag>
        <tag>yaml</tag>
      </tags>
  </entry>
  <entry>
    <title>gRPC_Go</title>
    <url>/2021/08/26/gRPC-Go/</url>
    <content><![CDATA[<h1 id="grpc"><a href="#grpc" class="headerlink" title="grpc"></a>grpc</h1><p>In gRPC, a client application can directly call a method on a server application on a different machine as if it were a local object, making it easier for you to create distributed applications and services. As in many RPC systems, gRPC is based around the idea of defining a service, specifying the methods that can be called remotely with their parameters and return types. On the server side, the server implements this interface and runs a gRPC server to handle client calls. On the client side, the client has a stub (referred to as just a client in some languages) that provides the same methods as the server.</p>
<p><img src="https://grpc.io/img/landing-2.svg" alt="grpc"></p>
<span id="more"></span>

<p>It is a <strong>protocol that is build on top of HTTP&#x2F;2</strong>, and it has some handy features. These included the ability to make streaming calls from the client and server side, or Bi-directional streaming. It serializes and deserializes data using <code>Protocol Buffers</code>, and it also provides code generation through the gRPC compiler to currently 11 different languages.</p>
<p>gRPC clients and servers can run and talk to each other in a variety of environments - from servers inside Google to your own desktop - and can be written in any of gRPC’s supported languages. So, for example, you can easily create a gRPC server in Java with clients in Go, Python, or Ruby. In addition, the latest Google APIs will have gRPC versions of their interfaces, letting you easily build Google functionality into your applications</p>
<p><strong>No input rpc parameter defines</strong><br>If you don’t want any input or output parameters, you can use the well-known proto <code>google.protobuf.Empty</code>. However, this is discouraged as it prevents you from adding parameters to the method in the future. Instead, you would be encouraged to follow the normal practice of having a message for the request, but simply with no contents.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service Greeter &#123;</span><br><span class="line">    rpc SayHello (SayHelloRequest) returns (SayHelloResponse) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message SayHelloRequest &#123;&#125; // service has no input</span><br></pre></td></tr></table></figure>
<p><font color='red'><strong>implicit stream context</strong></font><br>stream also has context as well like unary rpc call which passed context explicitly, while for stream it’s implicitly!</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ctx := stream.Context() </span><br><span class="line">&lt;-ctx.Done</span><br></pre></td></tr></table></figure>


<p><strong>Metadata</strong><br>Metadata is information about a particular RPC call (such as authentication details) in <code>the form of a list of key-value pairs</code>, where the keys are strings and the values are typically strings, but can be binary data. <strong>Metadata is opaque to gRPC itself</strong> - it lets the client provide information associated with the call to the server and vice versa.</p>
<p>Access to metadata is language dependent</p>
<ul>
<li><a href="https://github.com/grpc/grpc-go/blob/master/Documentation/grpc-metadata.md">metadata-go</a></li>
<li><a href="https://grpc.io/docs/languages/go/basics/">grpc go basic</a></li>
</ul>
<h2 id="http2"><a href="#http2" class="headerlink" title="http2"></a>http2</h2><p>As grpc based on http2, in order to understand deeply, we need to learn some core concepts of http2.<br>A “stream” is an <code>independent, bidirectional sequence of frames exchanged between the client and server within an HTTP/2 connection</code>.</p>
<ul>
<li><p>Stream</p>
<blockquote>
<p>A bidirectional flow of bytes within an established connection, which may carry one or more messages. </p>
<blockquote>
<ul>
<li>A single HTTP&#x2F;2 connection can contain multiple concurrently open streams, with either endpoint interleaving frames from multiple streams.</li>
<li>Streams can be established and used unilaterally or shared by either the client or server.</li>
<li>Streams can be closed by either endpoint.</li>
<li>Streams are identified by an integer. Stream identifiers are assigned to streams by the endpoint initiating the stream.</li>
</ul>
</blockquote>
</blockquote>
</li>
<li><p>Message</p>
<blockquote>
<p>A complete sequence of frames that map to a logical request or response message. </p>
</blockquote>
</li>
<li><p>Frame</p>
<blockquote>
<p>The smallest unit of communication in HTTP&#x2F;2, each containing a frame<br>header, which at a minimum identifies the stream to which the frame belongs.</p>
<blockquote>
<ul>
<li>All communication is performed over a single TCP connection that can carry any number of bidirectional streams.</li>
<li>Each stream has a unique identifier and optional priority information that is used to carry bidirectional messages.</li>
<li><code>Each message is a logical HTTP message</code>, such as a request, or response, which consists of one or more frames.</li>
<li>The frame is the smallest unit of communication that carries a specific type of data—e.g., HTTP headers, message payload, and so on. Frames from different streams may be interleaved and then reassembled via the embedded stream identifier in the header of each frame.</li>
</ul>
</blockquote>
</blockquote>
</li>
</ul>
<img src="https://hpbn.co/assets/diagrams/8e6931bb40fc26c511ad15645e7b6113.svg" alt="drawing" width="500"/>

<p><strong>Stream is not http2 connection(mostly tcp connection), it’s also bidirectional stuff, <code>close stream does not means close its underlaying connection</code>.</strong></p>
<ul>
<li><a href="https://developers.google.com/web/fundamentals/performance/http2">http2 introduction</a></li>
<li><a href="https://datatracker.ietf.org/doc/html/rfc7540">http2 rfc</a></li>
</ul>
<h2 id="Unary-RPC-call"><a href="#Unary-RPC-call" class="headerlink" title="Unary RPC call"></a>Unary RPC call</h2><p><strong><font color='red'>gRPC service methods have exactly one input message and exactly one output message, <code>handler is called only when its get the whole message</code></font></strong>. Typically, these messages are used as input and output to only one method. This is on purpose, as it allows easily adding new parameters later (to the messages) while maintaining backward compatibility.</p>
<p>In a unary rpc call, the client sends a single request and the server responds with a single message.</p>
<p><img src="https://miro.medium.com/max/700/1*1_-UZ0WlVd5-LSZzD02IpA.png"></p>
<p><strong>pros and cons</strong></p>
<ul>
<li>easy to use</li>
<li>only effective to small data</li>
<li>if data is huge, it causes delay to response</li>
<li>no interactive support.</li>
</ul>
<h3 id="writing-service-in-proto"><a href="#writing-service-in-proto" class="headerlink" title="writing service in proto"></a>writing service in proto</h3><p><strong>greet.proto</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line">package greet;</span><br><span class="line">//used by proto itself(independent with different language)</span><br><span class="line">// to prevent naming conflicts between different projects(protos).</span><br><span class="line">// import &quot;google/protobuf/timestamp.proto&quot;;</span><br><span class="line"></span><br><span class="line">option go_package = &quot;github.com/hello/runtime/proto/greet&quot;;</span><br><span class="line">// used by protoc when generate go specific code</span><br><span class="line"></span><br><span class="line">// The greeting service definition.</span><br><span class="line">service Greeter &#123;</span><br><span class="line">  // Sends a greeting</span><br><span class="line">  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The request message containing the user&#x27;s name.</span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The response message containing the greetings</span><br><span class="line">message HelloReply &#123;</span><br><span class="line">  string message = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><p><strong>Prerequisite</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget -O ./protoc-3.15.8-linux-x86_64.zip https://github.com/protocolbuffers/protobuf/releases/download/v3.15.8/protoc-3.15.8-linux-x86_64.zip</span><br><span class="line">$ unzip protoc-3.15.8-linux-x86_64.zip -d /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install the protocol compiler plugins for Go using the following commands</span></span><br><span class="line"><span class="comment"># protoc-gen-go: go plugin or gogo/protobuf</span></span><br><span class="line"><span class="comment"># proto-gen-go-grpc: go rpc plugin</span></span><br><span class="line">$ go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26</span><br><span class="line">$ go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1</span><br></pre></td></tr></table></figure>

<p><strong>compile rpc</strong><br><font color='red'><strong>if multiple protos belong to same package, you must provide all of them to protoc command!!!</strong></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># put your source at $GOPATH/src/github.com/hello</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># If the paths=import flag is specified, the output file is placed in a directory named after the Go package&#x27;s import path For example, an input file pro/hello.proto with a Go import path of github.com/hello/runtime/proto/greet results in an output file at github.com/hello/runtime/proto/greet/hello.pb.go. This is the default output mode if a paths flag is not specified.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the paths=source_relative flag is specified, the output file is placed in the same relative directory as the input file. For example, an input file pro/hello.proto results in an output file at pro/hello.pb.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --go_out and --go-grpc_out is based path, all other paths are relative to it!!!</span></span><br><span class="line"></span><br><span class="line">$ protoc --go_out=<span class="variable">$GOPATH</span>/src/ --go_opt=paths=import --go-grpc_out=<span class="variable">$GOPATH</span>/src/ --go-grpc_opt=paths=import proto/greet.proto -I=xxx/other/proto:protocols/</span><br><span class="line"><span class="comment"># generated code at $GOPATH/src/github.com/hello/runtime/proto/greet</span></span><br><span class="line"></span><br><span class="line">$ protoc --go_out=<span class="variable">$GOPATH</span>/src/ --go_opt=paths=source_relative --go-grpc_out=<span class="variable">$GOPATH</span>/src/ --go-grpc_opt=paths=source_relative proto/greet.proto -I=xxx/other/proto:protocols/</span><br><span class="line"><span class="comment"># generated code at $GOPATH/src/proto</span></span><br><span class="line"></span><br><span class="line">$ protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/hello.proto</span><br><span class="line"><span class="comment"># generated code at ./proto</span></span><br></pre></td></tr></table></figure>

<h3 id="Implement-rpc"><a href="#Implement-rpc" class="headerlink" title="Implement rpc"></a>Implement rpc</h3><p><strong>Server</strong>  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc/metadata&quot;</span></span><br><span class="line">    pb <span class="string">&quot;github.com/hello/runtime/protocols/greet&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc/reflection&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    port = <span class="string">&quot;:50051&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// server is used to implement greet.GreeterServer.</span></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span> &#123;</span><br><span class="line">    pb.UnimplementedGreeterServer <span class="comment">// must be first field</span></span><br><span class="line">    <span class="comment">// your staff here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// return value: HelloReply, error</span></span><br><span class="line"><span class="comment">// SayHello implements greet.GreeterServer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span></span> SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, <span class="type">error</span>) &#123;</span><br><span class="line">    md, ok := metadata.FromIncomingContext(ctx)</span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        <span class="comment">// metadata is map: var MD map[string][]string</span></span><br><span class="line">        <span class="comment">// key is string, while value is string array!!!</span></span><br><span class="line">        log.Printf(<span class="string">&quot;metadata: %v&quot;</span>, md.Get(<span class="string">&quot;k1&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    log.Printf(<span class="string">&quot;Received: %v&quot;</span>, in.GetName())</span><br><span class="line">    <span class="comment">// connection is close when returns!!!</span></span><br><span class="line">    <span class="keyword">return</span> &amp;pb.HelloReply&#123;Message: <span class="string">&quot;Hi &quot;</span> + in.GetName()&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    lis, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, port)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;failed to listen: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    s := grpc.NewServer()</span><br><span class="line">    <span class="comment">// register services(server&#123;&#125;) with rpc server</span></span><br><span class="line">    pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// for debugging</span></span><br><span class="line">    reflection.Register(s)</span><br><span class="line">    log.Printf(<span class="string">&quot;server listening at %v&quot;</span>, lis.Addr())</span><br><span class="line">    <span class="keyword">if</span> err := s.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;failed to serve: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">    pb <span class="string">&quot;github.com/hello/proto&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Client..&quot;</span>)</span><br><span class="line"></span><br><span class="line">    con, err := grpc.Dial(<span class="string">&quot;localhost:50051&quot;</span>, opts, grpc.WithInsecure(), grpc.WithBlock())</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;Error connecting: %v \n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> con.Close()</span><br><span class="line">    <span class="comment">//client for specific service</span></span><br><span class="line">    c := pb.NewGreeterClient(con)</span><br><span class="line">    req := pb.HelloRequest&#123;Name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">    res, err := c.SayHello(context.Background(), &amp;req)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;Error on Echo rpc call: %v\n&quot;</span>, err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Response: %v\n&quot;</span>, res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="client-stream-rpc-call"><a href="#client-stream-rpc-call" class="headerlink" title="client stream rpc call"></a>client stream rpc call</h2><p>In a client streaming rpc call, the client sends a bunch of requests and <strong>once it is done streaming, the server will return a single message.</strong><br><img src="https://miro.medium.com/max/700/1*l-gSz3cxkutbc5nq8HZKmQ.png"></p>
<p><strong>stream here is stream of particular request message, the unit is request but byte</strong>!!</p>
<p>Making a client stream request is useful when the client needs to send resources one by one to the server, so they can be processed right away, and once the streaming call is finished the client gets the response.</p>
<p>For client stream, client side needs a stream to send and also server needs a stream to receive messages, both side need to change.</p>
<p><strong>Steps</strong></p>
<ul>
<li><p>client send one request, then another</p>
</li>
<li><p>client notify server I finished the stream</p>
</li>
<li><p>server receive request one by one</p>
</li>
<li><p>server see client finish the stream send one reply.</p>
</li>
</ul>
<h3 id="server-in-proto"><a href="#server-in-proto" class="headerlink" title="server in proto"></a>server in proto</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line">package greet;</span><br><span class="line">//used by proto itself(independent with different language)</span><br><span class="line">// to prevent naming conflicts between different projects(protos).</span><br><span class="line">// import &quot;google/protobuf/timestamp.proto&quot;;</span><br><span class="line"></span><br><span class="line">option go_package = &quot;github.com/hello/runtime/protocols/greet&quot;;</span><br><span class="line">// used by protoc when generate go specific code</span><br><span class="line"></span><br><span class="line">service Greeter &#123;</span><br><span class="line">  // Sends a greeting</span><br><span class="line">  rpc SayHello (stream HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The request message containing the user&#x27;s name.</span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The response message containing the greetings</span><br><span class="line">message HelloReply &#123;</span><br><span class="line">  string message = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="build-1"><a href="#build-1" class="headerlink" title="build"></a>build</h3><p>Same as unary rpc</p>
<h3 id="implement-rpc"><a href="#implement-rpc" class="headerlink" title="implement rpc"></a>implement rpc</h3><p><strong>server</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line">    pb <span class="string">&quot;github.com/hello/proto&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc/reflection&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    port = <span class="string">&quot;:50051&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// server is used to implement greet.GreeterServer.</span></span><br><span class="line"><span class="keyword">type</span> greetServer <span class="keyword">struct</span> &#123;</span><br><span class="line">    pb.UnimplementedGreeterServer <span class="comment">// must be first field</span></span><br><span class="line">    <span class="comment">// your staff here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SayHello implements greet.GreeterServer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *greetServer)</span></span> SayHello(stream pb.Greeter_SayHelloServer) <span class="type">error</span> &#123;</span><br><span class="line">    data := []<span class="type">string</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        req, err := stream.Recv()</span><br><span class="line">        <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">            <span class="comment">// response message is returned through stream, not return value for unary rpc call</span></span><br><span class="line">            <span class="keyword">return</span> stream.SendAndClose(&amp;pb.HelloReply&#123;Message: strings.Join(data, <span class="string">&quot;,&quot;</span>)&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;internal error&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        data = <span class="built_in">append</span>(data, req.GetName())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    lis, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, port)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;failed to listen: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    s := grpc.NewServer()</span><br><span class="line">    <span class="comment">// register services(server&#123;&#125;) with rpc server</span></span><br><span class="line">    pb.RegisterGreeterServer(s, &amp;greetServer&#123;&#125;)</span><br><span class="line">    <span class="comment">// for debugging</span></span><br><span class="line">    reflection.Register(s)</span><br><span class="line">    log.Printf(<span class="string">&quot;server listening at %v&quot;</span>, lis.Addr())</span><br><span class="line">    <span class="keyword">if</span> err := s.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;failed to serve: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>client</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    pb <span class="string">&quot;github.com/hello/proto&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Client..&quot;</span>)</span><br><span class="line"></span><br><span class="line">    con, err := grpc.Dial(<span class="string">&quot;localhost:50051&quot;</span>, opts, grpc.WithInsecure(), grpc.WithBlock())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;Error connecting: %v \n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> con.Close()</span><br><span class="line">    <span class="comment">//client for specific service</span></span><br><span class="line">    c := pb.NewGreeterClient(con)</span><br><span class="line">    req1 := pb.HelloRequest&#123;Name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">    req2 := pb.HelloRequest&#123;Name: <span class="string">&quot;jack&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rpc retuns a stream handler</span></span><br><span class="line">    stream, err := c.SayHello(context.Background())</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;Error on Echo rpc call: %v\n&quot;</span>, err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// send several requests through stream</span></span><br><span class="line">        err = stream.Send(&amp;req1)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Fatalf(<span class="string">&quot;Error on sending: %v\n&quot;</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;sent: %v\n&quot;</span>, req1.GetName())</span><br><span class="line">        time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">        err = stream.Send(&amp;req2)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Fatalf(<span class="string">&quot;Error on sending: %v\n&quot;</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;sent: %v\n&quot;</span>, req2.GetName())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this will call CloseSend to notify I sent all, then receive</span></span><br><span class="line">    res, err := stream.CloseAndRecv()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;Error on recv: %v\n&quot;</span>, err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Response :%s\n&quot;</span>, res.GetMessage())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="server-stream-rpc-call"><a href="#server-stream-rpc-call" class="headerlink" title="server stream rpc call"></a>server stream rpc call</h2><p><img src="https://miro.medium.com/max/700/1*1GjibJpAUbnl9hLAjIK3iQ.png"></p>
<p>For server stream, server side needs a stream to send and also client needs a stream to receive response messages, both side need to change.</p>
<h3 id="server-in-proto-1"><a href="#server-in-proto-1" class="headerlink" title="server in proto"></a>server in proto</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line">package greet;</span><br><span class="line">//used by proto itself(independent with different language)</span><br><span class="line">// to prevent naming conflicts between different projects(protos).</span><br><span class="line">// import &quot;google/protobuf/timestamp.proto&quot;;</span><br><span class="line"></span><br><span class="line">option go_package = &quot;github.com/hello/runtime/protocols/greet&quot;;</span><br><span class="line">// used by protoc when generate go specific code</span><br><span class="line"></span><br><span class="line">service Greeter &#123;</span><br><span class="line">  // Sends a greeting</span><br><span class="line">  rpc SayHello (HelloRequest) returns (stream HelloReply) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The request message containing the user&#x27;s name.</span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The response message containing the greetings</span><br><span class="line">message HelloReply &#123;</span><br><span class="line">  string message = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="build-2"><a href="#build-2" class="headerlink" title="build"></a>build</h3><p>Same as unary rpc</p>
<h3 id="implement-rpc-1"><a href="#implement-rpc-1" class="headerlink" title="implement rpc"></a>implement rpc</h3><p><strong>server</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    pb <span class="string">&quot;github.com/hello/proto&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc/reflection&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    port = <span class="string">&quot;:50051&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// server is used to implement greet.GreeterServer.</span></span><br><span class="line"><span class="keyword">type</span> greetServer <span class="keyword">struct</span> &#123;</span><br><span class="line">    pb.UnimplementedGreeterServer <span class="comment">// must be first field</span></span><br><span class="line">    <span class="comment">// your staff here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SayHello implements greet.GreeterServer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *greetServer)</span></span> SayHello(req *pb.HelloRequest, stream pb.Greeter_SayHelloServer) <span class="type">error</span> &#123;</span><br><span class="line">    res1 := pb.HelloReply&#123;Message: <span class="string">&quot;hello: &quot;</span> + req.GetName()&#125;</span><br><span class="line">    err := stream.Send(&amp;res1)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;error while sending response&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line"></span><br><span class="line">    res2 := pb.HelloReply&#123;Message: <span class="string">&quot;hi: &quot;</span> + req.GetName()&#125;</span><br><span class="line">    err = stream.Send(&amp;res2)</span><br><span class="line">    <span class="comment">// context = stream.Context() get context if needs</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;error while sending response&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stream is close when it returns</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    lis, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, port)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;failed to listen: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    s := grpc.NewServer()</span><br><span class="line">    <span class="comment">// register services(server&#123;&#125;) with rpc server</span></span><br><span class="line">    pb.RegisterGreeterServer(s, &amp;greetServer&#123;&#125;)</span><br><span class="line">    reflection.Register(s) <span class="comment">// for testing</span></span><br><span class="line">    log.Printf(<span class="string">&quot;server listening at %v&quot;</span>, lis.Addr())</span><br><span class="line">    <span class="keyword">if</span> err := s.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;failed to serve: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>client</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">    pb <span class="string">&quot;github.com/hello/proto&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Client..&quot;</span>)</span><br><span class="line"></span><br><span class="line">    opts := grpc.WithInsecure()</span><br><span class="line">    <span class="comment">// WithBlock() blocks here until, error or connection is setup</span></span><br><span class="line">    con, err := grpc.Dial(<span class="string">&quot;localhost:50051&quot;</span>, opts, grpc.WithInsecure(), grpc.WithBlock())</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;Error connecting: %v \n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> con.Close()</span><br><span class="line">    <span class="comment">//client for specific service</span></span><br><span class="line">    c := pb.NewGreeterClient(con)</span><br><span class="line">    req1 := pb.HelloRequest&#123;Name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    stream, err := c.SayHello(context.Background(), &amp;req1)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;Error on sending: %v\n&quot;</span>, err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            res, err := stream.Recv()</span><br><span class="line">            <span class="keyword">if</span> err == io.EOF &#123;<span class="comment">// server close the stream, all is done!!!</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                fmt.Println(err)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;response: %v\n&quot;</span>, res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="bi-direction-stream-rpc-call"><a href="#bi-direction-stream-rpc-call" class="headerlink" title="bi-direction stream rpc call"></a>bi-direction stream rpc call</h2><p>In a bi-directional streaming rpc call, both the client and the server sends multiple messages to each other. Using this type of rpc call, can be a little bit more complicated, since you have to take care of error handling from the server side and the client side, plus in some cases it can add more latency. And perhaps it could be a better option to use a unary call.</p>
<p><img src="https://miro.medium.com/max/700/1*Ug3CAac6nPclg87bxmRBoA.png"></p>
<pre><code>Both the client and server can stop receiving or sending messages at any point in time, either because some errors occurred or because some other business logic happened.
</code></pre>
<h3 id="server-in-proto-2"><a href="#server-in-proto-2" class="headerlink" title="server in proto"></a>server in proto</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line">package greet;</span><br><span class="line">//used by proto itself(independent with different language)</span><br><span class="line">// to prevent naming conflicts between different projects(protos).</span><br><span class="line">// import &quot;google/protobuf/timestamp.proto&quot;;</span><br><span class="line"></span><br><span class="line">option go_package = &quot;github.com/hello/runtime/protocols/greet&quot;;</span><br><span class="line">// used by protoc when generate go specific code</span><br><span class="line"></span><br><span class="line">service Greeter &#123;</span><br><span class="line">  // Sends a greeting</span><br><span class="line">  rpc SayHello (stream HelloRequest) returns (stream HelloReply) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The request message containing the user&#x27;s name.</span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The response message containing the greetings</span><br><span class="line">message HelloReply &#123;</span><br><span class="line">  string message = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="build-3"><a href="#build-3" class="headerlink" title="build"></a>build</h3><p>Same as unary rpc</p>
<h3 id="implement-rpc-2"><a href="#implement-rpc-2" class="headerlink" title="implement rpc"></a>implement rpc</h3><p><strong>server</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span></span><br><span class="line"></span><br><span class="line">    pb <span class="string">&quot;github.com/hello/proto&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc/reflection&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    port = <span class="string">&quot;:50051&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// server is used to implement greet.GreeterServer.</span></span><br><span class="line"><span class="keyword">type</span> greetServer <span class="keyword">struct</span> &#123;</span><br><span class="line">    pb.UnimplementedGreeterServer <span class="comment">// must be first field</span></span><br><span class="line">    <span class="comment">// your staff here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SayHello implements greet.GreeterServer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *greetServer)</span></span> SayHello(stream pb.Greeter_SayHelloServer) <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        req, err := stream.Recv()</span><br><span class="line">        <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;server recv error&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            err = stream.Send(&amp;pb.HelloReply&#123;Message: <span class="string">&quot;hello &quot;</span> + req.GetName()&#125;)</span><br><span class="line">            <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;server send error&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    lis, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, port)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;failed to listen: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    s := grpc.NewServer()</span><br><span class="line">    <span class="comment">// register services(server&#123;&#125;) with rpc server</span></span><br><span class="line">    pb.RegisterGreeterServer(s, &amp;greetServer&#123;&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// for debugging</span></span><br><span class="line">    reflection.Register(s)</span><br><span class="line">    log.Printf(<span class="string">&quot;server listening at %v&quot;</span>, lis.Addr())</span><br><span class="line">    <span class="keyword">if</span> err := s.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;failed to serve: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>client</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    pb <span class="string">&quot;github.com/hello/proto&quot;</span></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Client..&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// WithBlock() blocks here until, error or connection is setup</span></span><br><span class="line">    con, err := grpc.Dial(<span class="string">&quot;localhost:50051&quot;</span>, opts, grpc.WithInsecure(), grpc.WithBlock())</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;Error connecting: %v \n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> con.Close()</span><br><span class="line">    <span class="comment">//client for specific service</span></span><br><span class="line">    c := pb.NewGreeterClient(con)</span><br><span class="line">    <span class="comment">// rpc retuns a stream handler</span></span><br><span class="line">    stream, err := c.SayHello(context.Background())</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;Error on Echo rpc call: %v\n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// start a goroutine to send</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        req1 := pb.HelloRequest&#123;Name: <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line">        stream.Send(&amp;req1)</span><br><span class="line">        fmt.Println(<span class="string">&quot;sent: tom&quot;</span>)</span><br><span class="line"></span><br><span class="line">        time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line">        req2 := pb.HelloRequest&#123;Name: <span class="string">&quot;jack&quot;</span>&#125;</span><br><span class="line">        stream.Send(&amp;req2)</span><br><span class="line">        fmt.Println(<span class="string">&quot;sent: jack&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// tell sever sending is done, connection is still alive, but stream is close</span></span><br><span class="line">        stream.CloseSend()</span><br><span class="line">        fmt.Println(<span class="string">&quot;sending done&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> wg.Done()</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            res, err := stream.Recv()</span><br><span class="line">            <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="comment">// continue next</span></span><br><span class="line">                fmt.Println(<span class="string">&quot;error in recv&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;Response: %v\n&quot;</span>, res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// block until receive io.EOF</span></span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Debug-grpc"><a href="#Debug-grpc" class="headerlink" title="Debug grpc"></a>Debug grpc</h2><p>There are two tools can be used as grpc client to test grpc server, see below</p>
<ul>
<li><a href="https://github.com/fullstorydev/grpcui">grpcui</a>(like postman), WebUI</li>
<li><a href="https://github.com/fullstorydev/grpcurl">grpcurl</a>(like curl), command line</li>
</ul>
<h3 id="grpcui（web"><a href="#grpcui（web" class="headerlink" title="grpcui（web)"></a>grpcui（web)</h3><p><strong>On way to edit source code to include reflection in your grpc server or without change see below</strong></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+ import &quot;google.golang.org/grpc/reflection&quot;</span></span><br><span class="line">  s := grpc.NewServer()</span><br><span class="line">  pb.RegisterGreeterService(s, &amp;pb.GreeterService&#123;SayHello: sayHello&#125;)</span><br><span class="line"><span class="addition">+ // Register reflection service on gRPC server.</span></span><br><span class="line"><span class="addition">+ reflection.Register(s)</span></span><br></pre></td></tr></table></figure>

<p><strong>Run grpcui as below</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ GO111MODULE=on go install github.com/fullstorydev/grpcui/cmd/grpcui@latest</span><br><span class="line"><span class="comment"># -bind: webserver address</span></span><br><span class="line"><span class="comment"># -port: webserver port</span></span><br><span class="line"><span class="comment"># -plaintext: connect grpc server without tls</span></span><br><span class="line"><span class="comment"># localhost:50051: grpc server</span></span><br><span class="line"><span class="comment"># With this command, you must register your rpc with reflection as above</span></span><br><span class="line">$ grpcui -open-browser=<span class="literal">false</span> -<span class="built_in">bind</span>=10.0.2.15 -port=8000 -plaintext localhost:50051</span><br><span class="line"></span><br><span class="line"><span class="comment"># if you can NOT change your source code, there is an another way to run grpcui</span></span><br><span class="line"><span class="comment"># xxx.proto who defines rpc call and message.</span></span><br><span class="line"><span class="comment"># -proto can be relative path </span></span><br><span class="line">$ grpcui -open-browser=<span class="literal">false</span> -proto=./path/to/xxx.proto -<span class="built_in">bind</span>=10.0.2.15 -port=8000 -plaintext localhost:50051</span><br><span class="line"></span><br><span class="line"><span class="comment"># More advanced, if your xxx.proto import other protos, you need to add -import-path to let grpcui to find them</span></span><br><span class="line"><span class="comment"># other protos path relative to --import-path(used for imported protos)</span></span><br><span class="line">$ grpcui -open-browser=<span class="literal">false</span> -proto=./path/to/xxx.proto -import-path=/path/to/depen/ -<span class="built_in">bind</span>=10.0.2.15 -port=8000 -plaintext localhost:50051</span><br><span class="line"></span><br><span class="line"><span class="comment"># then open browser at http://10.0.2.15:8000/</span></span><br></pre></td></tr></table></figure>

<h3 id="command-line-tool"><a href="#command-line-tool" class="headerlink" title="command line tool"></a>command line tool</h3><p><strong>On way to edit source code to include reflection in your grpc server or without change see below</strong></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+ import &quot;google.golang.org/grpc/reflection&quot;</span></span><br><span class="line">  s := grpc.NewServer()</span><br><span class="line">  pb.RegisterGreeterService(s, &amp;pb.GreeterService&#123;SayHello: sayHello&#125;)</span><br><span class="line"><span class="addition">+ // Register reflection service on gRPC server.</span></span><br><span class="line"><span class="addition">+ reflection.Register(s)</span></span><br></pre></td></tr></table></figure>

<p><strong>Run grpcurl command</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ GO111MODULE=on go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># list all services</span></span><br><span class="line">$ grpcurl -plaintext localhost:50051 list</span><br><span class="line">grpc.reflection.v1alpha.ServerReflection</span><br><span class="line">greet.Greeter</span><br><span class="line"></span><br><span class="line"><span class="comment"># list all methods</span></span><br><span class="line">$ grpcurl -plaintext localhost:50051 list greet.Greeter</span><br><span class="line">greet.Greeter.SayHello</span><br><span class="line"></span><br><span class="line"><span class="comment"># desribe all methods</span></span><br><span class="line">$ grpcurl -plaintext localhost:50051 describe greet.Greeter</span><br><span class="line">greet.Greeter is a service:</span><br><span class="line">service Greeter &#123;</span><br><span class="line">  rpc SayHello ( .greet.HelloRequest ) returns ( .greet.HelloReply );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># describe message type</span></span><br><span class="line">$ grpcurl -plaintext localhost:50051 describe greet.HelloRequest</span><br><span class="line">greet.HelloRequest is a message:</span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># call rpc</span></span><br><span class="line">$ grpcurl -plaintext -d <span class="string">&#x27;&#123;&quot;name&quot;: &quot;jason&quot;&#125;&#x27;</span> localhost:50051 greet.Greeter.SayHello</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hi jason&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># if you can&#x27;t register your grpc server with reflection, you can pass -proto and -import-path to grpcurl as grpcui does!!</span></span><br></pre></td></tr></table></figure>

<h2 id="gogo"><a href="#gogo" class="headerlink" title="gogo"></a>gogo</h2><p>gogoprotobuf is a fork of golang&#x2F;protobuf with extra code generation features.</p>
<p>This code generation is used to achieve:</p>
<ul>
<li>fast marshalling and unmarshalling</li>
<li>more canonical Go structures</li>
<li>goprotobuf compatibility</li>
<li>less typing by optionally generating extra helper code</li>
<li>peace of mind by optionally generating test and benchmark code</li>
<li>other serialization formats</li>
</ul>
<p>gogo depends on grpc when generates grpc stub code, that means it justs wrapper grpc only. so for grpc, you must install grpc as well. <code>go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.3.2</code>, make sure install proper version tested by gogo.</p>
<p><strong>Install</strong></p>
<p>Choose one binary and install it, different binaries have different speed and customization. more refer to <a href="https://github.com/gogo/protobuf">gogo</a>.</p>
<p><strong>Usage</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># can only github.com/golang/protobuf/proto</span></span><br><span class="line">protoc --gofast_out=. myproto.proto</span><br><span class="line"></span><br><span class="line"><span class="comment"># explicit use gogo github.com/golang/protobuf/proto</span></span><br><span class="line">protoc -I=. -I=<span class="variable">$GOPATH</span>/src -I=<span class="variable">$GOPATH</span>/src/github.com/golang/protobuf/proto --&#123;binary&#125;_out=. myproto.proto</span><br><span class="line"></span><br><span class="line"><span class="comment"># use gogo github.com/golang/protobuf/proto by default</span></span><br><span class="line">protoc --gofast_out=plugins=grpc:. my.proto</span><br></pre></td></tr></table></figure>

<p><a href="https://jbrandhorst.com/post/gogoproto/">pros and cons</a></p>
]]></content>
      <categories>
        <category>go</category>
        <category>rpc</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>grpc</tag>
      </tags>
  </entry>
  <entry>
    <title>git-command</title>
    <url>/2019/12/03/git-command/</url>
    <content><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>After clone a repo from git server, git actually setups three areas for you, one is working directory(you alway see), staging(index) area(cache) and repository, git commands mainly work on these three areas, staging area is an intermediate area where commits can be formatted and reviewed before completing the commit.</p>
<p>One thing that sets Git apart from other tools is that it’s possible to quickly <code>stage some of your files</code> and <code>commit them without committing all of the other modified files</code> in your working directory or having to list them on the command line during the commit.</p>
<p><img src="https://git-scm.com/images/about/index1@2x.png" alt="stage area"></p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># you edit a.c b.c d.c while you only staged a.c b.c</span></span><br><span class="line">$ git add a.c b.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># only commit a.c b.c to repository</span></span><br><span class="line">$ git commit -m <span class="string">&quot;commit staged a.c b.c&quot;</span></span><br></pre></td></tr></table></figure>

<p>Add a ‘-a’ to your commit command in order to add all changed files to the staging area.</p>
<p><img src="https://git-scm.com/images/about/index2@2x.png" alt="commit all changed"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  commit add modified a.c b.c d.c</span></span><br><span class="line">$ git commit -am <span class="string">&quot;commit a.c b.c d.c&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="File-Status"><a href="#File-Status" class="headerlink" title="File Status"></a>File Status</h2><p><img src="https://git-scm.com/book/en/v2/images/lifecycle.png" alt="file status"></p>
<p>Files in the working directory can be in the following states as shown by git status:</p>
<ul>
<li><p>“Untracked”: the file in the working directory is not in the index. It must be added to the index before it can be committed to the repository.</p>
</li>
<li><p>“Changed but not updated”: The file in the working directory is not the same version as in the index. git add is used to add the working directory version to the index. If a commit is done before git add, the version in the index will be put in the repository. The version in the working directory be untouched and will be different than the version in the index and the repository.</p>
</li>
<li><p>“Changes to be committed”: The file in the working directory is the same version as in the index. The file is ready for a commit.</p>
</li>
<li><p>not listed: if a file is not shown in git status then the file in the working directory is the same version as in the index and repository.</p>
</li>
<li><p>“new file”: git add has been done (the file is in the index). The file has not been committed to the repository. It can be removed from the index or could be committed to the repository.</p>
</li>
<li><p>“modified”: the version in the working directory is different than the version in the index. It can be removed from the index or could be committed to the repository.</p>
</li>
<li><p>“deleted”: git rm has removed the file from the working directory and index but has not removed it from the repository. git reset HEAD file_name can be used to restore the file from the repository to the index and working directory. git commit will make the removal permanent.</p>
</li>
</ul>
<h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><p>In order to use git, it’s better to config it, here is an example of the config file located at <code>~/.gitconfig</code>, edit it directly or use cli to do the config</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;your_email@whatever.com&quot;</span></span><br><span class="line">$ git config --global core.autocrlf input</span><br><span class="line">$ git config --global core.safecrlf <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>edit file directly</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[push]</span><br><span class="line">        default = simple</span><br><span class="line">[user]</span><br><span class="line">        name = Jason</span><br><span class="line">        email = xx@yy.com</span><br><span class="line">[core]</span><br><span class="line">        #提交时转换为LF，检出时转换为CRLF</span><br><span class="line">        #git config --global core.autocrlf true</span><br><span class="line">        #提交时转换为LF，检出时不转换</span><br><span class="line">        #git config --global core.autocrlf input</span><br><span class="line">        #提交检出均不转换</span><br><span class="line">        #git config --global core.autocrlf false</span><br><span class="line"></span><br><span class="line">        #拒绝提交包含混合换行符的文件</span><br><span class="line">        #git config --global core.safecrlf true</span><br><span class="line">        #允许提交包含混合换行符的文件</span><br><span class="line">        #git config --global core.safecrlf false</span><br><span class="line">        #提交包含混合换行符的文件时给出警告</span><br><span class="line">        #git config --global core.safecrlf warn</span><br><span class="line"></span><br><span class="line">        autocrlf = input</span><br><span class="line">        safecrlf = warn</span><br><span class="line">        editor = vim</span><br><span class="line">[pack]</span><br><span class="line">        windowMemory = 1g</span><br><span class="line">[http]</span><br><span class="line">        postbuffer = 524288000</span><br><span class="line">#        sslverify = true</span><br><span class="line">#        proxy = http://proxy.company.com:3128</span><br><span class="line">#[sendemail]</span><br><span class="line">#       smtpencryption = ssl</span><br><span class="line">#       smtpserver = stbeehive.xxx.com</span><br><span class="line">#       smtpuser = xx@yy.com</span><br><span class="line">#       smtpserverpot = 465</span><br><span class="line">#       suppresscc = all</span><br><span class="line">#       confirm = always</span><br><span class="line"></span><br><span class="line">#you can suppress particular type emails to auto cc list by</span><br><span class="line">#signedoffbycc = no</span><br><span class="line">#suppressfrom = yes</span><br><span class="line">#cocover = no</span><br><span class="line">#cccover = no</span><br><span class="line"></span><br><span class="line">#another alternate way, simple</span><br><span class="line">#suppresscc=all</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check git config</span></span><br><span class="line">$ git config --list</span><br></pre></td></tr></table></figure>

<h2 id="commands"><a href="#commands" class="headerlink" title="commands"></a>commands</h2><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show local branches</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># switch to branch</span></span><br><span class="line">$ git checkout <span class="variable">$branch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create a branch based on current | tag | based branch</span></span><br><span class="line">$ git branch <span class="variable">$branch</span> [tag|base branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># create then switch to new branch</span></span><br><span class="line">$ git checkout -b <span class="variable">$branch</span> [tag | branchname]</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a master(same name as remote branch) branch and set it track</span></span><br><span class="line">$ git checkout --track origin/master</span><br><span class="line"></span><br><span class="line">$ git branch -d <span class="variable">$branch</span></span><br><span class="line">$ git branch -D <span class="variable">$branch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># as you know git pull pulls changes from remote server to remote branch</span></span><br><span class="line"><span class="comment"># origin/$branch, lets say if you create a branch from origin/master called master, if master does not track origin/master, so after git pull origin/master is updated but master is not, better set track for master branch</span></span><br><span class="line"></span><br><span class="line">$ git branch --set-upstream-to=origin/master master</span><br><span class="line"></span><br><span class="line"><span class="comment"># to see which local branch contains a particular commit</span></span><br><span class="line">$ git branch --contains da6f215e4a6f379d094acd31c71c7696dae50afc</span><br><span class="line"></span><br><span class="line"><span class="comment"># to see which remote branch contains a particular commit.</span></span><br><span class="line">$ git branch -r --contains da6f215e4a6f379d094acd31c71c7696dae50afc</span><br><span class="line"></span><br><span class="line"><span class="comment"># show remote branches</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># push or create a new branch on remote server</span></span><br><span class="line">$ git push origin <span class="variable">$branch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># delete a branch from remote server</span></span><br><span class="line">$ git push origin :<span class="variable">$branch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list branches which contains a given branch, also meaning the given branch merged into them</span></span><br><span class="line">$ git branch --contains <span class="variable">$branch</span> -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># list branches which are merged into a given branch, also meaning the given branch contains them</span></span><br><span class="line">$ git branch --merged master -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># list branches which are not merged into a given branch, also meaning the given branch does not contain them</span></span><br><span class="line">$ git branch --no-merged master -a</span><br></pre></td></tr></table></figure>

<h3 id="diff-x2F-add-x2F-rm-x2F-commit-x2F-reset"><a href="#diff-x2F-add-x2F-rm-x2F-commit-x2F-reset" class="headerlink" title="diff&#x2F;add&#x2F;rm&#x2F;commit&#x2F;reset"></a>diff&#x2F;add&#x2F;rm&#x2F;commit&#x2F;reset</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># compare working dir with staging area and staging area with repo then show status for all files</span></span><br><span class="line">$ git status .</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># show modification of head commit or a given commit</span></span><br><span class="line">$ git show</span><br><span class="line">$ git show <span class="variable">$commit</span></span><br><span class="line"><span class="comment"># show file content of a given commit</span></span><br><span class="line">$ git show <span class="variable">$commit</span>:path/to/file</span><br><span class="line"></span><br><span class="line"><span class="comment"># show diff between two commits</span></span><br><span class="line">$ git diff --name-only <span class="variable">$commitidA</span>..<span class="variable">$commitidB</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show diff between working dir and staging area</span></span><br><span class="line">$ git diff <span class="variable">$file</span></span><br><span class="line">$ git diff .</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># show diff between staging area and repo</span></span><br><span class="line">$ git diff --cached</span><br><span class="line">$ git diff --cached <span class="variable">$file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add changes to staging area</span></span><br><span class="line">$ git add .</span><br><span class="line">$ git add <span class="variable">$file</span></span><br><span class="line">$ git add <span class="variable">$dir</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># commit changes</span></span><br><span class="line">$ git commit -m <span class="string">&quot;only commit changes in staging area&quot;</span></span><br><span class="line">$ git commit -a -m <span class="string">&quot;no need git add, but only commit all tracked files&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># edit a submitted commit without creating a new commit</span></span><br><span class="line">$ git add <span class="variable">$update</span></span><br><span class="line">$ git commit --amend</span><br><span class="line"></span><br><span class="line"><span class="comment"># reset staging area, modification in working dir remains</span></span><br><span class="line">$ git reset --soft HEAD^ <span class="comment"># reset to previous commit and keep modification</span></span><br><span class="line">$ git reset --soft <span class="variable">$commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reset staging area and working dir, repo both three part</span></span><br><span class="line"><span class="comment"># commit and changes before this commit are lost!!!</span></span><br><span class="line">$ git reset --hard <span class="variable">$commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># discard changes in working dir</span></span><br><span class="line">$ git checkout [<span class="variable">$commit</span>] -- <span class="variable">$file</span></span><br><span class="line">$ git checkout [<span class="variable">$commit</span>] -f <span class="variable">$file</span></span><br><span class="line"></span><br><span class="line">$ git checkout [<span class="variable">$commit</span>] -- <span class="variable">$dir</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># delete files from working dir</span></span><br><span class="line">$ git <span class="built_in">rm</span> *.c</span><br><span class="line">$ git <span class="built_in">rm</span> -r <span class="variable">$dir</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># delete files from index(staging area)</span></span><br><span class="line">$ git <span class="built_in">rm</span> --cached *.c</span><br></pre></td></tr></table></figure>

<h3 id="pull-x2F-push-x2F-merge-x2F-cherry-pick-x2F-rebase"><a href="#pull-x2F-push-x2F-merge-x2F-cherry-pick-x2F-rebase" class="headerlink" title="pull&#x2F;push&#x2F;merge&#x2F;cherry-pick&#x2F;rebase"></a>pull&#x2F;push&#x2F;merge&#x2F;cherry-pick&#x2F;rebase</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fetch latest code from remote server to remote branch (git branch -r)</span></span><br><span class="line"><span class="comment"># update local branch(git branch) if they track remote branch.</span></span><br><span class="line">$ git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># fetch latest code from remote server to remote branch (git branch -r)</span></span><br><span class="line"><span class="comment"># but not update local branch even they track remote branch</span></span><br><span class="line">$ git fetch</span><br><span class="line"></span><br><span class="line"><span class="comment"># push commit changes on current branch to remote server(origin/xxx branch tracked)</span></span><br><span class="line">$ git push [--force]</span><br><span class="line"></span><br><span class="line"><span class="comment"># push commit changes on another branch to remote server</span></span><br><span class="line">$ git push origin <span class="variable">$branch</span> [--force]</span><br><span class="line"></span><br><span class="line"><span class="comment"># rebase can do: delete commit, edit commit, merge commit etc</span></span><br><span class="line"><span class="comment"># rebase the top 3 commits, but they may conflict when rebasing</span></span><br><span class="line">$ git rebase -i HEAD~3</span><br><span class="line">$ git rebase -i <span class="variable">$commit</span> <span class="comment"># rebase from it to current</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if conflicts happen when rebasing do below or abort rebasing</span></span><br><span class="line">$ git status . <span class="comment"># check conflict files, the solve conflicts.</span></span><br><span class="line">$ git add <span class="variable">$fixed_conflict_file</span></span><br><span class="line">$ git rebase --<span class="built_in">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">$ git rebase --abort</span><br><span class="line"></span><br><span class="line"><span class="comment"># cherry-pick pick a commit or commits to local branch</span></span><br><span class="line"><span class="comment"># -x   append a line that says &quot;(cherry picked from commit …​)&quot; to the original commit message</span></span><br><span class="line"><span class="comment"># -s   --sign-off</span></span><br><span class="line"><span class="comment"># -e   --edit</span></span><br><span class="line">$ git cherry-pick -x -s -e <span class="variable">$start</span>^..<span class="variable">$end</span> [start-end]</span><br><span class="line">$ git cherry-pick -x -s -e <span class="variable">$start</span>..<span class="variable">$end</span> (start-end]</span><br><span class="line"></span><br><span class="line">$ git cherry-pick -x -s -e <span class="variable">$commit</span></span><br><span class="line">$ git cherry-pick -x -s -e <span class="variable">$commit</span> <span class="variable">$commit</span> <span class="comment"># in order</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if conflicts happen when cherry-picking do below or abort</span></span><br><span class="line">$ git status . <span class="comment"># check conflict files</span></span><br><span class="line">$ git add <span class="variable">$fix_confict_files</span></span><br><span class="line">$ git cherry-pick --<span class="built_in">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">$ git cherry-pick --abort</span><br><span class="line"></span><br><span class="line"><span class="comment"># revert a commit, will create a new commit for this revert action</span></span><br><span class="line">$ git revert -i <span class="variable">$commit</span></span><br><span class="line">$ git revert HEAD</span><br><span class="line">$ git revert HEAD^ (revert two commits)</span><br><span class="line"></span><br><span class="line"><span class="comment"># merge dev to current branch, commit one by one at last create a merge commit</span></span><br><span class="line">$ git merge dev</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git pull vs git pull --rebase</span><br><span class="line">when updating local branch(if it tracks remote branch), git pull will pull all new changes from remote branch then create a merge commit(contains all changes) on local branch</span><br><span class="line">while git pull --rebase will cherry-pick new changes from remote branch to local branch</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line">(D--E master is local branch)</span><br><span class="line">Suppose you have two commits in local branch:</span><br><span class="line"></span><br><span class="line">      D---E master</span><br><span class="line">     /</span><br><span class="line">A---B---C---F origin/master</span><br><span class="line"></span><br><span class="line">After &quot;git pull&quot;, will be:</span><br><span class="line"></span><br><span class="line">      D--------E</span><br><span class="line">     /          \</span><br><span class="line">A---B---C---F----G   master</span><br><span class="line"></span><br><span class="line">After &quot;git pull --rebase&quot;, there will be no merge point G. Note that (D and E become different commits!)</span><br><span class="line"></span><br><span class="line">A---B---C---F---D&#x27;---E&#x27;   master</span><br></pre></td></tr></table></figure>

<h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><p><strong>commit date vs author date</strong><br>In Git, the <code>author date is when someone first creates a commit with git commit</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show logs</span></span><br><span class="line">$ git <span class="built_in">log</span> process.c                            <span class="comment"># logs of one file</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline .                          <span class="comment"># oneline logs of the current dir</span></span><br><span class="line">$ git <span class="built_in">log</span>  -10 --reverse                       <span class="comment"># top 10 logs of repo in reverse order</span></span><br><span class="line">$ git <span class="built_in">log</span>  <span class="variable">$old_commit</span>..<span class="variable">$new_commit</span>            <span class="comment"># logs(commit) between two commits</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show logs of a particualr author at a period of time</span></span><br><span class="line">$ git <span class="built_in">log</span>  --author=jason --since=<span class="string">&quot;2016-02-01&quot;</span> <span class="comment"># --before=&quot;2016-02-11&quot;</span></span><br><span class="line">$ git <span class="built_in">log</span> -p <span class="variable">$commit</span>                           <span class="comment"># show changes of given commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################### change author of commit ###################################</span></span><br><span class="line"><span class="comment"># change current commit author from command line</span></span><br><span class="line">$ git commit --amend --author=<span class="string">&quot;Author Name &lt;email@address.com&gt;&quot;</span> --no-edit</span><br><span class="line"></span><br><span class="line"><span class="comment"># without edit commit msg but update author based on currect ~/.gitconfig</span></span><br><span class="line">$ git config user.name <span class="string">&quot;New User&quot;</span></span><br><span class="line">$ git config user.email <span class="string">&quot;newuser@gmail.com&quot;</span></span><br><span class="line">$ git commit --amend --reset-author --no-edit</span><br><span class="line"></span><br><span class="line"><span class="comment">####################### change date of commit ###################################</span></span><br><span class="line"><span class="comment">#for each commit, there are two dates, author date(when create the patch) and commit date</span></span><br><span class="line">$ git <span class="built_in">log</span>                                      <span class="comment"># only show author date, but the log is sorted by commit date)</span></span><br><span class="line">$ git <span class="built_in">log</span> --pretty=fuller                      <span class="comment"># show both dates(author date and commit date)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># overwrite author date when edit a commit by --date option</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> this will reset commit date as well, equal with author date</span></span><br><span class="line"><span class="comment"># &#x27;+0800&#x27; is the timezone</span></span><br><span class="line">$ git commit --amend --<span class="built_in">date</span>=now</span><br><span class="line">$ git commit --amend --<span class="built_in">date</span>=<span class="string">&quot;Wed Jun 22 22:28:27 2022 +0800&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># without edit commit msg  but update author date(also commit date) to now</span></span><br><span class="line">$ git commit --amend --<span class="built_in">date</span>=now --no-edit</span><br><span class="line"></span><br><span class="line"><span class="comment"># without edit commit msg  but only update commit date to now</span></span><br><span class="line">$ git commit --amend --no-edit</span><br><span class="line"></span><br><span class="line"><span class="comment"># show author date and commit data</span></span><br><span class="line">$ git <span class="built_in">log</span> --pretty=fuller .</span><br><span class="line"></span><br><span class="line"><span class="comment"># change commit date and author date to specfic time</span></span><br><span class="line">$ GIT_COMMITTER_DATE=<span class="string">&quot;Wed Jun 22 22:28:27 2022 +0800&quot;</span> git commit --amend --no-edit --<span class="built_in">date</span>=<span class="string">&quot;Wed Jun 22 22:28:27 2022 +0800&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="git-patch"><a href="#git-patch" class="headerlink" title="git patch"></a>git patch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create two patches HEAD~2 and print them out</span></span><br><span class="line">$ git format-patch -2 --stdout</span><br><span class="line"><span class="comment"># create 2 patch files</span></span><br><span class="line">$ git format-patch -2 -o out <span class="comment"># save to out dir</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create one patch file with several commits</span></span><br><span class="line"><span class="comment"># commits with [cc1dde0dd, 6de6d4b06]</span></span><br><span class="line">$ git format-patch cc1dde0dd^..6de6d4b06 --stdout &gt; foo.patch</span><br><span class="line"><span class="comment"># each patch in this file is applied separately!!!</span></span><br><span class="line">$ git am foo.patch</span><br><span class="line"></span><br><span class="line"><span class="comment"># apply a git patch</span></span><br><span class="line">$ git apply [-p1] xx.patch</span><br><span class="line"></span><br><span class="line"><span class="comment"># apply with commit msg</span></span><br><span class="line">$ git am xx.patch</span><br><span class="line"></span><br><span class="line"><span class="comment"># revert a applied patch</span></span><br><span class="line">$ git apply --reverse xx.patch</span><br><span class="line"></span><br><span class="line"><span class="comment"># The --reject option will instruct git to not fail if it cannot determine how to apply a patch,</span></span><br><span class="line"><span class="comment"># but instead to apply individual hunks it can apply and create reject files (.rej) for hunks it cannot apply</span></span><br><span class="line">git apply --reject --whitespace=fix xx.patch</span><br></pre></td></tr></table></figure>

<h3 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show all tags</span></span><br><span class="line">$ git tag -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a tag on HEAD or given commit</span></span><br><span class="line">$ git tag <span class="variable">$tname</span></span><br><span class="line">$ git tag <span class="variable">$tname</span> <span class="variable">$commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># update a tag with new commit</span></span><br><span class="line">$ git tag -f <span class="variable">$tname</span> <span class="variable">$new_commit</span></span><br><span class="line"><span class="comment"># delete a tag</span></span><br><span class="line">$ git tag -d <span class="variable">$tname</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># push all local tags to remote server</span></span><br><span class="line">$ git push --tags</span><br><span class="line">$ git push -f --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete a tag from remote server</span></span><br><span class="line">$ git push origin :refs/tags/<span class="variable">$tname</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create tag with commit</span></span><br><span class="line">$ git tag -a -m <span class="string">&quot;comments&quot;</span> <span class="variable">$tname</span> [<span class="variable">$commitid</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># update a tag</span></span><br><span class="line">$ git tag -f -a -m <span class="string">&quot;comments&quot;</span> <span class="variable">$tname</span> [<span class="variable">$commitid</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># show the commit that a tag points to</span></span><br><span class="line">$ git rev-list -1 <span class="variable">$tname</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show all tags which contain a specific commit</span></span><br><span class="line">$ git tag --contains 95d0a8e</span><br></pre></td></tr></table></figure>

<h3 id="merge-commit-from-another-repo"><a href="#merge-commit-from-another-repo" class="headerlink" title="merge commit from another repo"></a>merge commit from another repo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx as another repo, want to merge one commint from nginx repo</span></span><br><span class="line">$ git remote add nginx https://github.com/nginx/nginx.git</span><br><span class="line">$ git remote show</span><br><span class="line">nginx</span><br><span class="line">origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># show nginx remote branch</span></span><br><span class="line">$ git remote show nginx</span><br><span class="line">* remote nginx</span><br><span class="line">  Fetch URL: https://github.com/nginx/nginx.git</span><br><span class="line">  Push  URL: https://github.com/nginx/nginx.git</span><br><span class="line">  HEAD branch: master</span><br><span class="line">  Remote branches:</span><br><span class="line">    branches/default         new (next fetch will store <span class="keyword">in</span> remotes/nginx)</span><br><span class="line">    branches/radix_with_skip new (next fetch will store <span class="keyword">in</span> remotes/nginx)</span><br><span class="line">    branches/stable-0.5      new (next fetch will store <span class="keyword">in</span> remotes/nginx)</span><br><span class="line">    branches/stable-0.6      new (next fetch will store <span class="keyword">in</span> remotes/nginx)</span><br><span class="line">    branches/stable-0.7      new (next fetch will store <span class="keyword">in</span> remotes/nginx)</span><br><span class="line">    branches/stable-0.8      new (next fetch will store <span class="keyword">in</span> remotes/nginx)</span><br><span class="line">    branches/stable-1.0      new (next fetch will store <span class="keyword">in</span> remotes/nginx)</span><br><span class="line">    branches/stable-1.10     new (next fetch will store <span class="keyword">in</span> remotes/nginx)</span><br><span class="line">    branches/stable-1.12     new (next fetch will store <span class="keyword">in</span> remotes/nginx)</span><br><span class="line">    branches/stable-1.14     new (next fetch will store <span class="keyword">in</span> remotes/nginx)</span><br><span class="line">    branches/stable-1.16     new (next fetch will store <span class="keyword">in</span> remotes/nginx)</span><br><span class="line">    branches/stable-1.18     new (next fetch will store <span class="keyword">in</span> remotes/nginx)</span><br><span class="line">    branches/stable-1.2      new (next fetch will store <span class="keyword">in</span> remotes/nginx)</span><br><span class="line">    branches/stable-1.20     new (next fetch will store <span class="keyword">in</span> remotes/nginx)</span><br><span class="line">    branches/stable-1.4      new (next fetch will store <span class="keyword">in</span> remotes/nginx)</span><br><span class="line">    branches/stable-1.6      new (next fetch will store <span class="keyword">in</span> remotes/nginx)</span><br><span class="line">    branches/stable-1.8      new (next fetch will store <span class="keyword">in</span> remotes/nginx)</span><br><span class="line">    master                   new (next fetch will store <span class="keyword">in</span> remotes/nginx)</span><br><span class="line">  Local ref configured <span class="keyword">for</span> <span class="string">&#x27;git push&#x27;</span>:</span><br><span class="line">    master pushes to master (<span class="built_in">local</span> out of <span class="built_in">date</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">######################### Fetch ###########################</span></span><br><span class="line"><span class="comment"># fetch one branch to local than we can merge from it</span></span><br><span class="line">$ git fetch nginx branches/stable-1.18</span><br><span class="line">$ git branch -r</span><br><span class="line">nginx/branches/stable-1.18</span><br><span class="line"></span><br><span class="line"><span class="comment"># Or fetch all branches to local</span></span><br><span class="line">$ git remote update</span><br><span class="line"></span><br><span class="line"><span class="comment">######################### Merge ###########################</span></span><br><span class="line"><span class="comment"># Then cherry pick, or merge, delte remote is optional</span></span><br><span class="line">... cherry pick, merge .....</span><br><span class="line">$ git merge  nginx/branches/stable-1.18 <span class="comment"># merge to current branch</span></span><br><span class="line">$ git remote remove nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># OR you can create a local copy or just use  nginx/branches/stable-1.18</span></span><br><span class="line">$ git checkout  nginx/branches/stable-1.18 -b stable-1.18</span><br><span class="line">... cherry pick, merge .....</span><br><span class="line">$ git branch -D stable-1.18</span><br><span class="line">$ git remote remove nginx</span><br></pre></td></tr></table></figure>

<h2 id="git-filter-repo"><a href="#git-filter-repo" class="headerlink" title="git filter-repo"></a>git filter-repo</h2><p>Rewrite git history tool</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip3 install git-filter-repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># examples</span></span><br><span class="line">$ </span><br></pre></td></tr></table></figure>

<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="cherry-pick-part-of-a-commit"><a href="#cherry-pick-part-of-a-commit" class="headerlink" title="cherry-pick part of a commit"></a>cherry-pick part of a commit</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cherry-pick -x -s -e -n <span class="variable">$commit</span>  <span class="comment"># -n is the key</span></span><br><span class="line">$ git checkout HEAD -- <span class="variable">$not_wanted_files</span></span><br><span class="line">$ git add <span class="variable">$wanted_file</span></span><br><span class="line">$ git cherry-pick --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure>
<h3 id="clean-untracked-files-and-untracked-dirs"><a href="#clean-untracked-files-and-untracked-dirs" class="headerlink" title="clean untracked files and untracked dirs"></a>clean untracked files and untracked dirs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git clean -dfx</span><br></pre></td></tr></table></figure>
<h3 id="see-commit-for-each-line-of-a-file"><a href="#see-commit-for-each-line-of-a-file" class="headerlink" title="see commit for each line of a file"></a>see commit for each line of a file</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git annotate <span class="variable">$file</span></span><br></pre></td></tr></table></figure>
<h3 id="check-if-local-branch-tracked-or-not"><a href="#check-if-local-branch-tracked-or-not" class="headerlink" title="check if local branch tracked or not"></a>check if local branch tracked or not</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -vv</span><br><span class="line"></span><br><span class="line"><span class="comment"># set track</span></span><br><span class="line">$ git checkout master</span><br><span class="line">$ git branch --set-upstream-to=origin/master</span><br></pre></td></tr></table></figure>
<h3 id="hide-local-change-not-add-to-staging-area"><a href="#hide-local-change-not-add-to-staging-area" class="headerlink" title="hide local change, not add to staging area"></a>hide local change, not add to staging area</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># you have to switch to another branch but you don&#x27;t want to commit your local change and you want to keep the changes</span></span><br><span class="line"></span><br><span class="line">$ git stash                   <span class="comment"># hide the local change</span></span><br><span class="line">$ git status                  <span class="comment"># will show everything is up to date</span></span><br><span class="line"></span><br><span class="line">$ git stash list              <span class="comment"># show the hidden change</span></span><br><span class="line">$ git stash show -p stask@[2] <span class="comment"># show the changed on that stash</span></span><br><span class="line">$ git stash apply stash@[2]   <span class="comment"># restore that stash</span></span><br><span class="line">$ git stash pop               <span class="comment"># restore the latest stashed local changes</span></span><br><span class="line"></span><br><span class="line">$ git stash clear             <span class="comment"># drop all stashes, drop save hidden changes</span></span><br></pre></td></tr></table></figure>

<h3 id="move-one-repo-from-one-server-to-another"><a href="#move-one-repo-from-one-server-to-another" class="headerlink" title="move one repo from one server to another"></a>move one repo from one server to another</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># copy from org</span></span><br><span class="line">$ git <span class="built_in">clone</span> --bare <span class="variable">$org_uri</span>/project.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a new repo at new server</span></span><br><span class="line">$ <span class="built_in">cd</span> project.git</span><br><span class="line">$ git push --mirror <span class="variable">$new_uri</span></span><br></pre></td></tr></table></figure>

<h3 id="binary-search"><a href="#binary-search" class="headerlink" title="binary search"></a>binary search</h3><p><strong>find which commit introduces a bug</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># good as the low bad as the high commit()</span></span><br><span class="line"><span class="comment"># For example. one good commit you know is goodcmt</span></span><br><span class="line"><span class="comment"># one bad commit you know is badcmt</span></span><br><span class="line">$ git bisect reset</span><br><span class="line">$ git bisect start</span><br><span class="line">$ git bisect good <span class="variable">$goodcmt</span></span><br><span class="line">$ git bisect bad <span class="variable">$badcmt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#after this, the middle commit is checked out, test it</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if the middle commit works</span></span><br><span class="line">$ git bisect good</span><br><span class="line"><span class="comment"># Or not work</span></span><br><span class="line">$ git bisect bad</span><br></pre></td></tr></table></figure>

<p><strong>find which commit fixes the bug</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For example. one good commit you know is goodcmt</span></span><br><span class="line"><span class="comment"># one bad commit you know is badcmt</span></span><br><span class="line">$ git bisect reset</span><br><span class="line">$ git bisect start</span><br><span class="line">$ git bisect good <span class="variable">$badcmt</span></span><br><span class="line">$ git bisect bad <span class="variable">$goodcmt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#after this, the middle commit is checked out, test it</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if the middle commit works</span></span><br><span class="line">$ git bisect bad</span><br><span class="line"><span class="comment"># Or not work</span></span><br><span class="line">$ git bisect good</span><br></pre></td></tr></table></figure>

<h3 id="see-history-for-git-commit-–amend"><a href="#see-history-for-git-commit-–amend" class="headerlink" title="see history for git commit –amend"></a>see history for git commit –amend</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line"><span class="comment"># reset the latest git commit --amend and keep the change</span></span><br><span class="line">$ git reset --soft @&#123;1&#125;</span><br><span class="line">$ git reset HEAD</span><br></pre></td></tr></table></figure>
<h3 id="diff-format"><a href="#diff-format" class="headerlink" title="diff format"></a>diff format</h3><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">diff --git a/src/core/ngx_conf_file.c b/src/core/ngx_conf_file.c</span></span><br><span class="line"><span class="comment">index 98e9df6..359178c 100644</span></span><br><span class="line"><span class="comment">--- a/src/core/ngx_conf_file.c</span></span><br><span class="line"><span class="comment">+++ b/src/core/ngx_conf_file.c</span></span><br><span class="line"><span class="meta">@@ -1418,6 +1418,7 @@</span> ngx_conf_set_bitmask_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)</span><br><span class="line"></span><br><span class="line">     np = (ngx_uint_t *) (p + cmd-&gt;offset);</span><br><span class="line">     value = cf-&gt;args-&gt;elts;</span><br><span class="line"><span class="addition">+    /* supported ignore haders */</span></span><br><span class="line">     mask = cmd-&gt;post;</span><br><span class="line"></span><br><span class="line">     for (i = 1; i &lt; cf-&gt;args-&gt;nelts; i++) &#123;</span><br><span class="line"><span class="meta">@@ -1429,11 +1430,13 @@</span> ngx_conf_set_bitmask_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)</span><br><span class="line">                 continue;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+            /* get supported ignore header */</span></span><br><span class="line">             if (*np &amp; mask[m].mask) &#123;</span><br><span class="line">                 ngx_conf_log_error(NGX_LOG_WARN, cf, 0,</span><br><span class="line">                                    &quot;duplicate value \&quot;%s\&quot;&quot;, value[i].data);</span><br><span class="line"></span><br><span class="line">             &#125; else &#123;</span><br><span class="line"><span class="addition">+                /* set corresponding bit with 1, means ignore such header */</span></span><br><span class="line">                 *np |= mask[m].mask;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>Hunk 1</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1418,6</span><br><span class="line">    -:    old file</span><br><span class="line">    1418: old file line</span><br><span class="line">    6:    continuous lines</span><br><span class="line"></span><br><span class="line">+1418,7</span><br><span class="line">    +:    new file</span><br><span class="line">    1418: new file line</span><br><span class="line">    7:    continuous lines</span><br><span class="line"></span><br><span class="line">6---&gt;7 one line added</span><br><span class="line"></span><br><span class="line">total means:</span><br><span class="line">old file from 1418(total 6 lines) changed as below(diff part)</span><br><span class="line">from line 1418(total 7 lines) in new file</span><br></pre></td></tr></table></figure>

<p><strong>Hunk 2</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1429,11</span><br><span class="line">    -:    old file</span><br><span class="line">    1429: old file line</span><br><span class="line">    11:   continuous lines</span><br><span class="line"></span><br><span class="line">+1430,13</span><br><span class="line">    +:    new file</span><br><span class="line">    1430: new file line</span><br><span class="line">    13:   continuous lines</span><br><span class="line"></span><br><span class="line">11--&gt;13 means two lines added</span><br><span class="line"></span><br><span class="line">total means:</span><br><span class="line">old file from 1429(total 11 lines) changed as below(diff part)</span><br><span class="line">from line 1430(total 13 lines) in new file</span><br><span class="line"></span><br><span class="line"># old line number counting no Hunk 1 applied</span><br><span class="line"># new line counting        with Hunk 1 applied</span><br><span class="line"></span><br><span class="line">so you can see new line from 1430, as Hunk1 added 1 line!!!</span><br></pre></td></tr></table></figure>
<h3 id="how-many-commits"><a href="#how-many-commits" class="headerlink" title="how many commits"></a>how many commits</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># how many commits from HEAD to the beginning</span></span><br><span class="line">$ git rev-list HEAD --count</span><br><span class="line">$ git rev-list <span class="variable">$commit</span> --count</span><br><span class="line"></span><br><span class="line"><span class="comment"># find the nth commit from beginning</span></span><br><span class="line"><span class="variable">$git</span> rev-list HEAD --count</span><br><span class="line">total</span><br><span class="line"><span class="variable">$git</span> <span class="built_in">log</span> --skip=$(total-nth) --max-count=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># find the 3th commit from beginning</span></span><br><span class="line"><span class="variable">$git</span> rev-list HEAD --count</span><br><span class="line">10</span><br><span class="line"><span class="comment"># 7 = 10-3</span></span><br><span class="line"><span class="variable">$git</span> <span class="built_in">log</span> --skip=7 --max-count=1</span><br></pre></td></tr></table></figure>

<h3 id="show-commits-of-all-users"><a href="#show-commits-of-all-users" class="headerlink" title="show commits of all users"></a>show commits of all users</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># with log title of each commit</span></span><br><span class="line">$ git shortlog</span><br><span class="line">Álvaro Fernández Rojas (1):</span><br><span class="line">      net: dsa: tag_brcm: add support <span class="keyword">for</span> legacy tags</span><br><span class="line"></span><br><span class="line"><span class="comment">#  without log title for each commit and no order</span></span><br><span class="line">$ git shortlog -s</span><br><span class="line">...</span><br><span class="line">1 Álvaro Fernández Rojas</span><br><span class="line"></span><br><span class="line"><span class="comment"># order with commit number</span></span><br><span class="line">$ git shortlog -n -s .</span><br><span class="line">$ git shortlog -n -s --all --no-merges</span><br></pre></td></tr></table></figure>

<h3 id="see-latest-commit-of-all-branches"><a href="#see-latest-commit-of-all-branches" class="headerlink" title="see latest commit of all branches"></a>see latest commit of all branches</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># order latest commit of each branch by Date</span></span><br><span class="line">$ git branch -r | grep -v HEAD | <span class="keyword">while</span> <span class="built_in">read</span> b; <span class="keyword">do</span> git <span class="built_in">log</span> -n 1 --color --format=<span class="string">&quot;%ci _%C(magenta)%cr %C(bold cyan)<span class="variable">$b</span>%Creset %s %C(bold blue)&lt;%an&gt;%Creset&quot;</span> <span class="variable">$b</span> ;<span class="keyword">done</span> | <span class="built_in">sort</span> -r</span><br><span class="line"><span class="comment"># get top 20</span></span><br><span class="line">$ git branch -r | grep -v HEAD | <span class="keyword">while</span> <span class="built_in">read</span> b; <span class="keyword">do</span> git <span class="built_in">log</span> -n 1 --color --format=<span class="string">&quot;%ci _%C(magenta)%cr %C(bold cyan)<span class="variable">$b</span>%Creset %s %C(bold blue)&lt;%an&gt;%Creset&quot;</span> <span class="variable">$b</span> ;<span class="keyword">done</span> | <span class="built_in">sort</span> -r | <span class="built_in">head</span> -20</span><br></pre></td></tr></table></figure>

<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><a href="http://library.edgecase.com/git_immersion/index.htm">Using git</a></li>
</ul>
]]></content>
      <categories>
        <category>git</category>
        <category>command</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>gdb-commands</title>
    <url>/2019/11/25/gdb-commands/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Core file is generated when program crashes, if it’s not turned off, see limitation for the current user by <code>$ ulimit -a</code> or set it with unlimited by <code>$ ulimit -c unlimited</code> to allow core generation.  </p>
<p><code>ulimit</code> reads &#x2F;etc&#x2F;security&#x2F;limits.conf that controls the limitation for the system, like <code>core file, max opened file etc</code>  </p>
<span id="more"></span>  
<h1 id="Frequently-used-command"><a href="#Frequently-used-command" class="headerlink" title="Frequently used command"></a>Frequently used command</h1><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;run a b</span><br><span class="line">&gt;info locals</span><br><span class="line">&gt;p var</span><br><span class="line"></span><br><span class="line">&gt;break [file:] line  </span><br><span class="line">&gt;break [file:] func  </span><br><span class="line">&gt;break [above two] if expr </span><br><span class="line">&gt;info break</span><br><span class="line">&gt;delete [n] </span><br><span class="line">&gt;watch global_var</span><br><span class="line">&gt;watch -l local_var if $_caller_is(&quot;caller_function&quot;, 0) </span><br><span class="line"></span><br><span class="line">&gt;backtrace</span><br><span class="line">&gt;info frame</span><br><span class="line">&gt;frame [n]</span><br><span class="line"></span><br><span class="line">&gt;continue</span><br><span class="line">&gt;step  </span><br><span class="line">&gt;next  </span><br><span class="line">&gt;finish</span><br><span class="line"></span><br><span class="line">&gt;list (show next ten lines of source)  </span><br><span class="line">&gt;list - (show previous ten lines)  </span><br><span class="line">&gt;list line  </span><br><span class="line">&gt;list func </span><br><span class="line"></span><br><span class="line">&gt;info threads  </span><br><span class="line">&gt;thread 2  </span><br></pre></td></tr></table></figure>

<h1 id="Inside-Gdb"><a href="#Inside-Gdb" class="headerlink" title="Inside Gdb"></a>Inside Gdb</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gdb app_binary core_file  </span><br></pre></td></tr></table></figure>

<h2 id="how-gdb-load-debug-info"><a href="#how-gdb-load-debug-info" class="headerlink" title="how gdb load debug info"></a>how gdb load debug info</h2><p>if you compile you application with <code>&#39;-g&#39;</code> option, compiler will write DWARF(debug info) to the objects, actually, it includes two sections<br><code>debug_info</code> and <code>debug_line</code> sections  </p>
<ul>
<li>debug_info save function ,variable  </li>
<li>debug_line  map source line to machine code</li>
</ul>
<p>How does these section save information, it uses DIE (debug info entry), each has lots attributes(key-value) to show the info  </p>
<pre><code class="text">Each DIE has one or more attribute/value pairs  
Each attribute has a name  
– Describes meaning of attribute  
– Value specified for each attribute  
– Data format specified in attribute encoding  
  
● Examples  
– DW_AT_name – Name of object DIE describes  
– DW_AT_location – Source location of object  
– DW_AT_low_pc – Start address of object  
– DW_AT_high_pc – End address of object  
– DW_AT_type – Pointer to DIE describing type  
  
DIE for variable  
  
1c28: DW_TAG_variable  
DW_AT_name : decode  
DW_AT_decl_file : 1  
DW_AT_decl_line : 1782  
DW_AT_type : &lt;0x657&gt;  
DW_AT_location : 0x24ed (location list)  
</code></pre>
<p>show all dwarf info  </p>
<pre><code class="bash">$ readelf -w  
</code></pre>
<h2 id="core-file-location"><a href="#core-file-location" class="headerlink" title="core file location"></a>core file location</h2><p>By default, core file is generated at the current directory or &#x2F;var&#x2F;log&#x2F;core, change it if needed following the below rules:  </p>
<pre><code class="text">core file生成的地方是在/proc/sys/kernel/core_pattern文件定义的。  
改动到生成到自己定义的目录的方法是：  
echo &quot;pattern&quot; &gt; /proc/sys/kernel/core_pattern  
并且只有超级用户可以修改这两个文件。  
&quot;pattern&quot;类似我们C语言打印字符串的格式，相关标识如下：  
%%: 相当于%  
%p: 相当于&lt;pid&gt;  
%u: 相当于&lt;uid&gt;  
%g: 相当于&lt;gid&gt;  
%s: 相当于导致dump的信号的数字  
%t: 相当于dump的时间  
%h: 相当于hostname  
%e: 相当于执行文件的名称  
这时用如下命令设置生成的core file到系统/tmp目录下，并记录pid以及执行文件名  
$ echo &quot;/tmp/core-%e-%p&quot; &gt; /proc/sys/kernel/core_pattern  
after such operations. core file should be generated when segment fault happens.  
  
change this pattern live  
  
# echo &#39;/tmp/core_%e.%p.%t&#39; | sudo tee /proc/sys/kernel/core_pattern  
core file with name core.program.processid.timestamp  
  
Or change it forever  
  
edit /etc/sysctl.conf  
kernel.core_pattern = /tmp/core_%e.%p.%t  
$ systemctl restart systemd-sysctl  
</code></pre>
<p><strong>core file not generated</strong>  </p>
<ul>
<li><code>$ ulimit</code> (output must be: unlimited)  </li>
<li><code>$ cat /proc/sys/kernel/core_pattern</code> (the path must be writable)</li>
</ul>
<h2 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h2><h3 id="Getting-help"><a href="#Getting-help" class="headerlink" title="Getting help"></a>Getting help</h3><pre><code class="text">&gt;help  
&gt;help class  
&gt;help command  
</code></pre>
<h3 id="Executing-your-program"><a href="#Executing-your-program" class="headerlink" title="Executing your program"></a>Executing your program</h3><pre><code class="text"># run with args
&gt;run a b
# another way to run with args
&gt;set args a b
&gt;run

# run without args
&gt;run  
&gt;kill
</code></pre>
<h3 id="Symbol-table"><a href="#Symbol-table" class="headerlink" title="Symbol table"></a>Symbol table</h3><pre><code class="text">&gt;info address s  
(info address var_name; info address fun_name) where it is.  
  
&gt;info func [regex]  
show names,types of defined functions regular pattern search all matched functions  
  
&gt;info var [regex]  
show names types of global, static variables, not value of it!!  

&gt;info var ngx_show_version  
All variables matching regular expression &quot;ngx_show_version&quot;:  
  
&gt;info locals  
</code></pre>
<h3 id="Breakpoints-and-watchpoints"><a href="#Breakpoints-and-watchpoints" class="headerlink" title="Breakpoints and watchpoints"></a>Breakpoints and watchpoints</h3><pre><code class="text">&gt;break [file:] line  
&gt;break [file:] func  
&gt;break *addr (set breakpoint at address addr)  
&gt;break [above three] if expr  
# program stops when watched var is written
&gt;watch expr | watch var  
# program stops when watched var is read  
&gt;rwatch expr (read)  
# program stops when watched var is read or write  
&gt;awatch expr (read/or write)  
&gt;info break  
&gt;info watch  
&gt;delete [n]  
&gt;clear [file:]fun  
&gt;clear [file:]line  
&gt;disable [n]  
&gt;enable [n]  
&gt;ignore n count (ignore breakpoint n, count times) [n] can be number for breakpoint or watchpoint  
</code></pre>
<h3 id="Program-stack"><a href="#Program-stack" class="headerlink" title="Program stack"></a>Program stack</h3><pre><code class="text">&gt;backtrace (print trace of all frames in stack)  
&gt;frame [n] (select frame number n)  
&gt;info frame (describe selected frame)  
&gt;info args (arguments of selected frame)  
&gt;info locals (local variables of selected frame)  
&gt;info reg [rn] (register values [for regs rn] in selected:info reg rax or info reg r10)  
</code></pre>
<h3 id="Working-files"><a href="#Working-files" class="headerlink" title="Working files"></a>Working files</h3><pre><code class="text">&gt;file [file] ( use file for both symbols and executable)  
&gt;core-file [file] ( read file as coredump;or discard)  
&gt;exce-file [file] ( use file as executable only; or discard)  
&gt;symbol-file [file]( use symbol table from file, or discard)  
&gt;add-sym file addr ( read additional symbols from file, dynamically loaded at addr.)  
</code></pre>
<h3 id="Execution-control"><a href="#Execution-control" class="headerlink" title="Execution control"></a>Execution control</h3><pre><code class="text">&gt;continue (continue running)  
&gt;step  
&gt;stepi (step by machine instructions rather than source lines)  
&gt;next  
&gt;nexti  
&gt;finish  
&gt;return [expr] (pop selected stack frame without executing [setting return value])  
&gt;signal num (resume execution with signal )  
&gt;jump line (resume execution at specified line number)  
&gt;jump *address  
&gt;set var=expr (evaluate expr without displaying it; use for altering program variables)  
</code></pre>
<h3 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h3><pre><code class="text">&gt;print [/f] [expr] (print a;print /x a;print /t a)  
    f can be  
        x    hexadecimal  
        t     binary  
        c    character  
&gt;x [/Nuf] expr (examine memory at address expr; x/1bx 0x123;x/1hx 0x123;x/1wx 0x123)  
    N is the length you want to see!!  
    u can be  
        b individual bytes  
        h halfwords (two bytes)  
        w words (four bytes)  
        g giant words (eight bytes)  
&gt;disassem [addr] (display memory as machine instructions from addr)  
&gt;disassem /s function_name (display machine code as well as source code for this function)  
</code></pre>
<h3 id="Automatic-display"><a href="#Automatic-display" class="headerlink" title="Automatic display"></a>Automatic display</h3><pre><code class="text">&gt;display [/f] expr (show value of expr each time program stops)  
&gt;undisplay n  
&gt;disable disp n  
&gt;enable disp n  
&gt;info display  
</code></pre>
<h3 id="Source-files"><a href="#Source-files" class="headerlink" title="Source files"></a>Source files</h3><pre><code class="text">&gt;dir names (add directory names to front of source path as prefix)  
&gt;dir (clear source path)  
&gt;show dir  
&gt;list (show next ten lines of source)  
&gt;list - (show previous ten lines)  
&gt;list line  
&gt;list func  
</code></pre>
<h3 id="debug-multiple-processes"><a href="#debug-multiple-processes" class="headerlink" title="debug multiple processes"></a>debug multiple processes</h3><p>when parent folks the child, you can use this method to debug the child, switch to child process, by default, gdb does not follow!<br><strong>NOTE:</strong></p>
<ul>
<li>If you want gdb follow, make sure the followed process can debug and has symbol</li>
<li><font color='red'>DO NOT follow if run execxx() after fork() as you have nothing to know the command to run, does it have debug symbol or not</font><pre><code class="text">gdb&gt;show follow-fork-mode
gdb&gt;set follow-fork-mode child  
gdb&gt;set follow-fork-mode parent
</code></pre>
(make sure set breakpoint or watch before running)</li>
</ul>
<p>but if there are more child process want to debug use sleep in that process and attach it to debug first change code add sleep  </p>
<pre><code class="text">#ps -ef | grep xx (to see the child)  
gdb&gt;attach child_process_id  
gdb&gt;b function_name  
gdb&gt;c  
</code></pre>
<h3 id="multiple-threads"><a href="#multiple-threads" class="headerlink" title="multiple threads"></a>multiple threads</h3><pre><code class="text">gdb&gt;info threads  
gdb&gt;thread 2  
</code></pre>
<h3 id="show-mapped-shared-memory"><a href="#show-mapped-shared-memory" class="headerlink" title="show mapped shared memory"></a>show mapped shared memory</h3><pre><code class="text">gdb&gt;info proc all  
</code></pre>
<h3 id="show-offset-of-a-given-field"><a href="#show-offset-of-a-given-field" class="headerlink" title="show offset of a given field"></a>show offset of a given field</h3><pre><code class="text">gdb&gt; p &amp;((struct _IO_proc_file *)0)-&gt;next  
</code></pre>
<h3 id="call-a-function-in-gdb"><a href="#call-a-function-in-gdb" class="headerlink" title="call a function in gdb"></a>call a function in gdb</h3><pre><code class="text">gdb&gt;call printf(&quot;hello&quot;)  
(output is the return value)  
  
test.c  
  
#include &lt;stdio.h&gt;  
#include &lt;stdlib.h&gt;  
  
struct rule &#123;  
    int start;  
    int end;  
&#125;;  
void f(int a) &#123;  
    printf(&quot;%d\n&quot;, a);  
&#125;  
  
void f2(struct *rule) &#123;  
    printf(&quot;%d %d\n&quot;, rule-&gt;start, rule-&gt;end);  
&#125;  
  
int main() &#123;  
  
    return 0;  
&#125;  
  
$ gcc -d -o test test.c  
$ gdb test  
&gt; b main  
&gt; r  
&gt;set $var=12  
&gt;call f($var)  
  
&gt;call f(12)  
  
&gt;set $ptr=malloc(sizeof(struct rule))  
&gt;p $ptr  
&gt;set ((struct rule*)$ptr)-&gt;start=12  
&gt;set ((struct rule*)$ptr)-&gt;end=10  
&gt; p *((struct rule*)$ptr)  
&gt;call f2($ptr)  
  
&gt;set $ptr=malloc(4)  
&gt;set *((int*)$ptr)=12  
&gt;p *((int*)$ptr)  
</code></pre>
<h3 id="gdb-debug-c"><a href="#gdb-debug-c" class="headerlink" title="gdb debug c++"></a>gdb debug c++</h3><pre><code class="text">set breakpoint on a member function  
gdb&gt;b class::function  
  
show fields/members of the given class/struct instance  
gdb&gt;ptype class_instance  
  
show attributes of a given instance  
gdb&gt;p *class_pointer  
  
show private attribute of a given class instance  
(you can show all attributes[public, protected, private] by gdb])  
gdb&gt;p class_pointer-&gt;private_attribute  
  
show global variable with namespace  
gdb&gt; p &#39;name_space:log_level&#39;  
  
disassemble c++ function  
gdb&gt;disassem &#39;c++ function signature without return type&#39;  
  
show function signature  
gdb&gt;info functions xxx  
</code></pre>
<h3 id="ignore-SIGPIPE-in-gdb"><a href="#ignore-SIGPIPE-in-gdb" class="headerlink" title="ignore SIGPIPE in gdb"></a>ignore SIGPIPE in gdb</h3><p>SIGPIPE happens when read&#x2F;write a closed socket.  </p>
<pre><code class="text">gdb&gt;handle SIGPIPE nostop  
gdb&gt;handle SIGPIPE nostop noprint pass  
</code></pre>
<h3 id="how-to-fix-no-such-file-or-directory"><a href="#how-to-fix-no-such-file-or-directory" class="headerlink" title="how to fix no such file or directory"></a>how to fix no such file or directory</h3><pre><code class="text">$cdir compiled path when building binary, get its value  
gdb&gt; info source  
  
$cwd  working path when debugging the binary, get its value by  
gdb&gt; pwd  
  
gdb&gt; list  
No such file or directory  
  
First you need to let gdb store the source path info by &#39;-g&#39;, later on put the source code at proper path.  
  
gdb saves the file path with absolute path, search it when debugging  
$gcc -g -o test /tmp/a.c  
  
gdb saves the file path with relative path, search it by adding compiled path or current working path  
$gcc -g -o test a.c  
  
  
$gdb test  
gdb&gt;list  
if test build with absolute path, if not found, search compiled path, then working path  
if test build with relative path, first check $cdir/file_name, then $cwd/file_name  
if not found &#39;No such file or directory&#39;  
</code></pre>
<p><strong>Sometime you only get the binary file, first check</strong>  </p>
<pre><code class="bash">$ objdump -WL test  
  
#  aa:     file format elf64-x86-64  
#  
#  Decoded dump of debug contents of section .debug_line:  
#  
#  CU: /tmp/a.c:  
#  File name                            Line number    Starting address  
#  a.c                                            5            0x400526  
#  a.c                                            6            0x40052e  
#  a.c                                            8            0x400535  
#  a.c                                            9            0x400549  
#  a.c                                           10            0x40054e  
#  
#  CU(compiled unit) shows gdb saves absolute path in debuginfo  
  
$ objdump -WL test  
# aa:     file format elf64-x86-64  
#  
# Decoded dump of debug contents of section .debug_line:  
#  
# CU: a.c:  
# File name                            Line number    Starting address  
# a.c                                            5            0x400526  
# a.c                                            6            0x40052e  
# a.c                                            8            0x400535  
# a.c                                            9            0x400549  
# a.c                                           10            0x40054e  
#  
# CU(compiled unit) shows gdb saves relative path in debuginfo  
# In this case you also need to know the compiled path  
  
$ objdump -W aa | grep DW_AT_comp_dir  
# &lt;15&gt;   DW_AT_comp_dir    : (indirect string, offset: 0x38): /tmp  
# DW_AT_comp_dir     DW_FORM_strp  
#  
# As you can see, the compiled path is /tmp  
  
  
# If you debug the binary on your compliing machine, and you don&#39;t move you source code  
# every thing is fine!!!  
#  
# BUT if you get the binary from other guys or you move the source code, it will shows  
# &#39;No such file or directory!&#39;  
  
# 1. compiled with absolute path  
$ gdb  
gdb&gt;set substitute-path $from $to  
# let&#39;s say you moved a.c from /tmp to /home/  
$ gdb test  
gdb&gt; set substitute-path /tmp /home  
  
# 2. binary file saves with relative path  
$ gdb  
gdb&gt; dir $new_path  
</code></pre>
<h3 id="debug-with-separate-debug-files"><a href="#debug-with-separate-debug-files" class="headerlink" title="debug with separate debug files."></a>debug with separate debug files.</h3><p>GDB supports two ways of specifying the separate debug info file:  </p>
<ul>
<li>The executable contains a debug link that specifies the name of the separate debug info file(.gnu_debuglink)  </li>
<li>The executable contains a build ID, a unique bit string that is also present in the corresponding debug info file(the build is most stored at .note.gnu.build-id)</li>
</ul>
<pre><code class="bash"># check the separate debug info file with command  
$ readelf -n /lib/x86_64-linux-gnu/libc-2.23.so | grep  BUILD_ID -C 2  
Displaying notes found at file offset 0x00000270 with length 0x00000024:  
  Owner                 Data size	Description  
  GNU                  0x00000014	NT_GNU_BUILD_ID (unique build ID bitstring)  
    Build ID: 40572882c66d064f9e4134cc94e4127798aad742  
  
# check the debug link  
$ readelf -x.gnu_debuglink /lib/x86_64-linux-gnu/libc-2.23.so  
</code></pre>
<p><strong>Depending on the way the debug info file is specified, GDB uses two different methods of looking for the debug file</strong>  </p>
<ul>
<li>For the “debug link” method, GDB looks up the named file in the directory of the executable file, then in a subdirectory of that directory named &#96;.debug’, and finally under the global debug directory, in a subdirectory whose name is identical to the leading directories of the executable’s absolute file name.  </li>
<li>For the “build ID” method, <font color='red'>GDB looks in the .build-id’ subdirectory of the global debug directory for a file named &#96;nn&#x2F;nnnnnnnn.debug</font>‘, where nn are the first 2 hex characters of the build ID bit string, and nnnnnnnn are the rest of the bit string</li>
</ul>
<p><strong>Example</strong>  </p>
<p>suppose you ask GDB to debug &#x2F;usr&#x2F;bin&#x2F;ls, which has a debug link that specifies the file ls.debug, and a build ID whose value in hex is abcdef1234. If the global debug directory is &#x2F;usr&#x2F;lib&#x2F;debug, then GDB will look for the following debug information files, in the <font color='green'><strong>indicated order</strong></font>:  </p>
<pre><code class="bash"># global debug dir: /usr/lib/debug by default  
/usr/lib/debug/.build-id/ab/cdef1234.debug  
/usr/bin/ls.debug  
/usr/bin/.debug/ls.debug  
/usr/lib/debug/usr/bin/ls.debug  
</code></pre>
<p><strong>Example to use build-id not from default path</strong>  </p>
<pre><code class="bash">&gt;gdb  
&gt;set debug-file-directory /tmp/lib/debug  
&gt;file /usr/bin/nginx  
&gt;core-file core.nginx  
&gt;bt  
</code></pre>
<h3 id="detach-symbol-from-binary-compiled-with-g"><a href="#detach-symbol-from-binary-compiled-with-g" class="headerlink" title="detach symbol from binary(compiled with -g)"></a>detach symbol from binary(compiled with -g)</h3><pre><code class="bash"># detach symbol to a separate file, foo still has symbol  
$ objcopy --only-keep-debug foo foo.debug  
  
# strip symbol from foo, foo has no symbol now  
# Remove debugging symbols only
$ strip -g foo  

# strip all symbols!!!
$ strip foo  
  
# attach symbol back to binary  
$ objcopy --add-gnu-debuglink=foo.debug foo  
</code></pre>
<h3 id="watchpoints-is-deleted-by-gdb-automatically"><a href="#watchpoints-is-deleted-by-gdb-automatically" class="headerlink" title="watchpoints is deleted by gdb automatically"></a>watchpoints is deleted by gdb automatically</h3><p>gdb will delete watchpoints if out of scope of variable used by watchpoints, this usually happens<br>when you add a watchpoint on a local variable, to prevent gdb delete such watchpoints, add -l&#x2F;-location<br>to the watchpoint, <strong>but with this type of watchpoint, gdb will pick up changes that other functions make to that same address on the stack, so you can add the qualification if $_caller_is(“your_caller_func”, 0)</strong>  </p>
<pre><code class="bash">gdb&gt; watch -location $local_var  
  
# better way to use  
gdb&gt; watch -location $local_var if $_caller_is(&quot;caller_function&quot;, 0)  
</code></pre>
<h3 id="run-gdb-command-automatically-when-launch-gdb"><a href="#run-gdb-command-automatically-when-launch-gdb" class="headerlink" title="run gdb command automatically when launch gdb"></a>run gdb command automatically when launch gdb</h3><pre><code class="bash"># create a file ~/.gdbinit  
# put gdb command in the file each line  
# then start gdb  
$ gdb  
</code></pre>
<h3 id="pax-on-application"><a href="#pax-on-application" class="headerlink" title="pax on application"></a>pax on application</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">paxctl  is  a tool that allows PaX flags to be modified on a per-binary  </span><br><span class="line">basis(need kernel support!!!)  </span><br><span class="line">  </span><br><span class="line">PaX is part of common  security-enhancing  kernel  patches  and  </span><br><span class="line">secure   distributions,   such   as  GrSecurity  and  Hardened  Gentoo,  </span><br><span class="line">respectively.  Your system needs to be running a properly  patched  and  </span><br><span class="line">configured kernel for this program to have any effect.  </span><br><span class="line">  </span><br><span class="line">-P     enforce paging based non-executable pages (PAGEEXEC)  </span><br><span class="line">  </span><br><span class="line">-p     do not enforce paging based non-executable pages (NOPAGEEXEC)  </span><br><span class="line">  </span><br><span class="line">-E     emulate trampolines (EMUTRAMP)  </span><br><span class="line">  </span><br><span class="line">-e     do not emulate trampolines (NOEMUTRAMP)  </span><br><span class="line">  </span><br><span class="line">-M     enforce secure memory protections (MPROTECT)  </span><br><span class="line">  </span><br><span class="line">-m     do not enforce secure memory protections (NOMPROTECT)  </span><br><span class="line">  </span><br><span class="line">-R     randomize memory regions (RANDMMAP)  </span><br><span class="line">  </span><br><span class="line">-r     do not randomize memory regions (NORANDMMAP)  </span><br><span class="line">  </span><br><span class="line">-X     randomize   base   address   of   normal  (ET_EXEC)  executables  </span><br><span class="line">       (RANDEXEC)  </span><br><span class="line">  </span><br><span class="line">-x     do not randomize base address of  normal  (ET_EXEC)  executables  </span><br><span class="line">       (NORANDEXEC)  </span><br><span class="line">  </span><br><span class="line">-S     enforce segmentation based non-executable pages (SEGMEXEC)  </span><br><span class="line">  </span><br><span class="line">-s     do   not   enforce   segmentation   based  non-executable  pages  </span><br><span class="line">       (NOSEGMEXEC)  </span><br><span class="line">  </span><br><span class="line">-v     view flags  </span><br><span class="line">  </span><br><span class="line">-z     reset all flags (further flags still apply)  </span><br><span class="line">  </span><br><span class="line">-c     create the PT_PAX_FLAGS program header if it does not  exist  by  </span><br><span class="line">       converting the PT_GNU_STACK program header if it exists  </span><br><span class="line">  </span><br><span class="line">-C     create  the  PT_PAX_FLAGS program header if it does not exist by  </span><br><span class="line">       adding a new program header, if it is possible  </span><br><span class="line">  </span><br><span class="line">-q     suppress error messages  </span><br><span class="line">  </span><br><span class="line">-Q     report flags in short format  </span><br><span class="line">  </span><br><span class="line">can&#x27;t insert breakpoint even binary compiled with &#x27;-g&#x27; option  </span><br><span class="line">gdb&gt;  </span><br><span class="line">warning: Cannot call inferior functions, Linux kernel PaX protection forbids return to non-executable pages!  </span><br><span class="line">Warning:  </span><br><span class="line">Cannot insert breakpoint 1.  </span><br><span class="line">Cannot access memory at address 0x4fbbcb  </span><br><span class="line">  </span><br><span class="line">try disable the global setting kernel part as it say &#x27;Linux kernel PaX protection forbids&#x27;  </span><br><span class="line">    To disable PaX policy globally  </span><br><span class="line">    sysctl -w kernel.pax.softmode=1  </span><br><span class="line">  </span><br><span class="line">    To enable PaX policy globally  </span><br><span class="line">    sysctl -w kernel.pax.softmode=0  </span><br><span class="line">  </span><br><span class="line">if not working, try on this specific program  </span><br><span class="line">    #apt-get install paxctl  </span><br><span class="line">  </span><br><span class="line">    #paxctl -v binary_file  </span><br><span class="line">  </span><br><span class="line">    /*disable security protection for this app */  </span><br><span class="line">    #paxctl -pemrxs binary  </span><br><span class="line">  </span><br><span class="line">    /* if you meet problem like when runs &#x27;paxctl -pemrxs binary&#x27; */  </span><br><span class="line">    file /xx/nginx does not have a PT_PAX_FLAGS program header, try conversion  </span><br><span class="line">  </span><br><span class="line">If you see  errors like this   </span><br><span class="line">gdb&gt; break test_print  </span><br><span class="line">gdb&gt; c  </span><br><span class="line">Warning:  </span><br><span class="line">Cannot insert breakpoint 1.  </span><br><span class="line">Cannot access memory at address 0x4fbbc  </span><br><span class="line">  </span><br><span class="line">use hbreak to have a try  </span><br><span class="line">gdb&gt; hbreak test_print  </span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<h3 id="use-glibc-source-code-in-gdb"><a href="#use-glibc-source-code-in-gdb" class="headerlink" title="use glibc source code in gdb"></a>use glibc source code in gdb</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">most of time, you application link with glibc dynamic!  </span><br><span class="line">  </span><br><span class="line">check the glibc version that you application used.  </span><br><span class="line">  </span><br><span class="line"># ldd xx_binary  </span><br><span class="line">$ ldd nginx | grep libc  </span><br><span class="line">	libcrypt.so.1 =&gt; /lib/x86_64-linux-gnu/libcrypt.so.1 (0x00007fed50270000)  </span><br><span class="line">	libcrypto.so.1.0.0 =&gt; /lib/x86_64-linux-gnu/libcrypto.so.1.0.0 (0x00007fed4eeb7000)  </span><br><span class="line">	libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fed4e436000)  </span><br><span class="line">  </span><br><span class="line">install glibc source file and debug symbol from offical repo  </span><br><span class="line">  </span><br><span class="line">```bash  </span><br><span class="line"># Ubuntu18</span><br><span class="line"># source repo  </span><br><span class="line">$ grep &#x27;^deb &#x27; /etc/apt/sources.list | sed &#x27;s/^deb /deb-src /g&#x27; | sudo tee /etc/apt/sources.list.d/deb-src.list  </span><br><span class="line">$ cat  /etc/apt/sources.list.d/deb-src.list  </span><br><span class="line"># debug symbol repo  </span><br><span class="line">$ printf &quot;deb http://ddebs.ubuntu.com %s main restricted universe multiverse\n&quot; $(lsb_release -cs)&#123;,-updates,-security,-proposed&#125; | sudo tee -a /etc/apt/sources.list.d/ddebs.list  </span><br><span class="line">  </span><br><span class="line">$ apt update -y  </span><br><span class="line">  </span><br><span class="line"># make sure the libc6 same version with process used!!!!  </span><br><span class="line"># otherwise, you can&#x27;t get from ubuntu repo, but from github or somewhere.  </span><br><span class="line"># git clone git://sourceware.org/git/glibc.git  </span><br><span class="line">  </span><br><span class="line"># download source  </span><br><span class="line">$ apt source libc6  </span><br><span class="line">  </span><br><span class="line"># check the debug symbol pkg  </span><br><span class="line">$ apt-cache search libc6-dbg  </span><br><span class="line">$ apt-get install -y libc6-dbg  </span><br><span class="line"></span><br><span class="line"># OR Centos7</span><br><span class="line"> ```  </span><br><span class="line">  </span><br><span class="line">check where should I put the source file  </span><br><span class="line">  </span><br><span class="line">Way1:  </span><br><span class="line">...  </span><br><span class="line">gdb&gt;set filename-display absolute  </span><br><span class="line">gdb&gt;bt  </span><br><span class="line">#0  _IO_new_proc_open (fp=fp@entry=0x333bc001110,  </span><br><span class="line">    command=command@entry=0x333cbfcb620 &quot;PYTHONPATH=/path/to/python /usr/bin/timeout -k 25 25 /xx/bin/cli.py --get --xb-status &quot;, mode=&lt;optimized out&gt;, mode@entry=0x536e720e4a &quot;re&quot;) at /build/glibc-Cl5G7W/glibc-2.23/libio/iopopen.c:213  </span><br><span class="line">  </span><br><span class="line">...  </span><br><span class="line">  </span><br><span class="line">so you can see you should put source file at /build/glibc-Cl5G7W/glibc-2.23 !!  </span><br><span class="line">  </span><br><span class="line">Way2:  </span><br><span class="line">gdb&gt; set filename-display relative  </span><br><span class="line">gdb&gt; bt  </span><br><span class="line">gdb&gt; dir $root_of_glibc  </span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<h3 id="gdb-with-lots-of-question-marks-even-with-symbol-table-loaded"><a href="#gdb-with-lots-of-question-marks-even-with-symbol-table-loaded" class="headerlink" title="gdb with lots of question marks even with symbol table loaded"></a>gdb with lots of question marks even with symbol table loaded</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">In some case, even with debug binary(symbol table), gdb still show lots of question marks, like this  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ gdb nginx core.nginx.1615779511.31694.134.11    </span><br><span class="line">Reading symbols from nginx...done.-------&gt;with symbol    </span><br><span class="line">[New LWP 31694]    </span><br><span class="line">Core was generated by nginx: worker  process                                                        .  </span><br><span class="line">Program terminated with signal SIGSEGV, Segmentation fault.    </span><br><span class="line">#0  0x0000184bd5ac9ecd in ?? ()    </span><br><span class="line">(gdb) bt    </span><br><span class="line">#0  0x0000184bd5ac9ecd in ?? ()    </span><br><span class="line">#1  0x0000000000000001 in ?? ()    </span><br><span class="line">#2  0x757f796f19023d00 in ?? ()    </span><br><span class="line">#3  0x0000184bd7031100 in ?? ()    g</span><br><span class="line">#4  0x0000000000000000 in ?? ()    </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">This is because of memory protection enabled when complie binary, so that address can&#x27;t map to the correct value in binary, hence ? shows.    </span><br><span class="line">  </span><br><span class="line">diable memory protection by `paxctl`    </span><br><span class="line"></span><br><span class="line">$ paxctl -mc binary    </span><br><span class="line">$ gdb nginx core.nginx.1615779511.31694.134.11    </span><br><span class="line">Reading symbols from nginx...done.    </span><br><span class="line">  </span><br><span class="line">warning: exec file is newer than core file.    </span><br><span class="line">[New LWP 31694]    </span><br><span class="line">[Thread debugging using libthread_db enabled]    </span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.    </span><br><span class="line">Core was generated by nginx: worker   process </span><br><span class="line">Program terminated with signal SIGSEGV, Segmentation fault.    </span><br><span class="line">#0  0x0000184bd5ac9ecd in ngx_http_run_posted_requests (c=0x7371edd76d10) at edge/nginx/src/http/ngx_http_request.c:2296  </span><br><span class="line">2296	        pr = r-&gt;main-&gt;posted_requests;  </span><br><span class="line">(gdb) bt  </span><br><span class="line">#0  0x0000184bd5ac9ecd in ngx_http_run_posted_requests (c=0x7371edd76d10) at edge/nginx/src/http/ngx_http_request.c:2296  </span><br><span class="line">#1  0x0000184bd5b2e31f in ngx_epoll_process_events (cycle=0x184bd7031100, timer=&lt;optimized out&gt;, flags=&lt;optimized out&gt;) at edge/nginx/src/event/modules/ngx_epoll_module.c:937  </span><br><span class="line">#2  0x0000184bd5b3022e in ngx_process_events_and_timers (cycle=cycle@entry=0x184bd7031100) at edge/nginx/src/event/ngx_event.c:242  </span><br><span class="line">#3  0x0000184bd5b42055 in ngx_worker_process_cycle (cycle=cycle@entry=0x184bd7031100, data=data@entry=0x1) at edge/nginx/src/os/unix/ngx_process_cycle.c:989  </span><br><span class="line">#4  0x0000184bd5b40815 in ngx_spawn_process (cycle=cycle@entry=0x184bd7031100, proc=proc@entry=0x184bd5b41f60 &lt;ngx_worker_process_cycle&gt;, data=data@entry=0x1,   </span><br><span class="line">    name=name@entry=0x184bd628fbd3 &quot;worker process&quot;, respawn=respawn@entry=-4) at edge/nginx/src/os/unix/ngx_process.c:213  </span><br><span class="line">#5  0x0000184bd5b41581 in ngx_start_worker_processes (cycle=cycle@entry=0x184bd7031100, n=8, type=type@entry=-4) at edge/nginx/src/os/unix/ngx_process_cycle.c:425  </span><br><span class="line">#6  0x0000184bd5b4387a in ngx_master_process_cycle (cycle=0x184bd7031100) at edge/nginx/src/os/unix/ngx_process_cycle.c:275  </span><br><span class="line">#7  0x0000184bd59ecf74 in main (argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;) at edge/nginx/src/core/nginx.c:390  </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
        <category>coredump</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>coredump</tag>
      </tags>
  </entry>
  <entry>
    <title>hardware-console-terminal-tty-pty</title>
    <url>/2021/10/15/hardware-console-terminal-tty-pty/</url>
    <content><![CDATA[<h1 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h1><p>Generally speaking a terminal is a relatively dumb electromechanical device with an input interface (like a keyboard) and an output interface (like a display or sheet of paper).</p>
<p>The computer has an UART driver to read for the hardware device. The sequence of characters is passed to TTY driver which applies the line discipline. The line discipline is in charge of converting special characters (like end of line, backspaces), and echoing what has been received back to the teletype, so that the user can see what it has been typed (line disciplines will be discussed in the next post of the series).</p>
<p>The words <strong>terminal and TTY device are basically interchangeable as they mean the same thing</strong>.</p>
<span id="more"></span>

<h2 id="Serial-Terminal"><a href="#Serial-Terminal" class="headerlink" title="Serial Terminal"></a>Serial Terminal</h2><p>A serial port terminal (Serial Port Terminal) is a <code>terminal device connected using a serial port of a computer</code>. The computer treats each serial port as a character device. For a while, these serial port devices were often called terminal devices, because at that time its greatest use was to connect terminals. The device names corresponding to these serial ports are &#x2F;dev&#x2F;ttyS0 &#x2F;dev&#x2F;ttyS1 etc.</p>
<h2 id="terminal-emulator-TTY-driver-in-kernel"><a href="#terminal-emulator-TTY-driver-in-kernel" class="headerlink" title="terminal emulator(TTY driver in kernel)"></a>terminal emulator(TTY driver in kernel)</h2><p>Let’s move to more recent times. Computers started becoming smaller and smaller, with everything packed in one single box.<br>For the first time the <code>terminal was not a physical device connected via UART to the computer</code>. The terminal became <strong>a computer program in the kernel which would send characters directly to the TTY driver, read from it and print to the screen.</strong></p>
<p>it listens for events coming from the keyboard and sends it down to the driver. The difference is that there is no physical device or cable which is connected to the TTY driver.</p>
<p>If you run a Linux OS on your machine press Ctrl+Alt+F1. You’ll get a TTY emulated by the kernel! You can get other TTYs by pressing Ctrl+Alt with the function keys from (F2 to F6), you can login on different TTYs, after that run bash shell inside that TTY. different login different TTY</p>
<p>But <strong>there is only one console(&#x2F;dev&#x2F;console) for a computer</strong>, if you write message to console(&#x2F;dev&#x2F;console), displayer will show it to you.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> &gt;/dev/console</span><br></pre></td></tr></table></figure>

<p>In Linux systems, computer monitors are often called console terminals (Console). It emulates a terminal of type Linux (TERM &#x3D; Linux), and there are some device special files associated with it: tty0, tty1, tty2, etc. <code>When you log in on the console, tty1 is used. When using Alt + [F1-F6] key combination, we can switch to tty2, tty3, etc. tty1–tty6, etc. are called virtual terminals</code>, and tty0 is an alias of the currently used virtual terminal, and the information generated by the system will be sent to the terminal (also called console terminal at this time). Therefore, no matter which virtual terminal is currently being used, system information will be sent to the console terminal. You can log in to different virtual terminals, thus allowing the system to have several different sessions at the same time.</p>
<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><p>Shells are <strong><code>user space applications</code></strong> that use the kernel API in just the same way as it is used by other application programs. A shell <code>manages the user–system interaction by prompting users for input, interpreting their input, and then handling an output from the underlying operating system (much like a read–eval–print loop, REPL).</code></p>
<p>Bash, Zsh, Fish and sh are all different flavors of shells.</p>
<h1 id="PTY-user-land-program"><a href="#PTY-user-land-program" class="headerlink" title="PTY(user land program)"></a>PTY(user land program)</h1><p>If we remotely telnet to the host or use xterm, do we also need a terminal interaction? Yes, this is the virtual terminal pty (pseudo-tty) which runs in user land.<code> while pts (pseudo-terminal slave) is the implementation method of pty</code>, and ptmx (pseudo-terminal master ) Used in conjunction with pty. </p>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://titanwolf.org/Network/Articles/Article?AID=6983cb6c-774d-4ea8-866b-5d15858436e5#gsc.tab=0">termianl-tty-pty</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
        <category>tty</category>
      </categories>
      <tags>
        <tag>console</tag>
        <tag>tty</tag>
        <tag>pty</tag>
      </tags>
  </entry>
  <entry>
    <title>go-basic</title>
    <url>/2021/07/29/go-basic/</url>
    <content><![CDATA[<h1 id="overview"><a href="#overview" class="headerlink" title="overview"></a>overview</h1><p>Go is a <code>statically typed, compiled</code> programming language designed at Google， Go is <code>syntactically similar to C</code>, but with <strong>memory safety, garbage collection, structural typing, concurrency.</strong>  </p>
<p><strong><font color='red'> Go is influenced by C, but with an <code>emphasis on greater simplicity and safety</code>.</font></strong></p>
<ul>
<li><p>A syntax and environment adopting patterns more common in dynamic languages:</p>
<ul>
<li>Optional concise variable declaration and initialization through type inference (x :&#x3D; 0 instead of int x &#x3D; 0; or var x &#x3D; 0;).</li>
<li>Fast compilation.</li>
<li>Remote package management (go get) and online package documentation.</li>
</ul>
</li>
<li><p>Distinctive approaches to particular problems:</p>
<ul>
<li><strong>Built-in concurrency primitives</strong>: light-weight processes (goroutines), channels, and the select statement.</li>
<li>An interface system in place of virtual inheritance, and <code>type embedding</code> instead of non-virtual inheritance.</li>
<li>A toolchain that, <strong><code>by default, produces statically linked native binaries without external dependencies</code>.</strong></li>
</ul>
</li>
</ul>
<hr>
<span id="more"></span>

<p><strong><font color='red'>Syntax</font></strong><br>Go’s syntax includes changes <code>from C aimed at keeping code concise and readable</code>. A <code>combined declaration/initialization operator</code> was introduced that allows the programmer to write i :&#x3D; 3 or s :&#x3D; “Hello, world!”, <code>without specifying the types of variables used</code>. This contrasts with <code>C&#39;s int i = 3; and const char *s = &quot;Hello, world!&quot;</code>; <strong>Semicolons(;) still terminate statements,but are implicit when the end of a line occurs</strong>. Methods may <strong>return multiple values</strong>, and returning a result, err pair is the conventional way a method indicates an error to its caller in Go. Go adds literal syntaxes for <strong><code>initializing struct parameters by name</code></strong> and for initializing maps and slices. As an alternative to C’s three-statement for loop, <strong>Go’s <code>range</code> expressions <code>allow concise iteration over arrays, slices, strings, maps, and channels</code></strong>.</p>
<hr>
<p><strong><font color='red'>Built-in Types </font></strong></p>
<ul>
<li>bool</li>
<li>string</li>
<li>int  int8  int16  int32  int64</li>
<li>uint uint8 uint16 uint32 uint64 uintptr</li>
<li><font color='red'>byte &#x2F;&#x2F; alias for uint8, used as char like c，<code>&#39;a&#39; + 1 is valid it&#39;s &#39;b&#39;</code></font></li>
<li><font color='red'>rune &#x2F;&#x2F; alias for int32 represents a Unicode code point</font></li>
<li>float32 float64</li>
<li>complex64 complex128</li>
<li>pointer</li>
</ul>
<p><strong>The int, uint types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems, it depends on arch, different like C, int, uint are 32 bits(4 bytes) even on 64-bit machine</strong></p>
<hr>
<p><strong><font color='red'>Custom type</font></strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// status and bool are two different types.</span></span><br><span class="line"><span class="keyword">type</span> status <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Some type alias declarations */</span></span><br><span class="line"><span class="comment">// boolean and bool denote the same type.</span></span><br><span class="line"><span class="keyword">type</span> boolean = <span class="type">bool</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong><font color='red'> NOT Supported </font></strong></p>
<ul>
<li>inheritance</li>
<li>assertions</li>
<li><strong>pointer arithmetic</strong></li>
<li><strong>implicit type conversions</strong></li>
<li>NO ~x but ^x in Go for integer.</li>
</ul>
<hr>
<p><strong><font color='red'> Tools</font></strong><br>The main Go distribution includes tools for building, testing, and analyzing code:</p>
<ul>
<li><code>go build</code>, which builds Go binaries using only information in the source files themselves, no separate makefiles</li>
<li><code>go test</code>, for unit testing and microbenchmarks</li>
<li><code>go fmt</code>, for formatting code</li>
<li><code>go get</code>, for retrieving and installing remote packages</li>
<li><code>go vet</code>, a static analyzer looking for potential errors in code</li>
<li><code>go run</code>, a shortcut for building and executing code, but not save binary to disk.</li>
<li><code>godoc</code>, for displaying documentation or serving it via HTTP</li>
</ul>
<p>An ecosystem of third-party tools adds to the standard distribution, such as <code>gocode</code>, which enables code autocompletion in many text editors, <code>goimports</code>, which automatically adds&#x2F;removes package imports as needed, and<code>errcheck</code>, which detects code that might unintentionally ignore errors. </p>
<hr>
<p><strong><font color='red'>single quote vs double quote</font> They are different</strong></p>
<p>To <code>declare either byte or rune we use single quote</code>. While <code>declaring byte we have to specify the type</code>. If we do not specify the type, then the default type is meant as a rune for <code>&#39;a&#39;</code>. <strong>A single quote will allow only one character</strong>.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ch <span class="type">byte</span> = <span class="string">&#x27;a&#x27;</span><span class="comment">// must declare with type byte, otherwise it&#x27;s rune !!!</span></span><br><span class="line">    ch := <span class="type">byte</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    rc := <span class="string">&#x27;a&#x27;</span> <span class="comment">/* default it&#x27;s a rune */</span></span><br><span class="line">    rs := <span class="string">&quot;a&quot;</span> <span class="comment">/* it&#x27;s string */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><font color='red'><strong>NO -&gt; for pointer type like what we did in C, but works as C like <code>&amp;a, *p, **p, *p=</code></strong></font></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">12</span></span><br><span class="line"><span class="keyword">var</span> p *<span class="type">int</span> = &amp;a <span class="comment">// pointer type and get object address</span></span><br><span class="line">*p = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">    x <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p *Student = &amp;Student&#123;x: <span class="number">1</span>&#125;</span><br><span class="line">p.x = <span class="number">12</span> <span class="comment">// Go automatically convert it to (*p).x = 12 !!!</span></span><br></pre></td></tr></table></figure>

<p><strong>string, slice, map behave like pointer, but when assigning and passing as parameter, array, struct are different.</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s1 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">    s2 := s1 <span class="comment">// both s2 and s1 points to same memory</span></span><br><span class="line">    </span><br><span class="line">    sc1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    sc2 := sc1 <span class="comment">// both sc1 and sc2 points to same underlaying array</span></span><br><span class="line">    </span><br><span class="line">    m1 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;</span><br><span class="line">        <span class="string">&quot;a&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;b&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    m2 := m1 <span class="comment">// both m1 and m2 points to same memory</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*-----------------------------------------*/</span></span><br><span class="line">    <span class="keyword">var</span> a1 = [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    a2 := a1 <span class="comment">// a2 is a copy of a1, different memory!!!</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> st1 = <span class="keyword">struct</span> &#123;</span><br><span class="line">        x, y <span class="type">int</span></span><br><span class="line">    &#125;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">    </span><br><span class="line">    st2 := st1 <span class="comment">//st2 is a copy of st1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><code>for/range</code> when loop array, slice, map, it’s copy of element, hence if change on that element, make sure use <code>s[i]</code> if element is not pointer.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// slice of Person</span></span><br><span class="line">    ps := []Person&#123;</span><br><span class="line">        &#123;name: <span class="string">&quot;a&quot;</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, p := <span class="keyword">range</span> ps &#123;</span><br><span class="line">        p.name = <span class="string">&quot;b&quot;</span> <span class="comment">// p is copy of each element</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// nothing changed</span></span><br><span class="line">    fmt.Println(ps)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(ps); i++ &#123;</span><br><span class="line">        ps[i].name = <span class="string">&quot;b&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(ps)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://en.wikipedia.org/wiki/Go_programming_language">Go Wiki Overview</a></p>
<h1 id="naming-convention"><a href="#naming-convention" class="headerlink" title="naming convention"></a>naming convention</h1><p>Go is to use MixedCaps or mixedCaps rather than underscores to write <code>multiword names</code>. </p>
<p><strong>Files</strong>  </p>
<ul>
<li>Go follows a convention where source <code>files are all lower case with underscore separating multiple words</code>, <span style="color:red">client_log.go</span></li>
<li>Compound file names are separated with <code>_</code></li>
<li>Files with the suffix <code>_test.go</code> are only compiled and run by the go test tool.</li>
</ul>
<p><strong>Functions and Methods</strong>  </p>
<ul>
<li>Use camel case, <code>exported functions should start with uppercase</code></li>
<li>If a name consists of multiple words, each word after the first should be capitalized like this: <span style="color:red">empName, EmpAddress</span>, etc.</li>
<li>function names are case-sensitive (car, Car and CAR are three different variables).</li>
</ul>
<p><strong>Constants</strong>  </p>
<ul>
<li>Constant should be capitalized(<strong>camel case like Exported named</strong>). <span style="color:red"> WorldStdEncoding<span></li>
</ul>
<p><strong>Variables</strong>  </p>
<ul>
<li>shouldn’t include the name of your type in the name of your variable’s name, <code>tetMap</code></li>
<li>Generally, use relatively <strong>simple (short) name(lower case), camel case(NOT _ underscore for multiple worlds) long var</strong>.<ul>
<li><span style="color:red">user to u</span></li>
<li><span style="color:red">userID to uid</span></li>
<li><span style="color:red">serverListener</span></li>
<li><span style="color:red">lpcfg</span></li>
</ul>
</li>
<li>If variable type is bool, its name should start with Has, Is, Can or Allow, etc.</li>
<li>Single letter represents index: i, j, k</li>
</ul>
<p><strong>struct interface</strong>  </p>
<ul>
<li>Name of struct or interface <code>should be capitalized and camel case</code> <span style="color:red">type BJSchool struct{}<span></li>
<li><strong><code>method of interface and struct</code></strong> should be capitalized(exported) and camel case <span style="color:red">type School interface{ Name() string }<span></li>
<li><strong><code>field of struct</code></strong> should be low letter starts camel case if not exported, otherwise uppercase <span style="color:red">type School struct { regStudent int }<span></li>
</ul>
<p><strong>import package</strong></p>
<ul>
<li>package name should be lowercase, no camel case. like <span style="color:red">import xxx&#x2F;testhello</span></li>
</ul>
<p><strong>Non-exported struct fields can be accessed only in the same package, can not be accessed by other package.</strong></p>
<h1 id="printing"><a href="#printing" class="headerlink" title="printing"></a>printing</h1><p><strong><a href="https://yourbasic.org/golang/fmt-printf-reference-cheat-sheet/">FMT Print cheat-sheet</a></strong>  </p>
<p>Package <code>fmt</code> implements formatted I&#x2F;O with functions analogous to C’s printf and scanf. The format ‘verbs’ are derived from C’s but are simpler. </p>
<p>In Golang we can use <strong><code>Printf with a special format code</code></strong>. This determines how a string or integer is formatted. <strong><code>Println does not require a format string</code>.</strong></p>
<ul>
<li><strong>Printf</strong>: Must provide the format and <strong><code>support explicit argument indexes, no auto newline</code>.</strong></li>
<li><strong>Println</strong>: <strong>No special format support, auto newline for each output, auto space between arguments</strong>, just use it’s default.</li>
<li><strong>Print</strong>: Print does <strong>not insert a newline after each call and no auto space between arguments</strong>, it just writes the data to the console with no trailing newline, except this, same as <strong>Println</strong>.</li>
</ul>
<p><strong>Above three prints to console while Sxx returns the formated result.</strong></p>
<ul>
<li><strong>Sprintf</strong>: Must provide the format and <strong><code>support explicit argument indexes, No auto newline</code>.</strong></li>
<li><strong>Sprintln</strong>: <code>No special format support, auto newline</code>, just use it’s default.</li>
<li><strong>Sprint</strong>: Print does not insert a newline after each call, it just writes the data to the console with no trailing newline, except this, same as <strong>Sprintln</strong>.</li>
</ul>
<p><strong>Above three prints returns the formated result, while <code>Fxx</code> writes data to io.Writer</strong></p>
<ul>
<li><strong>Fprintf</strong>: Must provide the format and <strong><code>support explicit argument indexes, No auto newline</code>.</strong></li>
<li><strong>Fprintln</strong>: <code>No special format support, auto newline</code>, just use it’s default.</li>
<li><strong>Fprint</strong>: Print does not insert a newline after each call, it just writes the data to the file with no trailing newline, except this, same as <strong>Fprintln</strong>.</li>
</ul>
<hr>
<p><strong>explicit argument index</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := <span class="number">10</span></span><br><span class="line">b := <span class="number">20</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v %v\n&quot;</span>, a, b) <span class="comment">// 10 20</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%[2]v %[1]v\n&quot;</span>, a, b) <span class="comment">// 20 10 argument index</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>default format of each type</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">%c    print for byte and rune only</span><br><span class="line">%q    a single-quoted character literal safely escaped with Go syntax, used for byte,rune and string</span><br><span class="line">%v    the value in a default format</span><br><span class="line">      [when printing struct], the plus flag (%+v) adds field names---&gt;suggested way.</span><br><span class="line">      [when printing struct], the plus flag (%#v) adds field names and struct definition</span><br><span class="line">%T    a Go-syntax representation of the [type of the value] </span><br><span class="line"></span><br><span class="line">The default format for %v is:</span><br><span class="line"></span><br><span class="line">bool:                    %t</span><br><span class="line">int, int8, rune, byte:   %d</span><br><span class="line">uint, uint8 etc.:        %d</span><br><span class="line">float32, complex64, etc: %g</span><br><span class="line">string:                  %s</span><br><span class="line">chan:                    %p</span><br><span class="line">pointer:                 %p</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>print in multiple lines</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="string">`hello</span></span><br><span class="line"><span class="string">world`</span> <span class="comment">// auto enter!!! without \n needed</span></span><br><span class="line"></span><br><span class="line">s := <span class="string">&quot;hello\n&quot;</span> +</span><br><span class="line">     <span class="string">&quot;world&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>%q vs %c vs %s</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="type">byte</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, c)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%c\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">    s := <span class="string">&quot;hello&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, s)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line">a</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure>
<p>More details refer to <a href="https://golang.org/pkg/fmt/">fmt package</a>, <code>like C format, but more simpler to use.</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print_demo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">10</span></span><br><span class="line">    b := <span class="number">20</span></span><br><span class="line">    s := <span class="string">&quot;hello&quot;</span></span><br><span class="line">    </span><br><span class="line">    fmt.Print(a, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    fmt.Print(<span class="string">&quot;Print: no auto space added between arg &quot;</span>, a, s) <span class="comment">// no space bettween each argument</span></span><br><span class="line">    </span><br><span class="line">    fmt.Println()</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Println: each arg is separated by space automatically&quot;</span>, a, s)<span class="comment">//each argument is separated by space</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Println: not support special format:&quot;</span>, a, <span class="string">&quot;not cool&quot;</span>) <span class="comment">// auto new line</span></span><br><span class="line">    </span><br><span class="line">    fmt.Printf(<span class="string">&quot;Printf: support special format: %[2]v %[1]v\n&quot;</span>, a, s) <span class="comment">//argument must be at most right part, mannually new line</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    result := fmt.Sprintf(<span class="string">&quot;Sprintf: support special format: %[2]v %[1]v&quot;</span>, a, b) <span class="comment">// use argument index</span></span><br><span class="line">    fmt.Println(result)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* print array, slice, struct */</span></span><br><span class="line">    slice := []<span class="type">int</span>&#123;<span class="number">999</span>, <span class="number">99</span>, <span class="number">9</span>&#125;</span><br><span class="line">    array := [<span class="number">3</span>]<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">    fmt.Println(slice)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, array)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        name <span class="type">string</span></span><br><span class="line">        id <span class="type">int</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> p1 Person = Person&#123;<span class="string">&quot;jason&quot;</span>, <span class="number">1</span>&#125;</span><br><span class="line">    fmt.Println(p1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, p1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%+v\n&quot;</span>, p1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, p1)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// s = hello</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v %q\n&quot;</span>, s, s)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> s <span class="type">byte</span> = <span class="number">65</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v %q\n&quot;</span>, s, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print_demo()</span><br></pre></td></tr></table></figure>

<pre><code>10
Print: no auto space added between arg 10hello
10
Println: each arg is separated by space automatically 10 hello
Println: not support special format: 10 not cool
Printf: support special format: hello 10
Sprintf: support special format: 20 10
[999 99 9]
[a b c]
&#123;jason 1&#125;
struct &#123; 𒀸name string; 𒀸id int &#125;&#123;𒀸name:&quot;jason&quot;, 𒀸id:1&#125;
&#123;𒀸name:jason 𒀸id:1&#125;
&#123;jason 1&#125;
hello &quot;hello&quot;
65 &#39;A&#39;
</code></pre>
<h1 id="builtin-API"><a href="#builtin-API" class="headerlink" title="builtin API"></a>builtin API</h1><p><code>func append(slice []Type, elems ...Type) []Type</code></p>
<blockquote>
<p>The append built-in function appends elements to <strong>the end of a slice</strong>. If it has sufficient capacity, the destination is resliced to accommodate the new elements. If it <strong>does not sufficient, a new underlying array will be allocated</strong></p>
</blockquote>
<p><code>func cap(v Type) int</code></p>
<blockquote>
<ol>
<li>Array: the number of elements in v (same as len(v)).<br>2.Pointer to array: the number of elements in *v (same as len(v)).<br>3.<code>Slice: the maximum length the slice can reach when resliced, may different with len(slice)</code><br>4.if v is nil, cap(v) is zero.<br>5.<code>Channel: the channel buffer capacity, in units of elements;</code></li>
</ol>
</blockquote>
<p><code>func close(c chan&lt;- Type)</code></p>
<blockquote>
<p>The close built-in function <strong>closes a channel not a file</strong>, which must be either bidirectional or send-only. It should be executed only by the sender, never the receiver, and has the effect of shutting down the channel after the last sent value is received. After the last value has been received from a closed channel c, any receive from c will succeed without blocking, returning the zero value for the channel element</p>
</blockquote>
<p><code>func copy(dst, src []Type) int</code> shadow copy(only the top level is copied)</p>
<blockquote>
<p>The copy built-in function <strong>copies elements from a source slice into a destination slice</strong>. (As a special case, it also will copy bytes from a string to a slice of bytes.) The source and destination may overlap. Copy returns the number of elements copied, which will be the minimum of len(src) and len(dst). </p>
</blockquote>
<p><code>func delete(m map[Type]Type1, key Type)</code>  </p>
<blockquote>
<p><strong>delete element specified by key from a map</strong></p>
</blockquote>
<p><code>func len(v Type) int</code></p>
<blockquote>
<p>1.Array: the number of elements in v.<br>2.Pointer to array: the number of elements in *v (even if v is nil).<br>3.Slice, or map: the number of elements in v; if v is nil, len(v) is zero.<br>4.<code>String: the number of bytes in v</code>.<br>5.<code>Channel: the number of elements queued (unread) in the channel buffer</code>;<br>6.if v is nil, len(v) is zero.</p>
</blockquote>
<p><code>func make(t Type, size ...IntegerType) Type</code></p>
<blockquote>
<p><strong>Can be used only for Slice, Map, Channel</strong>  </p>
</blockquote>
<pre><code>Slice: The size specifies the length. The capacity of the slice is
equal to its length. A second integer argument may be provided to
specify a different capacity; it must be no smaller than the
length. For example, make([]int, 0, 10) allocates an underlying array
of size 10 and returns a slice of length 0 and capacity 10 that is
backed by this underlying array.

Map: An empty map is allocated with enough space to hold the
specified number of elements. The size may be omitted, in which case
a small starting size is allocated.  

Channel: The channel&#39;s buffer is initialized with the specified
buffer capacity. If zero, or the size is omitted, the channel is
unbuffered. 

# for slice, can pass two parameters
s1 = make([]int, 4)   // len=4 and cap = 4
s1 = make([]int, 0, 4)// len=0 and cap = 4

# for map, no one needed
m1 = make(map[string]int)

# for channel, can pass one parameter
c1 = make(chan int)     // buffer size 0(unbuffered)
c2 = make(chan int, 10) // buffer size 10
                                                                                      
</code></pre>
<p><code>func new(Type) *Type</code></p>
<blockquote>
<p>The new built-in function allocates memory. The first argument is a type, not a value, and the value returned is a pointer to a newly allocated zero value of that type. <code>most of time, we does not use it at all</code>.</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">builtin_demo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    s2 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">4</span>)</span><br><span class="line">    fmt.Println(s1, s2)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">copy</span>(s2, s1)</span><br><span class="line">    fmt.Println(s1, s2)</span><br><span class="line">    </span><br><span class="line">    p := <span class="built_in">new</span>(<span class="type">int</span>)</span><br><span class="line">    *p = <span class="number">12</span></span><br><span class="line">    fmt.Println(p, *p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">builtin_demo()</span><br></pre></td></tr></table></figure>

<pre><code>[1 2 3] [0 0 0 0]
[1 2 3] [1 2 3 0]
0xc0009190d0 12
</code></pre>
<h1 id="constants"><a href="#constants" class="headerlink" title="constants"></a>constants</h1><p><strong>untyped value has default type</strong><br>An untyped value means the type of the value has not been confirmed yet. For most untyped values, each of them has one default type, <code>All literal constants (unnamed constants) are untyped values</code>. most untyped values are literal constants and named constants.</p>
<hr>
<p><font color='red'>The default type of a literal constant is determined by its literal form.</font></p>
<ul>
<li>The default type of a string literal is string.</li>
<li>The default type of a boolean literal is bool.</li>
<li>The default type of an <code>integer literal is int.</code></li>
<li>The default type of a <code>rune literal is rune (a.k.a., int32)</code>.</li>
<li>The default type of a floating-point literal is float64.</li>
<li>If a literal contains an imaginary part, then its default type is complex128</li>
</ul>
<h2 id="constant-type"><a href="#constant-type" class="headerlink" title="constant type"></a>constant type</h2><p><strong>unnamed constant(literal constant)</strong>  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">12</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>named constant with untyped value</strong>  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MAX = <span class="number">12</span></span><br></pre></td></tr></table></figure>

<p><strong>named constant with typed value</strong>  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MAX <span class="type">int8</span> = <span class="number">12</span></span><br></pre></td></tr></table></figure>

<h2 id="type-deduction-type-inference"><a href="#type-deduction-type-inference" class="headerlink" title="type deduction(type inference)"></a>type deduction(type inference)</h2><p>Go supports type deduction. In other words, in many circumstances, programmers don’t need to explicitly specify the types of some values in code. Go compilers will deduce the types for these values by context.</p>
<p>In Go code, if a place needs a value of a certain type and <code>an untyped value (often a constant) is representable as a value of the certain type, then the untyped value can be used in the place</code>. Go compilers will view the untyped value as a typed value of the certain type. it can be viewed as <code>implicit conversions</code>.</p>
<h2 id="constant-declaration-way"><a href="#constant-declaration-way" class="headerlink" title="constant declaration way"></a>constant declaration way</h2><p><code>= not := for constant declaration</code></p>
<p><strong>untyped named constant</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare two individual constants. Yes,</span></span><br><span class="line"><span class="comment">// non-ASCII letters can be used in identifiers.</span></span><br><span class="line"><span class="keyword">const</span> π = <span class="number">3.1416</span></span><br><span class="line"><span class="keyword">const</span> Pi = π <span class="comment">// &lt;=&gt; const Pi = 3.1416</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare multiple constants in a group called constant specification can be different types.</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	No         = !Yes</span><br><span class="line">	Yes        = <span class="literal">true</span></span><br><span class="line">	MaxDegrees = <span class="number">360</span></span><br><span class="line">	Unit       = <span class="string">&quot;radian&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// Declare multiple constants in one line. can be different types!!!</span></span><br><span class="line">	<span class="keyword">const</span> TwoPi, HalfPi, Unit2 = π * <span class="number">2</span>, π * <span class="number">0.5</span>, <span class="string">&quot;degree&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>typed named constant</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> X <span class="type">float32</span> = <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	A, B <span class="type">int64</span>   = <span class="number">-3</span>, <span class="number">5</span> <span class="comment">// A and B are same type</span></span><br><span class="line">	Y    <span class="type">float32</span> = <span class="number">2.718</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// If a basic value literal is bound to a typed constant, </span></span><br><span class="line"><span class="comment">// the basic value literal must be representable as a value of the type of the constant.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// error: 256 overflows uint8</span></span><br><span class="line"><span class="keyword">const</span> a <span class="type">uint8</span> = <span class="number">256</span></span><br><span class="line"><span class="keyword">const</span> MaxUint <span class="type">uint</span> = (<span class="number">1</span> &lt;&lt; <span class="number">64</span>) - <span class="number">1</span> <span class="comment">// error on 32-bit as (1 &lt;&lt; 64) - 1 is not representable as 32-bit values</span></span><br></pre></td></tr></table></figure>
<h3 id="Autocomplete-in-constant-declarations"><a href="#Autocomplete-in-constant-declarations" class="headerlink" title="Autocomplete in constant declarations"></a>Autocomplete in constant declarations</h3><p>In a group-style constant declaration, except the first constant specification, other constant specifications can be incomplete. An incomplete constant specification doesn’t contain the &#x3D; symbol. <strong><code>Compilers will autocomplete the incomplete lines for us by copying the missing part from the first preceding complete constant specification</code>.</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	X <span class="type">float32</span> = <span class="number">3.14</span></span><br><span class="line">	Y           <span class="comment">// here must be one identifier, Y has same like X.</span></span><br><span class="line"></span><br><span class="line">	A, B = <span class="string">&quot;Go&quot;</span>, <span class="string">&quot;language&quot;</span></span><br><span class="line">	C, _</span><br><span class="line">	<span class="comment">// In the above line, the blank identifier is required to be present.!!!</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<p>iota is a special value controlled by compiler, <strong>its value is reset to 0 for <code>each const keyword</code> the first constant line of group</strong>, and increased by 1 for each appearance before <code>next const keyword</code>.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> (</span><br><span class="line">		k = <span class="number">3</span> <span class="comment">// now, iota == 0</span></span><br><span class="line"></span><br><span class="line">		m <span class="type">float32</span> = <span class="literal">iota</span> + <span class="number">.5</span> <span class="comment">// m float32 = 1 + .5</span></span><br><span class="line">		n                     <span class="comment">// n float32 = 2 + .5</span></span><br><span class="line"></span><br><span class="line">		p = <span class="number">9</span>             <span class="comment">// now, iota == 3</span></span><br><span class="line">		q = <span class="literal">iota</span> * <span class="number">2</span>      <span class="comment">// q = 4 * 2</span></span><br><span class="line">		_                 <span class="comment">// _ = 5 * 2</span></span><br><span class="line">		r                 <span class="comment">// r = 6 * 2</span></span><br><span class="line">		s, t = <span class="literal">iota</span>, <span class="literal">iota</span> <span class="comment">// s, t = 7, 7   iota has the same vale on the same line</span></span><br><span class="line">		u, v              <span class="comment">// u, v = 8, 8</span></span><br><span class="line">		_, w              <span class="comment">// _, w = 9, 9</span></span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> x = <span class="literal">iota</span> <span class="comment">// x = 0</span></span><br><span class="line">	<span class="keyword">const</span> (</span><br><span class="line">		y = <span class="literal">iota</span> <span class="comment">// y = 0</span></span><br><span class="line">		z        <span class="comment">// z = 1</span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span> <span class="comment">// a == 1</span></span><br><span class="line">    b = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span> <span class="comment">// b == 2</span></span><br><span class="line">    c = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span> <span class="comment">// c == 4</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Same as above</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span> <span class="comment">// a == 1</span></span><br><span class="line">    b</span><br><span class="line">    c</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	Failed = <span class="literal">iota</span> - <span class="number">1</span> <span class="comment">// == -1</span></span><br><span class="line">	Unknown           <span class="comment">// == 0</span></span><br><span class="line">	Succeeded         <span class="comment">// == 1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>NOTE</strong>  </p>
<ul>
<li>Constants are declared like variables, but with the <code>const keyword</code>.</li>
<li>Constants can be <code>character, string, boolean, or numeric values</code>.</li>
<li>Constants <strong>can NOT be declared using the :&#x3D; syntax.</strong></li>
<li>This is <strong>no enum in GO, use const instead</strong></li>
<li>Constants can be declared both at package level and function bodies.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// like enum</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Sunday = <span class="literal">iota</span> <span class="comment">// Sunday == 0</span></span><br><span class="line">    Monday        <span class="comment">// Monday == 1</span></span><br><span class="line">    Tuesday</span><br><span class="line">    Wednesday</span><br><span class="line">    Thursday</span><br><span class="line">    Friday</span><br><span class="line">    Saturday</span><br><span class="line">    numberOfDays</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Pi = <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">constanDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;day %v\n&quot;</span>, Sunday)</span><br><span class="line">    <span class="keyword">const</span> World = <span class="string">&quot;world&quot;</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello&quot;</span>, World)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Happy&quot;</span>, Pi, <span class="string">&quot;Day&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Truth = <span class="literal">true</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Go rules?&quot;</span>, Truth)</span><br><span class="line">    <span class="keyword">const</span> Ch <span class="type">byte</span> = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Char&quot;</span>, Ch)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Char %c&quot;</span>, Ch)</span><br><span class="line">&#125;</span><br><span class="line">constanDemo()</span><br></pre></td></tr></table></figure>

<pre><code>day 0
Hello world
Happy 3.14 Day
Go rules? true
Char 97
Char a
</code></pre>
<h1 id="variable"><a href="#variable" class="headerlink" title="variable"></a>variable</h1><p>All variables are typed values. <code>When declaring a variable, there must be sufficient information provided for compilers to deduce the type of the variable</code></p>
<p>There are two basic variable declaration forms, the standard one and the short one. <code>The short form can only be used to declare local variables</code></p>
<hr>
<p><strong>NOTE</strong>  </p>
<ul>
<li><font color='red'>var is not needed for declaration like in struct, function parameter, function return value</font></li>
<li>var is a must when declare global variable, optional for local variable.</li>
<li>All variables are addressable and all constants are unaddressable</li>
<li>Go doesn’t support assignment chain, like this a &#x3D; b &#x3D; 123.</li>
</ul>
<hr>
<p><strong>Suggestion</strong></p>
<ul>
<li>constant, use <code>const statement not var statement</code></li>
<li>global variable, use <code>var statement</code></li>
<li>local variable, but <code>no need explicit initialization(default value), use var statement</code></li>
<li>local variable, <code>needs initialization, use := statement</code></li>
<li>with assignment at declaration, always use short way.</li>
</ul>
<p><font color='red'>As Go is compiled language, hence we must know the type of each variable at declaration either by explicit or implicit(assigned value), the type of variable is determined at declaration, can’t be change during running!!!</font></p>
<p><strong>When declaring a variable without specifying an explicit type (either by using the :&#x3D; syntax or var &#x3D; expression syntax), the variable’s type is inferred from the value on the right hand side</strong></p>
<h2 id="standard-way"><a href="#standard-way" class="headerlink" title="standard way"></a>standard way</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lang, website <span class="type">string</span> = <span class="string">&quot;Go&quot;</span>, <span class="string">&quot;https://golang.org&quot;</span></span><br><span class="line"><span class="keyword">var</span> compiled, dynamic <span class="type">bool</span> = <span class="literal">true</span>, <span class="literal">false</span></span><br><span class="line"><span class="keyword">var</span> announceYear <span class="type">int</span> = <span class="number">2009</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var of annymous struct type</span></span><br><span class="line"><span class="comment">// g is a variable of struct type who has one field.</span></span><br><span class="line"><span class="keyword">var</span> g <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var of function type</span></span><br><span class="line"><span class="keyword">var</span> g <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> g <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c, d = <span class="number">1</span>, <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">var</span> next = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	lang, bornYear, compiled     = <span class="string">&quot;Go&quot;</span>, <span class="number">2007</span>, <span class="literal">true</span></span><br><span class="line">	announceAt, releaseAt    <span class="type">int</span> = <span class="number">2009</span>, <span class="number">2012</span></span><br><span class="line">	createdBy, website       <span class="type">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g <span class="comment">// error as no way to know the type at declaration</span></span><br><span class="line"><span class="keyword">var</span> a, b <span class="type">int</span></span><br><span class="line">a = b = <span class="number">123</span> <span class="comment">// syntax error, Go doesn&#x27;t support assignment chain</span></span><br></pre></td></tr></table></figure>
<h2 id="short-way"><a href="#short-way" class="headerlink" title="short way"></a>short way</h2><p>Short variable declarations can only be used to declare local variables.</p>
<p>There are several differences between short and standard variable declarations.</p>
<ul>
<li>In the short declaration form, the var keyword and variable types must be omitted.</li>
<li>The assignment sign must be :&#x3D; instead of &#x3D;.</li>
<li>In the short variable declaration, <code>old variables and new variables can mix at the left of :=. But there must be at least one new variable at the left.</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// Both lang and year are newly declared.</span></span><br><span class="line">	lang, year := <span class="string">&quot;Go language&quot;</span>, <span class="number">2007</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Only createdBy is a new declared variable.</span></span><br><span class="line">	<span class="comment">// The year variable has already been</span></span><br><span class="line">	<span class="comment">// declared before, so here its value is just</span></span><br><span class="line">	<span class="comment">// modified, or we can say it is redeclared.</span></span><br><span class="line">	year, createdBy := <span class="number">2009</span>, <span class="string">&quot;Google Research&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="literal">true</span> &#123;</span><br><span class="line">        <span class="comment">// both month, year are new within this scope</span></span><br><span class="line">        month, year:=<span class="number">12</span>, <span class="number">2006</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fmt.Println(year) <span class="comment">// it&#x27;s still 2009!!!</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">// This is a pure assignment.</span></span><br><span class="line">	lang, year = <span class="string">&quot;Go&quot;</span>, <span class="number">2012</span></span><br><span class="line">    </span><br><span class="line">    nextYear := year <span class="comment">// same type as year</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>NOTE :&#x3D; declare all new variables left, not part of it</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// for scope</span></span><br><span class="line">    <span class="keyword">for</span> i, e := <span class="keyword">range</span> a &#123;</span><br><span class="line">        <span class="comment">// i is a new var with scope for!!!</span></span><br><span class="line">        fmt.Println(i, e)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;=================&quot;</span>)</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">go</span> run  test.<span class="keyword">go</span></span><br><span class="line"><span class="number">0</span> a</span><br><span class="line"><span class="number">1</span> b</span><br><span class="line"><span class="number">2</span> c</span><br><span class="line">=================</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="default-value-of-each-type-without-explicit-initialization"><a href="#default-value-of-each-type-without-explicit-initialization" class="headerlink" title="default value of each type(without explicit initialization)"></a>default value of each type(without explicit initialization)</h2><p>Variables declared <code>without an explicit initial value</code> are given their <code>zero value</code>, you can access var with zero directly, one except is for map, <code>you can NOT modify nil map</code>!!</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span> <span class="comment">// nil map</span></span><br><span class="line">m[<span class="string">&quot;a&quot;</span>] = <span class="number">12</span> <span class="comment">// panic!!!</span></span><br><span class="line"></span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;&#125; <span class="comment">// empty map</span></span><br><span class="line">m[<span class="string">&quot;a&quot;</span>] = <span class="number">12</span> <span class="comment">// it&#x27;s ok</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s []<span class="type">int</span> <span class="comment">// nil slice</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">1</span>)<span class="comment">// it&#x27;s ok!!!</span></span><br><span class="line"></span><br><span class="line">s := []<span class="type">int</span>&#123;&#125; <span class="comment">// empty slice</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">1</span>) <span class="comment">// ok as well</span></span><br></pre></td></tr></table></figure>

<p><strong><code>zero</code> value for each type</strong>  </p>
<ul>
<li>0 for numeric types,</li>
<li>false for the boolean type</li>
<li>“” (the empty string) for string.</li>
<li>nil for pointer</li>
<li>nil for function type</li>
<li>nil, but len(map) &#x3D;&#x3D; 0</li>
<li>nil, but len(slice) &#x3D;&#x3D; 0</li>
<li>zero value for all fields for struct instance</li>
</ul>
<h2 id="variable-initialization-order"><a href="#variable-initialization-order" class="headerlink" title="variable initialization order"></a>variable initialization order</h2><p>When a variable depends on another variable b, b should be defined beforehand, else program won’t compile. <code>Go follows this rule inside functions</code>. <strong>but it’s not true for global variable.</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = b <span class="comment">// it&#x27;s ok</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">int</span> = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> c <span class="type">int</span> = d <span class="comment">// error</span></span><br><span class="line">    <span class="keyword">var</span> d <span class="type">int</span> = <span class="number">12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="pointer"><a href="#pointer" class="headerlink" title="pointer"></a>pointer</h2><p>The type <code>*T</code> is a pointer to a <code>T</code> type.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p *<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//The &amp; operator generates a pointer to its operand.</span></span><br><span class="line"></span><br><span class="line">i := <span class="number">42</span></span><br><span class="line">p = &amp;i</span><br><span class="line"></span><br><span class="line">fmt.Println(*p) <span class="comment">// read i through the pointer p</span></span><br><span class="line">*p = <span class="number">21</span>         <span class="comment">// set i through the pointer p</span></span><br></pre></td></tr></table></figure>

<h2 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h2><p>A variable or a named constant declared in an inner code block will shadow the variables and constants declared with the same name in outer code blocks.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> y = <span class="number">789</span></span><br><span class="line"><span class="keyword">var</span> x <span class="type">int</span> = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// The x variable shadows the above declared</span></span><br><span class="line">	<span class="comment">// package-level variable x.</span></span><br><span class="line">	<span class="keyword">var</span> x = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// A nested code block.</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Here, the left x and y are both</span></span><br><span class="line">		<span class="comment">// new declared variable. The right</span></span><br><span class="line">		<span class="comment">// ones are declared in outer blocks.</span></span><br><span class="line">		x, y := x, y</span><br><span class="line"></span><br><span class="line">		<span class="comment">// In this code block, the just new</span></span><br><span class="line">		<span class="comment">// declared x and y shadow the outer</span></span><br><span class="line">		<span class="comment">// declared same-name identifiers.</span></span><br><span class="line">		x, z := !x, y/<span class="number">10</span> <span class="comment">// only z is new declared</span></span><br><span class="line">		y /= <span class="number">100</span></span><br><span class="line">		<span class="built_in">println</span>(x, y, z) <span class="comment">// false 7 78</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">println</span>(x) <span class="comment">// true</span></span><br><span class="line">	<span class="built_in">println</span>(z) <span class="comment">// error: z is undefined.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ga, gb = <span class="number">1</span>, <span class="string">&quot;global b&quot;</span> <span class="comment">// implicit type</span></span><br><span class="line"><span class="keyword">var</span> gc, gd <span class="type">int</span>            <span class="comment">// must explicit type as no assignment</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">var_demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    gc = <span class="number">10</span></span><br><span class="line">    gd = <span class="number">20</span></span><br><span class="line">    </span><br><span class="line">    la, lb := <span class="string">&quot;local a&quot;</span>, <span class="number">30</span>  <span class="comment">// implicit type</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// lb = &quot;hi&quot; error as lb has type int!!!</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> lc <span class="type">string</span>            <span class="comment">// must explicit type as no assignment</span></span><br><span class="line">    lc = <span class="string">&quot;local c&quot;</span></span><br><span class="line">    fmt.Println(ga, gb, gc, gd, la, lb, lc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_demo()</span><br></pre></td></tr></table></figure>

<pre><code>1 global b 10 20 local a 30 local c
</code></pre>
<h1 id="types"><a href="#types" class="headerlink" title="types"></a>types</h1><p>Get Max value of integer, use <code>math</code> lib which provides Max of Int8, Int16, Int32, Int64, Int and unsigned version as well.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//do it by yourself</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MaxUint = ^<span class="type">uint</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h2 id="conversion"><a href="#conversion" class="headerlink" title="conversion"></a>conversion</h2><p><strong>Identical types, no need for conversion</strong></p>
<p>Two types are identical if their underlying type literals are structurally equivalent; that is, they have the same literal structure and corresponding components have identical types. In detail:</p>
<ul>
<li><p>Two array types are identical if they have identical element types and the same array length.</p>
</li>
<li><p>Two slice types are identical if they have identical element types.</p>
</li>
<li><p><code>Two struct types are identical if they have the same sequence of fields, and if corresponding fields have the same names, and identical types, and identical tags. Non-exported field names from different packages are always different.</code></p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A_ID <span class="type">int</span></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">    id A_ID</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B_ID <span class="type">int</span></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">    id B_ID</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// A and B are different type!!</span></span><br></pre></td></tr></table></figure>
<hr>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// A and B are same type</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Two pointer types are identical if they have identical base types.</p>
</li>
<li><p><code>Two function types are identical if they have the same number of parameters and result values, corresponding parameter and result types are identical, and either both functions are variadic or neither is. Parameter and result names are not required to match</code>.</p>
</li>
<li><p>Two interface types are identical if they have the same set of methods with the same names and identical function types. Non-exported method names from different packages are always different. The order of the methods is irrelevant.</p>
</li>
<li><p>Two map types are identical if they have identical key and element types.</p>
</li>
<li><p>Two channel types are identical if they have identical element types and the same direction.</p>
</li>
</ul>
<p><strong>Different types</strong><br>Unlike in C, in Go <strong><code>assignment between different types(if possible) requires an explicit conversion</code></strong>, there are two ways to use explicit type conversion, other different types can NOT be converted.</p>
<hr>
<ul>
<li>number: int() uint()</li>
<li>number&lt;—&gt;string: <code>strconv.Atoi(&quot;12&quot;), strconv.Itoa(12)</code> Or <code>fmt.Sprintf(&quot;%v&quot;,12)</code></li>
</ul>
<p>you can <strong>Convert int to string in this way, the result may be not what you want <code> j := string(97), j is &quot;a&quot; not &quot;97&quot;</code></strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;strconv&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testp</span><span class="params">(x *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">//x is a pointer</span></span><br><span class="line">    *x = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(x <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// x is copy, value passed</span></span><br><span class="line">    x = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">typeDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">12</span></span><br><span class="line">    <span class="comment">// convert int to uint</span></span><br><span class="line">    <span class="keyword">var</span> b <span class="type">uint</span> = <span class="type">uint</span>(a)</span><br><span class="line">    </span><br><span class="line">    s := strconv.Itoa(<span class="number">10</span>)</span><br><span class="line">    c, _ := strconv.Atoi(<span class="string">&quot;20&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    fmt.Println(a, b, s, c)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    testp(&amp;a)</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">    test(a)</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">typeDemo()</span><br></pre></td></tr></table></figure>

<pre><code>12 12 10 20
20
20
</code></pre>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := A&#123;name: <span class="string">&quot;jack&quot;</span>&#125;</span><br><span class="line">    <span class="comment">// B and A are same type, can convert to each other!!!</span></span><br><span class="line">    <span class="keyword">var</span> b B = B(a)</span><br><span class="line"></span><br><span class="line">    fmt.Println(b.name)</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>jack
</code></pre>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A_ID <span class="type">int</span></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">    id A_ID</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B_ID <span class="type">int</span></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">    id B_ID</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := A&#123;id: <span class="number">100</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> b B = B(a)</span><br><span class="line"></span><br><span class="line">    fmt.Println(b.id)</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>100
</code></pre>
<h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p><font color='red'>A string is a struct that has a length and a pointer to a byte array</font>. When you pass a string to another function, it copies the length and the pointer. As a consequence, the new copied string points to the same underlying data.</p>
<p>each element of string is a <code>byte</code> like <code>s[0]</code>, <strong>string is immutable</strong>, <code>you can NOT modify it in place</code></p>
<hr style="border:1px solid gray"> </hr>

<p><strong>Create a string</strong></p>
<ul>
<li>var s string</li>
<li>var s &#x3D; “hello”</li>
<li>s :&#x3D; “hello”</li>
<li>var s &#x3D; strconv.Itoa(12): Int to string: “12”</li>
<li>string(97): 97 is “a”, so “a” is printed</li>
</ul>
<hr style="border:1px solid gray"> </hr>

<p><strong>Ops</strong></p>
<ul>
<li>s[0], s[0] is <code>byte</code> type!!!</li>
<li>last element <code>s[len(s)-1]</code>, <strong>s[-1] NOT supported</strong></li>
<li>s[0:3]</li>
<li>s +&#x3D; “extend it”</li>
<li>string([]byte{56,57}) &#x2F;&#x2F; convert byte slice to string, new memory is created!!!</li>
<li>string(slice)</li>
<li>support s1 &#x3D;&#x3D; s2</li>
<li><code>for _, c:= range s &#123;&#125;</code> c is rune type!!!</li>
</ul>
<hr style="border:1px solid gray"> </hr>

<ul>
<li><strong>string itself does not have method like <code>Find, Match</code> while  <code>strings</code> library provides ops for it</strong></li>
<li><strong>Can NOT convert array to string but slice is allowed.</strong>  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ar :=[<span class="number">2</span>]<span class="type">byte</span>&#123;<span class="number">56</span>,<span class="number">57</span>&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(ar)) <span class="comment">//error</span></span><br><span class="line">fmt.Println(<span class="type">string</span>(ar[:])) <span class="comment">// copy array to slice</span></span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testp</span><span class="params">(s *<span class="type">string</span>)</span></span> &#123; <span class="comment">// string pointers points to argument</span></span><br><span class="line">    fmt.Println(s, *s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(s <span class="type">string</span>)</span></span> &#123; <span class="comment">// no copy just like pointer, points to same memory</span></span><br><span class="line">    fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    s := <span class="string">&quot;hello&quot;</span></span><br><span class="line">    b := s  <span class="comment">// b and s points to same memory, but can NOT modified.</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%c %s %v %v\n&quot;</span>, s[<span class="number">0</span>], s[<span class="number">0</span>:<span class="number">3</span>], &amp;s, &amp;b)</span><br><span class="line">    testp(&amp;b)</span><br><span class="line">    test(b)</span><br><span class="line">    </span><br><span class="line">    sc := []<span class="type">byte</span>(<span class="string">&quot;boy&quot;</span>) <span class="comment">// convert string to byte slice</span></span><br><span class="line">    </span><br><span class="line">    s = <span class="type">string</span>(sc) <span class="comment">// convert byte slice to a string</span></span><br><span class="line">    fmt.Println(s)</span><br><span class="line">    </span><br><span class="line">    s = <span class="string">`hello</span></span><br><span class="line"><span class="string">world`</span></span><br><span class="line">    <span class="comment">// multiple lines</span></span><br><span class="line">    fmt.Println(s)</span><br><span class="line">    </span><br><span class="line">    s1 := <span class="string">&quot;hello&quot;</span></span><br><span class="line">    s2 := <span class="string">&quot;hello&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> s1 == s2 &#123; <span class="comment">// compare two strings</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;string equal&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// default format for rune is %d!!!</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T, %c, %v\n&quot;</span>,s1[<span class="number">1</span>], s1[<span class="number">1</span>], s1[<span class="number">1</span>])</span><br><span class="line">    fmt.Println(<span class="built_in">len</span>(s1))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stringDemo()</span><br></pre></td></tr></table></figure>

<pre><code>h hel 0xc0004df3e0 0xc0004df400
0xc0004df400 hello
hello
boy
hello
world
string equal
uint8, e, 101
5
</code></pre>
<h2 id="array-and-slice"><a href="#array-and-slice" class="headerlink" title="array and slice"></a>array and slice</h2><p>Like C an array has an unique type, <strong>initialize with {}</strong>, <code>arrays cannot be resized, size is fixed at initialization</code>, index from 0 like C.  </p>
<ul>
<li>Arrays are values. <code>Assigning one array to another copies all its elements.</code></li>
<li>In particular, if you <strong><code>pass an array to a function, it will receive a copy of the array</code></strong>, not a pointer to it.</li>
<li>The size of an array is part of its type. The types <code>[10]int and [20]int are distinct type</code>.</li>
</ul>
<hr style="border:1px solid gray"> </hr>

<p><strong>slice and array conversion</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//---------------array to slice(no need to define slice firstly)--------------------                             </span></span><br><span class="line">  <span class="keyword">var</span> arr1 = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;                                                      </span><br><span class="line">   </span><br><span class="line">  <span class="comment">// ss is slice</span></span><br><span class="line">  ss := arr1[:] <span class="comment">// points to same memory!!!</span></span><br><span class="line">  ss[<span class="number">0</span>] = <span class="number">4</span>     <span class="comment">// arr1 changed as well.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// copy element from array to slice(new memory)</span></span><br><span class="line">  s := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">2</span>)                                                             </span><br><span class="line">  <span class="built_in">copy</span>(s[:], arr1[:]) <span class="comment">// s and arr1 points to different memory                    </span></span><br><span class="line">  <span class="comment">//copy(s[:], arr1[:1]), s does not extend even if arr1 is larger                </span></span><br><span class="line">  fmt.Println(s)                                                                  </span><br><span class="line">                                                                                  </span><br><span class="line"><span class="comment">//---------------slice to array(need to define array firstly)--------------------                             </span></span><br><span class="line">                                                                                  </span><br><span class="line">  sc := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;                                                            </span><br><span class="line">  <span class="keyword">var</span> arr2 [<span class="number">3</span>]<span class="type">int</span>                                                                 </span><br><span class="line">  <span class="built_in">copy</span>(arr2[:], sc[:]) <span class="comment">// copy all      </span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//copy(arr2[:], sc[:2]) // copy part                                            </span></span><br><span class="line">  fmt.Println(arr2)                       </span><br></pre></td></tr></table></figure>

<hr style="border:1px solid gray"> </hr>

<p><strong>Create an array</strong></p>
<ul>
<li>var arr [3]int: all zero</li>
<li>arr :&#x3D; [3]int{1, 2, 3}</li>
<li>arr :&#x3D; [3]int{}: all zero</li>
<li>var arr [3]interface{} &#x2F;&#x2F; array of any type</li>
<li><strong>arr :&#x3D; [3]interface{}{}</strong></li>
<li><strong>arr :&#x3D; [3]interface{}{“a”, 2, 1} array of any type</strong></li>
</ul>
<hr style="border:1px solid gray"> </hr>

<p><strong>array of maps</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// each element of the array is a map.</span></span><br><span class="line"><span class="keyword">var</span> ts = [<span class="number">2</span>]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;&#123;&#125;, &#123;&#125;&#125;</span><br><span class="line">ts[<span class="number">0</span>][<span class="string">&quot;a&quot;</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//OR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ts [<span class="number">2</span>]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line"><span class="comment">// must create empty map</span></span><br><span class="line">ts[<span class="number">0</span>] = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">ts[<span class="number">1</span>] = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">ts[<span class="number">0</span>][<span class="string">&quot;a&quot;</span>] = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<hr style="border:1px solid gray"> </hr>

<p><strong>Ops</strong></p>
<ul>
<li>arr[0]</li>
<li>last element: arr[len(arr) - 1]</li>
<li>arr[0:3] <strong>not include arr[3]</strong></li>
<li>for i, v :&#x3D; range arr {fmt.Println(v)}</li>
<li>arr &#x3D; append(arr, ‘a’, ‘b’) &#x2F;&#x2F;arr may point to new memory!!!</li>
<li>arr &#x3D; <strong>append(arr, another_arr…)</strong> &#x2F;&#x2F; link two arrays</li>
</ul>
<hr style="border:1px solid gray"> </hr>

<h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p>An array has <code>a fixed size must be provided at declaration</code>. A slice, on the other hand, <code>is a dynamically-sized, flexible view into the elements of an array</code>. In practice, slices are much more common than arrays.</p>
<p>A slice is formed by specifying two indexes, a low and high bound(<code>not included</code>), separated by a colon:<br><code>a[low:high]</code></p>
<p>you may omit the high or low bounds to use their defaults instead. <code>The default is zero for the low bound and the length of the slice for the high bound.</code></p>
<p><strong>These slice expressions are equivalent:</strong>  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a[<span class="number">0</span>:<span class="number">10</span>] == a[:<span class="number">10</span>]</span><br><span class="line">a[<span class="number">0</span>:] == [:]</span><br></pre></td></tr></table></figure>

<p><strong>A slice does not store any data, it just describes a section of an underlying array</strong>, <font color='red'>Slices are like references to arrays</font></p>
<p>Changing the elements of a slice modifies the corresponding elements of its underlying array. </p>
<p>The <strong>underlying array is dynamic and can be enlarged(or reduced to smaller one)</strong> to a new larger array(may larger than real elements) if append to a slice, hence a slice has both a length and a capacity.</p>
<p><strong>The length of a slice is the number of elements it contains.</strong></p>
<p><strong>The capacity of a slice is the number of elements in the underlying array, counting from the first element in the slice.</strong></p>
<p>The length and capacity of a slice s can be obtained using the expressions <code>len(s) and cap(s)</code>. </p>
<hr style="border:1px solid gray"> </hr>

<p><strong>Create a slice</strong></p>
<ul>
<li>var sc []int</li>
<li>sc :&#x3D; []int{1, 2}, nsc &#x3D; sc[:] &#x2F;&#x2F; nsc and sc point to same underlaying memory</li>
<li>sc :&#x3D; []byte(“hello”) &#x2F;&#x2F; byte slice from string</li>
<li>sc :&#x3D; make([]int, 0, 5)</li>
<li>arr :&#x3D; [10]int{}; sc :&#x3D; arr[1:5]; sc :&#x3D; arr[:], sc and arr points to same memory</li>
<li><strong>sc :&#x3D; []interface{}{}</strong></li>
<li><strong>sc :&#x3D; []interface{}{“a”, 1}</strong> slice of any type.</li>
<li><code>func test(sp *[] int)</code> pointer to slice!!!</li>
</ul>
<hr style="border:1px solid gray"> </hr>

<p><strong>Create a slice of map, each slice element is a map</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// slice with 0 element</span></span><br><span class="line"><span class="keyword">var</span> ts = []<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line"><span class="comment">//OR</span></span><br><span class="line">ts := <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// slice with 1 map</span></span><br><span class="line">ts = <span class="built_in">append</span>(ts, <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;&#125;)</span><br><span class="line">ts[<span class="number">0</span>][<span class="string">&quot;a&quot;</span>] = <span class="number">1</span></span><br><span class="line"><span class="comment">// slice with 2 maps</span></span><br><span class="line">ts = <span class="built_in">append</span>(ts, <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;&#125;)</span><br><span class="line">ts[<span class="number">1</span>][<span class="string">&quot;b&quot;</span>] = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<hr style="border:1px solid gray"> </hr>

<p><strong>Ops</strong></p>
<ul>
<li>sc[0]</li>
<li>last element: sc[len(sc) - 1]</li>
<li>sc[0:3]</li>
<li>for i, v :&#x3D; range sc {fmt.Println(v)}</li>
<li>sc &#x3D; append(sc, 12) &#x2F;&#x2F; sc may point to new memory!!!</li>
<li>sc &#x3D; append(sc, 12, 13) &#x2F;&#x2F; sc may point to new memory!!!</li>
<li>sc &#x3D; <strong>append(sc, another_sc…)</strong> &#x2F;&#x2F; sc may point to new memory!!!</li>
<li>inset element at index <code>sc = append(sc[:index+1], orig[sc:]...) orig[index] = value</code></li>
<li>remove element at index <code>sc = append(sc[:index], sc[index+1:]...)</code></li>
</ul>
<hr style="border:1px solid gray"> </hr>

<p><strong>Note</strong></p>
<ul>
<li>For append(), <strong><code>If the backing array of s is too small to fit all the given values a bigger array will be allocated</code></strong>. The <code>returned slice</code> will point to the <strong>newly allocated array</strong>.</li>
<li><strong>New element is put at the end of len, may overwrite underlaying array if it’s part of it</strong></li>
<li><strong>empty slice is nil with len &#x3D;&#x3D; 0 but len(s)&#x3D;&#x3D;0, s may be not nil</strong><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s2 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">len</span>(s2) == <span class="number">0</span> <span class="comment">// but s2 is not nil!!</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr style="border:1px solid gray"> </hr>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    b := s[<span class="number">0</span>:<span class="number">3</span>] <span class="comment">// here b and s shared the same underlaying</span></span><br><span class="line"></span><br><span class="line">    b = <span class="built_in">append</span>(b, <span class="number">6</span>) <span class="comment">// append at b[3] as len of b is 3!!!</span></span><br><span class="line">	fmt.Println(s)</span><br><span class="line">	fmt.Println(b) <span class="comment">// b and s still shares the same underlaying array, hence 4 is replaced with 6</span></span><br><span class="line">    </span><br><span class="line">	b = <span class="built_in">append</span>(b, <span class="number">7</span>)</span><br><span class="line">	fmt.Println(s)  <span class="comment">// b and s still shares the same underlaying array, hence 5 is replaced with 7</span></span><br><span class="line">	fmt.Println(b)</span><br><span class="line">	</span><br><span class="line">	b = <span class="built_in">append</span>(b, <span class="number">8</span>) <span class="comment">// a new larger underlay array is created and returned</span></span><br><span class="line">	fmt.Println(s)   <span class="comment">// s still points to old underlaying array, b points to newly allocated array</span></span><br><span class="line">	fmt.Println(b)   </span><br><span class="line">    </span><br><span class="line">	b = <span class="built_in">append</span>(b, <span class="number">9</span>)</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">	fmt.Println(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">6</span> <span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">6</span> <span class="number">7</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">6</span> <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">6</span> <span class="number">7</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">6</span> <span class="number">7</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br></pre></td></tr></table></figure>

<p><font color='red' size=4><strong>how slice cap change</strong></font><br>every slice has an underlying array, an array may be shared among several slices. If the new slice’s length will exceed the array’s capacity, a new array will be created for the new slice. <strong>Usually new capacity will be two times old capacity</strong></p>
<p><code>cap(s), count elements from the beginning of slice to the end of underlay memory.</code></p>
<p><img src="https://i.stack.imgur.com/mwulG.png"></p>
<p><code>make([]byte, 5)</code><br><img src="https://i.stack.imgur.com/p2eqp.png"></p>
<p><code>s = s[2:4], cap(s) == 3</code></p>
<p><strong>Go only supports move start of underlaying array, but the end, the first two is dropped, memory is recycled!!!</strong></p>
<p><img src="https://i.stack.imgur.com/7GnUF.png"></p>
<p><code>s = s[:3], cap(s) == 5!!! </code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main                                                                    </span><br><span class="line">                                                                                  </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span>                                                                    </span><br><span class="line">                                                                                  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;                                                                   </span><br><span class="line">    b := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">10</span>)                                                       </span><br><span class="line">    fmt.Println(<span class="built_in">cap</span>(b)) <span class="comment">//10                                                    </span></span><br><span class="line">    s1 := b[:<span class="number">5</span>]                                                                 </span><br><span class="line">    fmt.Println(<span class="built_in">cap</span>(s1)) <span class="comment">//10                                                   </span></span><br><span class="line">    s2 := s1[<span class="number">1</span>:]                                                                </span><br><span class="line">    fmt.Println(<span class="built_in">cap</span>(s2)) <span class="comment">//9                                                    </span></span><br><span class="line">    s3 := b[<span class="number">5</span>:]                                                                 </span><br><span class="line">    fmt.Println(<span class="built_in">cap</span>(s3)) <span class="comment">//5                                                    </span></span><br><span class="line">&#125;               </span><br></pre></td></tr></table></figure>

<hr>
<p><strong>NOTE</strong></p>
<ul>
<li>It’s ok to loop a nil slice, same thing for map as well<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n []<span class="type">int</span>                                                                 </span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> n &#123;                                                       </span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, i)<span class="comment">// nothing print as n is nil                                              </span></span><br><span class="line">&#125;         </span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(sc [] <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// slice is refernece to array, </span></span><br><span class="line">    <span class="comment">// sc passed with its header(passed value) </span></span><br><span class="line">    <span class="comment">// which has a pointer to array memory and length field, append here will not be seen by caller as length is value passed.</span></span><br><span class="line">    sc[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">arraySliceDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">    <span class="comment">//arr := [5]int&#123;2, 2, 3, 4, 5&#125;</span></span><br><span class="line">    fmt.Println(arr, arr[<span class="built_in">len</span>(arr)<span class="number">-1</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// slice of array</span></span><br><span class="line">    <span class="keyword">var</span> s []<span class="type">int</span> = arr[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">    s[<span class="number">0</span>] =<span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    b := s <span class="comment">// b and s shared the same underlaying array</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// the underlaying array is changed as well</span></span><br><span class="line">    fmt.Println(arr, s, <span class="built_in">cap</span>(s), <span class="built_in">len</span>(s))</span><br><span class="line">    </span><br><span class="line">    s = []<span class="type">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line">    fmt.Println(s, <span class="built_in">cap</span>(s), <span class="built_in">len</span>(s))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// append supports add more value to slice</span></span><br><span class="line">    s = <span class="built_in">append</span>(s, <span class="number">60</span>, <span class="number">70</span>) <span class="comment">// an new array is allocated and slice points to that</span></span><br><span class="line">    fmt.Println(s, <span class="built_in">cap</span>(s), <span class="built_in">len</span>(s))</span><br><span class="line">    </span><br><span class="line">    s = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">5</span>)    <span class="comment">// len(a)=5, cap(a) = 5</span></span><br><span class="line">    fmt.Println(s, <span class="built_in">cap</span>(s), <span class="built_in">len</span>(s))</span><br><span class="line">    </span><br><span class="line">    s  = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">5</span>)    <span class="comment">// len(a)=0, cap(a)=5</span></span><br><span class="line">    fmt.Println(s, <span class="built_in">cap</span>(s), <span class="built_in">len</span>(s))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// anonymous struct here.</span></span><br><span class="line">    s := []<span class="keyword">struct</span> &#123;</span><br><span class="line">        a <span class="type">int</span></span><br><span class="line">        b <span class="type">int</span></span><br><span class="line">    &#125;&#123;</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">type</span> Ver <span class="keyword">struct</span> &#123;</span><br><span class="line">        a <span class="type">int</span></span><br><span class="line">        b <span class="type">int</span></span><br><span class="line">    &#125;</span><br><span class="line">    s := []Ver&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;, &#123;<span class="number">3</span>,<span class="number">4</span>&#125;&#125;</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// loop each element of a slice or an array</span></span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">        fmt.Println(i, v) <span class="comment">// v is copy of each element(copy of pointer of object)!!!</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">        <span class="comment">// just the value, discard the index</span></span><br><span class="line">        fmt.Println(v)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// another way to loop slice or array</span></span><br><span class="line">    <span class="keyword">for</span> i :=<span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        fmt.Println(s[i])</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// array</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    narr := arr <span class="comment">// not like slice, narr is a copy of arr!!!</span></span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">6</span>  <span class="comment">// narr is unchanged, different with C language.</span></span><br><span class="line">    </span><br><span class="line">    fmt.Println(arr, narr)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// slice</span></span><br><span class="line">    <span class="keyword">var</span> arr = []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">    test(arr)</span><br><span class="line">    fmt.Println(arr)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// an array of any type</span></span><br><span class="line">    an := [<span class="number">2</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="number">1</span>, <span class="string">&quot;hi&quot;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> ab [<span class="number">2</span>]<span class="keyword">interface</span>&#123;&#125; <span class="comment">// interface&#123;&#125; is type!!!</span></span><br><span class="line">    ab[<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line">    ab[<span class="number">1</span>] = <span class="string">&quot;two&quot;</span></span><br><span class="line">    fmt.Println(an, ab)</span><br><span class="line">    </span><br><span class="line">    sc := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">    nsc := <span class="built_in">append</span>(sc[:], []<span class="type">int</span>&#123;<span class="number">3</span>, <span class="number">4</span>&#125;...)<span class="comment">// 3,4 append to new slice sc[:]!!!</span></span><br><span class="line">    fmt.Println(sc, nsc)<span class="comment">// sc is not changed!!!</span></span><br><span class="line">&#125;</span><br><span class="line">arraySliceDemo()</span><br></pre></td></tr></table></figure>

<pre><code>[1 2 3 4 5] 5
[1 2 3 4]
[10 2 3 4 5] [10 2 3 4] 5 4
[10 20 30 40 50] 5 5
[10 20 30 40 50 60 70] 10 7
[0 0 0 0 0] 5 5
[] 5 0
[&#123;1 2&#125; &#123;3 4&#125;]
[&#123;1 2&#125; &#123;3 4&#125;]
0 &#123;1 2&#125;
1 &#123;3 4&#125;
&#123;1 2&#125;
&#123;3 4&#125;
&#123;1 2&#125;
&#123;3 4&#125;
[6 2 3 4 5] [1 2 3 4 5]
[100 2]
[1 hi] [2 two]
[1 2] [1 2 3 4]
</code></pre>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">slice_demo1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line">    printSlice(s)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Slice the slice to give it zero length.</span></span><br><span class="line">    s = s[:<span class="number">0</span>]</span><br><span class="line">    printSlice(s)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Extend its length. why it&#x27;s extend!!???</span></span><br><span class="line">    s = s[:<span class="number">4</span>]</span><br><span class="line">    printSlice(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">slice_demo2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line"></span><br><span class="line">    s = s[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">    printSlice(s)</span><br><span class="line"></span><br><span class="line">    s = s[:<span class="number">2</span>]</span><br><span class="line">    printSlice(s)</span><br><span class="line"></span><br><span class="line">    s = s[<span class="number">1</span>:]</span><br><span class="line">    printSlice(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;len=%d cap=%d %v\n&quot;</span>, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s), s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">slice_demo1()</span><br><span class="line">fmt.Println(<span class="string">&quot;demo&quot;</span>)</span><br><span class="line">slice_demo2()</span><br></pre></td></tr></table></figure>

<pre><code>len=6 cap=6 [2 3 5 7 11 13]
len=0 cap=6 []
len=4 cap=6 [2 3 5 7]
demo
len=3 cap=5 [3 5 7]
len=2 cap=5 [3 5]
len=1 cap=4 [5]
</code></pre>
<h2 id="map-dict"><a href="#map-dict" class="headerlink" title="map(dict)"></a>map(dict)</h2><p><code>Key of map can be of any type for which the equality operator is defined</code>, such as <code>integers, floating point and complex numbers, strings, pointers, interfaces (as long as the dynamic type supports equality), structs and arrays</code>. Slices cannot be used as map keys, because equality is not defined on them, <code>value can by any type like int, string, slice, function etc</code></p>
<hr style="border:1px solid gray"> </hr>

<p><strong>Create a map</strong></p>
<ul>
<li>var m map[string]int: <code>map[string]int sits at right side when assigning values</code></li>
<li>m :&#x3D; map[string]int{}  &#x2F;&#x2F; empty map</li>
<li>m :&#x3D; map[string]int{“a”: 1, “b”: 2}</li>
<li>m :&#x3D; make(map[string]int)</li>
<li><strong>m :&#x3D; map[string]interface{}{}</strong></li>
<li><strong>m :&#x3D; map[string]interface{}{“a”: 1, “b”: “b”} key must be quoted when it’s string literal</strong></li>
<li><strong>m :&#x3D; map[string]func(i string){}</strong> map of function object.</li>
</ul>
<hr style="border:1px solid gray"> </hr>

<p><strong>create map whose value is a slice</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">int</span>&#123;&#125; <span class="comment">// empty map</span></span><br><span class="line"><span class="comment">//OR</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">m[<span class="string">&quot;a&quot;</span>] = []<span class="type">int</span>&#123;&#125; <span class="comment">// create a new slice</span></span><br><span class="line">m[<span class="string">&quot;a&quot;</span>] = <span class="built_in">append</span>(m[<span class="string">&quot;a&quot;</span>], <span class="number">1</span>)</span><br><span class="line">m[<span class="string">&quot;a&quot;</span>] = <span class="built_in">append</span>(m[<span class="string">&quot;a&quot;</span>], <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">m[<span class="string">&quot;b&quot;</span>] = []<span class="type">int</span>&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr style="border:1px solid gray"> </hr>

<p><strong>create map whose value is func object</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(m <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(m)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">string</span>)</span></span>&#123;&#125;</span><br><span class="line">    m[<span class="string">&quot;a&quot;</span>] = hello</span><br><span class="line">    m[<span class="string">&quot;a&quot;</span>](<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr style="border:1px solid gray"> </hr>

<p><strong>Ops</strong></p>
<ul>
<li>m[“c”]&#x3D; 3</li>
<li>elem, ok &#x3D; m[key]</li>
<li>delete(m, “c”): It’s safe to do even if the key is absent from the map</li>
</ul>
<hr style="border:1px solid gray"> </hr>

<p><font color='red'>you <strong>CAN NOT assign value for nil map, you must create it first!!!</strong></font></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mt <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span> <span class="comment">// nil map</span></span><br><span class="line">mt[<span class="string">&quot;cool&quot;</span>] = <span class="number">12</span> ERROR!!!</span><br><span class="line"></span><br><span class="line">mt := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;&#125; <span class="comment">// map is created</span></span><br><span class="line">mt := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>) <span class="comment">// map is created</span></span><br></pre></td></tr></table></figure>

<p><strong>But it’s ok to loop a nil map</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>                                                             </span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> n &#123;                                                       </span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, i)<span class="comment">// nothing print as n is nil                                              </span></span><br><span class="line">&#125;         </span><br></pre></td></tr></table></figure>

<hr style="border:1px solid gray"> </hr>

<p><strong>Note</strong></p>
<ul>
<li><strong>Access map by map[key] NOT map.key</strong></li>
<li><strong>The key of map must be same type</strong>, but the value can be any type when use <code>interface&#123;&#125;</code> as value type.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(m <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    m[<span class="string">&quot;f&quot;</span>] = <span class="number">100</span></span><br><span class="line">    <span class="comment">// m[12] = &quot;hi&quot; // ERROR!!!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// literal maps</span></span><br><span class="line">    <span class="comment">// &#123;&#125; is initializer</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> m1 = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span> &#123; <span class="comment">// &#123;&quot;a&quot;:1, &quot;b&quot;:2 &#125; is initializer same line, , can be omitted</span></span><br><span class="line">        <span class="string">&quot;a&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;b&quot;</span>: <span class="number">2</span>, <span class="comment">// each element must end with ,!!!</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//m3 and m1 points to same memory, like pointer!!!</span></span><br><span class="line">    m3 := m1</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// change map</span></span><br><span class="line">    test(m3)</span><br><span class="line">    </span><br><span class="line">    m1[<span class="string">&quot;e&quot;</span>] = <span class="number">15</span></span><br><span class="line">    </span><br><span class="line">    m2 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span> &#123;</span><br><span class="line">        <span class="string">&quot;c&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;d&quot;</span>: <span class="number">4</span>, <span class="comment">// each element must end with even the last one if at different line!!!</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    m2 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span> &#123;<span class="string">&quot;c&quot;</span>: <span class="number">3</span>, <span class="string">&quot;d&quot;</span>: <span class="number">4</span>&#125; <span class="comment">// the last , can be omitted if at same line with &#125;</span></span><br><span class="line">    m2[<span class="string">&quot;e&quot;</span>] = <span class="number">13</span></span><br><span class="line">  </span><br><span class="line">    <span class="built_in">delete</span>(m2, <span class="string">&quot;e&quot;</span>)</span><br><span class="line">    fmt.Println(m1, m3, m2)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Mutating Maps</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// var mt map[string]int</span></span><br><span class="line">    <span class="comment">// mt[&quot;cool&quot;] = 12 ERROR!!!</span></span><br><span class="line">    </span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>) <span class="comment">// map without element</span></span><br><span class="line"></span><br><span class="line">    m[<span class="string">&quot;Answer&quot;</span>] = <span class="number">42</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;The value:&quot;</span>, m[<span class="string">&quot;Answer&quot;</span>])</span><br><span class="line"></span><br><span class="line">    m[<span class="string">&quot;Answer&quot;</span>] = <span class="number">48</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;The value:&quot;</span>, m[<span class="string">&quot;Answer&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="built_in">delete</span>(m, <span class="string">&quot;Answer&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;The value:&quot;</span>, m[<span class="string">&quot;Answer&quot;</span>])</span><br><span class="line"></span><br><span class="line">    v, ok := m[<span class="string">&quot;Answer&quot;</span>]</span><br><span class="line">    fmt.Println(<span class="string">&quot;The value:&quot;</span>, v, <span class="string">&quot;Present?&quot;</span>, ok)</span><br><span class="line">    m[<span class="string">&quot;a&quot;</span>] = <span class="number">1</span></span><br><span class="line">    m[<span class="string">&quot;b&quot;</span>] = <span class="number">2</span></span><br><span class="line">    fmt.Println(m)</span><br><span class="line">    <span class="comment">// loop a map</span></span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        fmt.Println(k, v)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> mn = <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    mn[<span class="string">&quot;a&quot;</span>] = <span class="number">12</span></span><br><span class="line">    mn[<span class="string">&#x27;b&#x27;</span>] = <span class="string">&quot;hi&quot;</span></span><br><span class="line">    fmt.Println(mn, mn[<span class="string">&quot;a&quot;</span>], mn[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mapDemo()</span><br></pre></td></tr></table></figure>

<pre><code>map[a:1 b:2 e:15 f:100] map[a:1 b:2 e:15 f:100] map[c:3 d:4]
The value: 42
The value: 48
The value: 0
The value: 0 Present? false
map[a:1 b:2]
a 1
b 2
map[a:12 b:hi] 12 hi
</code></pre>
<h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><p>Struct fields can be accessed by struct instance or <strong>through a struct pointer which uses <code>. NOT -&gt;</code> like what did in C</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">    x, y <span class="type">int</span> <span class="comment">//NOT var x int!!!  </span></span><br><span class="line">    <span class="comment">//as it&#x27;s lowercase, non-exported field!!!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr style="border:1px solid gray"> </hr>

<p><strong>Create a struct instance</strong></p>
<ul>
<li>var st Vertex</li>
<li>st :&#x3D; Vertex{1, 2} &#x2F;&#x2F; <strong>unamed assignment, must provide all values!!!</strong></li>
<li>st :&#x3D; &amp;Vertex{x: 1} &#x2F;&#x2F; named assignment, can provide part of values!!!</li>
<li><strong>st :&#x3D; Vertex{x: 1, y: 2} NOT “x” or “y” when use named index!!!</strong></li>
<li>st :&#x3D; Vertex{}</li>
</ul>
<hr style="border:1px solid gray"> </hr>

<p><strong>Ops</strong></p>
<ul>
<li>st.x &#x3D; 10</li>
<li>p :&#x3D; &amp;st</li>
<li>p.x &#x3D; 10 <code>not p-&gt;x</code></li>
</ul>
<hr style="border:1px solid gray"> </hr>

<p><strong>Note</strong></p>
<ul>
<li><strong>Access field of struct by st.field_name not st[“field_name”] like what we do for map</strong></li>
<li><strong>pointer still uses p.field_name to access filed which is converted to <code>(*p).field</code> by Go automatically</strong></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">    x, y, z <span class="type">int</span> <span class="comment">//no var </span></span><br><span class="line">    <span class="comment">//as it&#x27;s lowercase, non-exported field!!!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    v1 = Vertex&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;  <span class="comment">// has type Vertex</span></span><br><span class="line">    v2 = Vertex&#123;y: <span class="number">1</span>&#125;  <span class="comment">// x:0 is implicit, set named field, error for unamed setting Vertex&#123;1&#125;</span></span><br><span class="line">    v3 = Vertex&#123;&#125;      <span class="comment">// x:0 and y:0 and z:0 if unset fields!!!</span></span><br><span class="line">    p  = &amp;Vertex&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// has type *Vertex</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">structDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> pt *Vertex</span><br><span class="line">    <span class="comment">// as pt is pointer, must use &amp; </span></span><br><span class="line">    pt = &amp;Vertex&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>,<span class="comment">// , is needed if &#125; is at newline!!</span></span><br><span class="line">        &#125;</span><br><span class="line">    fmt.Println(v1, p, v2, v3, *pt)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// array of struct</span></span><br><span class="line">    <span class="keyword">var</span> pa []*Vertex</span><br><span class="line">    pa = []*Vertex &#123;<span class="comment">// type of each element</span></span><br><span class="line">        &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, <span class="comment">//  not &amp; even it&#x27;s pointer type!!!</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(v1, p, v2, v3, *pt, *pa[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">structDemo()</span><br></pre></td></tr></table></figure>

<pre><code>&#123;1 2 3&#125; &amp;&#123;1 2 3&#125; &#123;0 1 0&#125; &#123;0 0 0&#125; &#123;1 3 4&#125;
&#123;1 2 3&#125; &amp;&#123;1 2 3&#125; &#123;0 1 0&#125; &#123;0 0 0&#125; &#123;1 3 4&#125; &#123;4 5 6&#125;
</code></pre>
<h1 id="function"><a href="#function" class="headerlink" title="function"></a>function</h1><p>Always remember Go is compiled language, hence, each parameter and return value must have a type, <code>NO default value supported for parameter func test(x=12, y)</code>, <code>Unsupported named parameter call like test(y=12, x=13)</code>.</p>
<p><strong>function can return any number of results</strong>  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="type">int</span>, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// omit type if use the same type</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// named return value, like declared a var z at top of the function</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> (z <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="comment">// use z directly</span></span><br><span class="line">	z = x + y</span><br><span class="line">    <span class="keyword">return</span>  <span class="comment">// no explicit, return named value, but return directive is a must!!!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// return two values</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">	z = x + y</span><br><span class="line">    <span class="keyword">return</span> z, x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><p><strong>A defer statement defers the execution of a function until the surrounding function returns.</strong></p>
<p><strong>The deferred call’s arguments are evaluated immediately, but the function call is not executed until the surrounding function returns</strong>. <font color='red'>deferred function calls are pushed onto a stack</font>. When a function returns, <code>its deferred calls are executed in last-in-first-out order</code>.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Get</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        i = i + <span class="number">10</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(Get())</span><br><span class="line">&#125;</span><br><span class="line">..</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>

<hr style="border:1px solid gray"> </hr>

<p><strong>Note</strong>  </p>
<ul>
<li><strong><font color='red'>defer GetPerson().GetName() only the last call <code>GetName(</code>) is deferred, GetPerson() is called immediately!!!</font></strong></li>
<li>deferred call’s <code>arguments are evaluated immediately</code></li>
<li><code>deferred function should no return</code>, if wants return value, use channel, if deferred function has return value, it’s not captured!!!</li>
<li>deferred function executes after return statement!!!</li>
<li>As go is compile, hence deferred may not be pushed to stack, if code not reach it!!!.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="keyword">chan</span> <span class="type">int</span> &#123;</span><br><span class="line">    resCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        resCh &lt;- a + b</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> resCh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    resCh := add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    res := &lt;-resCh</span><br><span class="line">    fmt.Println(<span class="string">&quot;1 + 2 =&quot;</span>, res)</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>1 + 2 = 3
</code></pre>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(cool <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> cool &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;defer %v\n&quot;</span>, cool)</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    test(<span class="literal">true</span>) <span class="comment">// no defer executes as cool is true!!!</span></span><br><span class="line">    test(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>defer false
</code></pre>
<h2 id="function-object"><a href="#function-object" class="headerlink" title="function object"></a>function object</h2><p><code>Function is an object, so it can be used as argument or return value</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// unnamed function</span></span><br><span class="line"><span class="keyword">var</span> hadd = <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// func(int, int) int: is (function) type!</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(fn <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fn(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(test(add))</span><br><span class="line">fmt.Println(test(hadd))</span><br></pre></td></tr></table></figure>

<h2 id="function-closure"><a href="#function-closure" class="headerlink" title="function closure"></a>function closure</h2><p>function closure is a function that returns another function, but you <strong><code>can NOT define a function in another function like this</code></strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">embed</span><span class="params">()</span></span> &#123; <span class="comment">// Compile Error!!!</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    hembed := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">// OK as hembed is a variable which points to unnamed function</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>closure Return unnamed function</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123; <span class="comment">// return value is a function</span></span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123; <span class="comment">// unnamed function</span></span><br><span class="line">		sum += x <span class="comment">// always access var defined at its wrapper which is like a static variable!!!</span></span><br><span class="line">		<span class="keyword">return</span> sum</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hello is function wrapper which takes wrapped function as parameter</span></span><br><span class="line"><span class="comment">// return the wapper function which is used by caller</span></span><br><span class="line"><span class="comment">// inside the wrapper, add internal logical, then call wrapped function</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(fn <span class="keyword">func</span>(<span class="type">string</span>)</span></span> <span class="type">error</span>) <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">        fmt.Print(<span class="string">&quot;wrapper: &quot;</span>)</span><br><span class="line">        fn(name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">(name <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello&quot;</span>, name)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wp := hello(greet)</span><br><span class="line">    wp(<span class="string">&quot;tom&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>wrapper: hello tom
</code></pre>
<h2 id="variadic-function-dynamic-parameters"><a href="#variadic-function-dynamic-parameters" class="headerlink" title="variadic function(dynamic parameters)"></a>variadic function(dynamic parameters)</h2><p>In Go, a function that can accept a dynamic number of arguments is called a Variadic function. Below is the syntax for variadic function. Three dots are used as a prefix before type.</p>
<p><strong>dynamic parameters with same type</strong>  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// same type, ... is closer to type, it&#x27;s a new type ...int</span></span><br><span class="line"><span class="comment">// numbers behaves like a slice, packed parameters</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(numbers ...<span class="type">int</span>)</span></span> <span class="type">int</span> &#123; <span class="comment">// must be the last parameter of a function!!!</span></span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> numbers &#123; <span class="comment">// numbers is like a slice</span></span><br><span class="line">        sum += num</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numbers := []<span class="type">int</span>&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>&#125;</span><br><span class="line">add(numbers...) <span class="comment">// call with slice, expand slice, same as add(2, 3, 5), unpacked parameter</span></span><br></pre></td></tr></table></figure>

<p><strong>dynamic parameters for different types</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    handle(<span class="number">1</span>, <span class="string">&quot;abc&quot;</span>)</span><br><span class="line">    handle(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;xyz&quot;</span>, <span class="number">3</span>)</span><br><span class="line">    handle(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// interface&#123;&#125; for any type as it has no method defined</span></span><br><span class="line"><span class="comment">// ...interface&#123;&#125; behaves like a new type</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(params ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Handle func called with parameters:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> _, param := <span class="keyword">range</span> params &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, param) <span class="comment">// print the value of special type</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function as an argument</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(fn <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fn(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function as return value</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123; <span class="comment">// unnamed function</span></span><br><span class="line">        sum += x</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// defer function</span></span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;boy&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;girl&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// declare a function object</span></span><br><span class="line">    hadd := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(test(hadd))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// closure</span></span><br><span class="line">    f1 := adder() <span class="comment">// f1 has its own copy of sum, all call f1 shares the same sum.</span></span><br><span class="line">    fmt.Println(f1(<span class="number">1</span>))</span><br><span class="line">    fmt.Println(f1(<span class="number">1</span>))</span><br><span class="line">    </span><br><span class="line">    f2 := adder() <span class="comment">// f2 has its own copy of sum</span></span><br><span class="line">    fmt.Println(f2(<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funcDemo()</span><br></pre></td></tr></table></figure>

<pre><code>hello
3
1
2
1
girl
boy
</code></pre>
<h2 id="function-type"><a href="#function-type" class="headerlink" title="function type"></a>function type</h2><p><code>Think function signature(without name) as a type</code>, you can declare variable, parameter, new type based on function signature.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// new type based on function type</span></span><br><span class="line"><span class="keyword">type</span> HelloFn <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>)</span></span> <span class="type">error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// parameter with function type</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(fn <span class="keyword">func</span>(<span class="type">string</span>)</span></span> <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// declare a function var</span></span><br><span class="line">    <span class="keyword">var</span> pn <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>)</span></span> <span class="type">error</span></span><br><span class="line">    pn = fn</span><br><span class="line">    pn(<span class="string">&quot;jason&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// declare a function var</span></span><br><span class="line">    <span class="keyword">var</span> pn1 HelloFn</span><br><span class="line">    pn1 = fn</span><br><span class="line">    pn1(<span class="string">&quot;jason&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">(name <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello&quot;</span>, name)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    hello(greet)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>hello jason
hello jason
</code></pre>
<h2 id="function-parameter"><a href="#function-parameter" class="headerlink" title="function parameter"></a>function parameter</h2><p><strong>Parameter passing is same like C except for array, for array it’s copy of the whole array, not array pointer is passed!!!</strong> </p>
<p>For slice even <code>pointer</code> is passed in function, if you <strong>append new element in that slice, the caller does not know either, see below explanations</strong></p>
<ul>
<li><code>the underlying array reached its capacity, a new slice created to replace the origin one, obviously the origin slice will not be modified.</code></li>
<li><code>the underlying array has not reached its capacity, and was modified. BUT the field len of the slice was not overwritten because the slice was passed by value</code>. As a result, the origin slice will not aware its len was modified, which result in the slice not modified.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test_slice</span><span class="params">(s []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    s[<span class="number">1</span>] = <span class="string">&quot;b&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test_slice2</span><span class="params">(s []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// append means add an element at last, same like s[len(s)] = &quot;c&quot;</span></span><br><span class="line">    <span class="comment">// if cap is smaller, a new underlay memory is created.</span></span><br><span class="line">    s = <span class="built_in">append</span>(s, <span class="string">&quot;c&quot;</span>)</span><br><span class="line">    fmt.Println(s, <span class="built_in">len</span>(s))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">2</span>)</span><br><span class="line">    s[<span class="number">0</span>] = <span class="string">&quot;a&quot;</span></span><br><span class="line">    test_slice(s)</span><br><span class="line">    fmt.Println(s, <span class="built_in">len</span>(s))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// as now len(s) = 2</span></span><br><span class="line">    test_slice2(s)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// s does not see the &#x27;c&#x27; as it&#x27;s added to a new larger slice!!!</span></span><br><span class="line">    <span class="comment">// new memory is not returned</span></span><br><span class="line">    fmt.Println(s, <span class="built_in">len</span>(s))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//=============================================================</span></span><br><span class="line">    s1 := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    s1 = <span class="built_in">append</span>(s1, <span class="string">&quot;x&quot;</span>)</span><br><span class="line">    <span class="comment">// no new memory is created, but you still not see &#x27;c&#x27;</span></span><br><span class="line">    <span class="comment">// because the len is not update, as it&#x27;s passed by value!!!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* imagin slice as</span></span><br><span class="line"><span class="comment">        Slice &#123;</span></span><br><span class="line"><span class="comment">            int len;</span></span><br><span class="line"><span class="comment">            char *s; // underlay memory pointer</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    test_slice2(s1)</span><br><span class="line">    fmt.Println(s1, <span class="built_in">len</span>(s1))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>[a b] 2
[a b c] 3
[a b] 2
[x c] 2
[x] 1
</code></pre>
<h1 id="flow-control"><a href="#flow-control" class="headerlink" title="flow control"></a>flow control</h1><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>Go has <strong>only one looping construct, the <code>for</code> loop, <code>NO while, until</code> etc.</strong></p>
<p>The basic for loop has three components <code>separated by semicolons</code>:</p>
<ul>
<li>the init statement: executed before the first iteration</li>
<li>the condition expression: evaluated before every iteration</li>
<li>the post statement: executed at the end of every iteration</li>
</ul>
<p>*<strong>Note</strong></p>
<ul>
<li>Unlike other languages like C, Java, or JavaScript. For Go there are <strong>no parentheses surrounding the three components of the for statement but the braces { } are always required</strong>.</li>
</ul>
<hr style="border:1px solid gray"> </hr>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123; <span class="comment">// is is only visible in this loop</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">5</span> &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">8</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; &#123; <span class="comment">// is is only visible in this loop</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">5</span> &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">8</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> ; i &lt; <span class="number">10</span>; i++&#123;</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">5</span> &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">8</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr style="border:1px solid gray"> </hr>

<p><strong>use <code>for as while</code> as init and post statements are optional</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sum := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ; sum &lt; <span class="number">100</span>; &#123;</span><br><span class="line">    sum += <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// short way, same like while in C</span></span><br><span class="line"><span class="keyword">for</span> sum &lt; <span class="number">100</span> &#123;</span><br><span class="line">    sum += <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr style="border:1px solid gray"> </hr>

<p><strong>infinite loop</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>multiple assignments</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(a) - <span class="number">1</span>; i &lt; j; i, j = i + <span class="number">1</span>, j - <span class="number">1</span> &#123;</span><br><span class="line">    a[i], a[j] = a[j], a[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>range with for</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ps := []Person&#123;</span><br><span class="line">        &#123;name: <span class="string">&quot;a&quot;</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, p := <span class="keyword">range</span> ps &#123;</span><br><span class="line">        p.name = <span class="string">&quot;b&quot;</span> <span class="comment">// p is copy of each element</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// nothing changed</span></span><br><span class="line">    fmt.Println(ps)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(ps); i++ &#123;</span><br><span class="line">        ps[i].name = <span class="string">&quot;b&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(ps)</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">go</span> run test.<span class="keyword">go</span> </span><br><span class="line">[&#123;a&#125;]</span><br><span class="line">[&#123;b&#125;]</span><br></pre></td></tr></table></figure>

<p><strong>NOTE: when reach the loop end, the index is different!!!</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ; i &lt; <span class="built_in">len</span>(a); i++ &#123;</span><br><span class="line">        <span class="comment">// i == 3 when out of range</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;out loop index: %d\n&quot;</span>, i)</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, _ = <span class="keyword">range</span> a &#123;</span><br><span class="line">        <span class="comment">// i == 2 when out of range</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;out loop index: %d\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="keyword">go</span> run test.<span class="keyword">go</span></span><br><span class="line">out loop index: <span class="number">3</span></span><br><span class="line">out loop index: <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>Go’s <code>if</code> statements is like its <code>for</code> loops; the <code>expression may not be surrounded by parentheses ( ) but the braces &#123; &#125; are required.</code></p>
<p>The <code>if</code> statement <code>can start with a short statement to execute before the condition</code>.</p>
<p><strong>Variables declared by the statement are only in scope until the end of the <code>if</code></strong>.<br><font color="red" size=4> it’s also available inside any of the <code>else</code> blocks.</font></p>
<hr style="border:1px solid gray"> </hr>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i := <span class="number">0</span>; i == <span class="number">0</span> &#123; <span class="comment">// scope of i is block, after if, it&#x27;s out of scope</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;equal&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;i:&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> &#123; <span class="comment">// compile error!!! as 1 is not bool type</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>NOTE</strong></p>
<ul>
<li><strong>non-boolean type can NOT be used as if condition!!!</strong></li>
</ul>
<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>The expressions <code>need not to be constants or even integers</code>, the cases are evaluated top to bottom until a match is found, and if the switch has no expression it switches on true.</p>
<p>Go’s switch is like the one in C, C++, Java, JavaScript, and PHP, except that <code>Go only runs the selected case (implicit break at the end)</code>, not all the cases that follow. In effect, <strong>the break statement that is needed at the end of each case in those languages is provided automatically <code>in Go but if you want to break in the middle of this case, break is required</code></strong>. Another important difference is that <strong>Go’s switch cases need not be constants, and the values involved need not be integers.</strong></p>
<hr style="border:1px solid gray"> </hr>

<p><strong>Switch cases evaluate cases from top to bottom, stopping when a case succeeds, auto break if matched</strong>  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> i &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: <span class="comment">// auto break</span></span><br><span class="line"><span class="keyword">case</span> f(): <span class="comment">//does not call f if i==0</span></span><br><span class="line">    <span class="keyword">break</span> <span class="comment">// break at end no effect as if there is no break here!!!</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="number">2</span> &gt;<span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">break</span> <span class="comment">// break here below does not run</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;reach end of case&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr style="border:1px solid gray"> </hr>

<p><strong>Switch without condition</strong><br>Switch <code>without a condition is the same as switch true</code>.</p>
<p>This construct can be a clean way to write <strong><code>long if-then-else chains</code>.</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">t := <span class="number">15</span></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> t &gt; <span class="number">10</span>:</span><br><span class="line">    fmt.Println(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">case</span> t &gt; <span class="number">5</span>:</span><br><span class="line">    fmt.Println(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">case</span> t &gt; <span class="number">3</span>:</span><br><span class="line">    <span class="comment">// with fallthrough, the next case condtion is not checked.</span></span><br><span class="line">    <span class="keyword">fallthrough</span> <span class="comment">// if t==4, fallthrough next one, no matter next condition matches or not, print 18 !!!</span></span><br><span class="line"><span class="keyword">case</span> t &gt; <span class="number">18</span>:</span><br><span class="line">    fmt.Println(<span class="number">18</span>) <span class="comment">// break here if no other fallthrough</span></span><br><span class="line"><span class="keyword">case</span> t &gt;= <span class="number">4</span>:</span><br><span class="line">    fmt.Println(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// different cases has the same action</span></span><br><span class="line">n := <span class="number">10</span></span><br><span class="line"><span class="keyword">switch</span> n &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>,<span class="number">3</span>:</span><br><span class="line">    <span class="comment">// do something directly here</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>,<span class="number">6</span>:</span><br><span class="line">    <span class="comment">// call do_something() to share the same action</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myfunc</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    HERE:</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">    i++</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">goto</span> HERE</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="break-x2F-continue"><a href="#break-x2F-continue" class="headerlink" title="break&#x2F;continue"></a>break&#x2F;continue</h2><p>By default, <code>break, continue</code> work for inner loop, but if you want to take effect of outer loop, use <code>label</code> for <code>break, continue</code>.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">flowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for loop</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">5</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">8</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Print(i)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fmt.Println(<span class="string">&quot;\n-------------------------&quot;</span>)    </span><br><span class="line">    <span class="comment">// switch, from top to bottom</span></span><br><span class="line">    <span class="keyword">switch</span> i := <span class="string">&quot;hello&quot;</span>; i &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;boy&quot;</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;boy&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> greet():</span><br><span class="line">            fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">        <span class="keyword">default</span>: <span class="comment">// always put default at last one!!!</span></span><br><span class="line">            fmt.Println(<span class="string">&quot;default&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fmt.Println(<span class="string">&quot;\n-------------------------&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// use break/continue with label on outer loop</span></span><br><span class="line">here:</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;i=&quot;</span>, i)</span><br><span class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="number">3</span>; j++ &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;j=&quot;</span>,j)</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span> here <span class="comment">// continue the out loop, even here is out, i is initialized for only once!!!!</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> j == <span class="number">2</span> &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    fmt.Println(<span class="string">&quot;\n-------------------------&quot;</span>)</span><br><span class="line">there:</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="number">3</span>; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> j == <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            fmt.Println(j)</span><br><span class="line">            <span class="keyword">if</span> j == <span class="number">2</span> &#123;</span><br><span class="line">                <span class="keyword">break</span> there <span class="comment">// break out, no outer next loop</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flowDemo()</span><br></pre></td></tr></table></figure>

<pre><code>0123467
-------------------------
hello

-------------------------
i= 0
j= 1
i= 1
j= 2

-------------------------
2
</code></pre>
<h1 id="system-env"><a href="#system-env" class="headerlink" title="system env"></a>system env</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">envDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// os.Environ() reutrn a map</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> os.Environ() &#123;</span><br><span class="line">        fmt.Println(v)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    os.Setenv(<span class="string">&quot;GO&quot;</span>, <span class="string">&quot;/tmp/go&quot;</span>)</span><br><span class="line">    fmt.Println(os.Getenv(<span class="string">&quot;GO&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">envDemo()</span><br></pre></td></tr></table></figure>

<pre><code>PATH=/home/data/Anaconda3/envs/py3.9/bin:/opt/llvm/bin:/home/data/Anaconda3/envs/py3.9/bin:/home/data/Anaconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/home/go:/home/go/bin:/root/.yarn_pkg/bin:/usr/lib64:/usr/local/go/bin:/home/data/Anaconda3/envs/py3.9/libexec/git-core:/root/bin:/root/.yarn_pkg/bin:/home/go/bin:/home/go:/usr/local/go/bin
PWD=/
LANG=en_US.UTF-8
SHLVL=1
_=/usr/bin/env
GO111MODULE=on
GOMODCACHE=/home/go/pkg/mod
GOCACHE=/root/.cache/go-build
GOPATH=/home/go
PYDEVD_USE_FRAME_EVAL=NO
JPY_PARENT_PID=1797
GO=/tmp/go
/tmp/go
</code></pre>
<h1 id="small-tips"><a href="#small-tips" class="headerlink" title="small tips"></a>small tips</h1><h2 id="return-local-var-from-stack-is-safe-in-GO"><a href="#return-local-var-from-stack-is-safe-in-GO" class="headerlink" title="return local var from stack is safe in GO"></a>return local var from stack is safe in GO</h2><p>Returning an address of a local variable is also safe. </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> *<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s <span class="type">int</span> = <span class="number">12</span></span><br><span class="line">    <span class="keyword">return</span> &amp;s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p *<span class="type">int</span> = test()</span><br><span class="line">fmt.Println(*p)</span><br></pre></td></tr></table></figure>

<h2 id="string-vs-byte"><a href="#string-vs-byte" class="headerlink" title="string vs [] byte"></a>string vs [] byte</h2><p>string is the set of <code>byte</code>, <code>conventionally but not necessarily representing UTF-8-encoded text</code>. A string may be empty, but not nil.  </p>
<ul>
<li><code>Values of string type are immutable</code>   </li>
<li><code>Values of []byte are mutable</code></li>
</ul>
<p><strong>conversion</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s1 := <span class="string">&quot;hello&quot;</span></span><br><span class="line">b := []<span class="type">byte</span>(s1) <span class="comment">// new memory allocated!!!</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// []byte to string</span></span><br><span class="line">s2 := <span class="type">string</span>(b) <span class="comment">// new memory allocated!!!</span></span><br></pre></td></tr></table></figure>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := <span class="string">&quot;你好&quot;</span> <span class="comment">//string</span></span><br><span class="line">    fmt.Println(<span class="built_in">len</span>(s))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> s = [] <span class="type">rune</span>(<span class="string">&quot;你好&quot;</span>) <span class="comment">// as rune = int32, henc two elements for 你好</span></span><br><span class="line">    fmt.Println(s, <span class="built_in">len</span>(s), <span class="type">string</span>(s))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure>

<pre><code>6
[20320 22909] 2 你好
</code></pre>
<h2 id="what-does-empty-mean-for-each-type"><a href="#what-does-empty-mean-for-each-type" class="headerlink" title="what does empty mean for each type"></a>what does empty mean for each type</h2><p>let’s focus on these types, <code>string, integer(int, uint etc), pointer, array, slice, map)</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">emptyDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">/* default value for each type is empty</span></span><br><span class="line"><span class="comment">     * &quot;&quot;      ---&gt;string</span></span><br><span class="line"><span class="comment">     * 0       ---&gt;number</span></span><br><span class="line"><span class="comment">     * nil     ---&gt;pointer</span></span><br><span class="line"><span class="comment">     * nil     ---&gt;slice</span></span><br><span class="line"><span class="comment">     * nil     ---&gt;map</span></span><br><span class="line"><span class="comment">     * nil     ---&gt;function type like function type: &#x27;type CallBack func()&#x27;</span></span><br><span class="line"><span class="comment">     * NO empty for array as it&#x27;s has fixed size, must be set at delcaration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> str <span class="type">string</span>          <span class="comment">// str := &quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> n <span class="type">int</span>               <span class="comment">// n := 0</span></span><br><span class="line">    <span class="keyword">var</span> p *<span class="type">int</span>              <span class="comment">// var p *int = nil</span></span><br><span class="line">    <span class="keyword">var</span> sc []<span class="type">int</span>            <span class="comment">// sc := []int&#123;&#125;</span></span><br><span class="line">    <span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>    <span class="comment">// here m is nil can NOT add new element in it</span></span><br><span class="line">    <span class="comment">// m := map[string]ing&#123;&#125; m NOT nill, can add new element, like m[&quot;a&quot;] = 2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> str == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;string default value: %q \n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;int default value: 0&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> p == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;pointer default value: nil&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> sc == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;slice defautl value: nil  ([], cap=%d, len=%d)\n&quot;</span>, <span class="built_in">cap</span>(sc), <span class="built_in">len</span>(sc))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> m == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;map defautl value: nil  (&#123;&#125; len=%d)\n&quot;</span>, <span class="built_in">len</span>(m))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">emptyDemo()</span><br></pre></td></tr></table></figure>

<pre><code>string default value: &quot;&quot; 
int default value: 0
pointer default value: nil
slice defautl value: nil  ([], cap=0, len=0)
map defautl value: nil  (&#123;&#125; len=0)
</code></pre>
<h2 id="get-the-size-of-memory-for-each-type"><a href="#get-the-size-of-memory-for-each-type" class="headerlink" title="get the size of memory for each type"></a>get the size of memory for each type</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="type">int16</span>(<span class="number">32</span>)</span><br><span class="line">    b := <span class="number">12</span>          <span class="comment">//int 8 bytes on 64-bit machine</span></span><br><span class="line">    c := <span class="string">&quot;h&quot;</span>         <span class="comment">//not like C strlen.</span></span><br><span class="line">    d := <span class="string">&#x27;h&#x27;</span>         <span class="comment">//int32</span></span><br><span class="line">    <span class="keyword">var</span> e <span class="type">byte</span> = <span class="string">&#x27;h&#x27;</span> <span class="comment">//uint8</span></span><br><span class="line">    f := &amp;b</span><br><span class="line">    <span class="comment">// f := b + 1       // f is &#x27;i&#x27;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;sizeof(%T)=%v\n&quot;</span>, a, unsafe.Sizeof(a))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;sizeof(%T)=%v\n&quot;</span>, b, unsafe.Sizeof(b))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;sizeof(%T)=%v\n&quot;</span>, c, unsafe.Sizeof(c))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;sizeof(%T)=%v\n&quot;</span>, d, unsafe.Sizeof(d))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;sizeof(%T)=%v\n&quot;</span>, e, unsafe.Sizeof(e))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;sizeof(%T)=%v\n&quot;</span>, f, unsafe.Sizeof(f))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sizeof(<span class="type">int16</span>)=<span class="number">2</span></span><br><span class="line">sizeof(<span class="type">int</span>)=<span class="number">8</span></span><br><span class="line"><span class="comment">// it&#x27;s always 16 bytes, no matter how long it&#x27;s, as for string, sizeof(s)==sizeof(s.len)+sizeof(s.pointer)</span></span><br><span class="line">sizeof(<span class="type">string</span>)=<span class="number">16</span></span><br><span class="line">sizeof(<span class="type">int32</span>)=<span class="number">4</span></span><br><span class="line">sizeof(<span class="type">uint8</span>)=<span class="number">1</span></span><br><span class="line">sizeof(*<span class="type">int</span>)=<span class="number">8</span></span><br></pre></td></tr></table></figure>

<h2 id="when-should-I-use-new"><a href="#when-should-I-use-new" class="headerlink" title="when should I use new()"></a>when should I use new()</h2><p>new(T) allocates <code>zeroed storage</code> for a new item of type T and returns its address, a value of type *T.</p>
<p>Suggestion, <strong>use it as less as possible</strong>, as new(T) and &amp;T{} can do the same thing. Both allocate a zero T and return a pointer to this allocated memory. The only difference is, that <strong>&amp;T{} doesn’t work for builtin types like int; you can only do new(int).</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// without new only form is different!!</span></span><br><span class="line">i: = <span class="number">10</span></span><br><span class="line">p :=  &amp;i</span><br><span class="line"></span><br><span class="line"><span class="comment">//with new, it&#x27;s one statement</span></span><br><span class="line">p := <span class="built_in">new</span>(<span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// without new</span></span><br><span class="line">p := &amp;Person &#123;name: <span class="string">&quot;jason&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// with new</span></span><br><span class="line">p := <span class="built_in">new</span>(Person)</span><br><span class="line">Person.name = <span class="string">&quot;jason&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="when-should-I-use-make"><a href="#when-should-I-use-make" class="headerlink" title="when should I use make()"></a>when should I use make()</h2><p><strong>It creates slices, maps, and channels only</strong>, and it returns an <code>initialized (not zeroed) value of type T (not *T)</code>. The reason for the distinction is that these three types represent, under the covers, references to data structures that must be initialized before use. <code>A slice, for example, is a three-item descriptor containing a pointer to the data (inside an array), the length, and the capacity</code>, and until those items are initialized, the slice is nil. <strong><code>For slices, maps, and channels, make initializes the internal data structure and prepares the value for use</code></strong></p>
<hr>
<p>The make built-in function <code>allocates and initializes</code> an object of type slice, map, or chan (only), can be used only for Slice, Map, Channel</p>
<ul>
<li><p>Slice: The size specifies the length. The capacity of the slice is equal to its length. A second integer argument may be provided to specify a different capacity; it must be no smaller than the<br>length. For example, <code>make([]int, 0, 10) allocates an underlying array of size 10 and returns a slice of length 0 and capacity 10 that is backed by this underlying array</code>.  </p>
</li>
<li><p>Map: An <strong>empty map(not equal nil)</strong> is allocated <strong>with enough space</strong> to hold the specified number of elements. The size may be omitted, in which case a small starting size is allocated.    </p>
</li>
<li><p>Channel: The channel’s buffer is initialized with the specified buffer capacity. If zero, or <code>the size is omitted, the channel is unbuffered</code>.</p>
</li>
</ul>
<hr>
<p><strong>Suggestion</strong>  </p>
<ul>
<li><strong>If you know the estimated size of slice or map</strong>, use make() to preallocate enough memory</li>
<li><strong>Always use <code>make() for channel</code></strong></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := []<span class="type">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">1</span>)</span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">2</span>) <span class="comment">// new underlaying array is allocated.</span></span><br><span class="line"></span><br><span class="line">s := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">2</span>) <span class="comment">// cap = 2, len = 0</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">1</span>)</span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">2</span>) <span class="comment">// no new array is allocated.</span></span><br></pre></td></tr></table></figure>

<h2 id="pointer-to-array-and-array-of-pointers"><a href="#pointer-to-array-and-array-of-pointers" class="headerlink" title="pointer to array and array of pointers"></a>pointer to array and array of pointers</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad way never use this, use slice instead</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updatearray</span><span class="params">(funarr *[5]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good way</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateslice</span><span class="params">(funarr []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad way, use slice of pointers instead</span></span><br><span class="line"><span class="keyword">var</span> ptr [MAX]*<span class="type">int</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good way</span></span><br><span class="line"><span class="keyword">var</span> ptr []*<span class="type">int</span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> pc []*Person</span><br><span class="line"></span><br><span class="line">    <span class="comment">// initialization</span></span><br><span class="line">    pc = []*Person&#123;</span><br><span class="line">        &amp;Person&#123;Name: <span class="string">&quot;tom&quot;</span>&#125;,</span><br><span class="line">        &#123;Name: <span class="string">&quot;jack&quot;</span>&#125;, <span class="comment">//shortway</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// after initialization</span></span><br><span class="line">    pc = <span class="built_in">append</span>(pc, &amp;Person&#123;Name: <span class="string">&quot;hak&quot;</span>&#125;)</span><br><span class="line">    fmt.Println(pc[<span class="number">0</span>].Name, pc[<span class="number">1</span>].Name, pc[<span class="number">2</span>].Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>tom jack hak
</code></pre>
<h2 id="check-type-of-variable"><a href="#check-type-of-variable" class="headerlink" title="check type of variable"></a>check type of variable</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">var1 := <span class="number">12</span></span><br><span class="line"><span class="comment">// only print it type</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;var1 = %T\n&quot;</span>, var1)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;var1 = &quot;</span>, reflect.TypeOf(var1))</span><br></pre></td></tr></table></figure>

<h2 id="variable-has-same-name-with-package"><a href="#variable-has-same-name-with-package" class="headerlink" title="variable has same name with package"></a>variable has same name with package</h2><p>In such case, error happens.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">    <span class="string">&quot;coding.xx.com/agent/src/server/conf/xml&quot;</span>    <span class="comment">// package name is xml</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// variable name is xml</span></span><br><span class="line">    xml, err := ioutil.ReadFile(<span class="string">&quot;./vm.xml&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// error!!!!</span></span><br><span class="line">    df := &amp;xml.Domain&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err = df.Unmarshal(xml); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><ul>
<li><a href="https://tour.golang.org/list">A Tour of Go</a></li>
<li><a href="https://devhints.io/go">Go cheatsheet</a></li>
<li><a href="https://github.com/a8m/golang-cheat-sheet">Go basic</a></li>
<li><a href="https://learnxinyminutes.com/docs/go/">Learn GO in Y Minutes</a></li>
<li><a href="https://gobyexample.com/">Go examples</a></li>
<li><a href="https://studygolang.gitbook.io/">StudyGo ZH</a></li>
</ul>
]]></content>
      <categories>
        <category>go</category>
        <category>program</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>go-advanced</title>
    <url>/2022/06/30/go-advanced/</url>
    <content><![CDATA[<h1 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h1><h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><h3 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span> <span class="string">`k1:&quot;v1&quot; k2:&quot;v2&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p Person</span><br><span class="line">    tp := reflect.TypeOf(p)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; tp.NumField(); i++ &#123;</span><br><span class="line">        f := tp.Field(i)</span><br><span class="line">        fmt.Println(f.Tag.Get(<span class="string">&quot;k1&quot;</span>))</span><br><span class="line">        fmt.Println(f.Tag.Get(<span class="string">&quot;k2&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br><span class="line">v1</span><br><span class="line">v2</span><br></pre></td></tr></table></figure>

<p><strong>Rules for writing tag</strong></p>
<span id="more"></span>

<ul>
<li><p><code>whitespace, double quote &quot;, colon :</code> are special in tags.</p>
</li>
<li><p>Tag <code>keys must not contain</code> space (Unicode value 32), quote <code>&quot;</code>(Unicode value 34) and <code>:</code> colon (Unicode value 58) characters.</p>
</li>
<li><p>To form a valid key-value pair, <strong>no space characters are allowed to follow the colon in the supposed key-value pair</strong>. So</p>
<blockquote>
<p><code>optional: &quot;yes&quot;</code> doesn’t form key-value pairs.</p>
</blockquote>
</li>
<li><p>different key-value pairs are separated by whitespace </p>
</li>
<li><p><strong><font color='red'>space characters in tag values are important</font></strong>. So</p>
<blockquote>
<p><code>json:&quot;author, omitempty&quot;</code>,<br><code>json:&quot; author,omitempty&quot;</code> and<br><code>json:&quot;author,omitempty&quot;</code> are different from each other.</p>
</blockquote>
</li>
<li><p>each struct field <code>tag should present as a single line</code> to be wholly meaningful.</p>
</li>
</ul>
<p><strong>Exported struct</strong><br>If a <code>struct type</code> starts with a capital letter, then it is an exported type and it can be accessed from other packages. Similar the <code>fields of a struct</code> start with caps, they can be accessed from other packages.</p>
<p><strong>Structs Equality</strong><br>Structs are value types and are comparable if each of their fields are comparable. Two struct variables are considered equal if their <code>corresponding fields(field with same name)</code> are equal.</p>
<h3 id="anonymous-fields"><a href="#anonymous-fields" class="headerlink" title="anonymous fields"></a>anonymous fields</h3><p>It is possible to <code>create structs with fields that contain only a type without the field name</code>. These kinds of fields are called anonymous fields. Even though anonymous fields do not have an explicit name, <code>by default the name of an anonymous field is the name of its type.</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">string</span></span><br><span class="line">    <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// same as </span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">string</span> <span class="type">string</span></span><br><span class="line">    <span class="type">int</span> <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Person struct has <code>2 fields with name string and int</code>!!!</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">string</span></span><br><span class="line">    <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p1 := Person&#123;</span><br><span class="line">        <span class="type">string</span>: <span class="string">&quot;naveen&quot;</span>,</span><br><span class="line">        <span class="type">int</span>:    <span class="number">50</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(p1.<span class="type">string</span>)</span><br><span class="line">    fmt.Println(p1.<span class="type">int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Promoted-fields"><a href="#Promoted-fields" class="headerlink" title="Promoted fields"></a>Promoted fields</h3><p><code>Fields that belong to an anonymous field which is also a struct are called promoted fields</code> since they can be accessed as if they belong to the struct which holds the anonymous struct. <font color='red'>promoted fields can be functions as well!!!</font></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;</span><br><span class="line">    city  <span class="type">string</span></span><br><span class="line">    state <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Address)</span></span> City() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a.city</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name    <span class="type">string</span></span><br><span class="line">    age     <span class="type">int</span></span><br><span class="line">    Address <span class="comment">//anonymous struct field</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Personx <span class="keyword">struct</span> &#123;</span><br><span class="line">    name     <span class="type">string</span></span><br><span class="line">    age      <span class="type">int</span></span><br><span class="line">    *Address <span class="comment">//anonymous struct field *Address is new type.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := Person&#123;</span><br><span class="line">        name: <span class="string">&quot;Naveen&quot;</span>,</span><br><span class="line">        age:  <span class="number">50</span>,</span><br><span class="line">        Address: Address&#123;</span><br><span class="line">            city:  <span class="string">&quot;Chicago&quot;</span>,</span><br><span class="line">            state: <span class="string">&quot;Illinois&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    px := Personx&#123;</span><br><span class="line">        name: <span class="string">&quot;Naveen&quot;</span>,</span><br><span class="line">        age:  <span class="number">50</span>,</span><br><span class="line">        Address: &amp;Address&#123; <span class="comment">// different ways for assigning</span></span><br><span class="line">            city:  <span class="string">&quot;Chicago&quot;</span>,</span><br><span class="line">            state: <span class="string">&quot;Illinois&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;Name:&quot;</span>, p.name)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Age:&quot;</span>, p.age)</span><br><span class="line">    fmt.Println(<span class="string">&quot;City:&quot;</span>, p.Address.city)  <span class="comment">// can access this way as well</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;City:&quot;</span>, p.Address.state) <span class="comment">// can access this way as well</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;City:&quot;</span>, p.city)          <span class="comment">//city is promoted field</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;City:&quot;</span>, p.City())        <span class="comment">//City() function is promoted field</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;State:&quot;</span>, p.state)        <span class="comment">//state is promoted field</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// same way as above for accessing pointer</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Name:&quot;</span>, px.name)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Age:&quot;</span>, px.age)</span><br><span class="line">    fmt.Println(<span class="string">&quot;City:&quot;</span>, px.Address.city)  <span class="comment">// can access this way as well</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;City:&quot;</span>, px.Address.state) <span class="comment">// can access this way as well</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;City:&quot;</span>, px.city)          <span class="comment">//city is promoted field</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;City:&quot;</span>, px.City())        <span class="comment">//City() is promoted field</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;State:&quot;</span>, px.state)        <span class="comment">//state is promoted field</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>There is <code>no class in Go</code>, but you can <strong>bind functions with struct, hence it behaves like a class.</strong><br><code>func (p Person) speak() string &#123;&#125;</code> The receiver appears in its own argument list <code>between the func keyword and the method name</code>.</p>
<p>You <strong>can only declare a method with a receiver whose type is defined in the same package as the method</strong>. You cannot declare a method with a receiver whose type is defined in another package</p>
<ul>
<li><p><code>Value receiver makes a copy of the type and pass it to the function</code>. The function stack now holds an equal object but at a different location on memory. That means any changes done on the passed object will remain local to the method. The original object will remain unchanged.</p>
</li>
<li><p><code>Pointer receiver passes the address of a type to the function</code>. The function stack has a reference to the original object. So any modifications on the passed object will modify the original object.</p>
</li>
</ul>
<p>If you want to change the state of the receiver in a method, manipulating the value of it, use a pointer receiver. It’s not possible with a value receiver, which copies by value. Any modification to a value receiver is local to that copy. If you don’t need to manipulate the receiver value, use a value receiver(pointer receiver can be used as well).</p>
<p>The Pointer receiver avoids copying the value on each method call. This can be more efficient if the receiver is a large struct.</p>
<p>Value receivers are concurrency safe, while pointer receivers are not concurrency safe. Hence a programmer needs to take care of it.</p>
<p><strong>RULES for receivers</strong></p>
<ul>
<li>Try to use <strong>same receiver type for all your methods as much as possible, not use both</strong>.</li>
<li>If state modification needed, use pointer receiver if not use value receiver(but can use pointer receive as well, good case for large struct).</li>
</ul>
<p><strong>Specific class(not interface) method supports</strong></p>
<ul>
<li><font color='red' size=4>call pointer receiver on non-pointer object(which is converted to pointer automatically)</font></li>
<li><font color='red' size=4>call value receiver on pointer object(which is converted to value object automatically)</font></li>
</ul>
<p><strong>Note: Above supports only work for class method, NOT normal function, as normal function with a pointer argument must take a pointer, normal function with a value argument must take a value object not a pointer</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T and type *T are different types but *T contains method of T!!!</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span></span> speak() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Speak() called by &quot;</span> + p.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span></span> say() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;say() called by &quot;</span> + p.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p1 := Person&#123;<span class="string">&quot;Jack&quot;</span>&#125;</span><br><span class="line">    p1.speak() <span class="comment">// (&amp;p).speak() automatically done by Go, but speak() is not a method of Person!!</span></span><br><span class="line">    </span><br><span class="line">    p2 := &amp;Person&#123;<span class="string">&quot;jason&quot;</span>&#125;</span><br><span class="line">    p2.say() <span class="comment">//(*p2).say() automatically done by Go, but say() is a method of Person!!!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If you were to call p.speak(), the compiler would automatically change that to (&amp;p).speak(). A similar conversion happens in the other direction if you have a method with a non-pointer receiver and you call it on a pointer, easier to use.</p>
<p><strong>Call method on struct nil pointer, no exception in Go, nil return</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">  x, y <span class="type">int</span></span><br><span class="line">  <span class="comment">// this is no method delcare here!!!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bad way if want to update, but it&#x27;s ok if not updating caller object</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span></span> Update() &#123; <span class="comment">// value receiver</span></span><br><span class="line">  v.x = <span class="number">10</span></span><br><span class="line">  v.y = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good way use (v *Vertex) to bind with struct Vertex</span></span><br><span class="line"><span class="comment">// bound with Vertex struct</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span></span> Scale(f <span class="type">int</span>) &#123; <span class="comment">// pointer receiver</span></span><br><span class="line">  v.x = v.x * f</span><br><span class="line">  v.y = v.x * f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">classDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// call pointer receiver on non-pointer object</span></span><br><span class="line">    v1 := Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">    </span><br><span class="line">    v1.Update() <span class="comment">// copy of v1 is passed!!!</span></span><br><span class="line">    fmt.Println(v1) <span class="comment">// v1 is not changed at all</span></span><br><span class="line">    </span><br><span class="line">    v1.Scale(<span class="number">2</span>) <span class="comment">// pointer receiver (&amp;v1).Scale() is called automatcially by Go</span></span><br><span class="line">    fmt.Println(v1)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// call value receiver on pointer object</span></span><br><span class="line">    v2 := &amp;Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">    </span><br><span class="line">    v2.Update() <span class="comment">// value receiver (*v2).Update() is called automatcially by Go</span></span><br><span class="line">    fmt.Println(*v2) <span class="comment">// v2 is not changed at all</span></span><br><span class="line">    </span><br><span class="line">    v2.Scale(<span class="number">2</span>)</span><br><span class="line">    fmt.Println(*v2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">classDemo()</span><br></pre></td></tr></table></figure>

<pre><code>&#123;1 2&#125;
&#123;2 4&#125;
&#123;1 2&#125;
&#123;2 4&#125;
</code></pre>
<h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><p>Types implicitly satisfy an interface if they <strong><code>implement all required methods defined by that interface</code>.</strong></p>
<p><strong><code>type T and type *T are different types but *T contains all methods of T, but the other side is not true, even not true you still can call *T method from T object like above(actually implicit conversion happened)</code></strong>  </p>
<p>The method set of any other <code>type T consists of all methods declared with receiver type T</code>. The method set of the corresponding pointer <code>type *T is the set of all methods declared with receiver *T or T</code> (that is, it also contains the method set of T). </p>
<p>That means:</p>
<ul>
<li><p>If a type <code>T</code> implements all methods of an interface using value receiver, then both value <code>T</code> and pointer of that type <code>*T</code> can be used while assigning to that interface variable or while passing to a function which accept an argument as that interface.  </p>
</li>
<li><p>If a type <code>T</code> implements all methods of an interface using pointer receiver, then the only pointer of that type <code>*T</code> can be used while assigning to that interface variable or while passing to a function that accepts an argument as that interface.</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Humaner <span class="keyword">interface</span> &#123;</span><br><span class="line">    speak() <span class="type">string</span> <span class="comment">// no func keyword at the beginning</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// two common used interface var</span></span><br><span class="line"><span class="keyword">var</span> hi Humaner = struct_object</span><br><span class="line"><span class="keyword">var</span> hi Humaner = &amp;struct_object</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hi *Humaner = &amp;struct_object <span class="comment">// Never see such way used!!!</span></span><br></pre></td></tr></table></figure>


<p><strong><code>interface &#123;&#125;</code> is a special type which has no method, hence all types can be converted to it, it looks like void* in C but it’s not an pointer in Go, an string, int, object, &amp;object can assign to it as well</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(a <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> b <span class="keyword">interface</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">12</span>)</span><br><span class="line">test(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// both are ok!!</span></span><br><span class="line">test(Person&#123;Name: <span class="string">&quot;Jason&quot;</span>&#125;)</span><br><span class="line">test(&amp;Person&#123;<span class="string">&quot;Jason&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>Call method on interface nil pointer, runtime error!!!</strong></p>
<p><strong>More details, refer to <a href="https://halfrost.com/go_interface/">inside interface</a></strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Humaner <span class="keyword">interface</span> &#123;</span><br><span class="line">    speak() <span class="type">string</span></span><br><span class="line">    say() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span></span> say() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;say() called by &quot;</span> + p.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span></span> speak() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;speak() called by &quot;</span> + p.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">speakSomething</span><span class="params">(h Humaner)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;area&quot;</span>, h.speak())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saySomething</span><span class="params">(h Humaner)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;area&quot;</span>, h.say())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demoInterface</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := Person&#123;<span class="string">&quot;harsh&quot;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//works</span></span><br><span class="line">    speakSomething(&amp;p)</span><br><span class="line">    <span class="comment">// works because *person has method implemented by person as well.</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// both do NOT work(compiler error) because type person does not implment speak() method</span></span><br><span class="line">    <span class="comment">// hence can&#x27;t convert type person to human interface</span></span><br><span class="line">    <span class="comment">// speakSomething(p) compiler error</span></span><br><span class="line">    <span class="comment">// saySomething(p)   compiler error.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//works, as for specific class p.speak() converted to (&amp;p).speak() by Go automatically</span></span><br><span class="line">    fmt.Println(p.speak())</span><br><span class="line">    </span><br><span class="line">    fmt.Println(p.say())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">demoInterface()</span><br></pre></td></tr></table></figure>

<pre><code>area speak() called by harsh
speak() called by harsh
say() called by harsh
</code></pre>
<h3 id="embedding-and-composing-struct"><a href="#embedding-and-composing-struct" class="headerlink" title="embedding and composing struct"></a>embedding and composing struct</h3><p><strong>Embedding old way used like C</strong>  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Admin <span class="keyword">struct</span> &#123;</span><br><span class="line">  u User</span><br><span class="line">  permissions <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Embedding go supported new way</strong>  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Admin <span class="keyword">struct</span> &#123;</span><br><span class="line">  User  <span class="comment">//anonymous fields</span></span><br><span class="line">  <span class="comment">/* all its methods are “promoted” to the Admin as well. </span></span><br><span class="line"><span class="comment">   * That means one can reference the name of the user via admin.Name no intermediate call to the u needed, like Admin.u.Name</span></span><br><span class="line"><span class="comment">   // short way: Admin.Name</span></span><br><span class="line"><span class="comment">   // another way: Admin.User.Name </span></span><br><span class="line"><span class="comment">   */</span> </span><br><span class="line">  permissions <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Composing types</strong><br>which consists of embedding various types to create other types&#x2F;interfaces</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ReadWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">    Reader <span class="comment">//anonymous fields</span></span><br><span class="line">    Writer <span class="comment">//anonymous fields</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>What I can see from the above definition is that a <code>ReadWriter is an interface which must contain all the functions defined on both Reader and Writer</code>, which are defined elsewhere.</p>
<p><strong>NOTE</strong></p>
<ul>
<li><font color='red'>There is no function signature in struct type like we did for C</font></li>
<li><font color='red'>If you embed a Interface in struct, that means you declare a Interface variable of the struct!!!</font></li>
</ul>
<h3 id="empty-struct"><a href="#empty-struct" class="headerlink" title="empty struct"></a>empty struct</h3><p>Instance of empty struct <code>struct&#123;&#125; in doesn’t occupy any memory</code>. It is of zero byte. it’s used mostly in two cases:</p>
<ul>
<li><p>Empty struct is a very good use case in a channel when you only want to use a <code>channel for notification and not for actually passing in any data</code>. but some one uses bool channel, which is accepted, but empty struct is better choice!!!</p>
</li>
<li><p>Implementation of Set data structure. A set is a data structure that holds elements without any particular order. An element only appears once in a set. We use <code>map[keyType]struct&#123;&#125; for set</code>. struct{} is only just to let us know if an element exists in the set or not.</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Set <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Set)</span></span> Add(key <span class="type">string</span>) &#123;</span><br><span class="line">    <span class="comment">// struct &#123;&#125; is type, while struct&#123;&#125;&#123;&#125; is an instance of this type.</span></span><br><span class="line">    s[key] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Set)</span></span> Delete(key <span class="type">string</span>) &#123;</span><br><span class="line">    <span class="built_in">delete</span>(s, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Set)</span></span> Has(key <span class="type">string</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    _, ok := s[key]</span><br><span class="line">    <span class="keyword">return</span> ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := Set&#123;&#125;</span><br><span class="line">    s.Add(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// save slot for same key</span></span><br><span class="line">    s.Add(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    s.Add(<span class="string">&quot;b&quot;</span>)</span><br><span class="line">    s.Delete(<span class="string">&quot;b&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// no error even for no exist!!!</span></span><br><span class="line">    s.Delete(<span class="string">&quot;c&quot;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;set %v has &#x27;a&#x27;: %v\n&quot;</span>, s, s.Has(<span class="string">&quot;a&quot;</span>))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;set %v has &#x27;b&#x27;: %v\n&quot;</span>, s, s.Has(<span class="string">&quot;b&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>set map[a:&#123;&#125;] has &#39;a&#39;: true
set map[a:&#123;&#125;] has &#39;b&#39;: false
</code></pre>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="comment">// send</span></span><br><span class="line">    time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;after 1s, sent notification, data is ready&quot;</span>)</span><br><span class="line">    ch &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// channel buffer is zero</span></span><br><span class="line">    <span class="comment">// some one use ch := make(chan bool) but empty struct is better!!!</span></span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> worker(ch)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;blocked due to no data&quot;</span>)</span><br><span class="line">    <span class="comment">// read from channel, if no data block here</span></span><br><span class="line">    &lt;-ch</span><br><span class="line">    fmt.Println(<span class="string">&quot;wake up after 1s as data is ready&quot;</span>)</span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>blocked due to no data
after 1s, sent notification, data is ready
wake up after 1s as data is ready
</code></pre>
<h2 id="package"><a href="#package" class="headerlink" title="package"></a>package</h2><p>A package is a <strong><code>collection of source files in the same directory</code></strong> that are compiled together. <code>Functions, types, variables, and constants defined in one source file are visible to all other source files within the same package</code>. </p>
<p><strong><font color='red'>one package per directory, you can NOT have multiple packages in same directory</font></strong></p>
<p><strong>create a runnable program</strong><br>A standalone executable Go program must have package main declaration. <strong>If a program is part of the main package, then go build(go install) will create a binary file; which upon execution calls main function of the program, binary file is created only for man package</strong>  </p>
<p><strong>create a library</strong><br>If a program is part of a package other than main, then a package archive file is created with go build(go install) command</p>
<p><code>Package declaration(package xxx at beginning of xx.go) which should be first line of code</code>, <strong>file name can be different than package name</strong>. When you import a package, <strong><code>package declaration is used to create package reference variable.</code></strong></p>
<p><strong>Export name(var or method from a package)</strong><br>A name is exported if it <code>begins with a capital letter</code>, exported means it can be accessed from other package.</p>
<p><strong>package scope</strong><br>A package scope is a region within a package where a declared variable(<strong>even it’s not exported</strong>) is accessible from within a package (<code>across all the files in the package</code>).</p>
<p><strong>package init()</strong><br><code>func init()&#123;&#125;</code> is called by Go when a package is initialized. It does not take any arguments and does not return any value, hence <code>func init()&#123;&#125;</code> is a special function of xx.go file should be only one for a package.</p>
<p><strong>Package alias</strong><br>When you import a package, <code>Go creates a variable using the package declaration of the package</code>. If you are importing multiple packages with the same name, this will lead to a conflict, use alias to avoid conflict if happens.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    log <span class="string">&quot;fmt&quot;</span> <span class="comment">// log is alias for fmt package.</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>Publish your package</strong><br><code>Publish it on GitHub and you are good to go</code>. If your package is executable, people can use it as a command-line tool else they can import it in a program and use it as a utility module.</p>
<h3 id="inside-import-statement"><a href="#inside-import-statement" class="headerlink" title="inside import statement"></a>inside import statement</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> github.com/example/hello</span><br><span class="line"><span class="comment">// github.com/example is a path!!!</span></span><br><span class="line"><span class="comment">// hello is also a path under example/</span></span><br><span class="line"><span class="comment">// as you know package name can be different with dir who contains it, but most of time it&#x27;s same.</span></span><br></pre></td></tr></table></figure>

<p>Above statement essentially means that <strong>import package present at directory <code>hello</code>. It doesn’t mean import package hello, it import package under <code>hello/</code></strong>, that also means package name can be different with its directory.</p>
<p><strong>Note</strong></p>
<ul>
<li>Go does NOT allow multiple packages at same directory</li>
<li><strong>import is not recursive</strong>, if you have packages under subdirectory, you should import that subdirectory as well.</li>
<li><font color='red'>dot import</font>: If an explicit period (.) appears instead of a name, all the package’s exported identifiers declared in that package’s package block will be declared in the importing source file’s file block and must be accessed without a qualifier. <code>import . &quot;fmt&quot;</code>, then use <code>Println(&quot;hello&quot;)</code>. but it’s not good way.</li>
</ul>
<h3 id="searching-package"><a href="#searching-package" class="headerlink" title="searching package"></a>searching package</h3><p><strong>Path of searching packages depends on GO111MODULE is enabled or not but both way check standard library firstly</strong></p>
<p><code>$GOROOT=/usr/local/go</code> for standard library like <code>fmt, path, cmd, buffio etc</code>.<br><code>$GOPATH=/home/go</code> for third-party library.</p>
<p><font color='red'><strong>GO111MODULE&#x3D;on you must have go.mod in your project to build and run!!!</strong>  </font></p>
<ul>
<li><font color='red'><code>$CURRENT_DIR/vendor</code> is NOT checked anymore!!!</font></li>
<li><code>$GOROOT/pkg/&#123;arch&#125;/xxx.a</code>  precompiled</li>
<li><code>$GOROOT/src</code> standard library for source code</li>
<li><code>$GOPATH/pkg/mod/xxx</code> workspace for source code</li>
</ul>
<p><strong>GO111MODULE&#x3D;off</strong>  </p>
<ul>
<li><code>$CURRENT_DIR/vendor</code> NOT <code>$CURRENT_DIR/vendor/src</code>!!!</li>
<li><code>$GOROOT/pkg/&#123;arch&#125;/xxx.a</code> precompiled</li>
<li><code>$GOROOT/src</code> standard library for source code</li>
<li><code>$GOPATH/pkg/&#123;arch&#125;/xxx.a</code> precompiled</li>
<li><code>$GOPATH/src/xxx</code> workspace for source code </li>
<li><font color='red'><strong>Must put your project at $GOPATH&#x2F;src to make it build</strong></font></li>
</ul>
<p>when GO111MODULE&#x3D;off, <code>go get</code> would fetch all the sources by <strong>using their import paths and store them in $GOPATH&#x2F;src</strong>. There was <strong><code>no versioning storing a single git checkout of every package</code></strong> and the ‘master’ branch would represent a stable version of the package.</p>
<p>Go Modules (GO111MODULE&#x3D;on) were introduced with Go 1.11, Go Modules <strong>stores tagged versions with go.mod keeping track of each package’s version</strong></p>
<ul>
<li>manually run  <code>GO111MODULE=on go get</code> would fetch all the sources with tagged versions and saved it at <code>$GOPATH/pkg/mod/</code></li>
<li>automatically run <strong><code>go get</code> when you run <code>go build or go install</code></strong> based on tagged version from go.mod of each module,<strong>you must have go.mod of each module</strong></li>
</ul>
<h3 id="import-package"><a href="#import-package" class="headerlink" title="import package"></a>import package</h3><p><code>import</code> statement imports the package under that path, as one package per directory, hence only one package is imported for the path, most of time ,<code>for easy to use, path and package name are same</code>, but the path and package name can be different, if they are different, you need to know both package path and package name, while if they are same, you just need to know one, details refer to <a href="https://golangbyexample.com/package-folder-name-golang/">package and folder name</a></p>
<h3 id="go-env"><a href="#go-env" class="headerlink" title="go env"></a>go env</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">check all <span class="built_in">env</span> of go</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go <span class="built_in">env</span></span></span><br><span class="line">GOENV=&quot;/home/ubuntu/.config/go/env&quot;</span><br><span class="line">GO111MODULE=&quot;on&quot;</span><br><span class="line">GOBIN=&quot;&quot;</span><br><span class="line">GOMODCACHE=&quot;/home/ubuntu/go/pkg/mod&quot;</span><br><span class="line">GOPATH=&quot;/home/ubuntu/go&quot;</span><br><span class="line">GOROOT=&quot;/usr/local/go&quot;</span><br><span class="line">GOPROXY=&quot;https://goproxy.io,direct&quot;</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">set</span> <span class="built_in">env</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vi /home/ubuntu/.config/go/env</span></span><br><span class="line">GOBIN=&quot;&quot;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go <span class="built_in">env</span> -w GOBIN=<span class="string">&quot;&quot;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>frequently used env</strong></p>
<ul>
<li><code>$GOBIN: bin dir of workspace which stores binary for application after go install, default $GOPATH/bin</code></li>
<li><code>$GOMODCACHE: mod(module) cache source code(xx.go) if mod is not standard library when GO111MODULE is on(mod with version), default $GOPATH/pkg/mod.</code></li>
<li><code>$GOPATH: working path, has </code>bin&#x2F;, src&#x2F;, mod&#x2F;<code>, src is used to store download non-standard library(without version)</code></li>
<li><code>$GOROOT: Standard library of Go</code></li>
</ul>
<h3 id="workspace"><a href="#workspace" class="headerlink" title="workspace"></a>workspace</h3><p>A <strong>workspace</strong> is Go’s way to facilitate project management. A workspace, in a nutshell, is a <strong>directory on your system where Go looks for source code files, manages dependency packages and build distribution binary files</strong></p>
<p><font color='red'>A workspace can have multiple applications, if different apps refer to same package, they share the same package files at this workspace.</font></p>
<p><font color='red'>You can have as many workspaces as you want, as long as you keep <code>GOPATH</code> environment variable pointed to the current working workspace directory.</font></p>
<p>A Go workspace directory must have three sub-directories <code>src, pkg and bin</code>, <code>$GOPATH points to active workspace</code>.</p>
<ul>
<li><p>pkg:</p>
<ul>
<li>The pkg directory contains Go package objects(get by <code>go get</code>). They are the compiled versions of the original package source code or source code at pkg&#x2F;mod for GO111MODULE enabled.</li>
</ul>
</li>
<li><p>bin:</p>
<ul>
<li>The bin directory contains the binary executable files. <code>These files are created by go install commands. go install command runs go build command internally and then outputs these files to the bin directory</code></li>
</ul>
</li>
<li><p>src:  </p>
<ul>
<li>The src directory contains Go packages. A package in nutshell is a project directory containing Go source code (.go files). Any packages installed using <code>GO111MODULE=off go get</code> command will reside here as well (and its dependency packages).</li>
</ul>
</li>
</ul>
<h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p>Go code is grouped into packages, and <code>packages are grouped into modules</code>, a module can have several related packages but not at same directory, <strong>a module is logical groups to track dependencies of all packages in go.mod file, a module only needs one go.mod file at root directory, subdirectory does not need it all.</strong> </p>
<p>Go must provide all of their dependencies via either Go modules with a go.mod file, or a vendor directory, go.mod is created with <code>go mod init example.com/greetngs</code> and updated when run <code>go mod tidy</code>, go.mod only tracks the deps(write a record in it), the downloaded modules is saved at $GOMODCACHE.</p>
<p>In <code>GO111MODULE=off, if a package or a parent folder(parent&#39;s parent ...) of a package contains folder named vendor it will be searched for dependencies using the vendor folder as an import path root</code>. While vendor folders can be nested, in most cases it is not advised or needed. <strong>when GO111MODULE&#x3D;off Any package in the vendor folder will be found before the standard library.</strong></p>
<h3 id="go-mod"><a href="#go-mod" class="headerlink" title="go.mod"></a>go.mod</h3><p><strong>useful command used within a module</strong>  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">initialize new module <span class="keyword">in</span> current directory</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">use example.com/greetings.</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">If you publish a module, this must be a path from <span class="built_in">which</span> your module can be downloaded by Go tools. Mostly it<span class="string">&#x27;s your code&#x27;</span>s repository.</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go mod init example.com/greetings</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">edit go.mod from <span class="built_in">command</span> line</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go mod edit</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">edit <span class="built_in">source</span> code, import packages etc, <span class="keyword">then</span> run go mod tidy</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">go mod tidy ensures that the go.mod file matches the <span class="built_in">source</span> code <span class="keyword">in</span> the module. It adds any missing module requirements necessary to build the current module<span class="string">&#x27;s packages and dependencies, and it removes requirements on modules that don&#x27;</span>t provide any relevant packages. It also adds any missing entries to go.sum and removes unnecessary entries.</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add missing and remove unused modules, download package <span class="keyword">if</span> not found locally</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go mod tidy</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">show all import information</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go list -m -json all</span></span><br></pre></td></tr></table></figure>

<p><strong>project layout</strong> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-- prj</span><br><span class="line">|   |-- greetings</span><br><span class="line">|   |   |-- go.mod</span><br><span class="line">|   |   `-- greetings.go</span><br><span class="line">|   `-- hello</span><br><span class="line">|       |-- go.mod</span><br><span class="line">|       `-- hello.go</span><br></pre></td></tr></table></figure>


<h4 id="creating-a-module-library-used-by-others"><a href="#creating-a-module-library-used-by-others" class="headerlink" title="creating a module(library) used by others"></a>creating a module(library) used by others</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> greetings</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> greetings</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go mod init example.com/greetings</span></span><br><span class="line">go: creating new go.mod: module example.com/greetings</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">go.mod file to track your code<span class="string">&#x27;s dependencies, it&#x27;</span>s updated automatically.</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vi greatings.go</span></span><br><span class="line"></span><br><span class="line">package greetings</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">// Hello returns a greeting for the named person.</span><br><span class="line">func Hello(name string) string &#123;</span><br><span class="line">    // Return a greeting that embeds the name in a message.</span><br><span class="line">    message := fmt.Sprintf(&quot;Hi, %v. Welcome!&quot;, name)</span><br><span class="line">    return message</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">optional</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go tool compile -pack greetings.go</span></span><br><span class="line">greetings.a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go tool compile greetings.go</span></span><br><span class="line">greetings.o</span><br></pre></td></tr></table></figure>

<h4 id="creating-a-module-runnable-application"><a href="#creating-a-module-runnable-application" class="headerlink" title="creating a module(runnable application)"></a>creating a module(runnable application)</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> hello</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> hello</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go mod init example.com/hello</span></span><br><span class="line">go: creating new go.mod: module example.com/hello</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vi hello.go</span></span><br><span class="line"></span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">    &quot;example.com/greetings&quot; //By convention, the package name is the same as the last element of the import path</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    // Get a greeting message and print it.</span><br><span class="line">    message := greetings.Hello(&quot;Gladys&quot;)</span><br><span class="line">    fmt.Println(message)</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">For production use, you’d publish the example.com/greetings module from its repository, go tools will download it from there</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">For now, because you haven<span class="string">&#x27;t published the module yet, you need to adapt the example.com/hello module so it can find the example.com/greetings code on your local file system.</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">use the go mod edit command to edit the example.com/hello module to redirect Go tools from its module path (where the module isn&#x27;</span>t) to the <span class="built_in">local</span> directory (<span class="built_in">where</span> it is)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go mod edit -replace=example.com/greetings=../greetings</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add dependency <span class="keyword">in</span> go.mod</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go mod tidy</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go build &amp; ./hello  // build run, binary is written to disk</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go run .           // build, run without writing binary to disk</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go install &amp; hello // build, install, and run</span></span><br></pre></td></tr></table></figure>

<h4 id="Importing-packages-from-your-module"><a href="#Importing-packages-from-your-module" class="headerlink" title="Importing packages from your module"></a>Importing packages from your module</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(base) [root@centos go]<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">|-- go.mod</span><br><span class="line">|-- greet</span><br><span class="line">|   `-- greet.go</span><br><span class="line">`-- hello.go</span><br><span class="line"></span><br><span class="line">1 directory, 3 files</span><br><span class="line">(base) [root@centos go]<span class="comment"># cat go.mod </span></span><br><span class="line">module example.com/hello</span><br><span class="line"></span><br><span class="line">go 1.15</span><br><span class="line"></span><br><span class="line"><span class="comment"># module path: example.com/hello</span></span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;example.com/hello/greet&quot;</span> <span class="comment">// import this way: module_path/greet</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        greet.Say(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="vendor"><a href="#vendor" class="headerlink" title="vendor"></a>vendor</h4><p>It is a folder found <strong>in a module that stores a copy of all the code the module depends on</strong>. The code is used to compile the final executable when the go build command is run with <code>GO111MODULE=off</code>.</p>
<p>By default, there is no vendor folder at all, but you can <strong>create it with <code>go mod vendor</code> or <code>govendor</code> <a href="https://shockerli.net/post/go-package-manage-tool-govendor/">govendor tool</a></strong>, after this all deps are copied to vendor fold, that means <code>you can build your project without downloading deps if you switch to another machine or the deps are deleted from Internet, you have a total copy of it.</code></p>
<p>It’s old way, should not use it anymore, refer to <a href="https://go.dev/blog/migrating-to-go-modules">migrate to go mod</a> to update your project.</p>
<h2 id="exception"><a href="#exception" class="headerlink" title="exception"></a>exception</h2><p><strong>No exception in Go like python or C++</strong>, library should return a value and err if want caller check error.</p>
<p>In Go, there is a built-in <code>error type</code> which defines like this</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">error</span> <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>So that any type who satisfies this interface implements <code>Error() method</code> can be used as <code>error</code>.</p>
<ul>
<li><code>fmt.Errorf(&quot;error %d&quot;, 10) returns struct instance which implements such method</code></li>
<li>The fmt package formats an error value by calling its Errorf() method.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">great</span><span class="params">(a, b <span class="type">int</span>)</span></span>(<span class="type">int</span>, <span class="type">error</span>) &#123;                                              </span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;                                                                  </span><br><span class="line">        <span class="keyword">return</span> a, <span class="literal">nil</span>                                                           </span><br><span class="line">    &#125;                                                                           </span><br><span class="line">    <span class="keyword">return</span> b, fmt.Errorf(\<span class="string">&quot;%v is not great than %v\&quot;, a, b)                     </span></span><br><span class="line"><span class="string">&#125;                                                                               </span></span><br></pre></td></tr></table></figure>

<h3 id="recover-from-panic"><a href="#recover-from-panic" class="headerlink" title="recover from panic"></a>recover from panic</h3><p><code>defer function is called even panic happens.</code></p>
<p>When <code>panic is called</code>, including implicitly for run-time errors such as indexing a slice out of bounds or failing a type assertion, <code>it immediately stops execution of the current function and begins unwinding the stack of the goroutine, running any deferred functions along the way. If that unwinding reaches the top of the goroutine&#39;s stack, the program dies.</code> </p>
<p>A call to <code>recover()</code> stops the unwinding and returns the argument passed to panic. Because the only code that runs while unwinding is inside deferred functions, recover is only useful inside deferred functions.</p>
<p><strong>One application of recover is to shut down a failing goroutine inside a server without killing the other executing goroutines.</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">server</span><span class="params">()</span></span> &#123;</span><br><span class="line">    works := [<span class="number">10</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> works &#123;</span><br><span class="line">        <span class="keyword">go</span> safelyDo(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;panic when processing work&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;work is done&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">safelyDo</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;work failed:&quot;</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    do(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server()</span><br></pre></td></tr></table></figure>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> number</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, fmt.Errorf(<span class="string">&quot;not support negative adding&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> a + b, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    v, err := add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;1+2=&quot;</span>, v)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    v, err = add(<span class="number">-1</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       fmt.Println(<span class="string">&quot;-1+2=&quot;</span>, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure>

<pre><code>1+2= 3
not support negative adding
</code></pre>
<h2 id="cgo-call-C-in-Go"><a href="#cgo-call-C-in-Go" class="headerlink" title="cgo(call C in Go)"></a>cgo(call C in Go)</h2><p>Cgo lets Go packages call C code. In order to use C code in Go, you first need to import a “pseudo-package”, “C” a special name interpreted by cgo as a reference to C’s name space, and include headers needed by C code when compiling with fixed format.</p>
<p>If the import of <code>&quot;C&quot; is immediately preceded by a comment, that comment, called the preamble, is used as a header when compiling the C parts of the package by gcc!</code>, The preamble may contain any C code, including function and variable declarations and definitions. These may then be referred to from Go code as though they were defined in the package “C”. <strong>All names declared in the preamble may be used, even if they start with a lower-case letter.</strong></p>
<p><strong>NOTE</strong><br><code>CFLAGS, CPPFLAGS, CXXFLAGS, FFLAGS and LDFLAGS may be defined with pseudo #cgo directives within these comments</code> to tweak the behavior of the C, C++ or Fortran compiler.</p>
<p><strong>Note: No space line between import “C” and its header comment</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;xxx.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;xxx.c&gt; </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// OR if needs to link other library or set FLAG</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #cgo CFLAGS: -DPNG_DEBUG=1</span></span><br><span class="line"><span class="comment">// #cgo linux CFLAGS: -DLINUX=1</span></span><br><span class="line"><span class="comment">// #cgo LDFLAGS: -lpng</span></span><br><span class="line"><span class="comment">// #include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;png.h&gt;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="type-mapping-between-C-and-go"><a href="#type-mapping-between-C-and-go" class="headerlink" title="type mapping between C and go"></a>type mapping between C and go</h3><p>The standard C numeric types are available under the names</p>
<ul>
<li>C.char, C.schar (signed char), C.uchar (unsigned char)</li>
<li>C.short, C.ushort (unsigned short)</li>
<li>C.int, C.uint (unsigned int)</li>
<li>C.long, C.ulong (unsigned long), C.longlong (long long), C.ulonglong (unsigned long long)</li>
<li>C.float, C.double</li>
<li>The C type <em><em>void</em> is represented by Go’s unsafe.Pointer.</em>*</li>
<li>The C types __int128_t and __uint128_t are represented by [16]byte.</li>
<li>C.struct_person{} refer to <code>struct person&#123;&#125;</code> defined in C</li>
<li>C.sizeof_struct_person get the len of <code>struct person&#123;&#125;</code> defined in C</li>
</ul>
<p><strong>Access struct</strong></p>
<ul>
<li>To access a struct, union, or enum type directly, prefix it with struct_, union_, or enum_, as in <code>C.struct_stat.</code></li>
</ul>
<p><strong>sizeof</strong></p>
<ul>
<li>The size of any C type T is available as C.sizeof_T, like <code>C.sizeof_struct_stat == sizeof(struct stat)</code></li>
</ul>
<p><strong>pass Go array to C function</strong></p>
<ul>
<li>n, err :&#x3D; C.f(&amp;array[0]) &#x2F;&#x2F; pass address of the first element.</li>
</ul>
<p><strong>Memory allocations made by C code are unknown to Go’s memory manager</strong>.   </p>
<ul>
<li>When you create a C string with <code>C.CString</code> (or any C memory allocation) you must remember to free the memory when you’re done with it by calling C.free.</li>
</ul>
<h3 id="write-C-within-go-file"><a href="#write-C-within-go-file" class="headerlink" title="write C within go file"></a>write C within go file</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// void hello() &#123;</span></span><br><span class="line"><span class="comment">//     printf(&quot;hello\n&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    C.hello()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="write-C-out-of-go-compile-as-library-go-import-the-library"><a href="#write-C-out-of-go-compile-as-library-go-import-the-library" class="headerlink" title="write C out of go, compile as library, go import the library"></a>write C out of go, compile as library, go import the library</h3><p><strong>sum.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">char</span>* msg)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;say: &#x27;%s&#x27; adding\n&quot;</span>, msg);</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>sum.h</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">char</span>* msg)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>Then create shared library</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc -fPIC -c sum.c</span><br><span class="line">$ gcc -shared -o libsum.so sum.o</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">libsum.so  sum.c  sum.h  sum.o  test.go</span><br></pre></td></tr></table></figure>

<p><strong>test.go</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// #cgo CFLAGS: -I./</span></span><br><span class="line"><span class="comment">// #cgo LDFLAGS: -L./ -lsum</span></span><br><span class="line"><span class="comment">// #include &quot;sum.h&quot;</span></span><br><span class="line"><span class="comment">// #include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    C.hello()</span><br><span class="line"></span><br><span class="line">    a := C.<span class="type">int</span>(<span class="number">1</span>)</span><br><span class="line">    b := C.<span class="type">int</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">// create memory without go track</span></span><br><span class="line">    msg := C.CString(<span class="string">&quot;starting&quot;</span>)</span><br><span class="line">    c := C.sum(a, b, msg)</span><br><span class="line">    <span class="comment">// free it.</span></span><br><span class="line">    C.free(unsafe.Pointer(msg)) <span class="comment">//defined in stdlib.h</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;sum(1,2)=%v\n&quot;</span>, <span class="type">int</span>(c))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run test.go</span><br><span class="line"></span><br><span class="line">say: <span class="string">&#x27;&#x27;</span> adding</span><br><span class="line"><span class="built_in">sum</span>(1,2)=3</span><br></pre></td></tr></table></figure>

<p><a href="https://golang.org/cmd/cgo/">cgo guideline</a></p>
<h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><p><code>func NumCPU() int</code></p>
<blockquote>
<p>NumCPU returns the number of logical CPUs usable by the current process.<br>The set of available CPUs is checked by querying the operating system at process startup. Changes to operating system CPU allocation after process startup are not reflected. </p>
</blockquote>
<p><code>func GOMAXPROCS(n int) int</code></p>
<blockquote>
<p>GOMAXPROCS sets the maximum number of CPUs that can be executing simultaneously and returns the previous setting. It defaults to the value of runtime.NumCPU. If n &lt; 1, it does not change the current setting. This call will go away when the scheduler improves. </p>
</blockquote>
<p><code>func Gosched()</code></p>
<blockquote>
<p>Gosched yields the processor, allowing other goroutines to run. It does not suspend the current goroutine, so execution resumes automatically.<br><a href="https://pkg.go.dev/runtime">runtime library</a></p>
</blockquote>
<h2 id="concurrency-multiple-threads"><a href="#concurrency-multiple-threads" class="headerlink" title="concurrency(multiple threads)"></a>concurrency(multiple threads)</h2><p>The channel introduces many use cases in which channels are used to <code>do data synchronizations among goroutines</code>. In fact, channels are not the only synchronization techniques provided in Go. There are some other synchronization techniques supported by Go. For some <code>specified circumstances, using the synchronization techniques other than channel are more efficient and readable than using channels</code>.</p>
<p><strong>ways to use channel, think <code>chan bool</code> as type</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">var</span> m <span class="keyword">chan</span> <span class="type">bool</span> <span class="comment">// bool channel</span></span><br><span class="line">- <span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">string</span>] <span class="keyword">chan</span> <span class="type">bool</span> <span class="comment">// each element of map is a bool channel.</span></span><br><span class="line">- <span class="keyword">var</span> m <span class="keyword">chan</span> <span class="type">int</span> <span class="comment">// int channel</span></span><br><span class="line">- <span class="keyword">var</span> m []<span class="keyword">chan</span> <span class="type">int</span> <span class="comment">// each element of the array is an int channel</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">gen</span><span class="params">(nums []<span class="type">int</span>)</span></span> &lt;-<span class="keyword">chan</span> <span class="type">int</span> &#123;&#125; <span class="comment">// reading channel as return value</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">gen</span><span class="params">(c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;&#125; <span class="comment">// channel as parameter</span></span><br><span class="line">- <span class="keyword">var</span> ch2 <span class="keyword">chan</span>&lt;- <span class="type">int</span><span class="comment">// channel only for writing</span></span><br><span class="line">- <span class="keyword">var</span> ch3 &lt;-<span class="keyword">chan</span> <span class="type">int</span> <span class="comment">// channel only for reading</span></span><br><span class="line"></span><br><span class="line">- ch4 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">- ch5 := &lt;-<span class="keyword">chan</span> <span class="type">int</span>(ch4) <span class="comment">// convert to unary channel for reading</span></span><br><span class="line">- ch6 := <span class="keyword">chan</span>&lt;- <span class="type">int</span>(ch4) <span class="comment">// convert to unary channel for writing</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// return a channel for reading</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gen</span><span class="params">(nums []<span class="type">int</span>)</span></span> &lt;-<span class="keyword">chan</span> <span class="type">int</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Request <span class="keyword">struct</span> &#123;</span><br><span class="line">    args        []<span class="type">int</span></span><br><span class="line">    f           <span class="function"><span class="keyword">func</span><span class="params">([]<span class="type">int</span>)</span></span> <span class="type">int</span></span><br><span class="line">    resultChan  <span class="keyword">chan</span> <span class="type">int</span> <span class="comment">// channel var, need to initialize by make(chan int) later on</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr style="border:1px solid gray"> </hr>

<p>A goroutine is a <code>lightweight &#39;thread&#39; managed by the Go runtime</code>. by default GO creates a pool of linux threads, the number of this pool equals to number of processor, goroutine runs on these threads.</p>
<p><code>go f(x, y, z)</code></p>
<p><strong><code>The evaluation of f, x, y, and z happens in the current goroutine</code> and the execution of f happens in the new goroutine.</strong></p>
<p><strong>goroutines run in the same address space</strong>, so access to shared memory must be synchronized. The <code>sync</code> package provides useful primitives.</p>
<p><strong><font color='red'>communication between goroutines</font></strong></p>
<p>Channels are a typed conduit through which you can send and receive values with the <code>channel operator, &lt;-</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>) <span class="comment">// create a channel with buffer size 0, no buffer, which only access int as its message</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;- is an operator, NO operator -&gt;!!!</span></span><br><span class="line"><span class="comment">// the left side is receiver, the right side is sender</span></span><br><span class="line"></span><br><span class="line">ch &lt;- v        <span class="comment">// Send v to channel ch. blocked until data is read!!!</span></span><br><span class="line">v := &lt;- ch     <span class="comment">// Receive from ch, and assign value to v blocked until data is sent!!!</span></span><br><span class="line">v, ok := &lt;- ch <span class="comment">// check if channel is close, when closed, v is nil, ok is false, otherwise, v is value, ok is true</span></span><br><span class="line">&lt;- ch          <span class="comment">// discard result</span></span><br></pre></td></tr></table></figure>

<p>By default, <strong>send and receive block until the other side is ready</strong>. This allows goroutines to synchronize without explicit locks or condition variables.</p>
<p>Receivers always block until there is data to receive. If the channel is unbuffered(buffer size 0), the sender blocks until the receiver has received the value. If the channel has a buffer, the sender blocks only until if the buffer is full, this means waiting until some receiver has retrieved a value.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>) <span class="comment">// buffer is 10, if no one receives, the 11th sending blocks!!!</span></span><br></pre></td></tr></table></figure>
<p><font color='red'>Sends to a buffered channel block only when the buffer is full. Receives block when the buffer is empty</font></p>
<p>A sender can close a channel to indicate that no more values will be sent. Receivers can test whether a channel has been closed by assigning a second parameter to the receive expression: after<br><code>v, ok := &lt;- ch</code>  </p>
<p><strong>ok is false if there are no more values to receive and the channel is closed, ok is true if more values to receive, even it’s closed!!!</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    c &lt;- <span class="number">3</span></span><br><span class="line">    c &lt;- <span class="number">4</span></span><br><span class="line">    c &lt;- <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    d, ok := &lt;-c</span><br><span class="line">    fmt.Println(d, ok)</span><br><span class="line">    <span class="built_in">close</span>(c)</span><br><span class="line">    d, ok = &lt;-c</span><br><span class="line">    fmt.Println(d, ok)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">........</span><br><span class="line"><span class="number">3</span> <span class="literal">true</span></span><br><span class="line"><span class="number">4</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><font color='red'><strong>The loop for i :&#x3D; range c receives values from the channel repeatedly until it is closed.</strong></font></p>
<p><font color='red'><strong>Note:</strong></font></p>
<ul>
<li>Only the sender should close a channel, never the receiver</li>
<li><code>Sending on a closed channel will cause a panic.</code> </li>
<li><code>Reading on closed channel, error happens, but not panic!!</code></li>
<li>For zero buffer channel, send and receive block until the other side is ready</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// chan int, type of channel</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(n <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    x, y := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        c &lt;- x <span class="comment">// send x to channel</span></span><br><span class="line">        x, y = y, x+y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(c) <span class="comment">// close the channel</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pass channel to another routine</span></span><br><span class="line">    <span class="keyword">go</span> fibonacci(<span class="built_in">cap</span>(c), c)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> c &#123;</span><br><span class="line">        <span class="comment">// receives from channel until it&#x27;s closed, blocked if no more data in the channel</span></span><br><span class="line">        fmt.Println(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>0
1
1
2
3
5
8
13
21
34
</code></pre>
<h3 id="multiple-channels"><a href="#multiple-channels" class="headerlink" title="multiple channels"></a>multiple channels</h3><p>The select statement lets a goroutine wait on multiple communication operations.</p>
<p><strong>A select blocks until one of its cases can run, then it executes that case. the default case in a select runs if no other case is ready(no event on channel), select only works for channel, not socket fd, if you want to monitor multiple fds for high performance use <a href="https://github.com/panjf2000/gnet">gnet</a></strong></p>
<ul>
<li>if no default case, select quits until one channel is ready!!! otherwise block for ever, <code>so it&#39;s one time execution, if you need to select more time, put it in for loop!!!</code></li>
</ul>
<p><strong><font color='red'>It chooses one at random if multiple channels are ready</font></strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(c <span class="keyword">chan</span> <span class="type">int</span>, quit <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    x, y := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> &#123; <span class="comment">// infinite loop</span></span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="comment">// x is the result written to channel</span></span><br><span class="line">        <span class="keyword">case</span> c &lt;- x:</span><br><span class="line">            <span class="comment">// go down when write to channel is done, wake from block.</span></span><br><span class="line">            <span class="comment">// go down only when x is read by reader as it&#x27;s unbuffered channel</span></span><br><span class="line">            x, y = y, x+y</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">case</span> _, ok:= &lt;-quit: <span class="comment">// run this case only when channel is ready successfully!!!</span></span><br><span class="line">            fmt.Println(ok)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    quit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">            v := &lt;-c <span class="comment">// full format v, ok: = &lt;-c</span></span><br><span class="line">            fmt.Println(v)</span><br><span class="line">        &#125;</span><br><span class="line">        quit &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">//write empty to signal channel quit</span></span><br><span class="line">    &#125;() <span class="comment">// here call the unnamed function</span></span><br><span class="line"></span><br><span class="line">    fibonacci(c, quit)</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>0
1
1
2
3
5
8
13
21
34
true
</code></pre>
<h3 id="Mutex"><a href="#Mutex" class="headerlink" title="Mutex"></a>Mutex</h3><p>What we just want to make sure only one goroutine can access a shared variable at a time to avoid conflicts?</p>
<p>This concept is called mutual exclusion, and the conventional name for the data structure that provides it is mutex.</p>
<p>Go’s standard library provides mutual exclusion with <code>sync.Mutex</code> and its two methods:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br><span class="line">mu.Lock()</span><br><span class="line">...</span><br><span class="line">mu.UnLock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mu sync.RWMutex</span><br><span class="line">mu.RLock() <span class="comment">// reader</span></span><br><span class="line">...</span><br><span class="line">mu.RUnLock()</span><br><span class="line"></span><br><span class="line">mu.Lock() <span class="comment">// writer</span></span><br><span class="line">...</span><br><span class="line">mu.UnLock()</span><br></pre></td></tr></table></figure>

<p>We can define a block of code to be executed in mutual exclusion by surrounding it with a call to <code>Lock and Unlock</code>.</p>
<p>We can also use defer to ensure the mutex will be unlocked as in the Value method.</p>
<p>mutex is not associated with particular goroutine, it’s global and can be accessed by all goroutines, locked when the mutex lock bit is set.</p>
<p><strong>NOTE</strong></p>
<ul>
<li>nested is not supported<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">m := sync.Mutex&#123;&#125;</span><br><span class="line">m.Lock()</span><br><span class="line">m.Lock()<span class="comment">// block for ever here!!!</span></span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> m sync.Mutex</span><br><span class="line">    m.Lock()</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">        fmt.Println(<span class="string">&quot;Hi&quot;</span>)</span><br><span class="line">        m.Unlock() <span class="comment">// make a notification</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// if m.Lock runs before m.Unlock in gorountine, it blocks as it&#x27;s alrealdy locked above</span></span><br><span class="line">    <span class="comment">// as lock on unlocked mutext will block!!!</span></span><br><span class="line">    m.Lock() <span class="comment">// wait to be notified</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Bye&quot;</span>) <span class="comment">// Byes is always after Hi printed!!!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>Hi
Bye
</code></pre>
<h3 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h3><p>Each <code>sync.WaitGroup</code> value maintains a counter internally. The initial value of the counter is zero.</p>
<p>The <code>*WaitGroup</code> type has three methods: <code>Add(delta int), Done() and Wait()</code>.</p>
<ul>
<li>we can call the <code>wg.Add(delta) method</code> to change the counter value maintained by wg.</li>
<li>the method call<code> wg.Done()</code> is totally equivalent to the method call wg.Add(-1).</li>
<li>if a call <code>wg.Add(delta) (or wg.Done()) modifies the counter maintained by wg to negative, panic will happen</code>.</li>
<li>when a goroutine calls wg.Wait(),<ul>
<li>if the counter maintained by wg is already zero, then the call wg.Wait() can be viewed as a no-op.</li>
<li>otherwise (the counter is positive), the goroutine will enter blocking state. It will enter running state again (a.k.a., the call wg.Wait() returns) when another goroutine modifies the counter to zero, generally by calling wg.Done().</li>
</ul>
</li>
</ul>
<p><strong>Generally, a WaitGroup value is used for the scenario that one goroutine waits until all of several other goroutines finish their respective jobs.</strong></p>
<p><strong>Note</strong></p>
<ul>
<li><p>The <code>Wait()</code> method can be called in multiple goroutines. When the counter becomes zero, all of them will be notified, in a broadcast way. </p>
</li>
<li><p>A WaitGroup value can <code>be reused after one call to its Wait method returns</code>. But please note that <strong>each Add method call with a positive delta that occurs when the counter is zero must happen before any Wait call starts</strong>, otherwise, data races may happen.</p>
</li>
<li><p>Must <code>call Add() in main goroutine</code> not the one runs the job.</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// set seed</span></span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> N = <span class="number">5</span></span><br><span class="line">    <span class="keyword">var</span> values [N]<span class="type">int32</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    </span><br><span class="line">    wg.Add(N)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; N; i++ &#123;</span><br><span class="line">        i := i</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="comment">// Int31n returns, as an int32, a non-negative pseudo-random number in the half-open interval [0,n) </span></span><br><span class="line">            <span class="comment">// from the default Source. It panics if n &lt;= 0. </span></span><br><span class="line">            values[i] = <span class="number">50</span> + rand.Int31n(<span class="number">50</span>) <span class="comment">//</span></span><br><span class="line">            fmt.Printf(<span class="string">&quot;Done:%v\n&quot;</span>, i)</span><br><span class="line">            wg.Done() <span class="comment">// &lt;=&gt; wg.Add(-1)</span></span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line">    <span class="comment">// All elements are guaranteed to be</span></span><br><span class="line">    <span class="comment">// initialized now.</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;values:%v\n&quot;</span>, values)</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>Done:4
Done:2
Done:1
Done:3
Done:0
values:[63 93 53 59 60]
</code></pre>
<h3 id="Once"><a href="#Once" class="headerlink" title="Once"></a>Once</h3><p>A <code>*sync.Once</code> value has a Do(f func()) method, which takes a solo parameter with type <code>func()</code>.</p>
<p>The code in the invoked argument function(<code>doSomething(</code>)) is guaranteed to be executed before any <code>once.Do()</code> method call returns.<br>Generally, <code>a Once value is used to ensure that a piece of code will be executed exactly once in concurrent programming</code>.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x := <span class="number">0</span></span><br><span class="line">    doSomething := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// only runs once!!!</span></span><br><span class="line">        x++</span><br><span class="line">        fmt.Println(<span class="string">&quot;Hello in once&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="keyword">var</span> once sync.Once</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            <span class="comment">//Hello is guaranteed to be printed before all five world!!!</span></span><br><span class="line">            once.Do(doSomething)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// all below code runs after soSomething return</span></span><br><span class="line">            fmt.Println(<span class="string">&quot;world!&quot;</span>)</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;x = %v\n&quot;</span>, x) <span class="comment">// x = 1</span></span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>Hello in once
world!
world!
world!
world!
world!
x = 1
</code></pre>
<h3 id="Cond"><a href="#Cond" class="headerlink" title="Cond"></a>Cond</h3><p>The <code>sync.Cond</code> type provides an efficient way to do notifications among goroutines.</p>
<p>Each <code>sync.Cond</code> value holds a sync.Locker field with name L. <code>The field value is often a value of type *sync.Mutex or *sync.RWMutex</code>. So, <code>in order to use Cron, you must have a mutex as well!!!</code></p>
<ul>
<li><p><code>c.Wait()</code> <strong>must be called when c.L is locked</strong>, otherwise, a c.Wait() will cause panic. A c.Wait() call will first push the current caller goroutine into the waiting goroutine queue maintained by c, then call c.L.Unlock() to unlock&#x2F;unhold the lock c.L. then make the current caller goroutine enter blocking state. Once the caller goroutine is unblocked and enters running state again, c.L.Lock() will be called (in the resumed c.Wait() call) to try to lock and hold the lock c.L again, The c.Wait() call will exit after the c.L.Lock() call returns.</p>
</li>
<li><p>a <code>c.Signal()</code> call will <code>unblock the first goroutine</code> in (and remove it from) the waiting goroutine queue maintained by c, if the queue is not empty.</p>
</li>
<li><p>a <code>c.Broadcast()</code> call will <code>unblock all the goroutines</code> in (and remove them from) the waiting goroutine queue maintained by c, if the queue is not empty.</p>
</li>
</ul>
<p><code>cond.Broadcast() and cond.Signal()</code> are not required to be called when cond.L is locked. you can also call them after unlock.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> N = <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> values [N]<span class="type">string</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// cond needs a mutex inside</span></span><br><span class="line">    cond := sync.NewCond(&amp;sync.Mutex&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; N; i++ &#123;</span><br><span class="line">        d := time.Second * time.Duration(rand.Intn(<span class="number">5</span>)) / <span class="number">10</span></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            time.Sleep(d) <span class="comment">// simulate a workload</span></span><br><span class="line">            <span class="comment">// Changes must be made when</span></span><br><span class="line">            <span class="comment">// cond.L is locked.</span></span><br><span class="line">            cond.L.Lock()</span><br><span class="line">            values[i] = <span class="type">string</span>(<span class="string">&#x27;a&#x27;</span> + i)<span class="comment">// &#x27;a&#x27; is bytes(uint8!!!)</span></span><br><span class="line">            <span class="comment">//cond.Broadcast()</span></span><br><span class="line">            cond.L.Unlock()</span><br><span class="line"></span><br><span class="line">            <span class="comment">// &quot;cond.Broadcast()&quot; can be put here</span></span><br><span class="line">            <span class="comment">// when cond.L lock is unlocked. so that the waked one can get lock right now.</span></span><br><span class="line">            cond.Broadcast()</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function must be called when</span></span><br><span class="line">    <span class="comment">// cond.L is locked.</span></span><br><span class="line">    checkCondition := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        fmt.Println(values)</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; N; i++ &#123;</span><br><span class="line">            <span class="comment">// we have the lock here.</span></span><br><span class="line">            <span class="keyword">if</span> values[i] == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">                <span class="comment">// not all values are set.</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cond.L.Lock()</span><br><span class="line">    <span class="keyword">defer</span> cond.L.Unlock()</span><br><span class="line">    <span class="comment">// not for loop.</span></span><br><span class="line">    <span class="keyword">for</span> !checkCondition() &#123;</span><br><span class="line">        <span class="comment">// Must be called when cond.L is locked.</span></span><br><span class="line">        cond.Wait() <span class="comment">// when blockes, mutex is unlocked!!! when waked up, it gets lock again!!!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>[         ]
[    e     ]
[ b   e     ]
[a b   e     ]
[a b c  e     ]
[a b c  e   h  ]
[a b c  e f  h  ]
[a b c d e f  h  ]
[a b c d e f  h  j]
[a b c d e f g h  j]
[a b c d e f g h i j]
</code></pre>
<h3 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h3><p>go provides atomic operations <code>Add、CompareAndSwap、Load、Store、Swap</code> from <code>&quot;sync/atomic&quot;</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddInt32</span><span class="params">(addr *<span class="type">int32</span>, delta <span class="type">int32</span>)</span></span> (<span class="built_in">new</span> <span class="type">int32</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUint32</span><span class="params">(addr *<span class="type">uint32</span>, delta <span class="type">uint32</span>)</span></span> (<span class="built_in">new</span> <span class="type">uint32</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddInt64</span><span class="params">(addr *<span class="type">int64</span>, delta <span class="type">int64</span>)</span></span> (<span class="built_in">new</span> <span class="type">int64</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUint64</span><span class="params">(addr *<span class="type">uint64</span>, delta <span class="type">uint64</span>)</span></span> (<span class="built_in">new</span> <span class="type">uint64</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUintptr</span><span class="params">(addr *<span class="type">uintptr</span>, delta <span class="type">uintptr</span>)</span></span> (<span class="built_in">new</span> <span class="type">uintptr</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapInt32</span><span class="params">(addr *<span class="type">int32</span>, old, <span class="built_in">new</span> <span class="type">int32</span>)</span></span> (swapped <span class="type">bool</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapInt64</span><span class="params">(addr *<span class="type">int64</span>, old, <span class="built_in">new</span> <span class="type">int64</span>)</span></span> (swapped <span class="type">bool</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapUint32</span><span class="params">(addr *<span class="type">uint32</span>, old, <span class="built_in">new</span> <span class="type">uint32</span>)</span></span> (swapped <span class="type">bool</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapUint64</span><span class="params">(addr *<span class="type">uint64</span>, old, <span class="built_in">new</span> <span class="type">uint64</span>)</span></span> (swapped <span class="type">bool</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapUintptr</span><span class="params">(addr *<span class="type">uintptr</span>, old, <span class="built_in">new</span> <span class="type">uintptr</span>)</span></span> (swapped <span class="type">bool</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CompareAndSwapPointer</span><span class="params">(addr *unsafe.Pointer, old, <span class="built_in">new</span> unsafe.Pointer)</span></span> (swapped <span class="type">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoadInt32</span><span class="params">(addr *<span class="type">int32</span>)</span></span> (val <span class="type">int32</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoadInt64</span><span class="params">(addr *<span class="type">int64</span>)</span></span> (val <span class="type">int64</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoadUint32</span><span class="params">(addr *<span class="type">uint32</span>)</span></span> (val <span class="type">uint32</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoadUint64</span><span class="params">(addr *<span class="type">uint64</span>)</span></span> (val <span class="type">uint64</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoadUintptr</span><span class="params">(addr *<span class="type">uintptr</span>)</span></span> (val <span class="type">uintptr</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoadPointer</span><span class="params">(addr *unsafe.Pointer)</span></span> (val unsafe.Pointer)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StoreInt32</span><span class="params">(addr *<span class="type">int32</span>, val <span class="type">int32</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StoreInt64</span><span class="params">(addr *<span class="type">int64</span>, val <span class="type">int64</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StoreUint32</span><span class="params">(addr *<span class="type">uint32</span>, val <span class="type">uint32</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StoreUint64</span><span class="params">(addr *<span class="type">uint64</span>, val <span class="type">uint64</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StoreUintptr</span><span class="params">(addr *<span class="type">uintptr</span>, val <span class="type">uintptr</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StorePointer</span><span class="params">(addr *unsafe.Pointer, val unsafe.Pointer)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SwapInt32</span><span class="params">(addr *<span class="type">int32</span>, <span class="built_in">new</span> <span class="type">int32</span>)</span></span> (old <span class="type">int32</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SwapInt64</span><span class="params">(addr *<span class="type">int64</span>, <span class="built_in">new</span> <span class="type">int64</span>)</span></span> (old <span class="type">int64</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SwapUint32</span><span class="params">(addr *<span class="type">uint32</span>, <span class="built_in">new</span> <span class="type">uint32</span>)</span></span> (old <span class="type">uint32</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SwapUint64</span><span class="params">(addr *<span class="type">uint64</span>, <span class="built_in">new</span> <span class="type">uint64</span>)</span></span> (old <span class="type">uint64</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SwapUintptr</span><span class="params">(addr *<span class="type">uintptr</span>, <span class="built_in">new</span> <span class="type">uintptr</span>)</span></span> (old <span class="type">uintptr</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SwapPointer</span><span class="params">(addr *unsafe.Pointer, <span class="built_in">new</span> unsafe.Pointer)</span></span> (old unsafe.Pointer)</span><br></pre></td></tr></table></figure>

<h2 id="reflection"><a href="#reflection" class="headerlink" title="reflection"></a>reflection</h2><h3 id="from-specific-type-to-generic-type"><a href="#from-specific-type-to-generic-type" class="headerlink" title="from specific type to generic type"></a>from specific type to generic type</h3><p>you can convert any type to <code>interface &#123;&#125;</code> just for parameter passing.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b *<span class="type">int</span> = &amp;a</span><br><span class="line"><span class="keyword">var</span> c <span class="type">string</span> = <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">i = a</span><br><span class="line">i = b</span><br><span class="line">i = c</span><br><span class="line"><span class="comment">// all are ok!!!</span></span><br></pre></td></tr></table></figure>

<h3 id="from-interface-to-specific-type"><a href="#from-interface-to-specific-type" class="headerlink" title="from interface to specific type"></a>from interface to specific type</h3><p><font color='red'>As any type can be converted to <code>interface&#123;&#125;</code> type</font>, but how can we convert it back to particular type.</p>
<p>A type assertion provides access to an interface value’s underlying concrete value.  </p>
<p><code>t := i.(T)</code>  If i does not hold a T, the statement will trigger a panic.  </p>
<p>This statement asserts that the interface value i holds the concrete type T and <code>assigns the underlying T value to the variable t.</code>  </p>
<p>To test whether an interface value holds a specific type, a type assertion can return two values: the underlying value and a boolean value that reports whether the assertion succeeded.  </p>
<p><code>t, ok := i.(T)</code>  </p>
<p>If i holds a T(i is an instance of T), then t will be the underlying value and ok will be true.<br>If not, ok will be false and t will be the zero value of type T, and no panic occurs.   </p>
<p><font color='red' size=3> T is generic type, it can be <code>int or *int(*int is also a type)</code></font></p>
<p><strong>generic value, v, ok :&#x3D; i.(T) &#x2F;&#x2F; i is var of interface{}</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> v, ok := i.(<span class="type">int</span>); ok &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Twice %d is %d\n&quot;</span>, v, v*<span class="number">2</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> v, ok := i.(*<span class="type">int</span>); ok&#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Twice %d is %d\n&quot;</span>, *v, *v*<span class="number">2</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> v, ok = i.(<span class="type">string</span>); ok &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%s is %d bytes long\n&quot;</span>, v, <span class="built_in">len</span>(v))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;I don&#x27;t know about type %T!\n&quot;</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>type switch(only valid for switch)</strong><br>A <code>type switch</code> is like a regular switch statement, but the cases in a type switch specify types (not values), and those values are compared against the type of the value held by the given interface value.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123; <span class="comment">// i.(type), type is keyword here!!!</span></span><br><span class="line">	<span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Twice %v is %v\n&quot;</span>, v, v*<span class="number">2</span>) <span class="comment">// v is type int</span></span><br><span class="line">	<span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%q is %v bytes long\n&quot;</span>, v, <span class="built_in">len</span>(v)) <span class="comment">// v is type string</span></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;I don&#x27;t know about type %T!\n&quot;</span>, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">	do(<span class="number">21</span>)</span><br><span class="line">	do(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">	do(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong><a href="https://halfrost.com/go_reflection/">more about reflection</a></strong></li>
</ul>
<h3 id="Advanced-feature-between-interface-and-specfic-type"><a href="#Advanced-feature-between-interface-and-specfic-type" class="headerlink" title="Advanced feature between interface and specfic type"></a>Advanced feature between interface and specfic type</h3><p>you can convert any type to <code>interface &#123;&#125;</code> just for parameter passing</p>
<p><font color='red'><strong>but as <code>interface &#123;&#125;</code> has no method, hence you can NOT get more information about the type&#x2F;value it behinds, so <code>refection</code> package gives advanced feature.</strong></font></p>
<p><a href="https://pkg.go.dev/reflect">reflect</a> implements run-time reflection, <code>allowing a program to manipulate objects with arbitrary types</code>. The typical use is to take a value with static type interface{} and <code>extract its dynamic type information by calling TypeOf(), which returns a Type(an interface defined in reflect package)</code>.</p>
<p>A call to <code>ValueOf() returns a Value(an interface defined in reflect package) representing the run-time data</code>. Zero takes a Type and returns a Value representing a zero value for that type.</p>
<ul>
<li><p>reflect.Type(<code>type interface &#123;&#125;</code>) returned by reflect.Typeof(any instance)</p>
<ul>
<li>rType implements generic methods defined by reflect.Type</li>
<li>mapType, ptrType, structType(which embed rType) etc implement specific methods defined reflect.Type which are valid for its type, so <strong>specific type implements all methods defined by reflect.Type</strong></li>
</ul>
</li>
<li><p>reflect.Value(<code>type Value struct &#123;&#125;</code>) returned by reflect.Valueof(any instance)</p>
<ul>
<li>Value has generic methods called by all values</li>
<li>Value has specific methods which are valid for specific type</li>
</ul>
</li>
</ul>
<p><strong>Method of specific type</strong></p>
<table>
<thead>
<tr>
<th>Kind</th>
<th>Methods applicable</th>
</tr>
</thead>
<tbody><tr>
<td>Int*</td>
<td>Bits</td>
</tr>
<tr>
<td>Uint*</td>
<td>Bits</td>
</tr>
<tr>
<td>Float*</td>
<td>Bits</td>
</tr>
<tr>
<td>Complex*</td>
<td>Bits</td>
</tr>
<tr>
<td>Array</td>
<td>Elem, Len</td>
</tr>
<tr>
<td>Chan</td>
<td>ChanDir, Elem</td>
</tr>
<tr>
<td>Func</td>
<td>In, NumIn, Out, NumOut, IsVariadic</td>
</tr>
<tr>
<td>Map</td>
<td>Key, Elem</td>
</tr>
<tr>
<td>Ptr</td>
<td>Elem</td>
</tr>
<tr>
<td>Slice</td>
<td>Elem</td>
</tr>
<tr>
<td>Struct</td>
<td>Field, FieldByIndex, FieldByName,FieldByNameFunc, NumField</td>
</tr>
</tbody></table>
<ul>
<li><p>Type.Elem() returns a type’s element type.</p>
</li>
<li><p>Type.PtrTo() returns the pointer type with element t.</p>
<ul>
<li>For example, if t represents type Foo, PtrTo(t) represents *Foo.</li>
</ul>
</li>
<li><p>v.Indirect() returns the value that v points to(v is pointer Value)</p>
<ul>
<li><code>v := reflect.Valueof(&amp;Person&#123;Name: &quot;tom&quot;&#125;), vv := v.Indirect()</code></li>
</ul>
</li>
<li><p>v.Addr() returns the pointer’s Value (v is object Value)</p>
<ul>
<li><code>v := reflect.Valueof(Person&#123;Name: &quot;tom&quot;&#125;), vp: = v.Addr()</code></li>
</ul>
</li>
</ul>
<p><img src="https://img.halfrost.com/Blog/ArticleImage/148_6_0.png" alt="reflection rule"></p>
<p><strong>Ref</strong>  </p>
<ul>
<li><a href="https://halfrost.com/go_reflection/#toc-1">Reflection examples</a></li>
<li><a href="https://go.dev/blog/laws-of-reflection">Laws of Reflection</a></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;reflect&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span> <span class="string">`k1:&quot;v1&quot; k2:&quot;v2&quot;`</span></span><br><span class="line">    id   <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span></span> Ident() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p.Name + <span class="string">&quot; &quot;</span> + strconv.Itoa(p.id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span></span> Say(msg <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> msg + p.Name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := Person&#123;Name: <span class="string">&quot;tom&quot;</span>, id: <span class="number">10</span>&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*********************************************************************/</span></span><br><span class="line">    <span class="comment">// typeof from interface</span></span><br><span class="line">    rp := reflect.TypeOf(p)</span><br><span class="line">    <span class="comment">// rp.Elem() returns a type&#x27;s element type.</span></span><br><span class="line">    fmt.Printf(<span class="string">`p := Person&#123;&#125;</span></span><br><span class="line"><span class="string">type :%v</span></span><br><span class="line"><span class="string">size(byte): %v</span></span><br><span class="line"><span class="string">numField: %v</span></span><br><span class="line"><span class="string">numMethod: %v</span></span><br><span class="line"><span class="string">align: %v</span></span><br><span class="line"><span class="string">fieldalign: %v</span></span><br><span class="line"><span class="string">`</span>, rp.String(), rp.Size(), rp.NumField(), rp.NumMethod(), rp.Align(), rp.FieldAlign())</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Ident is not a method of Person</span></span><br><span class="line">    <span class="comment">// Go compiler auto converted p.Ident() to (&amp;p).Ident()</span></span><br><span class="line">    fmt.Println(p.Ident(), (&amp;p).Ident()) <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    m, ok := rp.MethodByName(<span class="string">&quot;Say&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;method name: %v, type: %v, index: %v\n&quot;</span>, m.Name, m.Type, m.Index)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Say method not found\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    f, _ := rp.FieldByName(<span class="string">&quot;Name&quot;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;field name: %v, type: %v, Tag: %v\n&quot;</span>, f.Name, f.Type, f.Tag)</span><br><span class="line">    <span class="comment">// Type to Value: nv := reflect.New(rp)</span></span><br><span class="line">    <span class="comment">// if rp(map):    nv := reflect.MakeMap(rp)</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*********************************************************************/</span></span><br><span class="line">    <span class="comment">// ValueOf from interface</span></span><br><span class="line">    v := reflect.ValueOf(p)</span><br><span class="line">    <span class="comment">// Value to Type: rp := v.Type()</span></span><br><span class="line">    rp = v.Type()</span><br><span class="line">    fmt.Printf(<span class="string">`p := Person&#123;&#125;</span></span><br><span class="line"><span class="string">type :%v</span></span><br><span class="line"><span class="string">size(byte): %v</span></span><br><span class="line"><span class="string">numField: %v</span></span><br><span class="line"><span class="string">numMethod: %v</span></span><br><span class="line"><span class="string">align: %v</span></span><br><span class="line"><span class="string">fieldalign: %v</span></span><br><span class="line"><span class="string">`</span>, rp.String(), rp.Size(), rp.NumField(), rp.NumMethod(), rp.Align(), rp.FieldAlign())</span><br><span class="line"></span><br><span class="line">    vName := v.FieldByName(<span class="string">&quot;Name&quot;</span>)</span><br><span class="line">    name := vName.String()</span><br><span class="line">    <span class="comment">// we know it&#x27;s string has String() method, </span></span><br><span class="line">    <span class="comment">// otherwise name := vName.Interface().(*NType)</span></span><br><span class="line">    </span><br><span class="line">    fmt.Println(<span class="string">&quot;name=&quot;</span>, name)</span><br><span class="line">    vSay := v.MethodByName(<span class="string">&quot;Say&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> vSay.IsValid() &#123;</span><br><span class="line">        Say := vSay.Interface().(<span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>)</span></span> <span class="type">string</span>)</span><br><span class="line">        fmt.Println(Say(<span class="string">&quot;hello &quot;</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;method Say not found&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*******************************************************************************/</span></span><br><span class="line">    <span class="comment">// back to Person struct</span></span><br><span class="line">    p = v.Interface().(Person)</span><br><span class="line">    <span class="comment">// both print Person, but v.Interface() can&#x27; not access field as it&#x27;s interface!!!</span></span><br><span class="line">    fmt.Println(p, v.Interface())</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>p := Person&#123;&#125;
type :struct &#123; Name string &quot;k1:\&quot;v1\&quot; k2:\&quot;v2\&quot;&quot;; 𒀸id int &#125;
size(byte): 24
numField: 2
numMethod: 0
align: 8
fieldalign: 8
tom 10 tom 10
Say method not found
field name: Name, type: string, Tag: k1:&quot;v1&quot; k2:&quot;v2&quot;
p := Person&#123;&#125;
type :struct &#123; Name string &quot;k1:\&quot;v1\&quot; k2:\&quot;v2\&quot;&quot;; 𒀸id int &#125;
size(byte): 24
numField: 2
numMethod: 0
align: 8
fieldalign: 8
name= tom
method Say not found
&#123;tom 10&#125; &#123;tom 10&#125;
</code></pre>
<h2 id="import-cycle"><a href="#import-cycle" class="headerlink" title="import cycle"></a>import cycle</h2><p>Cyclic dependency is fundamentally a bad design and is a compile-time error in Golang(<code>error: import cycle not allowed</code>). we should change our design to solve this in either way.</p>
<p>Solve import cycle</p>
<ul>
<li>put them in the same package</li>
<li>use interface to solve the import cycle issue</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dep</span><br><span class="line">|-- a</span><br><span class="line">|   `-- a.go</span><br><span class="line">|-- b</span><br><span class="line">|   `-- b.go</span><br><span class="line">|-- c</span><br><span class="line">|   `-- c.go</span><br><span class="line">`-- main.go</span><br></pre></td></tr></table></figure>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;github.com/mantishK/dep/b&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a A)</span></span> PrintA() &#123;</span><br><span class="line">  fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewA</span><span class="params">()</span></span> *A &#123;</span><br><span class="line">  a := <span class="built_in">new</span>(A)</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RequireB</span><span class="params">()</span></span> &#123;</span><br><span class="line">  o := b.NewB()</span><br><span class="line">  o.PrintB()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;github.com/mantishK/dep/a&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b B)</span></span> PrintB() &#123;</span><br><span class="line">  fmt.Println(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewB</span><span class="params">()</span></span> *B &#123;</span><br><span class="line">  b := <span class="built_in">new</span>(B)</span><br><span class="line">  <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RequireA</span><span class="params">()</span></span> &#123;</span><br><span class="line">  o := a.NewA()</span><br><span class="line">  o.PrintA()<span class="comment">// B wants to PrintA from A</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/mantishK/dep/a&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    o := a.NewA()</span><br><span class="line">    o.PrintA()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><font color='red'><strong>Soloution</strong></font><br>we must introduce an interface in a new package say c. <code>This interface will have all the methods that are in struct A and are accessed by struct B</code>.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> C <span class="keyword">interface</span> &#123;</span><br><span class="line">    PrintA()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/mantishK/dep/b&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a A)</span></span> PrintA() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello a&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewA</span><span class="params">()</span></span> *A &#123;</span><br><span class="line">    a := <span class="built_in">new</span>(A)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a A)</span></span> PrintBFromA() &#123;</span><br><span class="line">    o := b.NewB(a)</span><br><span class="line">    o.PrintB()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/mantishK/dep/c&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">    c c.C</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b B)</span></span> PrintB() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello b&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewB</span><span class="params">(c c.C)</span></span> *B &#123;</span><br><span class="line">    <span class="comment">// pass interface(A) to instance b</span></span><br><span class="line">    b := <span class="built_in">new</span>(B)</span><br><span class="line">    b.c = c</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b B)</span></span> PrintAFromB() &#123;</span><br><span class="line">    <span class="comment">// access PrintA</span></span><br><span class="line">    b.c.PrintA()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/mantishK/dep/a&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/mantishK/dep/b&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    o := a.NewA()</span><br><span class="line">    o.PrintA()</span><br><span class="line">    o.PrintBFromA()</span><br><span class="line"></span><br><span class="line">    b := b.NewB(o)</span><br><span class="line">    b.PrintAFromB()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Deep-copy"><a href="#Deep-copy" class="headerlink" title="Deep copy"></a>Deep copy</h2><p>There is <code>no deep copy built-in function provided by Go</code>, if you want to deep copy, you have to copy it by your self, go only does shadow copy.</p>
<ul>
<li>For channel, slice, dict, interface, pointer, <strong>assigned var points to same memory.</strong></li>
<li>For <strong>struct, non-point, assigned var has its own memory, shadow copied.</strong></li>
<li><strong>Deep copy for map two ways.</strong><ul>
<li>Marshal –&gt; then Unmarshal</li>
<li>iterate each item, then do copy, if item is a map, recursive deep is needed!!!</li>
</ul>
</li>
<li>copy for slice, <code>copy(dst, src)</code>, not recursive, not deep.</li>
</ul>
<p><strong>Go does the same thing as C language</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">b := a <span class="comment">// b is copy of a, they points to same memory, same thing for map as well.</span></span><br><span class="line">c := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(a))</span><br><span class="line"><span class="built_in">copy</span>(c, a) <span class="comment">// copy a to c, not support map, for map, you have to copy each by your self.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p1 := Person &#123;Name: <span class="string">&quot;Jack&quot;</span>&#125;</span><br><span class="line">p2 := p1 <span class="comment">// p2 is copy of p1, they points to different memory.</span></span><br><span class="line"></span><br><span class="line">ps := []Person&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        Name:<span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> ps &#123;</span><br><span class="line">    p.Name = <span class="string">&quot;cool&quot;</span> <span class="comment">// p is copy of array item.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ps is not changed at all</span></span><br></pre></td></tr></table></figure>

<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><h2 id="Anonymous-struct-type"><a href="#Anonymous-struct-type" class="headerlink" title="Anonymous struct type"></a>Anonymous struct type</h2><p>Most of time, if we frequently use a struct type, we should define a new type, use it for short like this</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    id <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 Student = Student&#123;<span class="string">&quot;jason&quot;</span>, <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>

<p><strong>But we still can use a unnamed struct if only use it for several times, like this</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := <span class="keyword">struct</span> &#123;</span><br><span class="line">        name <span class="type">string</span></span><br><span class="line">        id <span class="type">int</span></span><br><span class="line">    &#125;&#123;<span class="string">&quot;jason&quot;</span>, <span class="number">1</span>&#125;</span><br><span class="line">    </span><br><span class="line">    test1(s1)</span><br><span class="line">    test2(&amp;s1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">(s <span class="keyword">struct</span> &#123;name <span class="type">string</span>; id <span class="type">int</span>&#125;)</span></span> &#123;</span><br><span class="line">     fmt.Println(s.name, s.id)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">(s *<span class="keyword">struct</span> &#123;name <span class="type">string</span>; id <span class="type">int</span>&#125;)</span></span> &#123;</span><br><span class="line">     fmt.Println(s.name, s.id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Anonymous-function"><a href="#Anonymous-function" class="headerlink" title="Anonymous function"></a>Anonymous function</h2><p>Anonymous function is a function without name, it’s mostly used in two cases</p>
<ul>
<li><code>used as goruntine entry point</code></li>
<li><code>saved in function object, then call it later.</code></li>
<li><code>used as return value.</code></li>
<li><code>defer function.</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;hello go&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    f := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;hello go&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Reader-and-Writer"><a href="#Reader-and-Writer" class="headerlink" title="Reader and Writer"></a>Reader and Writer</h2><p>The io package specifies the <code>io.Reader interface</code>, which represents the read end of a stream of data.</p>
<p>The <code>Go standard library contains many implementations of this interface, including files, network connections, compressors, ciphers, and others.</code></p>
<p>The io.Reader interface has a Read method:  </p>
<p><code>func (T) Read(b []byte) (n int, err error)</code></p>
<p>Read populates the given byte slice(should be create first with <code>make()</code>) with data and returns the number of bytes populated and an error value. It returns an io.EOF error when the stream ends.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// return Reader interface</span></span><br><span class="line">    r := strings.NewReader(<span class="string">&quot;Hello, Reader!&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// buffer to store reading</span></span><br><span class="line">    b := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        n, err := r.Read(b) <span class="comment">// must check err when reading</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;n = %v err = %v b = %v\n&quot;</span>, n, err, b)</span><br><span class="line">        fmt.Printf(<span class="string">&quot;b[:n] = %q\n&quot;</span>, b[:n])</span><br><span class="line">        <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>n = 8 err = &lt;nil&gt; b = [72 101 108 108 111 44 32 82]
b[:n] = &quot;Hello, R&quot;
n = 6 err = &lt;nil&gt; b = [101 97 100 101 114 33 32 82]
b[:n] = &quot;eader!&quot;
n = 0 err = EOF b = [101 97 100 101 114 33 32 82]
b[:n] = &quot;&quot;
</code></pre>
<h2 id="never-use-break-for-each-case-in-switch-x2F-select"><a href="#never-use-break-for-each-case-in-switch-x2F-select" class="headerlink" title="never use break for each case in switch&#x2F;select"></a>never use break for each case in switch&#x2F;select</h2><p>As go break each matched case automatically, there is <code>no need to use break for each case explicitly in case you want to break in the middle of the case.</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">tick := time.NewTicker(<span class="number">2</span> * time.Second)                                         </span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span>                                                                       </span><br><span class="line"><span class="keyword">for</span> &#123;                                                                           </span><br><span class="line">    <span class="keyword">select</span> &#123;                                                                    </span><br><span class="line">    <span class="keyword">case</span> &lt;-tick.C:                                                              </span><br><span class="line">        a++                                                                     </span><br><span class="line">        <span class="keyword">if</span> a &gt; <span class="number">2</span> &#123;                                                              </span><br><span class="line">            fmt.Println(<span class="string">&quot;break out&quot;</span>)                                            </span><br><span class="line">            <span class="keyword">break</span>  <span class="comment">// case is break, hence go next loop of for, for is not break!!!                                             </span></span><br><span class="line">        &#125;  </span><br><span class="line">        </span><br><span class="line">        fmt.Println(<span class="string">&quot;reach me&quot;</span>)</span><br><span class="line">    &#125;                                                                                                                   </span><br><span class="line">    fmt.Println(<span class="string">&quot;running&quot;</span>)                                                 </span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure>

<h2 id="Handle-OS-difference"><a href="#Handle-OS-difference" class="headerlink" title="Handle OS difference"></a>Handle OS difference</h2><p>Most of time, go code can shared by different OS like linux and windows etc, but in some case, we may need to handle special cases that depends on OS, hence we need to know the OS in Go code <code>$GOOS</code> gives the way for you to deal that.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> runtime.GOOS == <span class="string">&quot;windows&quot;</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;You are running on windows&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> runtime.GOOS == <span class="string">&quot;linux&quot;</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;You are running on linux&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;You are running on an OS that we do not support&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HTTP-over-Unix"><a href="#HTTP-over-Unix" class="headerlink" title="HTTP over Unix"></a>HTTP over Unix</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A quick and dirty demo of talking HTTP over Unix domain sockets</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/codegangsta/martini&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// overriding ne.Dialer.Dial to force unix socket connection</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addr = <span class="string">&quot;http.sock&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fakeDial</span><span class="params">(_, _ <span class="type">string</span>)</span></span> (net.Conn, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> net.DialTimeout(<span class="string">&quot;unix&quot;</span>, addr, time.Second*<span class="number">32</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> transport http.RoundTripper = &amp;http.Transport&#123;</span><br><span class="line">    Dial: fakeDial,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := martini.Classic()</span><br><span class="line">    m.Get(<span class="string">&quot;/demo&quot;</span>, handler)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// normal unix listener</span></span><br><span class="line">    listener, err := net.Listen(<span class="string">&quot;unix&quot;</span>, addr)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err.Error())</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        cmd := exec.Command(<span class="string">&quot;/bin/rm&quot;</span>, <span class="string">&quot;-rf&quot;</span>, <span class="string">&quot;http.sock&quot;</span>)</span><br><span class="line">        cmd.Run()</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// as you can see server has no special setting for unix listener</span></span><br><span class="line">    <span class="comment">// serve http request on any listener(here unix listener)</span></span><br><span class="line">    <span class="keyword">go</span> http.Serve(listener, m) <span class="comment">// http.Serve takes any net.Listener implementation</span></span><br><span class="line"></span><br><span class="line">    time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">    c := http.Client&#123;&#125;</span><br><span class="line">    <span class="comment">// client usage is different for tcp and unix transport!!!</span></span><br><span class="line">    c.Transport = transport <span class="comment">// use the unix dialer based on unix to send http request(no tcp as tcp+http)</span></span><br><span class="line">    <span class="comment">// as you can see the address is sock path not ip:port like tcp</span></span><br><span class="line">    resp, err := c.Get(<span class="string">&quot;http://http.sock/demo&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err.Error())</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// io.copy from resp.Body to os.StdOut(Writer)</span></span><br><span class="line">    io.Copy(os.Stdout, resp.Body)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">()</span></span> (code <span class="type">int</span>, body <span class="type">string</span>) &#123;</span><br><span class="line">    code = <span class="number">200</span></span><br><span class="line">    body = <span class="string">&quot;ok\n&quot;</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WaitGroup-vs-Channel"><a href="#WaitGroup-vs-Channel" class="headerlink" title="WaitGroup vs Channel"></a>WaitGroup vs Channel</h2><p>Actually, there are designed for different scenarios, If you are dispatching <strong>one-off jobs to be run in parallel without needing to know the results of each job, then you can use a WaitGroup</strong>. But if you need to collect the results from the goroutines then you should use a channel. <strong>channel is designed to pass data while WaitGrop for wait jobs(which runs in goroutine) to finish.</strong></p>
<p><strong>waitgroup</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">work</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;job done&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">    wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> wg.Done()</span><br><span class="line">        work()</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(<span class="string">&quot;got one job done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>notify channel</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">work</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;job done&quot;</span>)</span><br><span class="line">    ch &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        work(ch)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    &lt;-ch</span><br><span class="line">    fmt.Println(<span class="string">&quot;got one job done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>if you have several jobs to run, waitgroup is best choice to use!!</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">work</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;job done&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> wg.Done()</span><br><span class="line">        work()</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> wg.Done()</span><br><span class="line">        work()</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(<span class="string">&quot;got two jobs done&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>job done
job done
got two jobs done
</code></pre>
<h2 id="do-we-need-to-close-channel-explicitly"><a href="#do-we-need-to-close-channel-explicitly" class="headerlink" title="do we need to close(channel) explicitly"></a>do we need to close(channel) explicitly</h2><p><strong>No, It’s OK to leave a Go channel open forever and never close it</strong>. When the channel is no longer used(no read and write), it will be garbage collected.</p>
<p>It is only necessary to <strong>close a channel explicitly if the receiver is looking for a close</strong>. Closing the channel is a <strong>control signal on the channel indicating that no more data follows, or to notify goroutine to quit otherwise it may blocking for ever</strong></p>
<p><font color='red'><strong>Danger</strong></font></p>
<ul>
<li><strong>closing a closed channel will panic</strong>, so it is dangerous to close a channel if the closers don’t know whether or not the channel is closed.</li>
<li><strong>sending values to a closed channel will panic</strong>, so it is dangerous to send values to a channel if the senders don’t know whether or not the channel is closed.</li>
</ul>
<p><strong>Rule to close if required</strong></p>
<ul>
<li>don’t close a channel from the receiver side.</li>
<li>don’t close a channel if the channel has multiple concurrent senders.</li>
</ul>
<p>In other words, we should <code>only close a channel in a sender goroutine if the sender is the only sender of the channel</code>. more solution to close a channel, refer to <a href="https://go101.org/article/channel-closing.html">channel closing</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;goroutine blocks&quot;</span>)</span><br><span class="line">        &lt;-ch</span><br><span class="line">        fmt.Println(<span class="string">&quot;goroutine quit&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;test return, but goroutine is blocking&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    test()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if main is a daemon process, gorountine waits for signal while sender is quit</span></span><br><span class="line">    <span class="comment">// when sender quits, it should notify receive to quit as well, otherwise, it&#x27;s blocks for ever</span></span><br><span class="line">    </span><br><span class="line">    time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line">    time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>test return, but goroutine is blocking
goroutine blocks
goroutine quit
</code></pre>
<h2 id="print-value-of-struct-pointer-embeded-in-another-struct"><a href="#print-value-of-struct-pointer-embeded-in-another-struct" class="headerlink" title="print value of struct pointer embeded in another struct"></a>print value of struct pointer embeded in another struct</h2><p>By default, struct pointer printed with its content if it’s not embeded, but if struct pointer as field of another struct, the pointer address is printed,  As when call print, the <code>String() of that type is called</code>, but by default golang does not provide <code>String()</code> for struct pointer, but struct only, that’s why pointer address is printed, In order to print pinter content(not address), there are several ways we can use</p>
<ul>
<li>iterate each pointer in struct, print it with <code>fmt.Println(&quot;%s&quot;, *p)</code></li>
<li><code>with json.Marshel(), but only exported field are printed</code></li>
<li>For each pointer, implement its <code>func (s *XX)String()string&#123;&#125;</code> method</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ackage main                                                                    </span><br><span class="line">                                                                                </span><br><span class="line"><span class="keyword">import</span> (                                                                        </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span>                                                                       </span><br><span class="line">)                                                                               </span><br><span class="line">                                                                                </span><br><span class="line"><span class="keyword">type</span> Class <span class="keyword">struct</span> &#123;                                                             </span><br><span class="line">    Id <span class="type">int</span>                                                                      </span><br><span class="line">&#125;                                                                               </span><br><span class="line">                                                                                </span><br><span class="line"><span class="comment">// comment out to see what happens                                              </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Class)</span></span> String() <span class="type">string</span> &#123;                                               </span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%v&quot;</span>, c.Id)                                              </span><br><span class="line">&#125;                                                                               </span><br><span class="line">                                                                                </span><br><span class="line"><span class="comment">// comment out to see what happens                                              </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span></span> String() <span class="type">string</span> &#123;                                              </span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%v %v&quot;</span>, p.Name, p.Cls)                                  </span><br><span class="line">&#125;                                                                               </span><br><span class="line">                                                                                </span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;                                                            </span><br><span class="line">    Name <span class="type">string</span> <span class="comment">// string has default String()                                  </span></span><br><span class="line">    Cls  *Class <span class="comment">// no default String() for *Class                               </span></span><br><span class="line">&#125;                                                                               </span><br><span class="line">                                                                                </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;                                                                   </span><br><span class="line">    p1 := Person&#123;Name: <span class="string">&quot;tom&quot;</span>, Cls: &amp;Class&#123;Id: <span class="number">1</span>&#125;&#125;                               </span><br><span class="line">    p2 := Person&#123;Name: <span class="string">&quot;jack&quot;</span>, Cls: &amp;Class&#123;Id: <span class="number">2</span>&#125;&#125;                              </span><br><span class="line">    sp := []Person&#123;p1, p2&#125;                                                      </span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, sp)                                                      </span><br><span class="line">    fmt.Printf(<span class="string">&quot;%+v\n&quot;</span>, sp)                                                     </span><br><span class="line">                                                                                </span><br><span class="line">    spp := []*Person&#123;&amp;p1, &amp;p2&#125; <span class="comment">// Person has no default String()                </span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, spp)                                                     </span><br><span class="line">    fmt.Printf(<span class="string">&quot;%+v\n&quot;</span>, spp)                                                    </span><br><span class="line">&#125;                      </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#123;tom 1&#125; &#123;jack 2&#125;]</span><br><span class="line">[&#123;Name:tom Cls:1&#125; &#123;Name:jack Cls:2&#125;]</span><br><span class="line">[tom 1 jack 2]</span><br><span class="line">[tom 1 jack 2]</span><br></pre></td></tr></table></figure>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Class <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Cls  *Class</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p1 := Person&#123;Name: <span class="string">&quot;tom&quot;</span>, Cls: &amp;Class&#123;Id: <span class="number">1</span>&#125;&#125;</span><br><span class="line">    p2 := Person&#123;Name: <span class="string">&quot;jack&quot;</span>, Cls: &amp;Class&#123;Id: <span class="number">2</span>&#125;&#125;</span><br><span class="line">    spp := []*Person&#123;&amp;p1, &amp;p2&#125;</span><br><span class="line">    data, _ := json.Marshal(spp)</span><br><span class="line">    fmt.Println(<span class="type">string</span>(data))</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>[&#123;&quot;Name&quot;:&quot;tom&quot;,&quot;Cls&quot;:&#123;&quot;Id&quot;:1&#125;&#125;,&#123;&quot;Name&quot;:&quot;jack&quot;,&quot;Cls&quot;:&#123;&quot;Id&quot;:2&#125;&#125;]
</code></pre>
<h2 id="block-forever-in-go"><a href="#block-forever-in-go" class="headerlink" title="block forever in go"></a>block forever in go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">blockForever</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">select</span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">blockForever</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := sync.Mutex&#123;&#125;</span><br><span class="line">    m.Lock()</span><br><span class="line">    m.Lock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">blockForever</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    &lt;-c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.sgmansfield.com/2016/06/how-to-block-forever-in-go/">block forever</a></p>
<h2 id="Channel-with-timeout"><a href="#Channel-with-timeout" class="headerlink" title="Channel with timeout"></a>Channel with timeout</h2><p>Actually, there is no timeout parameter of API when reading&#x2F;writing channel, so we use other way to do this.</p>
<p><strong>Way1</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;do something...&quot;</span>)</span><br><span class="line">        time.Sleep(<span class="number">4</span>*time.Second)</span><br><span class="line">        ch&lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-ch:</span><br><span class="line">        fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(<span class="number">3</span>*time.Second):</span><br><span class="line">        fmt.Println(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Way2</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), <span class="number">3</span>*time.Second)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    time.Sleep(time.Second * <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    ch &lt;- <span class="string">&quot;done&quot;</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> res := &lt;-ch:</span><br><span class="line">    fmt.Println(res)</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">    fmt.Println(<span class="string">&quot;timout&quot;</span>, ctx.Err())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Good reason to use context</strong><br>Another advantage of using <code>context</code> is that it can take advantage of its natural transmission characteristics in multiple goroutines, so that all goroutines that pass the context can receive cancellation notifications at the same time. <code>we can call cancel() once, while quits all gorotines who listen on it.</code>.</p>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://golang.org/ref/spec">Go Specification</a></li>
<li><a href="https://go101.org/article/concurrent-synchronization-more.html">Concurrency Synchronization Techniques</a></li>
</ul>
]]></content>
      <categories>
        <category>go</category>
        <category>program</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>hardware-gpu</title>
    <url>/2021/08/05/hardware-gpu/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The graphics processing unit, or GPU was <strong>originally designed to accelerate the rendering of 3D graphics.</strong> you can use graphics SDK(<code>DirectX, OpenGL</code>) to use GPU for rendering, but it has become one of the most important <code>types of computing technology now</code>, it is <code>designed for parallel processing</code>, the GPU is used in a wide range of applications, including:</p>
<ul>
<li>Graphics and video rendering.</li>
<li><code>Artificial intelligence</code> (AI)</li>
<li><code>Machining learning</code></li>
<li><code>Deep learning</code></li>
<li>More</li>
</ul>
<span id="more"></span>

<h1 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h1><p>GPUs come in two basic types of a computer: integrated and discrete. An integrated GPU does not come on its own separate card at all and is instead embedded alongside the CPU. <strong>A discrete GPU is a distinct chip that is mounted on its own circuit board and is typically attached to a PCI Express slot.</strong></p>
<p><strong>Integrated Graphics Processing Unit</strong></p>
<p>The majority of GPUs on the market are actually integrated graphics. So, what are integrated graphics and how does it work in your computer? A CPU that comes with a fully integrated GPU on its motherboard allows for thinner and lighter systems, reduced power consumption, and lower system costs.</p>
<p>Intel® Graphics Technology, which includes <code>Intel® Iris® Plus and Intel® Iris® Xe</code> graphics, is at the forefront of integrated graphics technology. </p>
<p><strong>Discrete Graphics Processing Unit</strong></p>
<p>Many computing applications can run well with integrated GPUs. However, for more <code>resource-intensive</code> applications with extensive performance demands, a discrete GPU (sometimes called a <code>dedicated graphics card</code>) is better suited to the job.</p>
<h2 id="GPU-vs-Graphics-Card"><a href="#GPU-vs-Graphics-Card" class="headerlink" title="GPU vs Graphics Card"></a>GPU vs Graphics Card</h2><p>While the terms GPU and graphics card (or video card) are <code>often used interchangeably</code>, there is a subtle distinction between these terms. Much like a <strong>motherboard contains a CPU, a graphics card refers to an add-in board that incorporates the GPU</strong>. This board also includes the raft of components required to both allow the GPU to function and connect to the rest of the system.</p>
<h2 id="GPU-vs-CPU"><a href="#GPU-vs-CPU" class="headerlink" title="GPU vs CPU"></a>GPU vs CPU</h2><table>
<thead>
<tr>
<th>CPU</th>
<th>GPU</th>
</tr>
</thead>
<tbody><tr>
<td>Central Processing Unit</td>
<td>Graphics Processing Unit</td>
</tr>
<tr>
<td>Several cores</td>
<td><code>Many cores</code></td>
</tr>
<tr>
<td>Low latency</td>
<td>High throughput</td>
</tr>
<tr>
<td>Good for serial processing</td>
<td><code>Good for parallel processing</code></td>
</tr>
<tr>
<td>Can do a handful of operations at once</td>
<td>Can do thousands of operations at once</td>
</tr>
</tbody></table>
<p><img src="https://docs.nvidia.com/cuda/cuda-c-programming-guide/graphics/gpu-devotes-more-transistors-to-data-processing.png" alt="CPU vs GPU Arch"></p>
<p>Architecturally, the CPU is composed of just a few cores with lots of cache memory that can handle a few software threads at a time. In contrast, <strong>a GPU is composed of hundreds of cores that can handle thousands of threads simultaneously.</strong></p>
<p><strong>GPU</strong><br>The GPU is a processor that is made up of <code>many smaller and more specialized cores(special, worker, student)</code>. By working together, the cores deliver massive performance when a processing task can be divided up and processed across many cores.  </p>
<p><strong>CPU</strong><br>CPU is commonly referred to as the <code>brain of the computer(generic, smart, professor)</code>. It is essential to all modern computing systems as it executes the commands and processes needed for your computer and operating system.</p>
<p><strong>Difference</strong><br>The CPU is suited to a wide variety of workloads, especially those for which <code>latency or per-core performance are important</code>. A powerful execution engine, the CPU focuses its smaller number of cores on individual tasks and on getting things done quickly. This makes it uniquely well equipped for jobs ranging from serial computing to running databases.</p>
<p>GPUs began as specialized ASICs developed to accelerate specific 3D rendering tasks. Over time, these fixed-function engines became more programmable and more flexible. While graphics and the increasingly lifelike visuals of today’s top games remain their principal function, GPUs have evolved to become more general-purpose <code>parallel processors as well</code>, handling a growing range of applications.</p>
<p>if you run a small task, CPU is faster than GPU, but if you run a complex task, GPU is faster as GPUs break complex problems into thousands or millions of separate tasks and work them out at once</p>
<p><a href="https://www.intel.com/content/www/us/en/products/docs/processors/cpu-vs-gpu.html">CPU vs GPU intel</a></p>
<h2 id="Market"><a href="#Market" class="headerlink" title="Market"></a>Market</h2><p>Intel has the big market due to its Integrated Graphics Processing Unit, while for Dedicated <code>GPU, Nvidia and AMD are the two main players</code>.</p>
<p><img src="https://mms.businesswire.com/media/20200226005288/en/775883/5/Jon+Peddie.jpg?download=1" alt="Total GPU market share by 2019"></p>
<h2 id="Program-GPU-based-application"><a href="#Program-GPU-based-application" class="headerlink" title="Program GPU based application"></a>Program GPU based application</h2><p>Earlier years, There are only two SDK <code>OpenGL(Apple lead this(open source): linux, mac, windows) and DirectX(Microsoft)</code> to program GPD based application, applications can use them to render 2D and 3D computer graphics which is the main task of GPU, but today, except graphic rending, GPU is also designed for parallel processing, so the SDK should add proper APIS to support this, hence <code>openGL ---&gt; OpenCL</code>, DirectX with new version supports this, beside OpenCL and new version DirectX which support different vendors, Nvidia provides its own SDK <code>Cuda</code> which is more powerful and easy to use if you are using Nvidia GPU which has Cuda Arch.</p>
<p><strong>OpenGL vs DirectX</strong></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Basis</td>
<td>OpenGL</td>
<td>DirectX</td>
</tr>
<tr>
<td>Definition</td>
<td>It is an open-source cross-platform application of interface programming which works on rendering of vector graphics of 2d and 3d graphics.</td>
<td>DirectX is a collection APIs which re using for many different types of multimedia platform as well as game programming.</td>
</tr>
<tr>
<td>Developer</td>
<td>It was developed by the Khronos group but originally Silicon Graphics Inc. started its development in 1991 and released on June 30, 1992, for public use.</td>
<td>Microsoft was its developer and launched it on September 30, 1995.</td>
</tr>
<tr>
<td>Operating systems</td>
<td>OpenGL can be installed on Linux, Mac OS, and Microsoft Windows operating systems.</td>
<td>DirectX can run on Microsoft Windows, Dreamcast, Xbox, Xbox One, Xbox 360, Xbox series, and Series S because it is compatible with these operating systems.</td>
</tr>
<tr>
<td>Latest version</td>
<td>The latest version of OpenGL was released 3 years ago means on July 31, 2017, and named 4.6.</td>
<td>12 Ultimate API was released on November 10, 2020 as its latest collection.</td>
</tr>
<tr>
<td>Availability</td>
<td>For working with OpenGL you can visit on <a href="http://www.opengl.org/">www.opengl.org</a> and have it on your personal computer.</td>
<td>Visit <a href="http://www.microsoft.com/">www.microsoft.com</a> for DirectX and you can get any of the members of its collection to start working with that.</td>
</tr>
<tr>
<td>Supported file format</td>
<td>It supports .obj, .3ds as 3d model file formats for working on them.</td>
<td>You can have 3d model of this software in c4d, max, obj, fbx, ma, 3ds, blend, 3dm, and many more file formats.</td>
</tr>
<tr>
<td>Written in Language</td>
<td>OpenGL is written in C or C++ computer language.</td>
<td>As C and C++ are game designer’s pet languages so that is way DirectX is also written in C and C++ computer languages.</td>
</tr>
</tbody></table>
<p><strong>OpenCL vs Cuda</strong><br><img src="https://miro.medium.com/max/651/1*12DKLmwM90BOWFgtAsq_Ow.png" alt="Pros and cons"></p>
<p><img src="https://miro.medium.com/max/652/1*wyNnErQBopkQzsCgbRQoVA.png" alt="Applications"></p>
<p>Note: Most GPUs are designed for a specific usage, real-time 3D graphics or other mass calculations:  </p>
<ul>
<li>Gaming<ul>
<li>GeForce GTX, RTX</li>
<li>Nvidia Titan</li>
<li>Radeon HD, R5, R7, R9, RX, Vega and Navi series</li>
<li>Radeon VII</li>
</ul>
</li>
<li>Cloud Gaming<ul>
<li><code>Nvidia GRID</code></li>
<li>Radeon Sky</li>
</ul>
</li>
<li>Workstation<ul>
<li><code>Nvidia Quadro</code></li>
<li>AMD FirePro</li>
<li>AMD Radeon Pro</li>
</ul>
</li>
<li>Cloud Workstation<ul>
<li>Nvidia Tesla</li>
<li>AMD FireStream</li>
</ul>
</li>
<li>Artificial Intelligence training and Cloud<ul>
<li><code>Nvidia Tesla</code></li>
<li>AMD Radeon Instinct</li>
</ul>
</li>
<li>Automated&#x2F;Driverless car<ul>
<li>Nvidia Drive PX</li>
</ul>
</li>
</ul>
<p><strong>Nvidia Family</strong>: mobile GPU (Tegra), discrete GPU for a laptop (GeForce GT), desktop (GeForce GTX) and server (Quadro and Tesla)</p>
<p><strong>Suggestion</strong></p>
<ul>
<li><strong>GPU from Nvidia, Use Cuda</strong></li>
<li>NOT from Nvidia, Use OpenCL, or DirectX for Windows</li>
</ul>
<h1 id="Nvidia"><a href="#Nvidia" class="headerlink" title="Nvidia"></a>Nvidia</h1><p><code>To be more precise, Cuda is not a language or an API. Cuda is a platform for parallel computing and at the same time, it’s a programming model to utilize GPU to speed up general purpose computing</code>. The developer still can write software at C or C++, and incorporate some extensions in the form of a few basic keywords.</p>
<p><a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html">Cuda C program</a> and <a href="https://developer.nvidia.com/blog/easy-introduction-cuda-c-and-c/">Cuda simple example</a></p>
]]></content>
      <categories>
        <category>hardware</category>
        <category>gpu</category>
      </categories>
      <tags>
        <tag>gpu</tag>
        <tag>cuda</tag>
        <tag>opengl</tag>
      </tags>
  </entry>
  <entry>
    <title>hardware-fpga-smartnic</title>
    <url>/2021/08/03/hardware-fpga-smartnic/</url>
    <content><![CDATA[<h1 id="FPGA"><a href="#FPGA" class="headerlink" title="FPGA"></a>FPGA</h1><p>Since the inception of FPGA(field programmable gate array) technology there were actually only two FPGA companies in the market: <code>Xilinx and Altera</code>. Along the years, both companies did a terrific job growing the market and protecting their market share. When <code>Intel acquired Altera</code>, Xilinx was left as the only major FPGA company in the market. Xilinx had ~50% market share while Altera (Intel) has ~37% and Lattice Semiconductor has a 10% market share. In October 2020, <code>AMD has acquired Xilinx</code>. <strong>This concludes that the 2 largest CPU vendors have acquired the 2 largest FPGA companies.</strong></p>
<p><img src="https://hardwarebee.com/wp-content/uploads/2018/04/img_5ac9babce4aed.png" alt="fpga market"></p>
<span id="more"></span>

<p><strong>FPGA Companies</strong></p>
<ul>
<li><a href="www.xilinx.com">Xilinx (AMD)</a></li>
<li><a href="www.altera.com">Altera (Intel)</a></li>
<li><a href="www.latticesemi.com">Lattice Semiconductor</a></li>
<li><a href="www.quicklogic.com">QuickLogic</a></li>
<li>…</li>
</ul>
<p><strong>What’s FPGA</strong><br>Field Programmable Gate Arrays (FPGAs) are semiconductor devices that are based around <code>a matrix of configurable logic blocks (CLBs) connected via programmable interconnects</code>. FPGAs can be <code>reprogrammed</code> to desired application or functionality requirements <code>after manufacturing</code>. This feature distinguishes FPGAs from <code>Application Specific Integrated Circuits (ASICs), which are custom manufactured for specific design tasks</code>.</p>
<p><strong>FPGA Application</strong><br>FPGA is a technology or semi-manufactures, not an end product, but due to their programmable nature, FPGAs are an ideal fit for many different markets. it can provide comprehensive solutions consisting of FPGA devices, advanced software, and configurable, ready-to-use IP cores for markets and <a href="https://hardwarebee.com/fpga-common-applications/">applications</a></p>
<h1 id="SmartNIC"><a href="#SmartNIC" class="headerlink" title="SmartNIC"></a>SmartNIC</h1><p>SmartNICs provide several <code>significant benefits to data-center networks including:</code></p>
<ul>
<li>Accelerating network, storage, and compute tasks by executing them directly on the network interface card, eliminating the need to run these workloads on servers and freeing up CPU cycles, thus dramatically improving server performance and reducing overall power consumption resulting in lower system-level total cost of ownership.</li>
<li>Offloading increasingly complex networking tasks including overlay tunneling protocols such as VxLAN and complex virtual switching from server processors, freeing the server processors to perform actual, revenue-generating tasks.</li>
<li>Improving effective network bandwidth and throughput by executing offloaded functions in fast hardware instead of slower software.</li>
<li>Providing additional, flexible functionality that easily accommodates new and constantly changing networking and storage protocols.</li>
</ul>
<p><img src="https://cyun.tech/images/cloud/smartnic-table.jpg" alt="SmartNIC offload"></p>
<p><strong>SmartNIC designs</strong></p>
<ul>
<li>Multicore SmartNICs, <code>based on ASICs containing multiple CPU cores</code></li>
<li>FPGA-based SmartNICs</li>
<li>FPGA-augmented SmartNICs, which <code>combine hardware-programmable FPGAs with ASIC network controllers</code></li>
</ul>
<h2 id="Multicore-SmartNIC"><a href="#Multicore-SmartNIC" class="headerlink" title="Multicore SmartNIC"></a>Multicore SmartNIC</h2><p>A multicore SmartNIC design likely includes an ASIC that incorporates many software-programmable microprocessor cores. These cores are typically higher performance Arm processors, which process packets and offload from the main (and expensive) server CPUs. Multicore SmartNIC ASICs may also incorporate fixed function hardware engines that can offload well-defined tasks such as standardized security and storage protocols.</p>
<p>However, multicore SmartNICs suffer from at least two limitations:</p>
<ul>
<li>They are based on software-programmable processors which are slower when used for network processing due to a lack of processor parallelism.</li>
<li>The fixed-function hardware engines in these multicore ASICs lack the data-plane programmability and flexibility that is increasingly required for SmartNIC offloading.</li>
</ul>
<h2 id="FPGA-based-SmartNIC"><a href="#FPGA-based-SmartNIC" class="headerlink" title="FPGA-based SmartNIC"></a>FPGA-based SmartNIC</h2><p>An FPGA-based SmartNIC employs the expanded hardware programmability of FPGAs to build any data-plane functions required by the tasks offloaded to the SmartNIC. Because FPGAs are reprogrammable, the data-plane functions implemented by the FPGA can be torn down and reconfigured at will and in real time. <strong>All such offloaded functions operate at hardware – not software – speeds.</strong></p>
<p>FPGA-based SmartNIC designs can accelerate network functions by several orders of magnitude over implementations based purely on software. Use of FPGAs in SmartNIC designs delivers the wire-speed performance and power efficiency of custom hardware with the ability to create deep packet&#x2F;network processing pipelines that support complex offload tasks and improve single-flow network performance. Replicating these pipelines by exploiting the large amount of hardware parallelism inherent in FPGAs improves megaflow performance enough to meet the high-performance, high-bandwidth, high-throughput needs of next-generation data-center architectures based on speedier Ethernet networks.</p>
<p><strong>Price is very high, expensive!!!</strong></p>
<h2 id="FPGA-Augmented-SmartNIC-also-called-system-on-chip-SoC"><a href="#FPGA-Augmented-SmartNIC-also-called-system-on-chip-SoC" class="headerlink" title="FPGA-Augmented SmartNIC(also called system-on chip (SoC))"></a>FPGA-Augmented SmartNIC(also called system-on chip (SoC))</h2><p>It adds FPGA capabilities to the NIC. The on-board FPGA in a FPGA-augmented SmartNIC design enables significantly higher performance and feature expansion.</p>
<p>More refer to <a href="https://www.design-reuse.com/articles/46833/how-to-design-smartnics-using-fpgas-to-increase-server-compute-capacity.html">SmartNIC design</a> and <a href="https://www.nextplatform.com/2018/08/06/living-in-the-smartnic-future/">Mellanox SmartNIC</a></p>
<h2 id="SmartNIC-Market"><a href="#SmartNIC-Market" class="headerlink" title="SmartNIC Market"></a>SmartNIC Market</h2><p><a href="https://www.nextplatform.com/2020/02/03/vertical-integration-is-eating-the-datacenter-part-two/">SmartNIC vendor</a></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>SmartNIC Vendor</td>
<td>SmartNIC Model</td>
<td>Chip Technology</td>
</tr>
<tr>
<td>AWS</td>
<td>Nitro Gen 3</td>
<td>SoC</td>
</tr>
<tr>
<td>Azure</td>
<td>Catapult v3</td>
<td>Intel FPGA</td>
</tr>
<tr>
<td>Alibaba Cloud</td>
<td>X-Dragon III</td>
<td>SoC</td>
</tr>
<tr>
<td>GCP</td>
<td>(generic Intel-based)</td>
<td>SoC</td>
</tr>
<tr>
<td>Mellanox</td>
<td>BlueField 2</td>
<td>SoC</td>
</tr>
<tr>
<td>Mellanox</td>
<td>Innova-2 Flex</td>
<td>Xilinx FPGA</td>
</tr>
<tr>
<td>Silicom</td>
<td>(many)</td>
<td>Intel and Xilinx FPGA</td>
</tr>
<tr>
<td>Pensando</td>
<td>Naples Gen 1</td>
<td>SoC</td>
</tr>
</tbody></table>
<ul>
<li>Mellanox company(Acquired by Nvidia)<ul>
<li>ConnectX(multicore SmartNIC)</li>
<li>Innova SmartNIC(based on Xilinx Fpga)</li>
<li>BlueField2(FPGA-Augmented)<blockquote>
<p>Bluefield-2 actually belongs to the SoC branch, meaning it is less performant but much more programmable. It is “so programmable” that it can actually be thought of as a Server in your Server. It has an 8-core ARM64 CPU, 8–16GB DRAM, up to 2x100G Ethernet interface + 1Gb OOB (out-of-band) management port and&#x2F;or UART (universal asynchronous receiver-transmitter) to do the same. It can also be connected to an IPMI network to monitor it just like a server. Bluefield-2 DPU <strong>runs its own Linux distribution</strong> on top and <strong>has a Mellanox ConnectX-6 Ethernet module</strong>. It also supports DPDK and even P4 via the DOCA SDK specifically tailored to program the Bluefield via “native C” libraries and API</p>
</blockquote>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>hardware</category>
        <category>smartnic</category>
      </categories>
      <tags>
        <tag>fpga</tag>
        <tag>smartnic</tag>
      </tags>
  </entry>
  <entry>
    <title>hardware-usb</title>
    <url>/2022/04/12/hardware-usb/</url>
    <content><![CDATA[<h1 id="Usb-Controller"><a href="#Usb-Controller" class="headerlink" title="Usb Controller"></a>Usb Controller</h1><p>A Universal Serial Bus (USB) host controller is an interface that allows an enabled piece of hardware to interact and communicate with a particular piece of software. The USB connection is an input and output port that comes standard with most computers and a variety of other digital equipment that allows data to be transmitted through a cable or any other form of direct connection. A USB host controller manages the communication between peripheral devices and the computer system. Most modern computers have hi-speed host controllers and many older computers can have a host controller easily installed in an open slot on its motherboard</p>
<p>There are several types of USB host controller interface that support different types of USB ports. The <code>open host controller interface (OHCI) is</code> the standard for most and even supports USB 1.1. The <code>universal host controller interface (UHCI) from Intel® supports USB 1 in both fast and slow speeds</code>. Other types of host controller interfaces include the <code>enhanced host controller interface (EHCI)USB2.0, which is rated super-fast</code> by publicly specified standards, and the newest host controller standard, called the <code>extensible host controller interface (xHCI) USB3.0. The xHCI has been designed for improved speed, power, and efficiency than its predecessors</code>.</p>
<p><img src="https://acroname.com/sites/default/files/shared/pc_architecture_usb_internal_hub.jpg" alt="usb in system"></p>
<span id="more"></span>

<h1 id="Usb-Device-itself-layout"><a href="#Usb-Device-itself-layout" class="headerlink" title="Usb Device(itself) layout"></a>Usb Device(itself) layout</h1><p>A Universal Serial Bus (USB) device defines its capabilities and features through configurations, interfaces(function), alternate settings, and endpoints.</p>
<p>A USB configuration defines the capabilities and features of a device, mainly its power capabilities and interfaces. <strong>The device can have multiple configurations, but only one is active at a time</strong>. The active configuration isn’t chosen by the USB driver stack, but might be initiated by an application, a driver, the device driver. The device driver selects an active configuration.</p>
<p>A configuration can have <code>one or more USB interfaces that define the functionality of the device</code>. Typically, there is a <code>one-to-one correlation between a function and an interface</code>. However, certain devices expose multiple interfaces related to one function. In that case, the device can have an interface association descriptor (IAD). An IAD groups together interfaces that belong to a particular function.</p>
<p><code>Each interface contains one or more endpoints</code>, which are used to transfer data to and from the device. In addition, the interface contains alternate settings that define the bandwidth requirements of the function associated with the interface.</p>
<p><font color='red' size=4><strong>To sum up, a group of endpoints form an interface, and a set of interfaces constitutes a configuration in the device.</strong></font></p>
<p><img src="https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/images/device-layout-single.png" alt="single interface device"></p>
<p>For multifunction devices, the device has multiple interfaces. To use a particular function or an interface, the client driver selects the interface and an associated alternate setting. Consider a multi-function USB device such as a webcam. The device has two functions, video-capture (camera) and audio input (microphone). The device defines an endpoint in a video interface that streams video.</p>
<p><img src="https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/images/device-descriptors-multi.png" alt="multiple interfaces device"></p>
<ol>
<li>Interface 0 has three alternate settings. Only one of the alternate settings is active at any given time. Notice that Alternate Setting 0 doesn’t use an endpoint, whereas Alternate Settings 1 and 2 use Endpoint 1. Interface 1 has two alternate settings. Similar to Interface 0, Alternate Setting 0 doesn’t use an endpoint. Alternate Setting 1 is defined to use Endpoint 1.</li>
</ol>
<p><strong>Endpoints can’t be shared between two interfaces within a configuration</strong>. The device uses the endpoint address to determine the target endpoint for a data transfer or endpoint operation, such as pipe reset. All those operations are initiated by the host.</p>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/usb-device-layout">use device layout</a></p>
<h1 id="EndPoint-and-pipes"><a href="#EndPoint-and-pipes" class="headerlink" title="EndPoint and pipes"></a>EndPoint and pipes</h1><p><em>An endpoint is a buffer on a USB device</em>. <code>Endpoint is a term that relates to the hardware itself</code>, <em>independent of the host operating system</em>. The host can send and receive data to or from that buffer. Endpoints can be categorized into <code>control and data endpoints</code>.</p>
<p>Every USB device must provide at <code>least one control endpoint at address 0</code> called the default endpoint or Endpoint0. This endpoint is bidirectional. that is, the host can send data to the endpoint and receive data from it within one transfer. The purpose of a control transfer is to enable the host to obtain device information, configure the device, or perform control operations that are unique to the device.</p>
<p><code>Data endpoints are optional and used for transferring data</code>. They are unidirectional, has a type (control, interrupt, bulk, isochronous) and other properties. All those properties are described in an endpoint descriptor (see Standard USB descriptors).</p>
<p>Most Usb Devices have at least three endpoints, <code>Control, Data In, Data OUT</code> endpoints, but <strong>can be MORE</strong></p>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/usb-endpoints-and-their-pipes">Use endpoints and pipes</a></p>
<p>**Pipe<br><code>Data is transferred between a USB device and the USB host through an abstraction called a pipe</code>. Pipes is purely a software term. A pipe talks to an endpoint on a device, and that endpoint has an address. The other end of a pipe is always the host controller.</p>
<p><em>An unconfigured endpoint is called an endpoint while a configured endpoint is called a pipe.</em></p>
<p><img src="https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/images/endpoints.png"></p>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="How-many-usb-devices-does-a-system-support"><a href="#How-many-usb-devices-does-a-system-support" class="headerlink" title="How many usb devices does a system support?"></a>How many usb devices does a system support?</h2><p><a href="https://acroname.com/blog/how-many-usb-devices-can-i-connect">controller endpoints limit</a></p>
<h2 id="Usb-hub-vs-Usb-Switch"><a href="#Usb-hub-vs-Usb-Switch" class="headerlink" title="Usb hub vs Usb Switch"></a>Usb hub vs Usb Switch</h2><p><a href="https://acroname.com/blog/whats-difference-between-usb-hub-usb-switch-what-multiplexer">hub vs swtich</a></p>
]]></content>
      <categories>
        <category>hardware</category>
        <category>usb</category>
      </categories>
      <tags>
        <tag>usb</tag>
        <tag>HCI</tag>
      </tags>
  </entry>
  <entry>
    <title>hardware-vgpu</title>
    <url>/2021/08/09/hardware-vgpu/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Virtual GPU (vGPU) <code>enables multiple virtual machines (VMs) to have simultaneous, direct access to a single physical GPU</code>, using the same graphics drivers that are deployed on non-virtualized operating systems. By doing this, vGPU provides VMs with unparalleled graphics performance, compute performance, and application compatibility, together with the cost-effectiveness and scalability brought about by sharing a GPU among multiple workloads. </p>
<span id="more"></span>

<h1 id="Nvidia-VGPU"><a href="#Nvidia-VGPU" class="headerlink" title="Nvidia VGPU"></a>Nvidia VGPU</h1><p>NVIDIA vGPU software supports GPU instances on GPUs that support the <strong>Multi-Instance GPU (MIG)</strong> feature in NVIDIA vGPU and GPU pass through deployments. MIG enables a physical GPU to be securely partitioned into multiple separate GPU instances, providing multiple users with separate GPU resources to accelerate their applications. With MIG, <code>A GPU that can be split into several GPU instances of different sizes</code>, <strong>with each instance mapped to one vGPU</strong>. <strong>MIG needs GPU with Ampere GPU architecture</strong>, but not all GPU card supports it.</p>
<h2 id="VGPU-type"><a href="#VGPU-type" class="headerlink" title="VGPU type"></a>VGPU type</h2><p>The <code>number of physical GPUs that a board has depends on the board</code>. <code>Each physical GPU can support several different types of virtual GPU (vGPU)</code>. vGPU types have a fixed amount of frame buffer, number of supported display heads, and maximum resolutions. They are grouped into different series according to the different classes of workload for which they are optimized. Each series is identified by the last letter of the vGPU type name.</p>
<table>
<thead>
<tr>
<th>Series</th>
<th>Optimal Workload</th>
</tr>
</thead>
<tbody><tr>
<td>Q-series</td>
<td>Virtual workstations for creative and technical professionals who require the performance and features of Quadro technology, 3D rendering</td>
</tr>
<tr>
<td>C-series</td>
<td>Compute-intensive server workloads, such as artificial intelligence (AI), deep learning, or high-performance computing (HPC)</td>
</tr>
<tr>
<td>B-series</td>
<td>Virtual desktops for business professionals and knowledge workers</td>
</tr>
<tr>
<td>A-series</td>
<td>App streaming or session-based solutions for virtual applications users</td>
</tr>
</tbody></table>
<p>vGPU types determines</p>
<ul>
<li>frame buffer</li>
<li>display heads(virtual display outputs)</li>
<li>maximum resolution</li>
<li>number of VGPU</li>
</ul>
<p><strong>Example</strong><br>M60-2Q is allocated 2048 Mbytes of frame buffer on a Tesla M60 board. </p>
<p>NVIDIA vGPU is a licensed product on all supported GPU boards.</p>
<ul>
<li>Q-series vGPU types require a vWS license.</li>
<li>C-series vGPU types require an NVIDIA Virtual Compute Server (vCS) license but can also be used with a vWS license.</li>
<li>B-series vGPU types require a vPC license but can also be used with a vWS license.</li>
<li>A-series vGPU types require a vApps license.</li>
</ul>
<h2 id="ARCH"><a href="#ARCH" class="headerlink" title="ARCH"></a>ARCH</h2><p><strong>High-level architecture of NVIDIA vGPU</strong>, Under the control of the NVIDIA Virtual GPU Manager running under the hypervisor, NVIDIA physical GPUs are capable of supporting multiple virtual GPU devices (vGPUs) that can be assigned directly to guest VMs.</p>
<p><img src="https://docs.nvidia.com/grid/latest/grid-vgpu-user-guide/graphics/architecture-grid-vgpu.png" alt="NVIDIA vGPU System Architecture"></p>
<h3 id="Time-Sliced-NVIDIA-vGPU-Internal-Architecture"><a href="#Time-Sliced-NVIDIA-vGPU-Internal-Architecture" class="headerlink" title="Time-Sliced NVIDIA vGPU Internal Architecture"></a>Time-Sliced NVIDIA vGPU Internal Architecture</h3><p>A time-sliced vGPU is a vGPU that resides on a physical GPU that is not partitioned into multiple GPU instances. All time-sliced vGPUs resident on a GPU <code>share access to the GPU’s engines</code> including the graphics (3D), video decode, and video encode engines</p>
<p><img src="https://docs.nvidia.com/grid/latest/grid-vgpu-user-guide/graphics/architecture-grid-vgpu-internal.png"></p>
<p>This is VGPU Arch for traditional GPU ARCH that most of GPU card support it.</p>
<p>In a time-sliced vGPU, processes that run on the vGPU are scheduled to run in series. <strong>Each vGPU waits while other processes run on other vGPUs</strong>. While processes are running on a vGPU, the vGPU has exclusive use of the GPU’s engine.</p>
<p>For time-Sliced VGPU, the vgpu type must be same for a single GPU.</p>
<h3 id="MIG-Backed-NVIDIA-vGPU-Internal-Architecture"><a href="#MIG-Backed-NVIDIA-vGPU-Internal-Architecture" class="headerlink" title="MIG-Backed NVIDIA vGPU Internal Architecture"></a>MIG-Backed NVIDIA vGPU Internal Architecture</h3><p>A MIG-backed vGPU is a vGPU that resides on a GPU instance in a MIG-capable physical GPU. Each MIG-backed vGPU resident on a GPU has exclusive access to the GPU instance’s engines, including the graphics (3D), and video decode engines.</p>
<p>In a MIG-backed vGPU, processes that run on the vGPU run in parallel with processes running on other vGPUs on the GPU. Process run on all vGPUs resident on a physical GPU simultaneously. </p>
<p><img src="https://docs.nvidia.com/grid/latest/grid-vgpu-user-guide/graphics/architecture-grid-vgpu-mig-backed-internal.png"></p>
<p>For MIG-Backed vgpu, the vgpu type can be different for a single GPU.</p>
<h2 id="GPU-Product"><a href="#GPU-Product" class="headerlink" title="GPU Product"></a>GPU Product</h2><p>Two many GPU series</p>
<ul>
<li>Quadro - This is the workstation version. Higher priced. This is meant for corporate customers, so it is better tested, more memory, etc. This is the highest quality chips. And since they are higher priced, NVIDIA offers better support, easier exchanges etc.</li>
<li>Tesla - This is the range that is focused on HPC. some may not have video output. This is intended for people using CUDA.</li>
</ul>
<p><strong>Note</strong></p>
<ul>
<li>Some products are only for graphics while others are only for compute</li>
<li>Tesla M60 and M6 GPUs support compute mode and graphics mode, can switch between them</li>
</ul>
<h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p><strong>GPU</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Centos</span></span><br><span class="line"><span class="comment"># install vgpu driver</span></span><br><span class="line">$ rpm -iv NVIDIA-vGPU-rhel-7.5-460.73.02.x86_64.rpm</span><br><span class="line">$ reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># verify vgpu driver is loaded correctly</span></span><br><span class="line">$ lsmod | grep vfio</span><br><span class="line">nvidia_vgpu_vfio       27099  0</span><br><span class="line">nvidia              12316924  1 nvidia_vgpu_vfio</span><br><span class="line">vfio_mdev              12841  0</span><br><span class="line">mdev                   20414  2 vfio_mdev,nvidia_vgpu_vfio</span><br><span class="line">vfio_iommu_type1       22342  0</span><br><span class="line">vfio                   32331  3 vfio_mdev,nvidia_vgpu_vfio,vfio_iommu_type1</span><br><span class="line"></span><br><span class="line"><span class="comment"># show GPU</span></span><br><span class="line">$ nvidia-smi</span><br><span class="line">Mon Aug  9 11:24:19 2021       </span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 430.46       Driver Version: 430.46       CUDA Version: N/A      |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  Tesla P40           On   | 00000000:03:00.0 Off |                    0 |</span><br><span class="line">| N/A   27C    P8    19W / 250W |     41MiB / 23039MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">|   1  Tesla P40           On   | 00000000:04:00.0 Off |                    0 |</span><br><span class="line">| N/A   27C    P8    19W / 250W |     41MiB / 23039MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">|   2  Tesla P40           On   | 00000000:84:00.0 Off |                    0 |</span><br><span class="line">| N/A   26C    P8    19W / 250W |     50MiB / 23039MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">|   3  Tesla P40           On   | 00000000:85:00.0 Off |                    0 |</span><br><span class="line">| N/A   31C    P8    18W / 250W |     41MiB / 23039MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">                                                                               </span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                       GPU Memory |</span><br><span class="line">|  GPU       PID   Type   Process name                             Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">|  No running processes found                                                 |</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute M. means Compute mode enabled</span></span><br><span class="line"><span class="comment"># Disp.A: GPU uses for display</span></span><br><span class="line"><span class="comment"># Processes: show processes running on each GPU</span></span><br><span class="line"><span class="comment"># For GPU supported MIG, there is label MIG M. along with Compute M.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check BDF(bus, domain, function) of each GPU</span></span><br><span class="line">$ lspci | grep NVIDIA</span><br><span class="line">03:00.0 3D controller: NVIDIA Corporation GP102GL [Tesla P40] (rev a1)</span><br><span class="line">04:00.0 3D controller: NVIDIA Corporation GP102GL [Tesla P40] (rev a1)</span><br><span class="line">84:00.0 3D controller: NVIDIA Corporation GP102GL [Tesla P40] (rev a1)</span><br><span class="line">85:00.0 3D controller: NVIDIA Corporation GP102GL [Tesla P40] (rev a1)</span><br></pre></td></tr></table></figure>

<p><strong>Create VPUG</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># when VGPU is enabled for a GPU, there is a link created at /sys/class/mdev_bus/ pointing to GPU device(PCI bus number)</span></span><br><span class="line"><span class="comment"># ls /sys/class/mdev_bus/</span></span><br><span class="line">0000:03:00.0  0000:04:00.0  0000:84:00.0  0000:85:00.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># checkout all supported vgpu type of the given GPU</span></span><br><span class="line"><span class="comment"># nvidia-156 is mdev identifier, the vgpu type is at mdev_supported_types/nvidia-156/name </span></span><br><span class="line">$ <span class="built_in">cd</span> /sys/class/mdev_bus/0000:03:00.0</span><br><span class="line">$ <span class="built_in">ls</span> mdev_supported_types/</span><br><span class="line">nvidia-156  nvidia-241  nvidia-284  nvidia-286  nvidia-46  nvidia-48  nvidia-50  nvidia-52  nvidia-54  nvidia-56  nvidia-58  nvidia-60  nvidia-62</span><br><span class="line">nvidia-215  nvidia-283  nvidia-285  nvidia-287  nvidia-47  nvidia-49  nvidia-51  nvidia-53  nvidia-55  nvidia-57  nvidia-59  nvidia-61</span><br><span class="line"></span><br><span class="line"><span class="comment"># P40-2B， P40 is GPU type, while 2B is vgpu-type</span></span><br><span class="line">$ <span class="built_in">cat</span> mdev_supported_types/nvidia-156/name </span><br><span class="line">GRID P40-2B</span><br><span class="line"></span><br><span class="line"><span class="comment"># check how many VGPU(depends on type) can be created for a given GPU</span></span><br><span class="line">$ <span class="built_in">cat</span> mdev_supported_types/nvidia-156/available_instances </span><br><span class="line">12</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a VGPU</span></span><br><span class="line">$ uuidgen</span><br><span class="line">2794ee88-7932-4c37-9927-97ef3a5e76c4</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;2794ee88-7932-4c37-9927-97ef3a5e76c4&quot;</span>&gt; mdev_supported_types/nvidia-156/create</span><br><span class="line"></span><br><span class="line"><span class="comment"># after this a mdev device(VGPU device) is created</span></span><br><span class="line">$ <span class="built_in">ls</span> /sys/bus/mdev/devices/2794ee88-7932-4c37-9927-97ef3a5e76c4</span><br><span class="line">driver  iommu_group  mdev_type  nvidia  power  remove  subsystem  uevent</span><br><span class="line"></span><br><span class="line"><span class="comment"># assign vgpu to VM </span></span><br><span class="line"><span class="comment"># VM must</span></span><br><span class="line"><span class="comment"># 1. The VM to which you want to add the vGPUs is shut down. </span></span><br><span class="line"></span><br><span class="line">$ virsh edit <span class="variable">$vm</span>-name</span><br><span class="line"></span><br><span class="line"><span class="comment"># uuid is the vgpu uuid or use bdf is also ok</span></span><br><span class="line">&lt;device&gt;</span><br><span class="line">...</span><br><span class="line">  &lt;hostdev mode=<span class="string">&#x27;subsystem&#x27;</span> <span class="built_in">type</span>=<span class="string">&#x27;mdev&#x27;</span> model=<span class="string">&#x27;vfio-pci&#x27;</span>&gt;</span><br><span class="line">    &lt;<span class="built_in">source</span>&gt;</span><br><span class="line">      &lt;address uuid=<span class="string">&#x27;2794ee88-7932-4c37-9927-97ef3a5e76c4&#x27;</span>/&gt;</span><br><span class="line">    &lt;/source&gt;</span><br><span class="line">  &lt;/hostdev&gt;</span><br><span class="line">&lt;/device&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># check vm who is using this vgpu</span></span><br><span class="line">$ <span class="built_in">cat</span> /sys/bus/mdev/devices/2794ee88-7932-4c37-9927-97ef3a5e76c4/nvidia/vm_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove a vgpu must know the uuid of vgpu</span></span><br><span class="line"><span class="comment"># VM must</span></span><br><span class="line"><span class="comment"># 1. The VM to which the vGPU is assigned is shut down</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;1&quot;</span>&gt; /sys/bus/mdev/devices/2794ee88-7932-4c37-9927-97ef3a5e76c4/remove</span><br></pre></td></tr></table></figure>


<p><strong>Monitoring GPU performance</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get GPU INFO</span></span><br><span class="line">$ nvidia-smi</span><br><span class="line"></span><br><span class="line"><span class="comment"># get VGPU INFO</span></span><br><span class="line">$ nvidia-smi vgpu</span><br><span class="line">Mon Aug  9 12:14:14 2021       </span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 430.46                 Driver Version: 430.46                    |</span><br><span class="line">|---------------------------------+------------------------------+------------+</span><br><span class="line">| GPU  Name                       | Bus-Id                       | GPU-Util   |</span><br><span class="line">|      vGPU ID     Name           | VM ID     VM Name            | vGPU-Util  |</span><br><span class="line">|=================================+==============================+============|</span><br><span class="line">|   0  Tesla P40                  | 00000000:03:00.0             |   0%       |</span><br><span class="line">+---------------------------------+------------------------------+------------+</span><br><span class="line">|   1  Tesla P40                  | 00000000:04:00.0             |   0%       |</span><br><span class="line">|      3251639763  GRID P40-6Q    | 9750...  i-y7i5cxa4x4        |      0%    |</span><br><span class="line">+---------------------------------+------------------------------+------------+</span><br><span class="line">|   2  Tesla P40                  | 00000000:84:00.0             |   0%       |</span><br><span class="line">+---------------------------------+------------------------------+------------+</span><br><span class="line">|   3  Tesla P40                  | 00000000:85:00.0             |   0%       |</span><br><span class="line">+---------------------------------+------------------------------+------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># get VGPU Details</span></span><br><span class="line">$ nvidia-smi vgpu -q</span><br><span class="line">GPU 00000000:03:00.0</span><br><span class="line">    Active vGPUs                    : 0</span><br><span class="line"></span><br><span class="line">GPU 00000000:04:00.0</span><br><span class="line">    Active vGPUs                    : 1</span><br><span class="line">    vGPU ID                         : 3251639763</span><br><span class="line">        VM UUID                     : 97502756-1798-4014-9979-8595f909eeb3</span><br><span class="line">        VM Name                     : i-y7i5cxa4x4</span><br><span class="line">        vGPU Name                   : GRID P40-6Q</span><br><span class="line">        vGPU Type                   : 50</span><br><span class="line">        vGPU UUID                   : 0c4b9906-7a2e-2e4e-133d-ca368087e5ab</span><br><span class="line">        Guest Driver Version        : Not Available</span><br><span class="line">        License Status              : Unlicensed</span><br><span class="line">        Accounting Mode             : Disabled</span><br><span class="line">        ECC Mode                    : Disabled</span><br><span class="line">        Accounting Buffer Size      : 4000</span><br><span class="line">        Frame Rate Limit            : N/A</span><br><span class="line">        FB Memory Usage</span><br><span class="line">            Total                   : 6144 MiB</span><br><span class="line">            Used                    : 0 MiB</span><br><span class="line">            Free                    : 6144 MiB</span><br><span class="line">        Utilization</span><br><span class="line">            Gpu                     : 0 %</span><br><span class="line">            Memory                  : 0 %</span><br><span class="line">            Encoder                 : 0 %</span><br><span class="line">            Decoder                 : 0 %</span><br><span class="line">        Encoder Stats</span><br><span class="line">            Active Sessions         : 0</span><br><span class="line">            Average FPS             : 0</span><br><span class="line">            Average Latency         : 0</span><br><span class="line">        FBC Stats</span><br><span class="line">            Active Sessions         : 0</span><br><span class="line">            Average FPS             : 0</span><br><span class="line">            Average Latency         : 0</span><br><span class="line"></span><br><span class="line">GPU 00000000:84:00.0</span><br><span class="line">    Active vGPUs                    : 0</span><br><span class="line"></span><br><span class="line">GPU 00000000:85:00.0</span><br><span class="line">    Active vGPUs                    : 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># To monitor vGPU engine usage across multiple vGPUs</span></span><br><span class="line"></span><br><span class="line">$ nvidia-smi vgpu -u</span><br><span class="line"><span class="comment"># GPU       vGPU    sm   mem   enc   dec</span></span><br><span class="line"><span class="comment"># Idx         Id     %     %     %     %</span></span><br><span class="line">    0          -     -     -     -     -</span><br><span class="line">    1 3251639763     0     0     0     0</span><br><span class="line">    2          -     -     -     -     -</span><br><span class="line">    3          -     -     -     -     -</span><br><span class="line">    0          -     -     -     -     -</span><br><span class="line"></span><br><span class="line"><span class="comment"># To monitor vGPU engine usage by applications across multiple vGPUs</span></span><br><span class="line">$ nvidia-smi vgpu -p</span><br><span class="line"><span class="comment"># GPU       vGPU    process    sm   mem   enc   dec   process         </span></span><br><span class="line"><span class="comment"># Idx         Id         Id     %     %     %     %   name            </span></span><br><span class="line">    0          -          -     -     -     -     -   -               </span><br><span class="line">    1          -          -     -     -     -     -   -               </span><br><span class="line">    2          -          -     -     -     -     -   -               </span><br><span class="line">    3          -          -     -     -     -     -   -               </span><br><span class="line"></span><br><span class="line"><span class="comment"># If MIG mode is not enabled for the GPU, or if the GPU does not support MIG, this property reflects the number and type of vGPUs that are already running on the GPU.</span></span><br><span class="line"><span class="comment"># 1. If no vGPUs are running on the GPU, all vGPU types that the GPU supports are listed.</span></span><br><span class="line"><span class="comment"># 2. If one or more vGPUs are running on the GPU, but the GPU is not fully loaded, only the type of the vGPUs that are already running is listed.</span></span><br><span class="line"><span class="comment"># 3. If the GPU is fully loaded, no vGPU types are listed.</span></span><br><span class="line"></span><br><span class="line">$ nvidia-smi vgpu -c</span><br><span class="line">GPU 00000000:03:00.0</span><br><span class="line">    GRID P40-6Q    </span><br><span class="line"></span><br><span class="line">GPU 00000000:04:00.0</span><br><span class="line">    GRID P40-6Q    </span><br><span class="line"></span><br><span class="line">GPU 00000000:84:00.0</span><br><span class="line">    GRID P40-6Q    </span><br><span class="line"></span><br><span class="line">GPU 00000000:85:00.0</span><br><span class="line">    GRID P40-6Q    </span><br></pre></td></tr></table></figure>

<p><strong>sysfs for NVIDIA GPU</strong><br><code>The sysfs directory for each physical GPU is at</code></p>
<ul>
<li>&#x2F;sys&#x2F;bus&#x2F;pci&#x2F;devices&#x2F;</li>
<li>&#x2F;sys&#x2F;class&#x2F;mdev_bus&#x2F;</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sys/class/mdev_bus/</span><br><span class="line">           |-parent-physical-device</span><br><span class="line">             |-mdev_supported_types</span><br><span class="line">               |-nvidia-vgputype-id</span><br><span class="line">                 |-available_instances</span><br><span class="line">                 |-create</span><br><span class="line">                 |-description</span><br><span class="line">                 |-device_api</span><br><span class="line">                 |-devices</span><br><span class="line">                 |-name</span><br></pre></td></tr></table></figure>

<p><strong>The mdev device file that you create to represent the vGPU does not persist when the host is rebooted and must be re-created after the host is rebooted</strong></p>
<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul>
<li><a href="https://docs.nvidia.com/grid/latest/grid-vgpu-user-guide/index.html">nvidia vgpu user guide</a></li>
</ul>
]]></content>
      <categories>
        <category>hardware</category>
        <category>vgpu</category>
      </categories>
      <tags>
        <tag>vgpu</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo post</title>
    <url>/2019/09/25/hexo-post/</url>
    <content><![CDATA[<h1 id="How-to-use-Hexo-tag-and-Next-tag"><a href="#How-to-use-Hexo-tag-and-Next-tag" class="headerlink" title="How to use Hexo tag and Next tag"></a>How to use Hexo tag and Next tag</h1><span id="more"></span>
<h2 id="post-tags-and-categories-in-Hexo-front-matter"><a href="#post-tags-and-categories-in-Hexo-front-matter" class="headerlink" title="post tags and categories in Hexo front matter"></a>post tags and categories in Hexo front matter</h2><p>let’s explain them in short samples</p>
<ul>
<li>tag<br>tags written in this way, <mark class="label warning">no order, no level, flat, each line takes one tag</mark></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">- taga</span><br><span class="line">- tagb</span><br></pre></td></tr></table></figure>

<ul>
<li>categories<br>categories written in two ways, <mark class="label warning">with order, level, not flat, same level categories must in different line</mark><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- [parentA, childA]</span><br><span class="line">- parentB</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Hexo-tag-and-Next-tag-used-in-content"><a href="#Hexo-tag-and-Next-tag-used-in-content" class="headerlink" title="Hexo tag and Next tag used in content"></a>Hexo tag and Next tag used in content</h2><p>Tag plugins are different from post tags. They are ported from Octopress and provide a useful way for you to quickly add specific content to your posts</p>
 is an extension to  which makes writting post easily.
<p>Actually, they will be converted to  at last. you can use both of them at same time, here I only list the frequent one used in my posts.</p>
<h3 id="Basic-MarkDown-tags"><a href="#Basic-MarkDown-tags" class="headerlink" title="Basic MarkDown tags"></a>Basic MarkDown tags</h3><ul>
<li><p><strong>Line breaks</strong><br>To create a line break (&lt;br&gt;), end a line with two or more spaces, and then type return.</p>
</li>
<li><p><strong>blockquote Next extended it as note</strong><br>To create a blockquote, add a &gt; in front of a paragraph.</p>
</li>
<li><p><strong>image</strong>  </p>
  <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">![Tux, the Linux mascot](/assets/images/tux.png)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Horizontal Rules</strong><br>To create a horizontal rule, use three or more asterisks (***), dashes (—), or underscores (___) on a line by themselves.</p>
</li>
</ul>
<p>Note: Many Markdown applications allow you to use HTML tags in Markdown-formatted text<br><a href="https://www.markdownguide.org/basic-syntax/">Markdown Basic</a></p>
<h3 id="Hexo-tags"><a href="#Hexo-tags" class="headerlink" title="Hexo tags"></a>Hexo tags</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% link text url %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% post_link filename %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Next-tags"><a href="#Next-tags" class="headerlink" title="Next tags"></a>Next tags</h3><ul>
<li><p>note used to group content</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">[class]   : default | primary | success | info | warning | danger.</span><br></pre></td></tr></table></figure>
</li>
<li><p>tabs used to group of content with tabs</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>label used to color Text</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% label [class]@Text %&#125;</span><br><span class="line"></span><br><span class="line">[class] : default | primary | success | info | warning | danger.</span><br><span class="line">          &#x27;@Text&#x27; can be specified with or without space</span><br><span class="line">          E.g. &#x27;success @text&#x27; similar to &#x27;success@text&#x27;.</span><br><span class="line">          If not specified, default class will be selected.</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
        <category>tags</category>
      </categories>
      <tags>
        <tag>hexo tag</tag>
        <tag>next tag</tag>
      </tags>
  </entry>
  <entry>
    <title>html_basic</title>
    <url>/2020/07/16/html-basic/</url>
    <content><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="block-box-and-inline-box-element"><a href="#block-box-and-inline-box-element" class="headerlink" title="block box and inline box element"></a>block box and inline box element</h2><p><code>Both block and inline element are box</code>! but with different formatting contexts, say for inline-box you can set padding, background, border for them, but can’t set width and height for inline element.</p>
<p>By default, <code>a block level element&#39;s content is 100% of the width of its parent element, and as tall as its content</code>. <code>Inline elements are as tall as their content, and as wide as their content</code>. You can’t set width or height on inline elements — they just sit inside the content of block level elements</p>
<p><code>Block-level elements may contain inline elements and (sometimes) other block-level elements. Inherent in this structural distinction is the idea that block elements create &quot;larger&quot; structures than inline elements</code></p>
<p><code>Inline elements may contain only data and other inline elements. You can&#39;t put block elements inside inline elements.</code></p>
<p>The behavior of elements which have a block or inline formatting context is defined like this.</p>
<ul>
<li><p><strong>block formatting context</strong><br>  In a block formatting context, boxes are laid out one after the other <code>vertically</code>, <code>beginning at the top of a containing block</code>. The vertical distance between two sibling boxes is determined by the ‘margin’ properties. <code>Vertical margins between adjacent block-level boxes in a block formatting context collapse</code>.</p>
<p>  By default <code>block elements will consume all of the space in the inline direction</code>.</p>
</li>
</ul>
<p>In a block formatting context, each box’s left outer edge touches the left edge of the containing block.</p>
<ul>
<li><strong>inline formatting context</strong><br>  In an inline formatting context, boxes are laid out <code>horizontally, one after the other</code>, beginning at the top of a containing block. <code>Horizontal margins, borders, and padding are respected between these boxes.</code> The boxes may be aligned vertically in different ways: their bottoms or tops may be aligned, or the baselines of text within them may be aligned. <code>The rectangular area that contains the boxes that form a line is called a line box</code></li>
</ul>
<p><strong>Block element</strong></p>
<ul>
<li>address, article, aside, div, dd, d,t fieldset, footer, form, h1, h6, header, nav, hr, li, ol, p, ul, table etc</li>
</ul>
<p><strong>Inline element</strong></p>
<ul>
<li>a, audio, video, button, img, input, select, b, br, i, iframe, label, svg etc.</li>
</ul>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements">ALL inline elements</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements">ALL block elements</a></p>
<h2 id="Global-attribute"><a href="#Global-attribute" class="headerlink" title="Global attribute"></a>Global attribute</h2><p>The global attributes are attributes that can be used with all HTML elements(tag), include custom tag. below are common global attributes.</p>
<table>
<thead>
<tr>
<th>attribute</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>style</td>
<td>Specifies an inline CSS style for an element</td>
</tr>
<tr>
<td>class</td>
<td>Specifies one or more classnames for an element</td>
</tr>
<tr>
<td>id</td>
<td>Specifies a unique id for an element</td>
</tr>
<tr>
<td>title</td>
<td>The value of the title attribute will be displayed as a tooltip when you mouse over the element</td>
</tr>
<tr>
<td>draggable</td>
<td>Specifies whether an element is draggable or not</td>
</tr>
<tr>
<td>data-*</td>
<td>Used to store custom data private to the page or application</td>
</tr>
</tbody></table>
<h2 id="empty-tag"><a href="#empty-tag" class="headerlink" title="empty tag"></a>empty tag</h2><p>Some HTML elements have no content (like the &lt;br&gt; element). These elements are called empty elements. Empty elements do not have an end tag!</p>
<ul>
<li>&lt;br&gt;</li>
<li>&lt;hr&gt;</li>
<li>&lt;img&gt;</li>
<li>&lt;input&gt;</li>
</ul>
<h2 id="Quotes-attributes-value"><a href="#Quotes-attributes-value" class="headerlink" title="Quotes attributes value"></a>Quotes attributes value</h2><p>Single or Double Quotes?</p>
<p><code>Double quotes around attribute values are the most common in HTML, but single quotes can also be used</code>.<br>In some situations, when the attribute value itself contains double quotes, it is necessary to use single quotes</p>
<h2 id="Html-Links"><a href="#Html-Links" class="headerlink" title="Html Links"></a>Html Links</h2><p>When you move the mouse over a link, the mouse arrow will turn into a little hand, A link does not have to be text. <code>A link can be an image or any other inline HTML element</code></p>
<p>The target attribute specifies where to open the linked document.</p>
<ul>
<li>_self - Default. Opens the document in the same window&#x2F;tab as it was clicked</li>
<li>_blank - Opens the document in a new window or tab</li>
</ul>
<p>Use mailto: inside the href attribute to create a link that opens the user’s email program (to let them send a new email):</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:someone@example.com&quot;</span>&gt;</span>Send email<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>Jump to particular element on the same page or another page</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--C4 is element id on the same page--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#C4&quot;</span>&gt;</span>Jump to Chapter 4<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--C4 is element id on the another page--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;html_demo.html#C4&quot;</span>&gt;</span>Jump to Chapter 4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Image-vs-Picture"><a href="#Image-vs-Picture" class="headerlink" title="Image vs Picture"></a>Image vs Picture</h2><p><code>Always specify the width and height of an image</code>. If width and height are not specified, <code>the web page might flicker while the image loads</code>. as Browser does not know the width and height, it uses zero, after get the image, the whole page is render again which causes flicker.</p>
<p>The most common use of the &lt;picture&gt; element will be for art direction in responsive designs. Instead of having one image that is scaled up or down based on the viewport width, multiple images can be designed to more nicely fill the browser viewport.</p>
<p>The &lt;picture&gt; element contains two tags: one or more &lt;source&gt; tags and one &lt;img&gt; tag.</p>
<p>The browser will look for the first &lt;source&gt; element where the media query matches the current viewport width, and then it will display the proper image (specified in the srcset attribute). The &lt;img&gt; element is required as the last child of the &lt;picture&gt; element, as a fallback option if none of the source tags matches.</p>
<p>Tip: The &lt;picture&gt; element works “similar” to &lt;video&gt; and &lt;audio&gt;. You set up different sources, and the first source that fits the preferences is the one being used.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">&quot;(min-width:650px)&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;img_pink_flowers.jpg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">&quot;(min-width:465px)&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;img_white_flower.jpg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img_orange_flowers.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Flowers&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:auto;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><p>An HTML iframe is used to display a web page within a web page.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.google.com&quot;</span> <span class="attr">name</span>=<span class="string">&quot;iframe_a&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Iframe Example&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>use iframe as the target of link</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;demo_iframe.htm&quot;</span> <span class="attr">name</span>=<span class="string">&quot;iframe_a&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Iframe Example&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.w3schools.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;iframe_a&quot;</span>&gt;</span>W3Schools.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h2 id="File-Path"><a href="#File-Path" class="headerlink" title="File Path"></a>File Path</h2><table>
<thead>
<tr>
<th>Path</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;img src&#x3D;”picture.jpg”&gt;</td>
<td>The “picture.jpg” file is located in the same folder as the current page</td>
</tr>
<tr>
<td>&lt;img src&#x3D;”images&#x2F;picture.jpg”&gt;</td>
<td>The “picture.jpg” file is located in the images folder in the current folder</td>
</tr>
<tr>
<td>&lt;img src&#x3D;”&#x2F;images&#x2F;picture.jpg”&gt;</td>
<td>The “picture.jpg” file is located in the images folder at the root of the current web</td>
</tr>
<tr>
<td>&lt;img src&#x3D;”..&#x2F;picture.jpg”&gt;</td>
<td>The “picture.jpg” file is located in the folder one level up from the current folder</td>
</tr>
</tbody></table>
<h2 id="HTML-Entities"><a href="#HTML-Entities" class="headerlink" title="HTML Entities"></a>HTML Entities</h2><p>If you use the less than (&lt;) or greater than (&gt;) signs in your text, the browser might mix them with tags.</p>
<p>Character entities are used to display reserved characters in HTML.<br>A character entity looks like this in html directly</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&amp;entity_name;</span><br><span class="line">OR</span><br><span class="line">&amp;#entity_number; </span><br><span class="line"></span><br><span class="line">To display a less than sign (&lt;) we must write: &amp;lt; or &amp;#60;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.w3schools.com/html/html_entities.asp">Useful entities</a></p>
<p><a href="https://www.w3schools.com/charsets/ref_utf_symbols.asp">symbol entities</a></p>
<h2 id="Emojis"><a href="#Emojis" class="headerlink" title="Emojis"></a>Emojis</h2><p>Emojis are characters from the UTF-8 character set: 😄 😍 💗, They are letters (characters) from the UTF-8 (Unicode) character set. display like image.</p>
<ul>
<li>😄 is 128516</li>
<li>😍 is 128525</li>
<li>💗 is 128151</li>
</ul>
<p>Two place to use UTF-8 code.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;#128512;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;\128512&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.w3schools.com/charsets/ref_emoji.asp">Emoji Unicode Reference</a></p>
<h2 id="URL-encoding"><a href="#URL-encoding" class="headerlink" title="URL encoding"></a>URL encoding</h2><p>URLs can only be sent over the Internet using the ASCII character-set. If a URL contains characters outside the ASCII set, the URL has to be converted.</p>
<p>URL encoding converts non-ASCII characters into a format that can be transmitted over the Internet.<br>URL encoding replaces non-ASCII characters with a “%” followed by hexadecimal digits.<br>URLs cannot contain spaces. URL encoding normally replaces a space with a plus (+) sign, or %20.</p>
<h2 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h2><p>Form elements have &lt;input&gt; &lt;select&gt; &lt;textarea&gt;</p>
<p><code>Each input field must have a name attribute to be submitted</code>.<br>If the name attribute is omitted, the data of that input field will not be sent at all, as we have to send name and value pairs with Post method.</p>
<p>Different input types, actually, some built-in validation for each type and styes for that</p>
<ul>
<li>&lt;input type&#x3D;”button”&gt;</li>
<li>&lt;input type&#x3D;”checkbox”&gt;</li>
<li>&lt;input type&#x3D;”color”&gt;</li>
<li>&lt;input type&#x3D;”date”&gt;</li>
<li>&lt;input type&#x3D;”datetime-local”&gt;</li>
<li>&lt;input type&#x3D;”email”&gt;</li>
<li>&lt;input type&#x3D;”file”&gt;</li>
<li>&lt;input type&#x3D;”hidden”&gt;</li>
<li>&lt;input type&#x3D;”image”&gt;</li>
<li>&lt;input type&#x3D;”month”&gt;</li>
<li>&lt;input type&#x3D;”number”&gt;</li>
<li>&lt;input type&#x3D;”password”&gt;</li>
<li>&lt;input type&#x3D;”radio”&gt;</li>
<li>&lt;input type&#x3D;”range”&gt;</li>
<li>&lt;input type&#x3D;”reset”&gt;</li>
<li>&lt;input type&#x3D;”search”&gt;</li>
<li>&lt;input type&#x3D;”submit”&gt;</li>
<li>&lt;input type&#x3D;”tel”&gt;</li>
<li>&lt;input type&#x3D;”text”&gt;</li>
<li>&lt;input type&#x3D;”time”&gt;</li>
<li>&lt;input type&#x3D;”url”&gt;</li>
<li>&lt;input type&#x3D;”week”&gt;</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Attribute 	Description</span><br><span class="line">checked 	Specifies that an input field should be pre-selected when the page loads (for type=&quot;checkbox&quot; or type=&quot;radio&quot;)</span><br><span class="line">disabled 	Specifies that an input field should be disabled</span><br><span class="line">max             Specifies the maximum value for an input field</span><br><span class="line">maxlength 	Specifies the maximum number of character for an input field</span><br><span class="line">min 	        Specifies the minimum value for an input field</span><br><span class="line">pattern 	Specifies a regular expression to check the input value against</span><br><span class="line">readonly 	Specifies that an input field is read only (cannot be changed)</span><br><span class="line">required 	Specifies that an input field is required (must be filled out)</span><br><span class="line">size 	        Specifies the width (in characters) of an input field</span><br><span class="line">step 	        Specifies the legal number intervals for an input field</span><br><span class="line">value 	        Specifies the default value for an input field</span><br></pre></td></tr></table></figure>

<h2 id="SVG-in-html"><a href="#SVG-in-html" class="headerlink" title="SVG in html"></a>SVG in html</h2><p>SVG defines vector-based graphics in XML format, the HTML &lt;svg&gt; element is a container for SVG graphics.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">&quot;100,10 40,198 190,78 10,78 160,198&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;fill:lime;stroke:purple;stroke-width:5;fill-rule:evenodd;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="video"><a href="#video" class="headerlink" title="video"></a>video</h2><p>There are three supported video formats: MP4, WebM, and Ogg by browser built-in player. MP4 is popular than others as most browser supports it.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class="line">Your browser does not support the video tag.</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h2 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h2><p>There are three supported audio formats: MP3, WAV, and OGG by browser built-in player, mp3 is more popular than others.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line">Your browser does not support the audio element.</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<h2 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h2><p>Plug-ins are computer programs that extend the standard functionality of the browser, </p>
<p>Plug-ins were designed to be used for many different purposes:</p>
<ul>
<li>To run Java applets</li>
<li>To run Microsoft ActiveX controls</li>
<li>To display Flash movies</li>
<li>To display maps</li>
<li>To scan for viruses</li>
<li>To verify a bank id</li>
</ul>
<p>Hence Plugin-in can do more than &lt;video&gt; and &lt;audio&gt;, and browser supports it long time ago, there are two type to include plugin &lt;object&gt; Microsoft standard and &lt;embed&gt; way, always use later as it’s supported by most browsers, even Microsoft browser.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">type</span>=<span class="string">&quot;video/webm&quot;</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h2 id="HTML-built-in-API"><a href="#HTML-built-in-API" class="headerlink" title="HTML built-in API"></a>HTML built-in API</h2><p>API is used by JS to get information, like GEO, Storage, Drap&#x2F;Drop</p>
<p>The getCurrentPosition() method is used to return the user’s position. then you and print it or show it in a Map</p>
<p><strong>Drag and Droop</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">allowDrop</span>(<span class="params">ev</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  ev.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">drag</span>(<span class="params">ev</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  ev.<span class="property">dataTransfer</span>.<span class="title function_">setData</span>(<span class="string">&quot;text&quot;</span>, ev.<span class="property">target</span>.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">drop</span>(<span class="params">ev</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  ev.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> data = ev.<span class="property">dataTransfer</span>.<span class="title function_">getData</span>(<span class="string">&quot;text&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  ev.<span class="property">target</span>.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(data));</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">ondrop</span>=<span class="string">&quot;drop(event)&quot;</span> <span class="attr">ondragover</span>=<span class="string">&quot;allowDrop(event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;drag1&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img_logo.gif&quot;</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ondragstart</span>=<span class="string">&quot;drag(event)&quot;</span> <span class="attr">width</span>=<span class="string">&quot;336&quot;</span> <span class="attr">height</span>=<span class="string">&quot;69&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p><strong>Web Storage</strong><br>HTML web storage provides two objects for storing data on the client:</p>
<ul>
<li>window.localStorage -   stores data with no expiration date</li>
<li>window.sessionStorage - stores data for one session (data is lost when the browser tab is closed)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Store</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;lastname&quot;</span>, <span class="string">&quot;Smith&quot;</span>);</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="property">lastname</span> = <span class="string">&quot;Smith&quot;</span>;</span><br><span class="line"><span class="comment">// Retrieve</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>).<span class="property">innerHTML</span> = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;lastname&quot;</span>);</span><br><span class="line"><span class="comment">//localStorage.lastname</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;lastname&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Session storage</span></span><br><span class="line"><span class="keyword">if</span> (sessionStorage.<span class="property">clickcount</span>) &#123;</span><br><span class="line">  sessionStorage.<span class="property">clickcount</span> = <span class="title class_">Number</span>(sessionStorage.<span class="property">clickcount</span>) + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  sessionStorage.<span class="property">clickcount</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;You have clicked the button &quot;</span> +</span><br><span class="line">sessionStorage.<span class="property">clickcount</span> + <span class="string">&quot; time(s) in this session.&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><p><strong>Events</strong></p>
<ul>
<li>Window event</li>
<li>Form events</li>
<li>Keyboard events</li>
<li>Mouse events</li>
<li>Clipboard events</li>
<li>Drap events</li>
<li>Media events</li>
</ul>
<p><a href="https://www.w3schools.com/tags/ref_eventattributes.asp">ALL Events</a></p>
<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul>
<li><a href="https://htmlcheatsheet.com/#">HTML cheatsheet</a></li>
</ul>
]]></content>
      <categories>
        <category>html</category>
        <category>tag</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>tag</tag>
      </tags>
  </entry>
  <entry>
    <title>html_dom</title>
    <url>/2020/07/20/html-dom/</url>
    <content><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>When a web page is loaded, the browser creates a Document Object Model of the page, <code>the HTML DOM model is constructed as a tree of Objects</code></p>
<p><img src="https://www.w3schools.com/js/pic_htmltree.gif" alt="Dom Tree"></p>
<p>Everything in the DOM is a node(text can be a node as well)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--document node--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  &lt;h1                        class=&quot;big&quot;&gt;             hello                     &lt;/h1&gt;</span></span><br><span class="line"><span class="comment">  h1:element node(object)    attribute node(object)   text noe(object)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;big&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>The HTML DOM is a standard object model and programming interface for HTML. It defines:</p>
<ul>
<li>The HTML elements as objects</li>
<li>The properties of all HTML elements</li>
<li>The methods to access all HTML elements</li>
<li>The events for all HTML elements</li>
</ul>
<h3 id="Document-object"><a href="#Document-object" class="headerlink" title="Document object"></a>Document object</h3><p>The document object represents your web page, it’s root node of the tree, Here are methods commonly used.</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>document.getElementById(id)</td>
<td>Find an element by element id</td>
</tr>
<tr>
<td>document.getElementsByTagName(name)</td>
<td>Find elements by tag name</td>
</tr>
<tr>
<td>document.getElementsByClassName(name)</td>
<td>Find elements by class name</td>
</tr>
<tr>
<td>element.setAttribute(attribute, value)</td>
<td>Change the attribute value of an HTML element</td>
</tr>
<tr>
<td>document.createElement(element)</td>
<td>Create an HTML element</td>
</tr>
<tr>
<td>document.removeChild(element)</td>
<td>Remove an HTML element</td>
</tr>
<tr>
<td>document.appendChild(element)</td>
<td>Add an HTML element</td>
</tr>
<tr>
<td>document.replaceChild(new, old)</td>
<td>Replace an HTML element</td>
</tr>
<tr>
<td>document.write(text)</td>
<td>Write into the HTML output stream</td>
</tr>
<tr>
<td>document.getElementById(id).onclick &#x3D; function(){code}</td>
<td>Adding event handler code to an onclick event</td>
</tr>
</tbody></table>
<p>Some attributes of document root you should know</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>document.anchors</td>
<td>Returns all &lt;a&gt; elements that have a name attribute</td>
</tr>
<tr>
<td>document.cookie</td>
<td>Returns the document’s cookie</td>
</tr>
<tr>
<td>document.forms</td>
<td>Returns all &lt;form&gt; elements</td>
</tr>
<tr>
<td>document.images</td>
<td>Returns all &lt;img&gt; elements</td>
</tr>
<tr>
<td>document.links</td>
<td>Returns all &lt;area&gt; and &lt;a&gt; elements that have a href attribute</td>
</tr>
<tr>
<td>document.title</td>
<td>Returns the &lt;title&gt; element</td>
</tr>
<tr>
<td>document.URL</td>
<td>Returns the complete URL of the document</td>
</tr>
</tbody></table>
<h2 id="element-object"><a href="#element-object" class="headerlink" title="element object"></a>element object</h2><p>Find an element through Document object or another element, if the method is called under an element, it checks child of that element, not root.</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>element.getElementById(id)</td>
<td>Find an element by element id</td>
</tr>
<tr>
<td>element.getElementsByTagName(name)</td>
<td>Find elements by tag name</td>
</tr>
<tr>
<td>element.getElementsByClassName(name)</td>
<td>Find elements by class name</td>
</tr>
<tr>
<td>element.hasAttributes()</td>
<td>Return true if has any attribute</td>
</tr>
<tr>
<td>element.hasAttribute(“class”)</td>
<td>Return true only if has such attribute</td>
</tr>
<tr>
<td>element.setAttribute(attribute, value)</td>
<td>Change the attribute value of an HTML element</td>
</tr>
<tr>
<td>element.removeAttribute(attribute)</td>
<td>Remove a particular attribute</td>
</tr>
<tr>
<td>element.hasChildNodes()</td>
<td>Return true if has at least one child</td>
</tr>
<tr>
<td>element.insertBefore(new, exist)</td>
<td>Insert child before another existed child</td>
</tr>
<tr>
<td>element.removeChild(element)</td>
<td>Remove an HTML element</td>
</tr>
<tr>
<td>element.appendChild(element)</td>
<td>Add an HTML element</td>
</tr>
<tr>
<td>element.replaceChild(new, old)</td>
<td>Replace an HTML element</td>
</tr>
<tr>
<td>document.write(text)</td>
<td>Write into the HTML output stream</td>
</tr>
<tr>
<td>element.getElementById(id).onclick &#x3D; function(){code}</td>
<td>Adding event handler code to an onclick event</td>
</tr>
<tr>
<td>element.addEventListener(“click”, click_handler)</td>
<td>Adding event handler for click event</td>
</tr>
<tr>
<td>element.removeEventListener(event_listener)</td>
<td>Removing event listener</td>
</tr>
<tr>
<td>element.querySelector(“p.intro”)</td>
<td>Return first element by CSS selector</td>
</tr>
<tr>
<td>element.querySelectorAll(“p.intro”)</td>
<td>Return all elements by CSS selector</td>
</tr>
<tr>
<td>element.focus()</td>
<td>Get focus</td>
</tr>
</tbody></table>
<p><strong>add a new element</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>This is another paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> para = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> node = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;This is new.&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">para.<span class="title function_">appendChild</span>(node);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">element.<span class="title function_">appendChild</span>(para);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>Attribute for element</p>
<table>
<thead>
<tr>
<th>attribute</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>element.attributes</td>
<td>Return all attributes</td>
</tr>
<tr>
<td>element.className</td>
<td>Return value of ‘class’ attribute</td>
</tr>
<tr>
<td>element.id</td>
<td>Return Id attribute</td>
</tr>
<tr>
<td>element.innerHTML</td>
<td>Return inner HTML</td>
</tr>
<tr>
<td>element.innerText</td>
<td>Only return value of ALL Text nodes include children</td>
</tr>
<tr>
<td>element.nodeName</td>
<td>Return tag name like p, iframe</td>
</tr>
<tr>
<td>element.parentNode</td>
<td>Return parent node</td>
</tr>
<tr>
<td>element.firstChild</td>
<td>Return first direct child node</td>
</tr>
<tr>
<td>element.lastChild</td>
<td>Return last direct child node</td>
</tr>
<tr>
<td>element.nextSibling</td>
<td>Return next sibling node</td>
</tr>
<tr>
<td>element.previousSibling</td>
<td>Return previous sibling node</td>
</tr>
<tr>
<td>element.childNodes</td>
<td>Return direct child nodes</td>
</tr>
<tr>
<td>element.style.property</td>
<td>Set&#x2F;Return css style</td>
</tr>
</tbody></table>
<h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2><p>Event object is passed to event handler when event happens, actually the passed event is not only <code>Event</code> object, but more specific one which is child of <code>Event</code> object, <code>more specific means more meta data about the event</code>, here is the inheritance of events</p>
<p><a href="/images/web/dom_event_inheritance.png">Event Inheritance</a></p>
<p>Event object has below attribute</p>
<table>
<thead>
<tr>
<th>Attribute</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>bubbles</td>
<td>Return True if event is bubble event</td>
</tr>
<tr>
<td>currentTarget</td>
<td>Return current Listener target</td>
</tr>
<tr>
<td>target</td>
<td>Return element who triggered such event</td>
</tr>
<tr>
<td>type</td>
<td>return type of event</td>
</tr>
</tbody></table>
<p>More specific events, refer to <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Events API</a>.</p>
<p><strong>Note: as event could bubble, hence currentTarget may not be target</strong></p>
<p>There are two ways to add event handler, but addEventListener() method attaches an event handler to an element without overwriting existing event handlers. You can add many different types of event handlers to one element. You can also add many event handlers of the same type to one element, i.e two “click” events.<br>The addEventListener() method makes it easier to control how the event reacts to bubbling.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// function only takes event object as the input or nothing</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">ev</span>) &#123;</span><br><span class="line">  alert (<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, myFunction);</span><br><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">ev</span>)&#123; <span class="title function_">alert</span>(<span class="string">&quot;Hello World!&quot;</span>); &#125;); </span><br><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="title function_">alert</span>(<span class="string">&quot;Hello World!&quot;</span>); &#125;); </span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  pass H1 object to change Text or nothing</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onclick</span>=<span class="string">&quot;changeText(this)&quot;</span>&gt;</span>Click on this text!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onclick</span>=<span class="string">&quot;changeText()&quot;</span>&gt;</span>Click on this text!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="NodeList-vs-HTMLCollection"><a href="#NodeList-vs-HTMLCollection" class="headerlink" title="NodeList vs HTMLCollection"></a>NodeList vs HTMLCollection</h2><p>A NodeList object is a list (collection) of nodes extracted from a document, while HTMLCollection is only for HTML element(tag), NodeList is for inner text as well which is also a node object.</p>
<p><strong>HTMLCollection returned</strong></p>
<ul>
<li>getElementsByTagName()</li>
<li>getElementsByClassName()</li>
</ul>
<p><strong>NodeList returned</strong></p>
<ul>
<li>All browsers return a NodeList object for the property childNodes. </li>
<li>Most browsers return a NodeList object for the method querySelectorAll()</li>
</ul>
<p><strong>Same</strong></p>
<ul>
<li>Both an HTMLCollection object and a NodeList object is an array-like list (collection) of objects.</li>
<li>Both have a length property defining the number of items in the list (collection).</li>
<li>Both provide an index (0, 1, 2, 3, 4, …) to access each item like an array.</li>
</ul>
<p><strong>Different</strong></p>
<ul>
<li>HTMLCollection items can be accessed by their name, id, or index number.</li>
<li>NodeList items can only be accessed by their index number.</li>
<li>Only the NodeList object can contain attribute nodes and text nodes.</li>
</ul>
<h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>The Browser Object Model (BOM) allows JavaScript to “talk to” the browser, it’s information about browser, it has several objects to represent such info</p>
<ul>
<li>window</li>
<li>window.screen or screen for short</li>
<li>window.location</li>
<li>window.history</li>
<li>window.navigator</li>
</ul>
<h2 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h2><p>jQuery was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax, it depends on Dom native API above.</p>
<p><code>JQuery uses CSS selector to find element</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//import jquery first.</span></span><br><span class="line"><span class="keyword">var</span> myElement = $(<span class="string">&quot;#id01&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> all_p = $(<span class="string">&quot;p&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> class_elements = $(<span class="string">&quot;.intro&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>Operation(API) on the selected element</p>
<ul>
<li>.text   get&#x2F;set the content of selected element $(“#bsd”).text(“new”);</li>
<li>.html   get&#x2F;set the entire html of selected element $(“#bsd”).html()</li>
<li>.before add a html element(with tag) before the selected element</li>
<li>.after  add an element after the selected element</li>
<li>.append add a html element(with tag) inside the selected element</li>
<li>.attr   get&#x2F;set the given attr of an html element $(“#bsd”).attr(“given_attr”) $(“$bsd”).attr(“given_attr”, “given_value”);</li>
<li>.css    get&#x2F;set the style of the selected elements</li>
<li>.parent get the parent element of the selected element $(“#bsd”).parent().</li>
<li>.each   callback on each of the selected groups($(“a”), $(“.className”);<h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3>.ajaxSetup()<br>set defaults for AJAx-related parameters such as caching, methods, error handling, among others, this is used for all AJAX call, also you can set them separately by .ajax()</li>
</ul>
<p>All subsequent Ajax calls using any function will use the new settings, unless overridden by the individual calls, until the next invocation of $.ajaxSetup().</p>
<p>.ajax() parameters are map with key:value, specify method(GET,POST etc) the url, callback functions when error, successful, data type and data cache response etc!!</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">load()        get()       post         getJson()</span><br><span class="line">  +             |            |              +</span><br><span class="line">  |             |            |              |</span><br><span class="line">  |             |            |              |</span><br><span class="line">  +-------------+------+-----+--------------+</span><br><span class="line">                       |</span><br><span class="line">                       +</span><br><span class="line">                     ajax()   low level API</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">successFun</span>(<span class="params">data, status</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">errorFun</span>(<span class="params">request, status, errorthrown</span>)  &#123;</span><br><span class="line">&#125;</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;json.php&quot;</span>,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>, <span class="comment">//The type of data that you&#x27;re expecting back from the server.</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;luo&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;ps&quot;</span>,</span><br><span class="line">    <span class="comment">//change headers before send</span></span><br><span class="line">    <span class="attr">beforeSend</span>: <span class="keyword">function</span>(<span class="params"> xhr </span>) &#123;</span><br><span class="line">        xhr.<span class="title function_">overrideMimeType</span>( <span class="string">&quot;text/plain; charset=x-user-defined&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">success</span>: successFun,</span><br><span class="line">    <span class="attr">error</span>: errorFun,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>  <span class="comment">//5s</span></span><br><span class="line">);</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;url/ds&quot;</span>,</span><br><span class="line">    <span class="attr">contentType</span>: <span class="string">&quot;application/json&quot;</span>,  <span class="comment">//the type of data you send to the server</span></span><br><span class="line">    <span class="attr">data</span>: <span class="string">&#x27;&#123;&quot;a&quot;:1&#125;&#x27;</span>, <span class="comment">//json format as a string</span></span><br><span class="line">    <span class="attr">success</span>: successFun,</span><br><span class="line">    <span class="attr">error</span>: errorFun,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>  <span class="comment">//5s</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><a href="https://www.w3schools.com/js/default.asp">W3C DOM</a></li>
<li><a href="https://htmlcheatsheet.com/jquery/">JQuery cheatsheet</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Dom Event Interface</a></li>
<li><a href="https://www.w3schools.com/jsref/dom_obj_event.asp">W3C ALL Events</a></li>
</ul>
]]></content>
      <categories>
        <category>html</category>
        <category>dom</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>dom</tag>
        <tag>event</tag>
      </tags>
  </entry>
  <entry>
    <title>html-faq</title>
    <url>/2020/07/17/html-faq/</url>
    <content><![CDATA[<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="Html-attribute-vs-CSS-property"><a href="#Html-attribute-vs-CSS-property" class="headerlink" title="Html attribute vs CSS property"></a>Html attribute vs CSS property</h2><p>HTML attribute defines the information about html, Tags are different, some are for img, some for text,so the attributes are grouped into two parts, one is global attributes, the other is tag related,<code>you can set global attributes for any tag, while tag related is only valid for that kind of tag</code>, let’s say you can’t set <code>href</code> attribute for a <code>h1</code>, browser thinks it’s invalid.</p>
<p>CSS property is different thing, it’s defined by CSS, every html element can set any CSS property for itself, CSS property is inside <code>style</code> attribute of CSS tag for inline style, see below example</p>
<p>CSS property’s value if not set could be</p>
<ul>
<li>default value</li>
<li>inherited from its parent</li>
</ul>
<p><code>Tag attribute value is empty if not set</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--style is tag attribute while color, text-algin are css properties--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&#x27;h1&#x27;</span> <span class="attr">style</span>=<span class="string">&quot;color:blue;text-align:center&quot;</span>&gt;</span>This is a header<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="custom-tag"><a href="#custom-tag" class="headerlink" title="custom tag"></a>custom tag</h2><p>There are two ways to create a custom tag, one is by js, the other is in html directly</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">s_tag<span class="selector-attr">[test_attr]</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">s_tag</span> <span class="attr">style</span>=<span class="string">&quot;color: blue&quot;</span>&gt;</span>hi1<span class="tag">&lt;/<span class="name">s_tag</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">s_tag</span>&gt;</span>hi2<span class="tag">&lt;/<span class="name">s_tag</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">s_tag</span> <span class="attr">test_attr</span>=<span class="string">&quot;cool&quot;</span>&gt;</span>h3<span class="tag">&lt;/<span class="name">s_tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>How browser renders a custom tag</strong><br>Browser first checks the global attributes as every element can set it and browser knows how to handle such attributes, for other custom attributes, browser does NOT know how to use it, it’s totally used by user, then browser checks the CSS style for the custom element, property value if not set use default value or inherited from its parent.</p>
<p><strong>Note: custom tag with <code>display:inline</code> by default, it’s inline element</strong></p>
<h2 id="custom-attribute-to-built-in-tag"><a href="#custom-attribute-to-built-in-tag" class="headerlink" title="custom attribute to built-in tag"></a>custom attribute to built-in tag</h2><p>The data-* attributes is used to store custom data private to the page or application, the data-* attributes gives us the ability to embed custom data attributes on all HTML elements.</p>
<p>The stored (custom) data can then be used in the page’s JavaScript to create a more engaging user experience (without any Ajax calls or server-side database queries).<br><em><em>The data-</em> attributes consist of two parts:</em>*</p>
<ul>
<li>The attribute name should <code>not contain any uppercase letters</code>, and must be at least one character long <code>after the prefix &quot;data-&quot;</code></li>
<li>The attribute value can be any string</li>
</ul>
<p>Note: Custom attributes <code>prefixed with &quot;data-&quot; will be completely ignored by the user agent</code>.</p>
<h2 id="object-vs-embed-vs-video-x2F-audio"><a href="#object-vs-embed-vs-video-x2F-audio" class="headerlink" title="object vs embed vs video&#x2F;audio"></a>object vs embed vs video&#x2F;audio</h2><p>The HTML &lt;video&gt; element is used to show a video on a web page by <code>browser built-in player</code>, it’s new feature by HTML5, same thing for &lt;audio&gt; as well.</p>
<p>But &lt;object&gt; and &lt;embed&gt; calls plugins to display them,  supported long time, hence for a video, we should write in this way</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--fallback to old way--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">embed</span> <span class="attr">type</span>=<span class="string">&quot;video/webm&quot;</span> <span class="attr">src</span>=<span class="string">&quot;movie.mp4&quot;</span>&gt;</span></span><br><span class="line">Your browser does not support the video tag.</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="select-vs-datalist"><a href="#select-vs-datalist" class="headerlink" title="select vs datalist"></a>select vs datalist</h2><p>The &lt;select&gt; element defines a drop-down list, used for selecting pre-defined data</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/action_page.php&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;cars&quot;</span>&gt;</span>Choose a car:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- data list for select element --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;cars&quot;</span> <span class="attr">name</span>=<span class="string">&quot;cars&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;volvo&quot;</span>&gt;</span>Volvo<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;saab&quot;</span>&gt;</span>Saab<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;fiat&quot;</span>&gt;</span>Fiat<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;audi&quot;</span>&gt;</span>Audi<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The &lt;datalist&gt; element specifies a list of pre-defined options for an &lt;input&gt; element, used for show <code>search history</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/action_page.php&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--data list for input element with list attribute--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">list</span>=<span class="string">&quot;browsers&quot;</span> <span class="attr">name</span>=<span class="string">&quot;browser&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;browsers&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Internet Explorer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Firefox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Chrome&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Opera&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Safari&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="AJAX-vs-SSE-vs-WebSocket"><a href="#AJAX-vs-SSE-vs-WebSocket" class="headerlink" title="AJAX vs SSE vs WebSocket"></a>AJAX vs SSE vs WebSocket</h2><p><strong>AJAX</strong><br>An AJAX request is built around the typical HTTP model(HTTP request&#x2F;response Restful API). A request is made by a client and a response is generated by a server, it’s client driven, <code>Each request creates a new HTTP request in the background</code></p>
<p>Data is transmitted o each HTTP connection based on HTTP protocol.</p>
<p><strong>WebSocket</strong><br>WebSockets are based around an event model. The client and server can <code>emit events and send data to each other </code>whenever they need to, Bi-direction communication, lets say there are 3 users working on a project together; user A, B, and C. User A can update the project by emitting an event to the server. The server can in turn emit an event to user B, and C, informing them that a change has happened and at the same time sending them data about the change. Their browser can then use that data to update their web page.</p>
<p>WebSockets have to establish a connection to a server for data to flow. WebSockets only <code>establish this connection once</code>, then all data is sent over this open <code>WS protocol connection</code>. This means each event being send takes very little resources from both the server and the client because a new connection never has to be established, and ws protocol is small.</p>
<p>It uses HTTP protocol to setup the connection, then switch to WS protocol for data transmission. hence it’s faster.</p>
<p><strong>Difference between Ajax and WebSocket</strong></p>
<ul>
<li><p>Web sockets are used to define full duplex communication between different servers and clients. It acts as a means of communication between both these sources and makes an exchange of data possible between them. Web sockets focus upon true concurrency and optimization of performance.</p>
</li>
<li><p>AJAX is an abbreviation for Asynchronous JavaScript and XML. Ajax can be considered as a technology which can be used to create better faster and more interactive applications using XML, HTML, CSS, and JavaScript. Ajax makes use of XHTML, CSS, Document Object Model and JavaScript for dynamic content display.</p>
</li>
<li><p>The distinguishing features of web sockets are as below:</p>
<ul>
<li>The protocol that is being used by web sockets is standardized which enables real-time communication between the different clients and servers.</li>
<li>Web sockets help to transform the cross-platform standard for real-time communication between client and server.</li>
<li>As there is a pre-defined standard it enables to create new kind of applications. Businesses for real-time web applications can be created speedily. The biggest advantage is that it provides a two-way communication between client and server over a single TCP connection</li>
</ul>
</li>
<li><p>Ajax Features</p>
<ul>
<li>Ajax uses different technologies to create the best dynamic pages. It uses XHTML for content, CSS for making presentations look great, document object model and JavaScript for making pages dynamic.</li>
<li>With Ajax, once you submit a form JavaScript makes a request to the server, finds the result and updates the screen. It is never known to the user that there was information transmitted to the server but there actually is information being transmitted.</li>
<li>It also uses XML to format data from receiving server.</li>
<li>It can also be called a web browser which is independent of the web server technology being used. Also, a user can work continuously when a client program is requesting information from the server in the background.</li>
</ul>
</li>
<li><p>When it comes to Web Socket events there are mainly four events. They are:</p>
<ul>
<li>Open: acts as a handshake between client and server</li>
<li>Message: happens when the server sends some data. Messages can be plain text messages or binary data</li>
<li>Close: This marks the end of communication between server and client.</li>
<li>Error: When an error occurs, when a communication channel is opened then the error event occurs</li>
</ul>
</li>
<li><p>Ajax also supports events and actions. The steps that happen when an event occurs are as below:</p>
<ul>
<li>A XMLHttpRequest object is created.</li>
<li>This object is then configured.</li>
<li>The object then makes an asynchronous request to the webserver.</li>
<li>The web server returns results which contain the XML document.</li>
<li>The object calls the callback() function and processes the result.</li>
<li>Once all this is done the HTML DOM is updated.</li>
</ul>
</li>
<li><p>AJax is more secure than Websocket.</p>
</li>
</ul>
<p>So if you need bi-direction, low latency, real-time, use WebSocket, otherwise Ajax, but Ajax is driven by client, so server wants to notify update to client like upgrade notification, stock price etc, Ajax can’t do, hence SSE comes into play.</p>
<p><strong>SSE</strong><br>Server-Sent Events (SSE) allow a web page to get updates from a server. One-way Messaging<br>A server-sent event is when a web page automatically gets updates from a server.</p>
<p>This was also possible before, but the web page would have to ask if any updates were available(ajax poll). With server-sent events, the updates come automatically.</p>
<p><code>Suggestion: Traditional Way, AJAX + SSE, if need low latency, real-time, WebSocket which is new.</code></p>
<h2 id="how-dom-event-works"><a href="#how-dom-event-works" class="headerlink" title="how dom event works"></a>how dom event works</h2><p>The event object is created when the event first happens; it travels with the event on its journey through the DOM. We can use this object to access a wealth of information about the event that has occurred:</p>
<ul>
<li>type (string) This is the name of the event.</li>
<li>target (node) This is the DOM node where the event originated.</li>
<li>currentTarget (node) This is the DOM node that the event callback is currently firing on.</li>
<li>bubbles (boolean) This indicates whether this is a “bubbling” event.</li>
<li>preventDefault (function) This prevents any default behavior from occurring that the user agent (i.e. browser) might carry out in relation to the event (for example, preventing a click event on an &lt;a&gt; element from loading a new page).</li>
<li>stopPropagation (function) This prevents any callbacks from being fired on any nodes further along the event chain, but it does not prevent any additional callbacks of the same event name from being fired on the current node.</li>
<li>stopImmediatePropagation (function) This prevents any callbacks from being fired on any nodes further along the event chain, including any additional callbacks of the same event name on the current node.</li>
<li>cancelable (boolean) This indicates whether the default behavior of this event can be prevented by calling the event.preventDefault method.</li>
<li>defaultPrevented (boolean) This states whether the preventDefault method has been called on the event object.</li>
<li>isTrusted (boolean) An event is said to be “trusted” when it originates from the device itself, not synthesized from within JavaScript.</li>
<li>eventPhase (number) This number represents the phase that the event is currently in: none (0), capture (1), target (2) or bubbling (3). We’ll go over event phases next.</li>
<li>timestamp (number) This is the date on which the event occurred.</li>
</ul>
<p><strong>Event Phase</strong><br>the event flows from the document’s root to the target (i.e. capture phase), then fires on the event target (target phase), then flows back to the document’s root (bubbling phase)</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/603c2b38-eaa7-4806-b5bc-cf7b3edbcd68/eventflow.png" alt="Event Phase"></p>
<p><strong>Capture Phase</strong><br>The first phase is the capture phase. The event starts its journey at the root of the document, working its way down through each layer of the DOM, firing on each node until it reaches the event target. The job of the capture phase is to build the propagation path, which the event will travel back through in the bubbling phase.</p>
<p><strong>Target Phase</strong><br>An event reaching the target is known as the target phase. The event fires on the target node, before reversing and retracing its steps, propagating back to the outermost document level.</p>
<p>In the case of nested elements, mouse and pointer events are always targeted at the most deeply nested element. If you have listened for a click event on a &lt;div&gt; element, and the user actually clicks on a &lt;p&gt; element in the div, then the &lt;p&gt; element will become the event target.</p>
<p><strong>Bubbling Phase</strong><br>After an event has fired on the target, it doesn’t stop there. It bubbles up (or propagates) through the DOM until it reaches the document’s root. This means that the same event is fired on the target’s parent node, followed by the parent’s parent, continuing until there is no parent to pass the event onto.</p>
<p><strong>Note: Most of callback are at Bubbling Phase</strong></p>
<h2 id="why-is-not-defined-in-your-script"><a href="#why-is-not-defined-in-your-script" class="headerlink" title="why $ is not defined in your script"></a>why $ is not defined in your script</h2><p>Make sure load your script after jquery.</p>
<h2 id="After-move-a-button-negative-margin-it-can-NOT-be-clicked"><a href="#After-move-a-button-negative-margin-it-can-NOT-be-clicked" class="headerlink" title="After move a button(negative margin), it can NOT be clicked"></a>After move a button(negative margin), it can NOT be clicked</h2><p>This is because after move, button and other tag overlaps, while other tag at the top, in order to make it clickable, change its z-index to high value</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://www.smashingmagazine.com/2013/11/an-introduction-to-dom-events/">Inside Dom event</a></li>
</ul>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>go-lib</title>
    <url>/2022/07/01/go-lib/</url>
    <content><![CDATA[<h1 id="std"><a href="#std" class="headerlink" title="std"></a>std</h1><h2 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h2><p>Package strings implements simple functions to manipulate UTF-8 encoded strings. </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">Contains</span><span class="params">(s, substr <span class="type">string</span>)</span></span> <span class="type">bool</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">ContainsAny</span><span class="params">(s, chars <span class="type">string</span>)</span></span> <span class="type">bool</span> any Unicode code points in chars are within s. </span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">Count</span><span class="params">(s, substr <span class="type">string</span>)</span></span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">Fields</span><span class="params">(s <span class="type">string</span>)</span></span> []<span class="type">string</span>   splited by whitespace</span><br><span class="line"></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">HasPrefix</span><span class="params">(s, prefix <span class="type">string</span>)</span></span> <span class="type">bool</span> whether the <span class="type">string</span> s begins with prefix.</span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">HasSuffix</span><span class="params">(s, suffix <span class="type">string</span>)</span></span> <span class="type">bool</span></span><br><span class="line"></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(s, substr <span class="type">string</span>)</span></span> first instance of substr in s, or <span class="number">-1</span> <span class="keyword">if</span> substr is not present in s. </span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">IndexAny</span><span class="params">(s, chars <span class="type">string</span>)</span></span> <span class="type">int</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">LastIndex</span><span class="params">(s, substr <span class="type">string</span>)</span></span> <span class="type">int</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">LastIndexAny</span><span class="params">(s, chars <span class="type">string</span>)</span></span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">Join</span><span class="params">(elems []<span class="type">string</span>, sep <span class="type">string</span>)</span></span> <span class="type">string</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">Split</span><span class="params">(s, sep <span class="type">string</span>)</span></span> []<span class="type">string</span> any separator!!!</span><br><span class="line"></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">Map</span><span class="params">(mapping <span class="keyword">func</span>(<span class="type">rune</span>)</span></span> <span class="type">rune</span>, s <span class="type">string</span>) <span class="type">string</span> </span><br><span class="line"><span class="comment">//Map returns a copy of the string s with all its characters modified according to the mapping function. If mapping returns a negative value, the character is dropped from the string with no replacement.**  </span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">Replace</span><span class="params">(s, old, <span class="built_in">new</span> <span class="type">string</span>, n <span class="type">int</span>)</span></span> <span class="type">string</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">ReplaceAll</span><span class="params">(s, old, <span class="built_in">new</span> <span class="type">string</span>)</span></span> <span class="type">string</span></span><br><span class="line"></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">ToLower</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">ToUpper</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">Trim</span><span class="params">(s, cutset <span class="type">string</span>)</span></span> <span class="type">string</span></span><br><span class="line"><span class="comment">// // Trim returns a slice of the string s with all leading and trailing Unicode code points contained in cutset removed</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">TrimLeft</span><span class="params">(s, cutset <span class="type">string</span>)</span></span> <span class="type">string</span></span><br><span class="line"><span class="comment">//returns a slice of the string s with all leading Unicode code(check one by one) points contained in cutset removed.**</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">TrimRight</span><span class="params">(s, cutset <span class="type">string</span>)</span></span> <span class="type">string</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">TrimSpace</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span></span><br><span class="line"></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">TrimSuffix</span><span class="params">(s, suffix <span class="type">string</span>)</span></span> <span class="type">string</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">TrimPrefix</span><span class="params">(s, prefix <span class="type">string</span>)</span></span> <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//prefix as a whole to check</span></span><br><span class="line"></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">TrimSpace</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span></span><br><span class="line"><span class="comment">//TrimSpace returns a slice of the string s, with all leading and trailing white space removed, as defined by Unicode.</span></span><br></pre></td></tr></table></figure>

<p><strong>Note</strong></p>
<ul>
<li>Trim, TrimLeft, TrimRight, check ‘each character’ in the cutset</li>
<li>TrimSuffix, TrimPrefix check ‘suffix and prefix’ as a whole not a set”</li>
</ul>
<span id="more"></span>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := <span class="string">&quot;no C K dno&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;string: %s\n&quot;</span>, s)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;hasprefix: %v, hassuffix: %v\n&quot;</span>, strings.HasPrefix(s, <span class="string">&quot;no&quot;</span>), strings.HasSuffix(s, <span class="string">&quot;dno&quot;</span>))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;split by `o`: %v, fields(split by space): %v\n&quot;</span>, strings.Split(s, <span class="string">&quot;o&quot;</span>), strings.Fields(s))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;lower: %s, upper: %s, title: %s\n&quot;</span>, strings.ToLower(s), strings.ToUpper(s), strings.Title(s))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;contains?: %v\n&quot;</span>, strings.ContainsAny(s, <span class="string">&quot;CK&quot;</span>))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;trim: %v, left: %v, right: %v, prefix: %v\n&quot;</span>, strings.Trim(s, <span class="string">&quot;no&quot;</span>), strings.TrimLeft(s, <span class="string">&quot;no&quot;</span>), strings.TrimRight(s, <span class="string">&quot;no&quot;</span>), strings.TrimPrefix(s, <span class="string">&quot;no&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>string: no C K dno
hasprefix: true, hassuffix: true
split by `o`: [n  C K dn ], fields(split by space): [no C K dno]
lower: no c k dno, upper: NO C K DNO, title: No C K Dno
contains?: true
trim:  C K d, left:  C K dno, right: no C K d, prefix:  C K dno
</code></pre>
<h2 id="bytes-manipulation-of-byte-slices"><a href="#bytes-manipulation-of-byte-slices" class="headerlink" title="bytes(manipulation of byte slices)"></a>bytes(manipulation of byte slices)</h2><p>Package <code>bytes</code> implements functions for the <code>manipulation of byte slices</code>. It is <strong>similar to the facilities of the strings package.</strong></p>
<p>Package strings implements simple functions to manipulate UTF-8 encoded strings. </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">Contains</span><span class="params">(b, subslice []<span class="type">byte</span>)</span></span> <span class="type">bool</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">ContainsAny</span><span class="params">(b []<span class="type">byte</span>, chars <span class="type">string</span>)</span></span> <span class="type">bool</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">Count</span><span class="params">(s, sep []<span class="type">byte</span>)</span></span> <span class="type">int</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">Equal</span><span class="params">(a, b []<span class="type">byte</span>)</span></span> <span class="type">bool</span></span><br><span class="line"></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">HasPrefix</span><span class="params">(s, prefix []<span class="type">byte</span>)</span></span> <span class="type">bool</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">HasSuffix</span><span class="params">(s, suffix []<span class="type">byte</span>)</span></span> <span class="type">bool</span></span><br><span class="line"></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(s, sep []<span class="type">byte</span>)</span></span> <span class="type">int</span> <span class="comment">//sep as a whole</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">IndexAny</span><span class="params">(s []<span class="type">byte</span>, chars <span class="type">string</span>)</span></span> <span class="type">int</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">LastIndex</span><span class="params">(s, sep []<span class="type">byte</span>)</span></span> <span class="type">int</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">LastIndexAny</span><span class="params">(s []<span class="type">byte</span>, chars <span class="type">string</span>)</span></span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">Join</span><span class="params">(s [][]<span class="type">byte</span>, sep []<span class="type">byte</span>)</span></span> []<span class="type">byte</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">Split</span><span class="params">(s, sep []<span class="type">byte</span>)</span></span> [][]<span class="type">byte</span></span><br><span class="line"></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">Map</span><span class="params">(mapping <span class="keyword">func</span>(r <span class="type">rune</span>)</span></span> <span class="type">rune</span>, s []<span class="type">byte</span>) []<span class="type">byte</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">Replace</span><span class="params">(s, old, <span class="built_in">new</span> []<span class="type">byte</span>, n <span class="type">int</span>)</span></span> []<span class="type">byte</span> <span class="comment">// old and new as a whole</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">ReplaceAll</span><span class="params">(s, old, <span class="built_in">new</span> []<span class="type">byte</span>)</span></span> []<span class="type">byte</span></span><br><span class="line"></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">ToLower</span><span class="params">(s []<span class="type">byte</span>)</span></span> []<span class="type">byte</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">ToUpper</span><span class="params">(s []<span class="type">byte</span>)</span></span> []<span class="type">byte</span></span><br><span class="line"></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">TrimLeft</span><span class="params">(s, cutset []<span class="type">byte</span>)</span></span> []<span class="type">byte</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">TrimRight</span><span class="params">(s, cutset []<span class="type">byte</span>)</span></span> []<span class="type">byte</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">TrimSpace</span><span class="params">(s []<span class="type">byte</span>)</span></span> []<span class="type">byte</span></span><br><span class="line"></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">TrimSuffix</span><span class="params">(s, suffix []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> <span class="comment">// suffix as a whole</span></span><br><span class="line">- <span class="function"><span class="keyword">func</span> <span class="title">TrimPrefix</span><span class="params">(s, prefix []<span class="type">byte</span>)</span></span> []<span class="type">byte</span></span><br></pre></td></tr></table></figure>

<h2 id="container-list"><a href="#container-list" class="headerlink" title="container(list)"></a>container(list)</h2><p>Package list implements a doubly linked list. </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;container/list&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">listDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Create a new list and put some numbers in it.</span></span><br><span class="line">    l := list.New()</span><br><span class="line">    e4 := l.PushBack(Person&#123;<span class="string">&quot;d&quot;</span>&#125;)</span><br><span class="line">    e1 := l.PushFront(Person&#123;<span class="string">&quot;a&quot;</span>&#125;)</span><br><span class="line">    l.InsertBefore(Person&#123;<span class="string">&quot;c&quot;</span>&#125;, e4)</span><br><span class="line">    l.InsertAfter(Person&#123;<span class="string">&quot;b&quot;</span>&#125;, e1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Iterate through list and print its contents.</span></span><br><span class="line">    <span class="keyword">for</span> e := l.Front(); e != <span class="literal">nil</span>; e = e.Next() &#123;</span><br><span class="line">        fmt.Println(e.Value)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Create a new list and put some numbers in it.</span></span><br><span class="line">    l = l.Init()</span><br><span class="line">    e4 = l.PushBack(<span class="number">4</span>)</span><br><span class="line">    e1 = l.PushFront(<span class="number">1</span>)</span><br><span class="line">    l.InsertBefore(<span class="number">3</span>, e4)</span><br><span class="line">    l.InsertAfter(<span class="number">2</span>, e1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Iterate through list and print its contents.</span></span><br><span class="line">    <span class="keyword">for</span> e := l.Front(); e != <span class="literal">nil</span>; e = e.Next() &#123;</span><br><span class="line">        fmt.Println(e.Value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">listDemo()</span><br></pre></td></tr></table></figure>

<pre><code>&#123;a&#125;
&#123;b&#125;
&#123;c&#125;
&#123;d&#125;
1
2
3
4
</code></pre>
<h2 id="regex"><a href="#regex" class="headerlink" title="regex"></a>regex</h2><p>Package <code>regexp</code> implements regular expression search. </p>
<p>There are 16 methods of Regexp that match a regular expression and identify the matched text. Their names are matched by this regular expression:<br><code>Find(All)?(String)?(Submatch)?(Index)?</code></p>
<p>If ‘All’ is present, the routine matches successive <code>non-overlapping matches of the entire expression</code>. Empty matches abutting a preceding match are ignored. <code>The return value is a slice containing the successive return values of the corresponding non-&#39;All&#39; routine</code>. These routines take an extra integer argument, n. If n &gt;&#x3D; 0, the function returns <code>at most n matches/submatches; otherwise, it returns all of them</code>.</p>
<p>If ‘String’ is present, <code>the argument is a string; otherwise it is a slice of bytes</code>; return values are adjusted as appropriate.</p>
<p>If ‘Submatch’ is present, the return value is a slice identifying the successive submatches of the expression. Submatches are matches of parenthesized subexpressions (<code>also known as capturing groups</code>) within the regular expression, numbered from left to right in order of opening parenthesis. <code>Submatch 0 is the match of the entire expression, submatch 1 the match of the first parenthesized subexpression, and so on</code>.</p>
<p>If ‘Index’ is present, <code>matches and submatches are identified by byte index pairs within the input string</code>: result[2<em>n:2</em>n+1] identifies the indexes of the nth submatch. The pair for n&#x3D;&#x3D;0 identifies the match of the entire expression. If ‘Index’ is not present, the match is identified by the text of the match&#x2F;submatch. If an index is negative or text is nil, it means that subexpression did not match any string in the input. For ‘String’ versions an empty string means either no match or an empty match. </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> FindAll(b []<span class="type">byte</span>, n <span class="type">int</span>) [][]<span class="type">byte</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> FindAllIndex(b []<span class="type">byte</span>, n <span class="type">int</span>) [][]<span class="type">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> FindAllString(s <span class="type">string</span>, n <span class="type">int</span>) []<span class="type">string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> FindAllStringIndex(s <span class="type">string</span>, n <span class="type">int</span>) [][]<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> FindAllStringSubmatch(s <span class="type">string</span>, n <span class="type">int</span>) [][]<span class="type">string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> FindAllStringSubmatchIndex(s <span class="type">string</span>, n <span class="type">int</span>) [][]<span class="type">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> FindAllSubmatch(b []<span class="type">byte</span>, n <span class="type">int</span>) [][][]<span class="type">byte</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> FindAllSubmatchIndex(b []<span class="type">byte</span>, n <span class="type">int</span>) [][]<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> Find(b []<span class="type">byte</span>) []<span class="type">byte</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> FindIndex(b []<span class="type">byte</span>) (loc []<span class="type">int</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> FindString(s <span class="type">string</span>) <span class="type">string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> FindStringIndex(s <span class="type">string</span>) (loc []<span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> FindStringSubmatch(s <span class="type">string</span>) []<span class="type">string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> FindStringSubmatchIndex(s <span class="type">string</span>) []<span class="type">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> FindSubmatch(b []<span class="type">byte</span>) [][]<span class="type">byte</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> FindSubmatchIndex(b []<span class="type">byte</span>) []<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> Match(b []<span class="type">byte</span>) <span class="type">bool</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> MatchString(s <span class="type">string</span>) <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> ReplaceAll(src, repl []<span class="type">byte</span>) []<span class="type">byte</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> ReplaceAllLiteral(src, repl []<span class="type">byte</span>) []<span class="type">byte</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> ReplaceAllLiteralString(src, repl <span class="type">string</span>) <span class="type">string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(re *Regexp)</span></span> ReplaceAllString(src, repl <span class="type">string</span>) <span class="type">string</span></span><br></pre></td></tr></table></figure>

<p><strong>Frequently used</strong>  </p>
<ul>
<li><p>*<em>func (re <em>Regexp) FindString(s string) string</em></em></p>
<ul>
<li>FindString returns a string holding the text of the leftmost match in s of the regular expression. If there is no match, the return value is an empty string, but it will also be empty if the regular expression successfully matches an empty string. Use FindStringIndex or FindStringSubmatch if it is necessary to distinguish these cases.</li>
</ul>
</li>
<li><p>*<em>func (re <em>Regexp) FindStringIndex(s string) (loc []int)</em></em></p>
<ul>
<li>FindStringIndex returns <code>a two-element slice of integers</code> defining the location of the leftmost match in s of the regular expression. The match itself is at s[loc[0]:loc[1]]. A return value of nil indicates no match.</li>
</ul>
</li>
<li><p>*<em>func (re <em>Regexp) MatchString(s string) bool</em></em></p>
<ul>
<li>MatchString reports whether the string <strong>s contains any match of the regular expression re</strong>.</li>
</ul>
</li>
<li><p>*<em>func (re <em>Regexp) ReplaceAllLiteralString(src, repl string) string</em></em></p>
<ul>
<li>ReplaceAllLiteralString returns a copy of src, <strong>replacing matches of the Regexp</strong> with the replacement string repl. The replacement repl is substituted directly, without using Expand</li>
</ul>
</li>
<li><p>*<em>func (re <em>Regexp) ReplaceAllString(src, repl string) string</em></em></p>
<ul>
<li>ReplaceAllString returns a copy of src, replacing matches of the Regexp with the replacement string repl. Inside repl, <code>$ signs are interpreted as in Expand, so for instance $1 represents the text of the first submatch.</code></li>
</ul>
</li>
<li><p>*<em>func (re <em>Regexp) FindStringSubmatch(s string) []string</em></em></p>
<ul>
<li>FindStringSubmatch <strong>returns a two-element slice</strong> of strings holding the text of the leftmost match of the regular expression in s and the matches, if any, of its subexpressions, as defined by the ‘Submatch’ description in the package comment. A return value of nil indicates no match.</li>
</ul>
</li>
<li><p>*<em>func (re <em>Regexp) FindStringSubmatchIndex(s string) []int</em></em></p>
<ul>
<li>FindStringSubmatchIndex <strong>returns a two-element slice</strong> holding the index pairs identifying the leftmost match of the regular expression in s and the matches, if any, of its subexpressions, as defined by the ‘Submatch’ and ‘Index’ descriptions in the package comment. A return value of nil indicates no match.</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo_regex</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;regexp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">regexDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    re := regexp.MustCompile(<span class="string">`foo.?`</span>) <span class="comment">// pattern must be in `` not &#x27;&#x27;!!!</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, re.FindString(<span class="string">&quot;seafood fool&quot;</span>))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%q\n&quot;</span>, re.FindString(<span class="string">&quot;meat&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, re.FindStringIndex(<span class="string">&quot;seafood fool&quot;</span>))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, re.FindStringIndex(<span class="string">&quot;meat&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, re.MatchString(<span class="string">&quot;seafood fool&quot;</span>))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, re.MatchString(<span class="string">&quot;meat&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    re = regexp.MustCompile(<span class="string">`a(x+)b`</span>)</span><br><span class="line">    </span><br><span class="line">    fmt.Println(re.ReplaceAllLiteralString(<span class="string">&quot;-ab-axxb-&quot;</span>, <span class="string">&quot;T&quot;</span>))</span><br><span class="line">    fmt.Println(re.ReplaceAllLiteralString(<span class="string">&quot;-ab-axxb-&quot;</span>, <span class="string">&quot;$&#123;1&#125;&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    fmt.Println(re.ReplaceAllString(<span class="string">&quot;-ab-axxb-&quot;</span>, <span class="string">&quot;T&quot;</span>))</span><br><span class="line">    fmt.Println(re.ReplaceAllString(<span class="string">&quot;-ab-axxb-&quot;</span>, <span class="string">&quot;$&#123;1&#125;&quot;</span>)) <span class="comment">// $&#123;1&#125; submatch (the first group)</span></span><br><span class="line">    </span><br><span class="line">    fmt.Println(re.FindStringSubmatch(<span class="string">&quot;-ab-axxb-&quot;</span>))</span><br><span class="line">    fmt.Println(re.FindStringSubmatchIndex(<span class="string">&quot;-ab-axxb-&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">regexDemo()</span><br></pre></td></tr></table></figure>

<pre><code>&quot;food&quot;
&quot;&quot;
[3 7]
[]
true
false
-ab-T-
-ab-$&#123;1&#125;-
-ab-T-
-ab-xx-
[axxb xx]
[4 8 5 7]
</code></pre>
<h2 id="exec-run-shell-from-go"><a href="#exec-run-shell-from-go" class="headerlink" title="exec(run shell from go)"></a>exec(run shell from go)</h2><p>Package exec runs external commands. It wraps os.StartProcess to make it easier to remap stdin and stdout, connect I&#x2F;O with pipes, and do other adjustments.</p>
<p>Unlike the “system” library call from C and other languages, the <code>os/exec package intentionally does not invoke the system shell</code> and <strong>does not expand any glob patterns or handle other expansions, pipelines, or redirections typically done by shells</strong>. The package behaves more like C’s “exec” family of functions. To expand glob patterns, either call the shell directly, taking care to escape any dangerous input, or use the path&#x2F;filepath package’s Glob function. To expand environment variables, use package os’s ExpandEnv. </p>
<p><strong>sync method, goroutine blocks</strong></p>
<ul>
<li>cmd.Run(): output is saved to cmd.Stdout and cmd.Stderr, by default discard, you can set them with buffer to get the output</li>
<li>cmd.Output(): only return stdout</li>
<li>cmd.CombinedOutput(): return stdout and stderr</li>
</ul>
<p><strong>async method</strong></p>
<ul>
<li>func (c *Cmd) Start() error<blockquote>
<p>Start starts a separate process to run  the specified command but does not wait for it to complete. If Start returns successfully, the c.Process field will be set. A child process to run command</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>The Wait method will return the exit code and release associated resources once the command exits. </p>
</blockquote>
<ul>
<li>func (c *Cmd) Wait() error<blockquote>
<p>Wait waits for the command to exit and waits for any copying to stdin or copying from stdout or stderr to complete.<br>The command must have been started by Start.</p>
</blockquote>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	cmd := exec.Command(<span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;5&quot;</span>)</span><br><span class="line">	err := cmd.Start() <span class="comment">// a child process is created to run command if no error happens</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">	log.Printf(<span class="string">&quot;Waiting for command to finish...&quot;</span>)</span><br><span class="line">	err = cmd.Wait()</span><br><span class="line">	log.Printf(<span class="string">&quot;Command finished with error: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="discard-output"><a href="#discard-output" class="headerlink" title="discard output"></a>discard output</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// check binary exist before run</span></span><br><span class="line">    path, err := exec.LookPath(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;didn&#x27;t find &#x27;ls&#x27; executable\n&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;&#x27;ls&#x27; executable is in &#x27;%s&#x27;\n&quot;</span>, path)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cmd := exec.Command(<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-lah&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> runtime.GOOS == <span class="string">&quot;windows&quot;</span> &#123;</span><br><span class="line">        cmd = exec.Command(<span class="string">&quot;tasklist&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    err := cmd.Run()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      log.Fatalf(<span class="string">&quot;cmd.Run() failed with %s\n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>&#39;ls&#39; executable is in &#39;/usr/bin/ls&#39;
</code></pre>
<h3 id="print-output-to-console"><a href="#print-output-to-console" class="headerlink" title="print output to console"></a>print output to console</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    cmd := exec.Command(<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-lah&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> runtime.GOOS == <span class="string">&quot;windows&quot;</span> &#123;</span><br><span class="line">        cmd = exec.Command(<span class="string">&quot;tasklist&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// print output to console</span></span><br><span class="line">    cmd.Stdout = os.Stdout</span><br><span class="line">    cmd.Stderr = os.Stderr</span><br><span class="line"></span><br><span class="line">    err := cmd.Run() <span class="comment">// only return error</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      log.Fatalf(<span class="string">&quot;cmd.Run() failed with %s\n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>total 476K
drwxr-xr-x  4 root root  165 Jul  1 17:23 .
drwxr-xr-x 16 root root  242 May 30 16:48 ..
drwxr-xr-x  3 root root   54 Jul  1 15:07 debug
-rw-r--r--  1 root root 102K Jul  1 09:18 go_advanced.ipynb
-rw-r--r--  1 root root 105K Jul  1 14:42 Go_basics.ipynb
-rw-r--r--  1 root root  13K Jun 30 11:27 go-context.ipynb
-rw-r--r--  1 root root 185K Jul  1 17:23 Go_lib.ipynb
-rw-r--r--  1 root root  57K Jun 30 10:23 Go_network_rpc.ipynb
drwxr-xr-x  2 root root  181 Jun 30 11:08 .ipynb_checkpoints
</code></pre>
<h3 id="capture-output-stdout-x2F-stderr-with-one-buffer"><a href="#capture-output-stdout-x2F-stderr-with-one-buffer" class="headerlink" title="capture output(stdout&#x2F;stderr) with one buffer"></a>capture output(stdout&#x2F;stderr) with one buffer</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    cmd := exec.Command(<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="string">&quot;-a&quot;</span>, <span class="string">&quot;-h&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> runtime.GOOS == <span class="string">&quot;windows&quot;</span> &#123;</span><br><span class="line">        cmd = exec.Command(<span class="string">&quot;tasklist&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// out, err := cmd.CombinedOutput() //combine(stderr and stdout)</span></span><br><span class="line">    out, err := cmd.Output() <span class="comment">// only stdout</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;cmd.Run() failed with %s\n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;out:\n%s\n&quot;</span>, <span class="type">string</span>(out))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>out:
total 476K
drwxr-xr-x  4 root root  165 Jul  1 17:23 .
drwxr-xr-x 16 root root  242 May 30 16:48 ..
drwxr-xr-x  3 root root   54 Jul  1 15:07 debug
-rw-r--r--  1 root root 102K Jul  1 09:18 go_advanced.ipynb
-rw-r--r--  1 root root 105K Jul  1 14:42 Go_basics.ipynb
-rw-r--r--  1 root root  13K Jun 30 11:27 go-context.ipynb
-rw-r--r--  1 root root 185K Jul  1 17:23 Go_lib.ipynb
-rw-r--r--  1 root root  57K Jun 30 10:23 Go_network_rpc.ipynb
drwxr-xr-x  2 root root  181 Jun 30 11:08 .ipynb_checkpoints
</code></pre>
<h3 id="capture-output-stdout-and-stderr-with-two-buffer"><a href="#capture-output-stdout-and-stderr-with-two-buffer" class="headerlink" title="capture output(stdout and stderr) with two buffer"></a>capture output(stdout and stderr) with two buffer</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    cmd := exec.Command(<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-lah&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> stdout, stderr bytes.Buffer</span><br><span class="line">    cmd.Stdout = &amp;stdout</span><br><span class="line">    cmd.Stderr = &amp;stderr</span><br><span class="line">    </span><br><span class="line">    err := cmd.Run()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;cmd.Run() failed with %s\n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    outStr, errStr := stdout.String(), stderr.String()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;out:\n%s\nerr:\n%s\n&quot;</span>, outStr, errStr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>out:
total 476K
drwxr-xr-x  4 root root  165 Jul  1 17:23 .
drwxr-xr-x 16 root root  242 May 30 16:48 ..
drwxr-xr-x  3 root root   54 Jul  1 15:07 debug
-rw-r--r--  1 root root 102K Jul  1 09:18 go_advanced.ipynb
-rw-r--r--  1 root root 105K Jul  1 14:42 Go_basics.ipynb
-rw-r--r--  1 root root  13K Jun 30 11:27 go-context.ipynb
-rw-r--r--  1 root root 185K Jul  1 17:23 Go_lib.ipynb
-rw-r--r--  1 root root  57K Jun 30 10:23 Go_network_rpc.ipynb
drwxr-xr-x  2 root root  181 Jun 30 11:08 .ipynb_checkpoints

err:
</code></pre>
<h3 id="capture-output-and-with-time-out"><a href="#capture-output-and-with-time-out" class="headerlink" title="capture output and with time out"></a>capture output and with time out</h3><p>Use <code>exec.CommandContext()</code>, the os&#x2F;exec package handles checking the timeout and killing the process if it expires, user no need to kill the process by himself.</p>
<p><a href="https://medium.com/@vCabbage/go-timeout-commands-with-os-exec-commandcontext-ba0c861ed738">timeout example</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Create a new context and add a timeout to it</span></span><br><span class="line">    ctx, cancel := context.WithTimeout(context.Background(), <span class="number">1</span>*time.Second)</span><br><span class="line">    <span class="keyword">defer</span> cancel() <span class="comment">// The cancel should be deferred so resources are cleaned up</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the command with our context</span></span><br><span class="line">    cmd := exec.CommandContext(ctx, <span class="string">&quot;ping&quot;</span>, <span class="string">&quot;-c 4&quot;</span>, <span class="string">&quot;-i 1&quot;</span>, <span class="string">&quot;8.8.8.8&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This time we can simply use Output() to get the result.</span></span><br><span class="line">    out, err := cmd.Output()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We want to check the context error to see if the timeout was executed.</span></span><br><span class="line">    <span class="comment">// The error returned by cmd.Output() will be OS specific based on what</span></span><br><span class="line">    <span class="comment">// happens when a process is killed.</span></span><br><span class="line">    <span class="keyword">if</span> ctx.Err() == context.DeadlineExceeded &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Command timed out&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there&#x27;s no context error, we know the command completed (or errored).</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Output:&quot;</span>, <span class="type">string</span>(out))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Non-zero exit code:&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>Command timed out
</code></pre>
<h2 id="run-command-as-daemon"><a href="#run-command-as-daemon" class="headerlink" title="run command as daemon"></a>run command as daemon</h2><p>That means after c.Process starts, we should release it from parent, hence init takes it as its parent, command runs daemon.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;os/exec&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Daemon</span><span class="params">()</span></span> &#123;</span><br><span class="line">    cmd := exec.Command(<span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;100&quot;</span>)</span><br><span class="line">    cmd.Stdin = <span class="literal">nil</span></span><br><span class="line">    cmd.Stdout = <span class="literal">nil</span></span><br><span class="line">    cmd.Stderr = <span class="literal">nil</span></span><br><span class="line">    cmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;Setsid: <span class="literal">true</span>&#125;</span><br><span class="line"></span><br><span class="line">    err := cmd.Start() <span class="comment">// runs in another process(child)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// I&#x27;m here in parent</span></span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123; <span class="comment">// no error happens, a child process is created</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;trying to release child process after 30s&quot;</span>)</span><br><span class="line">        time.Sleep(<span class="number">30</span> * time.Second)</span><br><span class="line">        fmt.Println(<span class="string">&quot;child process released, command runs in daemon&quot;</span>)</span><br><span class="line">        cmd.Process.Release() <span class="comment">// release it to make it orphan, init process takes it</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// parent exits but sleep is still running</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;parent exited, sleep cmd is still running in separate process&quot;</span>)</span><br><span class="line">        os.Exit(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Daemon()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<pre><code>repl.go:9:24: undefined &quot;syscall&quot; in syscall.SysProcAttr &lt;*ast.SelectorExpr&gt;
</code></pre>
<h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><p>Package time provides functionality for measuring and displaying time. </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(<span class="type">int</span>)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">statusUpdate</span><span class="params">()</span></span> <span class="type">string</span> &#123; <span class="keyword">return</span> <span class="string">&quot;&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeDemo1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 10 minute 10 * Time.Minute</span></span><br><span class="line">    <span class="comment">// 10s       10 * time.Second</span></span><br><span class="line">    <span class="comment">// 100ms     100 * time.Millisecond</span></span><br><span class="line">    </span><br><span class="line">    time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">    fmt.Println(time.Now())</span><br><span class="line">    fmt.Println(time.Weekday())</span><br><span class="line">    </span><br><span class="line">    start := time.Now()</span><br><span class="line">    time.Sleep(<span class="number">10</span> * time.Millisecond)</span><br><span class="line">    end := time.Now()</span><br><span class="line">    <span class="comment">// check whether end is before or after start</span></span><br><span class="line">    </span><br><span class="line">    fmt.Println(end.After(start))</span><br><span class="line">    fmt.Println(end.Before(start))</span><br><span class="line">    fmt.Println(end.Unix())     <span class="comment">// seconds since 1970</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// peridical timeout, write time to channel every 5s</span></span><br><span class="line">    <span class="comment">// can shutdown ticker at any time</span></span><br><span class="line">    </span><br><span class="line">    ticker := time.NewTicker(time.Second) <span class="comment">// signal tick every 1s</span></span><br><span class="line">    <span class="keyword">defer</span> ticker.Stop()</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//send true after 3 s</span></span><br><span class="line">        time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line">        done &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-done:</span><br><span class="line">            fmt.Println(<span class="string">&quot;Done!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">case</span> t := &lt;-ticker.C: <span class="comment">//ticker.C is a channel: chan time</span></span><br><span class="line">            fmt.Println(<span class="string">&quot;Current time: &quot;</span>, t)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">timeDemo1()</span><br><span class="line"><span class="comment">//timeDemo2()</span></span><br></pre></td></tr></table></figure>

<pre><code>2022-07-01 17:23:20.113770275 +0800 CST m=+6926.821548718
Sunday
true
false
1656667400
Current time:  2022-07-01 17:23:21.124828279 +0800 CST m=+6927.832606722
Current time:  2022-07-01 17:23:22.124729486 +0800 CST m=+6928.832507925
Current time:  2022-07-01 17:23:23.124739482 +0800 CST m=+6929.832517925
Done!
</code></pre>
<h3 id="Periodically-timeout"><a href="#Periodically-timeout" class="headerlink" title="Periodically timeout"></a>Periodically timeout</h3><p><code>func NewTicker(d Duration) *Ticker</code>                                                                                          </p>
<ul>
<li>NewTicker returns a new Ticker containing a channel that will send the time on the channel after each tick. The period of the ticks is specified by the duration argument. The ticker will adjust the time interval or drop ticks to make up for slow receivers. The duration d must be greater than zero; if not, NewTicker will panic. Stop the ticker to release associated resources.</li>
</ul>
<p><code>func Tick(d Duration) &lt;-chan Time</code>                                                                                                 </p>
<ul>
<li>Tick is a convenience wrapper for NewTicker providing access to the ticking channel only. While Tick is useful for clients that have no need to shut down the Ticker, be aware that without a way to shut it down the underlying Ticker cannot be recovered by the garbage collector; it &quot;leaks&quot;. Unlike NewTicker, Tick will return nil if d &lt;&#x3D; 0.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ticker := time.NewTicker(time.Second) <span class="comment">// signal tick every 1s</span></span><br><span class="line">    <span class="keyword">defer</span> ticker.Stop()</span><br><span class="line">    </span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">        done &lt;- <span class="literal">true</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">var</span> ok <span class="type">bool</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ok &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> ok =&lt;-done:</span><br><span class="line">            fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">            <span class="keyword">case</span> t := &lt;-ticker.C: <span class="comment">//ticker.C is a channel: chan time</span></span><br><span class="line">            fmt.Println(<span class="string">&quot;current time: &quot;</span>, t)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// peridical timeout, write time to channel every 1s</span></span><br><span class="line">    <span class="comment">// you can&#x27;t shutdown the ticker as no way to know the Ticker instance!!!</span></span><br><span class="line">    t := time.Tick(<span class="number">1</span> * time.Second)</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> next := <span class="keyword">range</span> t &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, next)</span><br><span class="line">        <span class="keyword">if</span> i++; i == <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    timeDemo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>current time:  2022-07-01 17:23:24.126393711 +0800 CST m=+6930.834172154
done
2022-07-01 17:23:25.12738211 +0800 CST m=+6931.835160502
2022-07-01 17:23:26.127205432 +0800 CST m=+6932.834983825
</code></pre>
<h3 id="Once-timeout"><a href="#Once-timeout" class="headerlink" title="Once timeout"></a>Once timeout</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(n <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//one time timeout</span></span><br><span class="line">    <span class="keyword">var</span> c <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> m := &lt;-c:</span><br><span class="line">        handle(m)</span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(<span class="number">1</span> * time.Second):</span><br><span class="line">        fmt.Println(<span class="string">&quot;timed out&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    timeDemo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>timed out
</code></pre>
<h3 id="timestamp"><a href="#timestamp" class="headerlink" title="timestamp"></a>timestamp</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    fmt.Println(time.Now())</span><br><span class="line">    timeUnix := time.Now().Unix()         <span class="comment">//second</span></span><br><span class="line">    timeUnixNano := time.Now().UnixNano() <span class="comment">//nano second</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(timeUnix)</span><br><span class="line">    fmt.Println(timeUnixNano)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// convert timestamp to human readable</span></span><br><span class="line">    fmt.Println(time.Unix(timeUnix, <span class="number">0</span>))</span><br><span class="line">    <span class="comment">// convert timestamp to human readable with format specified, must this value 2006-01-02 15:04:05!!!</span></span><br><span class="line">    fmt.Println(time.Unix(timeUnix, <span class="number">0</span>).Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>2022-07-01 17:23:27.129936571 +0800 CST m=+6933.837715027
1656667407
1656667407129992154
2022-07-01 17:23:27 +0800 CST
2022-07-01 17:23:27
</code></pre>
<h2 id="sorting-with-Go"><a href="#sorting-with-Go" class="headerlink" title="sorting with Go"></a>sorting with Go</h2><p>Package sort provides primitives for <code>sorting slices and user-defined collections</code>, you can provides <code>less</code> function for custom types.</p>
<h3 id="sort-for-int-float-string"><a href="#sort-for-int-float-string" class="headerlink" title="sort for int, float, string"></a>sort for int, float, string</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := []<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>&#125; <span class="comment">// unsorted</span></span><br><span class="line">    sort.Ints(s) <span class="comment">// sorted in increasing order</span></span><br><span class="line">    fmt.Println(s, sort.IntsAreSorted(s))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Sort string in increasing order</span></span><br><span class="line">    s := []<span class="type">string</span>&#123;<span class="string">&quot;Bravo&quot;</span>, <span class="string">&quot;Gopher&quot;</span>, <span class="string">&quot;Alpha&quot;</span>, <span class="string">&quot;Grin&quot;</span>, <span class="string">&quot;Delta&quot;</span>&#125;</span><br><span class="line">    sort.Strings(s)</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// sort slice of any type!!!</span></span><br><span class="line">&#125;</span><br><span class="line">sortDemo()</span><br></pre></td></tr></table></figure>

<pre><code>[1 2 3 4 5 6] true
[Alpha Bravo Delta Gopher Grin]
</code></pre>
<h3 id="sorting-slice"><a href="#sorting-slice" class="headerlink" title="sorting slice"></a>sorting slice</h3><p>Any type of slice, you must provide less function<br><code>func SliceStable(x interface&#123;&#125;, less func(i, j int) bool)</code><br><code>func Slice(x interface&#123;&#125;, less func(i, j int) bool)</code></p>
<p>Slice sorts the slice x given the provided less function. It panics if x is not a slice.</p>
<p>The sort is not guaranteed to be stable: equal elements may be reversed from their original order. For a stable sort, use SliceStable.</p>
<p>The less function must satisfy the same requirements as the Interface type’s Less method.<br><strong>Less reports whether the element with index i must sort before the element with index j, less returns true means i must be sorted firstly</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    people := []<span class="keyword">struct</span> &#123;</span><br><span class="line">        Name <span class="type">string</span></span><br><span class="line">        Age  <span class="type">int</span></span><br><span class="line">    &#125;&#123;</span><br><span class="line">        &#123;<span class="string">&quot;Gopher&quot;</span>, <span class="number">7</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">55</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;Vera&quot;</span>, <span class="number">24</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;Bob&quot;</span>, <span class="number">75</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    sort.Slice(people, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123; <span class="keyword">return</span> people[i].Name &lt; people[j].Name &#125;)</span><br><span class="line">    fmt.Println(<span class="string">&quot;By name:&quot;</span>, people)</span><br><span class="line"></span><br><span class="line">    sort.Slice(people, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123; <span class="keyword">return</span> people[i].Age &lt; people[j].Age &#125;)</span><br><span class="line">    fmt.Println(<span class="string">&quot;By age:&quot;</span>, people)</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>By name: [&#123;Alice 55&#125; &#123;Bob 75&#125; &#123;Gopher 7&#125; &#123;Vera 24&#125;]
By age: [&#123;Gopher 7&#125; &#123;Vera 24&#125; &#123;Alice 55&#125; &#123;Bob 75&#125;]
</code></pre>
<h2 id="encoding"><a href="#encoding" class="headerlink" title="encoding"></a>encoding</h2><p>Package encoding defines interfaces shared by other packages that convert data <strong>to and from byte-level and textual representations</strong>. like <code>encoding/xml  encoding/base64 encoding/hex etc</code><br><strong>base64</strong></p>
<ul>
<li><p>func (enc *Encoding) Decode(dst, src []byte) (n int, err error)</p>
</li>
<li><p>func (enc *Encoding) DecodeString(s string) ([]byte, error)</p>
</li>
<li><p>func (enc *Encoding) Encode(dst, src []byte)</p>
</li>
<li><p>func (enc *Encoding) EncodeToString(src []byte) string</p>
</li>
</ul>
<p><strong>hex</strong></p>
<ul>
<li><p>func Decode(dst, src []byte) (int, error)</p>
</li>
<li><p>func DecodeString(s string) ([]byte, error)</p>
</li>
<li><p>func Encode(dst, src []byte) int</p>
</li>
<li><p>func EncodeToString(src []byte) string</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line">    <span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">base64Demo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sc := [] <span class="type">byte</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    encode := base64.StdEncoding.EncodeToString(sc)</span><br><span class="line">    <span class="comment">//base64.URLEncoding</span></span><br><span class="line">    fmt.Println(encode)</span><br><span class="line">    sc, _ := base64.StdEncoding.DecodeString(encode)</span><br><span class="line">    fmt.Println(<span class="type">string</span>(sc))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hexDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sc := [] <span class="type">byte</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    encode := hex.EncodeToString(sc)</span><br><span class="line">    </span><br><span class="line">    fmt.Println(encode)</span><br><span class="line">    sc, _ := hex.DecodeString(encode)</span><br><span class="line">    fmt.Println(<span class="type">string</span>(sc))</span><br><span class="line">&#125;</span><br><span class="line">base64Demo()</span><br><span class="line">hexDemo()</span><br></pre></td></tr></table></figure>

<pre><code>aGVsbG8=
hello
68656c6c6f
hello
</code></pre>
<h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><p>Go supports encode&#x2F;decode any type to&#x2F;from json, but most of time, <strong>we use <code>map or struct</code> for json encoding and decoding.</strong></p>
<p>Here are frequently used APIs provided by <code>encoding/json</code> package.  </p>
<p><code>func Marshal(v interface&#123;&#125;) ([]byte, error)</code></p>
<blockquote>
<p>Marshal traverses the value v <code>recursively</code>.</p>
</blockquote>
<p><strong>Encoding Note</strong>  </p>
<blockquote>
<p>The encoding of each struct field can be customized by the format string stored under the “json” key in the struct field’s tag. The format string gives the name of the field, possibly followed by a comma-separated list of options. The name may be empty in order to specify options without overriding the default field name.  </p>
</blockquote>
<blockquote>
<p>&#x2F;&#x2F; Field appears in JSON as key “myName”.<br>Field int <code>json:&quot;myName&quot;</code>  </p>
</blockquote>
<blockquote>
<p>&#x2F;&#x2F; Field appears in JSON as key “myName” and<br>&#x2F;&#x2F; the field is omitted from the object if its value is empty,<br>&#x2F;&#x2F; empty in GO means default value of each type<br>&#x2F;&#x2F; integer: 0<br>&#x2F;&#x2F; string: “”<br>&#x2F;&#x2F; pointer: nil<br>&#x2F;&#x2F; slice: has zero elements<br>&#x2F;&#x2F; omitempty: means if it’s not set or set with default value, these fileds are not marshed or unmarshed!!!<br>Field int <code>json:&quot;myName,omitempty&quot;</code>  </p>
</blockquote>
<blockquote>
<p>&#x2F;&#x2F; Field is ignored by this package.<br>Field int <code>json:&quot;-&quot;</code></p>
</blockquote>
<blockquote>
<p><strong>The map’s key type must either be a string, an integer type</strong><br><strong>map[string]interface{} to store arbitrary JSON objects, []interface{} to store arbitrary JSON arrays.</strong></p>
</blockquote>
<blockquote>
<p>Pointer values encode as the value pointed to. A nil pointer encodes as the null JSON value.</p>
</blockquote>
<p><code>func MarshalIndent(v interface&#123;&#125;, prefix, indent string) ([]byte, error)</code></p>
<blockquote>
<p>MarshalIndent is like Marshal but applies Indent to format the output. Each JSON element in the output will begin on a new line beginning with prefix followed by one or more copies of indent according to the indentation nesting.</p>
</blockquote>
<p><code>func Unmarshal(data []byte, v interface&#123;&#125;) error</code></p>
<blockquote>
<p>Unmarshal parses the JSON-encoded data and stores the result in the value pointed to by v<br>Unmarshal uses the inverse of the encodings that Marshal uses, allocating maps, slices, and pointers as necessary, <strong>If v is nil or not a pointer, Unmarshal returns an InvalidUnmarshalError.</strong></p>
</blockquote>
<p>To unmarshal JSON into a struct, Unmarshal matches incoming object keys to the keys used by Marshal (either <code>the struct field name or its tag), preferring an exact match but also accepting a case-insensitive match</code>. By default, <strong>object keys which don’t have a corresponding struct field are ignored</strong>.</p>
<p><strong>map json key to struct field</strong></p>
<ul>
<li>For a given <strong>JSON key Foo</strong>, Unmarshal will attempt to match the struct fields in this order:<ul>
<li>an exported (public) field with a struct tag json:”Foo”,</li>
<li>an exported field named Foo, or</li>
<li>an exported field named FOO, FoO, or some other case-insensitive match.</li>
</ul>
</li>
</ul>
<p><strong>Only fields that are found in the destination type will be decoded, any unexported fields in the destination struct will be unaffected.</strong></p>
<p><strong>encode—&gt; Marshal()   —&gt; to json string</strong><br><strong>decode—&gt; Unmarshal() —&gt; to struct or map</strong></p>
<p><strong>What to use (Structs vs maps)</strong><br>As a general rule of thumb, if <strong>you can use structs to represent your JSON data, you should use them</strong>. The only good reason to use maps would be if <strong>it were not possible to use structs due to the uncertain nature of the keys or values in the data</strong>.</p>
<p>If we use maps, we will either need each of the keys to have the same data type, or use a generic type and convert it later.</p>
<p><strong>NOTE</strong>  </p>
<ul>
<li><p><font color='red'>Only exported field are encode and marshaled</font></p>
</li>
<li><p><code>json.Marshal(obj), json.Marshal(&amp;obj)</code> both are ok </p>
</li>
<li><p><font color='red' size=4> <code>json.Unmarshal(&amp;obj)</code> must use pointer as parameter, the pointer must not be nil!!!</font></p>
</li>
<li><p><code>json.NewEncoder(os.Stdout).Encode(obj)</code>, <code>json.NewEncoder(os.Stdout).Encode(&amp;obj)</code> both are ok, write encoded data from obj to os.Stdout.</p>
</li>
<li><p><code>json.Decoder(os.Stdin).Decode(&amp;obj)</code> must use pointer as parameter, read decoded data from os.Stdin to obj</p>
</li>
<li><p><code>Marshal is used to encode struct/map to string</code> while <code>Encode() is used to encode struct/map and write to io.Writer</code>, similar thing happens for Unmarshal and Decode().</p>
</li>
<li><p>You can <font color='red'><strong>Marshal from one struct, but Unmarshal to another struct</strong>, but only the ‘matched’ field are assigned, others use default, <strong>the ‘matched’ field must have same type!!! but the tag&#x2F;name obeys above rules.</strong></font></p>
</li>
</ul>
<p><strong>Sugestion for json.Decoder() vs json.Unmarshal()</strong></p>
<ul>
<li><p>use json.Decoder if your <code>data is coming from an io.Reader stream</code>, or you need to decode multiple values from a stream of data</p>
</li>
<li><p>Use json.Unmarshal if you already have the JSON string in memory.</p>
</li>
</ul>
<p><font color='red'><strong>json.Decoder(io.Reader).Decode(&amp;obj) blocks if no data available, returns if EOF, error or data available. if io.Reader is a file, it reads them all to buffer, then UnMarshal, if io.Reader is a connection, receives data then Unmarshal()</strong></font></p>
<p><strong>Marshal a string, just quoted them, “” is added</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s := <span class="string">&quot;hello&quot;</span></span><br><span class="line">buf1 := []byte(s) // buf1[<span class="number">0</span>] == <span class="string">&#x27;h&#x27;</span> <span class="built_in">len</span>(buf1) == <span class="number">5</span></span><br><span class="line"></span><br><span class="line">buf2, _:= json.Marshal(s)// buf[<span class="number">0</span>] == <span class="string">&#x27;&quot;&#x27;</span>, <span class="built_in">len</span>(buf2)==<span class="number">7</span></span><br></pre></td></tr></table></figure>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Msg *<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Id   <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := Student&#123;</span><br><span class="line">        Name: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">        Id:   <span class="number">100</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bytes, _ := json.Marshal(&amp;s)</span><br><span class="line">    fmt.Println(<span class="string">&quot;json string: &quot;</span>,<span class="type">string</span>(bytes))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// \r, \n is ignore when Unmarshal!!!</span></span><br><span class="line">    bytes = <span class="built_in">append</span>(bytes, <span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">    bytes = <span class="built_in">append</span>(bytes, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    p := &amp;Person&#123;&#125;</span><br><span class="line">    err := json.Unmarshal(bytes, p)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(p.Name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>json string:  &#123;&quot;Name&quot;:&quot;tom&quot;,&quot;Id&quot;:100&#125;
tom
</code></pre>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">json_struct_demo</span><span class="params">()</span></span> &#123;    </span><br><span class="line">    <span class="keyword">type</span> FruitBasket <span class="keyword">struct</span> &#123;</span><br><span class="line">        Name    <span class="type">string</span></span><br><span class="line">        Fruit   []<span class="type">string</span>  <span class="comment">// an array</span></span><br><span class="line">        Id      <span class="type">int64</span>  <span class="string">`json:&quot;ref&quot;`</span> <span class="comment">// struct tag used as json key when encoding</span></span><br><span class="line">        private <span class="type">string</span>   <span class="comment">// An unexported field is not encoded, if you run with main()!!!</span></span><br><span class="line">        Created time.Time</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    basket := FruitBasket&#123;</span><br><span class="line">        Name:    <span class="string">&quot;Standard&quot;</span>,</span><br><span class="line">        Fruit:   []<span class="type">string</span>&#123;<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>&#125;,</span><br><span class="line">        Id:      <span class="number">999</span>,</span><br><span class="line">        private: <span class="string">&quot;Second-rate&quot;</span>,</span><br><span class="line">        Created: time.Now(),</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> jsonData []<span class="type">byte</span></span><br><span class="line">    <span class="comment">//jsonData, err := json.Marshal(basket) //encode return a slice of byte</span></span><br><span class="line">    jsonData, err := json.MarshalIndent(basket, <span class="string">&quot;&quot;</span>, <span class="string">&quot;    &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="type">string</span>(jsonData)) <span class="comment">//convert slice to a string</span></span><br><span class="line">    </span><br><span class="line">    jd := []<span class="type">byte</span>(<span class="string">`</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        &quot;Name&quot;: &quot;Standard&quot;,</span></span><br><span class="line"><span class="string">        &quot;Fruit&quot;: [</span></span><br><span class="line"><span class="string">            &quot;Apple&quot;,</span></span><br><span class="line"><span class="string">            &quot;Banana&quot;,</span></span><br><span class="line"><span class="string">            &quot;Orange&quot;</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        &quot;ref&quot;: 999,</span></span><br><span class="line"><span class="string">        &quot;Created&quot;: &quot;2018-04-09T23:00:00Z&quot;</span></span><br><span class="line"><span class="string">    &#125;`</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// when passed with struct, you must know the field of the json string</span></span><br><span class="line">    <span class="comment">// so that it can be mapped to the proper filed of the struct!!!</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> bt FruitBasket</span><br><span class="line">    err := json.Unmarshal(jd, &amp;bt) <span class="comment">// must pass pointer!!!</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(bt.Name, bt.Fruit, bt.Id)</span><br><span class="line">    fmt.Println(bt.Created)</span><br><span class="line">    </span><br><span class="line">    fmt.Printf(<span class="string">&quot;%+v\n&quot;</span>, bt)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">json_struct_demo()</span><br></pre></td></tr></table></figure>

<pre><code>&#123;
    &quot;Name&quot;: &quot;Standard&quot;,
    &quot;Fruit&quot;: [
        &quot;Apple&quot;,
        &quot;Banana&quot;,
        &quot;Orange&quot;
    ],
    &quot;ref&quot;: 999,
    &quot;饞€竝rivate&quot;: &quot;Second-rate&quot;,
    &quot;Created&quot;: &quot;2022-07-01T17:23:27.137247781+08:00&quot;
&#125;
Standard [Apple Banana Orange] 999
2018-04-09 23:00:00 +0000 UTC
&#123;Name:Standard Fruit:[Apple Banana Orange] Id:999 饞€竝rivate: Created:2018-04-09 23:00:00 +0000 UTC&#125;
</code></pre>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">json_map_demo</span><span class="params">()</span></span> &#123;   </span><br><span class="line">    m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;Eve&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Age&quot;</span>:  <span class="number">6.0</span>,</span><br><span class="line">        <span class="string">&quot;Parents&quot;</span>: []<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">            <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">            <span class="number">12</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> jsonData []<span class="type">byte</span></span><br><span class="line">    <span class="comment">//jsonData, err := json.Marshal(basket) //encode return a slice of byte</span></span><br><span class="line">    jsonData, err := json.MarshalIndent(m, <span class="string">&quot;&quot;</span>, <span class="string">&quot;    &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="type">string</span>(jsonData)) <span class="comment">//convert slice to a string</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    js := <span class="string">`&#123;&quot;name&quot;: &quot;battery sensor&quot;, &quot;capacity&quot;: 40&#125;`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> reading <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125; <span class="comment">// any type of value, nil map here!</span></span><br><span class="line">    </span><br><span class="line">    err := json.Unmarshal([]<span class="type">byte</span>(js), &amp;reading)</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%+v %v %v %T\n&quot;</span>,</span><br><span class="line">                   reading, reading[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">                   reading[<span class="string">&quot;capacity&quot;</span>],</span><br><span class="line">                   reading[<span class="string">&quot;capacity&quot;</span>]) <span class="comment">// type of number in json after parsed, it&#x27;s float64!!!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">json_map_demo()</span><br></pre></td></tr></table></figure>

<pre><code>&#123;
    &quot;Age&quot;: 6,
    &quot;Name&quot;: &quot;Eve&quot;,
    &quot;Parents&quot;: [
        &quot;Alice&quot;,
        &quot;Bob&quot;,
        12
    ]
&#125;
map[capacity:40 name:battery sensor] battery sensor 40 float64
</code></pre>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f, err := os.OpenFile(<span class="string">&quot;/tmp/json&quot;</span>, os.O_CREATE|os.O_RDWR, <span class="number">0644</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;failed to open file /tmp/json&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">    ne := json.NewEncoder(f)</span><br><span class="line"></span><br><span class="line">    ev := <span class="keyword">struct</span> &#123;</span><br><span class="line">        Name  <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">        Score <span class="type">int</span>    <span class="string">`json:&quot;score&quot;`</span></span><br><span class="line">    &#125;&#123;<span class="string">&quot;hi&quot;</span>, <span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// offset moved to end of file</span></span><br><span class="line">    err = ne.Encode(ev)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;encode json failed&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">        YourName  <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">        YourScore <span class="type">int</span>    <span class="string">`json:&quot;score&quot;`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> dv Person</span><br><span class="line"></span><br><span class="line">    <span class="comment">// move offset back to beginning of the file</span></span><br><span class="line">    _, err = f.Seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Seek back beginning failed&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    de := json.NewDecoder(f)</span><br><span class="line"></span><br><span class="line">    err = de.Decode(&amp;dv)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;decode from json failed&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%+v\n&quot;</span>, dv)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>&#123;YourName:hi YourScore:100&#125;
</code></pre>
<h4 id="omitempty"><a href="#omitempty" class="headerlink" title="omitempty"></a>omitempty</h4><p>If field is set to its default value, the key itself will be omitted from the JSON object. <font color='red' size=4>omitempty only works for Marshal() to string!!!</font></p>
<p><code>zero</code> value(default) for each type  </p>
<ul>
<li>0 for numeric types,</li>
<li>false for the boolean type</li>
<li>“” (the empty string) for string.</li>
<li>nil for pointer</li>
<li>len(map) &#x3D;&#x3D; 0</li>
<li>len(slice) &#x3D;&#x3D; 0</li>
</ul>
<p><strong><font color='red'>No default value for struct object, so omitempy has no effect for embeded object!!!</font></strong></p>
<p>In cases where an empty value does not exist, omitempty is of no use. An embedded struct, for example, does not have an empty value:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> dimension <span class="keyword">struct</span> &#123;</span><br><span class="line">    Height <span class="type">int</span></span><br><span class="line">    Width  <span class="type">int</span> <span class="string">`json:&quot;,omitempty&quot;`</span> <span class="comment">// effect here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    Breed    <span class="type">string</span></span><br><span class="line">    WeightKg <span class="type">int</span></span><br><span class="line">    Size     dimension <span class="string">`json:&quot;,omitempty&quot;`</span> <span class="comment">// no effect here!!!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    d := Dog&#123;</span><br><span class="line">        Breed: <span class="string">&quot;pug&quot;</span>,</span><br><span class="line">        <span class="comment">// dimension is not set but not omitted!!!</span></span><br><span class="line">    &#125;</span><br><span class="line">    b, _ := json.Marshal(d)</span><br><span class="line">    fmt.Println(<span class="type">string</span>(b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>&#123;&quot;Breed&quot;:&quot;pug&quot;,&quot;WeightKg&quot;:0,&quot;Size&quot;:&#123;&quot;Height&quot;:0&#125;&#125;</code></p>
<p>In this case, even though we never set the value of the Size attribute, and set its omitempty tag, it still appears in the output. This is because structs do not have any empty value in Go. To solve this, use a struct pointer instead :</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    Breed    <span class="type">string</span></span><br><span class="line">    WeightKg <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">    Breed    <span class="type">string</span></span><br><span class="line">    WeightKg <span class="type">int</span> <span class="string">`json:&quot;weight,omitempty&quot;`</span></span><br><span class="line">    PWeightKg *<span class="type">int</span> <span class="string">`json:&quot;pweight,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    d := Dog&#123;</span><br><span class="line">        Breed: <span class="string">&quot;hal&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    nw := <span class="number">0</span></span><br><span class="line">    c0 := Cat&#123;</span><br><span class="line">        Breed: <span class="string">&quot;cal&quot;</span>,</span><br><span class="line">        WeightKg: <span class="number">0</span>, <span class="comment">// omitted as its value is default!!! warning!!!</span></span><br><span class="line">        PWeightKg: &amp;nw, <span class="comment">// not omitted as for pointer default value is nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    c1 := Cat&#123;</span><br><span class="line">        Breed: <span class="string">&quot;cal&quot;</span>,</span><br><span class="line">        WeightKg: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    b, _ := json.Marshal(d)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="type">string</span>(b))</span><br><span class="line">    b, _ := json.Marshal(c0)</span><br><span class="line">    fmt.Println(<span class="type">string</span>(b))</span><br><span class="line">    b, _ := json.Marshal(c1)</span><br><span class="line">    fmt.Println(<span class="type">string</span>(b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>&#123;&quot;Breed&quot;:&quot;hal&quot;,&quot;WeightKg&quot;:0&#125;
&#123;&quot;Breed&quot;:&quot;cal&quot;,&quot;pweight&quot;:0&#125;
&#123;&quot;Breed&quot;:&quot;cal&quot;,&quot;weight&quot;:1&#125;
</code></pre>
<h4 id="json-marshal-for-built-in-type"><a href="#json-marshal-for-built-in-type" class="headerlink" title="json.marshal for built-in type"></a>json.marshal for built-in type</h4><p>As you can json.Marshal() can be used for built-in type, the result is several bytes for that value, then you can Unmarshal to that type!</p>
<p><font color='red'><strong>json.Marshal() for nil will result ‘null’ string</strong></font></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    vb := <span class="literal">true</span></span><br><span class="line">    data, _ := json.Marshal(vb)</span><br><span class="line">    fmt.Println(data)</span><br><span class="line">    fmt.Println(<span class="type">string</span>(data))</span><br><span class="line">    fmt.Println(<span class="string">&quot;============&quot;</span>)</span><br><span class="line"></span><br><span class="line">    vi := <span class="number">12</span></span><br><span class="line">    data, _ = json.Marshal(vi)</span><br><span class="line">    fmt.Println(data)</span><br><span class="line">    fmt.Println(<span class="type">string</span>(data))</span><br><span class="line">    fmt.Println(<span class="string">&quot;============&quot;</span>)</span><br><span class="line"></span><br><span class="line">    vs := <span class="string">&quot;ab&quot;</span></span><br><span class="line">    data, _ = json.Marshal(vs)</span><br><span class="line">    fmt.Println(data)</span><br><span class="line">    fmt.Println(<span class="type">string</span>(data))</span><br><span class="line">    fmt.Println(<span class="string">&quot;============&quot;</span>)</span><br><span class="line"></span><br><span class="line">    vsc := []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;</span><br><span class="line">    data, _ = json.Marshal(vsc)</span><br><span class="line">    fmt.Println(data)</span><br><span class="line">    fmt.Println(<span class="type">string</span>(data))</span><br><span class="line">    fmt.Println(<span class="string">&quot;============&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> vn <span class="keyword">interface</span>&#123;&#125; = <span class="literal">nil</span></span><br><span class="line">    data, _ = json.Marshal(vn)<span class="comment">// nul string for nil !!!</span></span><br><span class="line">    fmt.Println(data)</span><br><span class="line">    fmt.Println(<span class="type">string</span>(data))</span><br><span class="line">    fmt.Println(<span class="string">&quot;============&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>[116 114 117 101]
true
============
[49 50]
12
============
[34 97 98 34]
&quot;ab&quot;
============
[91 34 97 34 44 34 98 34 93]
[&quot;a&quot;,&quot;b&quot;]
============
[110 117 108 108]
null
============
</code></pre>
<h3 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h3><p><strong>Marshal</strong><br><code>func Marshal(v any) ([]byte, error)</code><br>Marshal returns the XML encoding of v.</p>
<p>Marshal handles an array or slice by marshaling each of the elements. Marshal handles a pointer by marshaling the value it points at or, if the pointer is nil, by writing nothing. Marshal handles an interface value by marshaling the value it contains or, if the interface value is nil, by writing nothing. Marshal handles all other data by writing one or more XML elements containing the data.</p>
<p><strong>The name for the XML elements is taken from, in order of preference:</strong></p>
<ul>
<li>the <code>tag on the XMLName field</code>, if the data is a struct</li>
<li>the <code>value of the XMLName field</code> of type Name: the only one use value as name of element.!!!</li>
<li>the <code>tag of the struct field</code> used to obtain the data</li>
<li>the <code>name of the struct field</code> used to obtain the data</li>
<li>the <code>name of the marshaled type</code>.</li>
</ul>
<p>The XML element for a struct contains <code>marshaled elements for each of the exported fields of the struct, with these exceptions:</code></p>
<ul>
<li>the XMLName field, described above, is omitted.</li>
<li>a field with tag “-“ is omitted.</li>
<li>a field with tag “name,attr” becomes an attribute with the given name in the XML element.</li>
<li>a field with tag “,attr” becomes an attribute with the field name in the XML element.</li>
<li>a field with tag “,chardata” is written as character data, not as an XML element.(field value used for struct, as no <code>&lt;$tag&gt;&lt;/$tag&gt;</code> generated)</li>
<li>a field with tag “,cdata” is written as character data wrapped in one or more <code>&lt;![CDATA[...]]&gt;</code> tags, not as an XML element.</li>
<li>a field with tag “,innerxml” is written verbatim, not subject to the usual marshaling procedure.</li>
<li>a field with tag “,comment” is written as an XML comment, not subject to the usual marshaling procedure. It must not contain the “–” string within it.</li>
<li>a field with a tag including the “omitempty” option is omitted if the field value is empty. The <code>empty values are false, 0, any nil pointer or interface value, and any array, slice, map, or string of length zero</code>.</li>
<li><strong>an anonymous struct field is handled as if the fields of its value were part of the outer struct.</strong></li>
<li>a field implementing Marshaler is written by calling its MarshalXML method.</li>
<li>a field implementing encoding.TextMarshaler is written by encoding the result of its MarshalText method as text.</li>
</ul>
<p><strong>NOTE</strong></p>
<ul>
<li><p>If a field uses a tag “a&gt;b&gt;c”, then the element c will be nested inside parent elements a and b. Fields that appear next to each other that name the same parent will be enclosed in one XML element.</p>
</li>
<li><p>If the XML name for a struct field is defined by both the field tag and the struct’s XMLName field, the names must match.</p>
</li>
</ul>
<hr style="border:1px solid gray"> </hr>

<p><strong>Unmarshal</strong><br><code>func Unmarshal(data []byte, v any) error</code><br>Unmarshal parses the XML-encoded data and stores the result in the value pointed to by v, which must be an arbitrary struct, slice, or string. Well-formed data that does not fit into v is discarded.</p>
<p>Because Unmarshal uses the reflect package, it can <code>only assign to exported (upper case) field</code>s. Unmarshal uses a case-sensitive comparison to match XML element names to tag values and struct field names.</p>
<p><strong>Unmarshal maps an XML element to a struct using the following rules. In the rules, the tag of a field refers to the value associated with the key ‘xml’ in the struct field’s tag</strong></p>
<ul>
<li><p>If the struct has a field of type []byte or string with tag “,innerxml”, Unmarshal accumulates the raw XML nested inside the element in that field. The rest of the rules still apply.</p>
</li>
<li><p>If the struct has a field named XMLName of type Name, Unmarshal records the element name in that field.</p>
</li>
<li><p>If the XMLName field has an associated tag of the form “name” or “namespace-URL name”, the XML element must have the given name (and, optionally, name space) or else Unmarshal returns an error.</p>
</li>
<li><p>If the XML element has an attribute whose name matches a struct field name with an associated tag containing “,attr” or the explicit name in a struct field tag of the form “name,attr”, Unmarshal records the attribute value in that field.</p>
</li>
<li><p>If the XML element has an attribute not handled by the previous rule and the struct has a field with an associated tag containing “,any,attr”, Unmarshal records the attribute value in the first such field.</p>
</li>
<li><p>If the XML element contains character data, that data is accumulated in the first struct field that has tag “,chardata”. The struct field may have type []byte or string. If there is no such field, the character data is discarded.</p>
</li>
<li><p>If the XML element contains comments, they are accumulated in the first struct field that has tag “,comment”.  The struct field may have type []byte or string. If there is no such field, the comments are discarded.</p>
</li>
<li><p>If the XML element contains a sub-element whose name matches the prefix of a tag formatted as “a” or “a&gt;b&gt;c”, unmarshal will descend into the XML structure looking for elements with the given names, and will map the innermost elements to that struct field. A tag starting with “&gt;” is equivalent to one starting with the field name followed by “&gt;”.</p>
</li>
<li><p>If the XML element contains a sub-element whose name matches a struct field’s XMLName tag and the struct field has no explicit name tag as per the previous rule, unmarshal maps the sub-element to that struct field.</p>
</li>
<li><p>If the XML element contains a sub-element whose name matches a field without any mode flags (“,attr”, “,chardata”, etc), Unmarshal maps the sub-element to that struct field.</p>
</li>
<li><p>If the XML element contains a sub-element that hasn’t matched any of the above rules and the struct has a field with tag “,any”, unmarshal maps the sub-element to that struct field.</p>
</li>
<li><p>An anonymous struct field is handled as if the fields of its value were part of the outer struct.</p>
</li>
<li><p>A struct field with tag “-“ is never unmarshaled into.</p>
</li>
</ul>
<p><strong>NOTE</strong></p>
<ul>
<li>If Unmarshal encounters a field type that implements the Unmarshaler interface, Unmarshal calls its UnmarshalXML method to produce the value from the XML element. Otherwise, if the value implements encoding.TextUnmarshaler, Unmarshal calls that value’s UnmarshalText method.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/xml&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// when Plant used as field of another field.</span></span><br><span class="line"><span class="comment">// we explitly declare it&#x27;s tag name here, if user set tag, tag name must be same as defined here!!!</span></span><br><span class="line"><span class="keyword">type</span> Plant <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// xml.Name the root tag of struct, no need to set value for it!!</span></span><br><span class="line">    <span class="comment">// if no tag for it, you have to set value of XMLName as it&#x27;s value used for xml</span></span><br><span class="line">    XMLName xml.Name <span class="string">`xml:&quot;plant&quot;`</span></span><br><span class="line">    <span class="comment">// the attr of the root tag with id as its name</span></span><br><span class="line">    Id <span class="type">int</span> <span class="string">`xml:&quot;id,attr&quot;`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// nested tag of the root with &#x27;name&#x27; as its name</span></span><br><span class="line">    Name <span class="type">string</span> <span class="string">`xml:&quot;name&quot;`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Even without explicitly name a tag, it&#x27;s exported if it starts with capital letter!!!</span></span><br><span class="line">    <span class="comment">// nested tag of the root with &#x27;Origin&#x27; as its name as it&#x27;s not named explicitly</span></span><br><span class="line">    <span class="comment">// several such tags as it&#x27;s an array</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// by default empty value is not saved to xml</span></span><br><span class="line">    Origin []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Plant)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;Plant id=%v, name=%v, origin=%v&quot;</span>,</span><br><span class="line">        p.Id, p.Name, p.Origin)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    coffee := &amp;Plant&#123;Id: <span class="number">27</span>, Name: <span class="string">&quot;Coffee&quot;</span>&#125;</span><br><span class="line">    <span class="comment">//coffee.Origin = []string&#123;&quot;Ethiopia&quot;, &quot;Brazil&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">    out, _ := xml.MarshalIndent(coffee, <span class="string">&quot; &quot;</span>, <span class="string">&quot;  &quot;</span>)</span><br><span class="line">    fmt.Println(<span class="type">string</span>(out))</span><br><span class="line">    fmt.Println(<span class="string">&quot;==================================&quot;</span>)</span><br><span class="line">    fmt.Println(xml.Header + <span class="type">string</span>(out))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p Plant</span><br><span class="line">    <span class="keyword">if</span> err := xml.Unmarshal(out, &amp;p); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;==================================&quot;</span>)</span><br><span class="line">    fmt.Println(p)</span><br><span class="line">    fmt.Println(<span class="string">&quot;==================================&quot;</span>)</span><br><span class="line"></span><br><span class="line">    tomato := &amp;Plant&#123;Id: <span class="number">81</span>, Name: <span class="string">&quot;Tomato&quot;</span>&#125;</span><br><span class="line">    tomato.Origin = []<span class="type">string</span>&#123;<span class="string">&quot;Mexico&quot;</span>, <span class="string">&quot;California&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">type</span> Nesting <span class="keyword">struct</span> &#123;</span><br><span class="line">        XMLName xml.Name <span class="string">`xml:&quot;nesting&quot;`</span></span><br><span class="line">        <span class="comment">// a&gt;b&gt;c: c(newplant) is used as name for Plant if Plant has no xml.Name specified explicitly</span></span><br><span class="line">        <span class="comment">// but no error if we set here newplant for Plant event it&#x27;s not used at all</span></span><br><span class="line">        Plants []*Plant <span class="string">`xml:&quot;parent&gt;child&gt;newplant&quot;`</span></span><br><span class="line">        <span class="comment">// ERROR: can NOT declare newplant as its name, as Plant has already declare it!!!</span></span><br><span class="line">        <span class="comment">// Plant *Plant `xml:&quot;newplant,omitempty&quot;`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nesting := &amp;Nesting&#123;&#125;</span><br><span class="line">    nesting.Plants = []*Plant&#123;coffee, tomato&#125;</span><br><span class="line"></span><br><span class="line">    out, err := xml.MarshalIndent(nesting, <span class="string">&quot; &quot;</span>, <span class="string">&quot;  &quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="type">string</span>(out))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code> &lt;plant id=&quot;27&quot;&gt;
   &lt;name&gt;Coffee&lt;/name&gt;
 &lt;/plant&gt;
==================================
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
 &lt;plant id=&quot;27&quot;&gt;
   &lt;name&gt;Coffee&lt;/name&gt;
 &lt;/plant&gt;
==================================
&#123;&#123; plant&#125; 27 Coffee []&#125;
    ==================================
     <nesting>
       <parent>
         <child>
           <plant id="27">
             <name>Coffee</name>
           </plant>
           <plant id="81">
             <name>Tomato</name>
             <Origin>Mexico</Origin>
             <Origin>California</Origin>
           </plant>
         </child>
       </parent>
     </nesting>


#### chardata
In xml, mostly only the leaf node has value, leaf nodes can be defined by a field of struct, `the field type can be built-in type like int, string, leaf node without attr can use built-in type!!!`, like this:
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Garden <span class="keyword">struct</span> &#123;                                                            </span><br><span class="line">    Cool     <span class="type">string</span> <span class="string">`xml:&quot;cool,omitempty&quot;`</span>  </span><br><span class="line">&#125;</span><br><span class="line">gd = Garden&#123;&#125;</span><br><span class="line">gd.Cool = <span class="string">&quot;jas&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
The generate xml:
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Garden&gt;</span><br><span class="line">  &lt;cool&gt;jas&lt;/cool&gt;</span><br><span class="line">&lt;/Garden&gt;</span><br></pre></td></tr></table></figure>

What about if we want to add attr to cool, there is no way to do as, cool is built-in type, you can not add attr to it, you need to declare a struct, like this, as Value is chardata, not XML element, that means **`chardata is needed for leaf node that has attrs and its value`**
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> CoolT &#123;</span><br><span class="line">    Name <span class="type">string</span> <span class="string">`xml:&quot;name,attr&quot;`</span></span><br><span class="line">    Value <span class="type">string</span> <span class="string">`xml:&quot;,chardata&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Garden <span class="keyword">struct</span> &#123;                                                            </span><br><span class="line">    Cool     <span class="type">string</span> <span class="string">`xml:&quot;cool,omitempty&quot;`</span>  </span><br><span class="line">&#125;</span><br><span class="line">gd = Garden&#123;&#125;</span><br><span class="line">gd.Cool = <span class="string">&quot;jas&quot;</span></span><br></pre></td></tr></table></figure>

#### custom UnmarshalXML and MarshalXML
For user type, user can implement its own UnmarshalXML and marshalXML of that type, which is called by xml.Marshal() and xml.UnmarshalXML(), if you do not want to use the default logic of this process.

### gob
`Gob is like pickle in python and Protobuf`, they are used to serialize object, the serialized object is a stream which is self-describing(`have type, value, name et`c). `Each data item in the stream is preceded by a specification of its type, expressed in terms of a small set of predefined types`. Pointers are not transmitted, but the things they point to are transmitted; that is, the values are flattened. Nil pointers are not permitted, as they have no value. Recursive types work fine, but recursive values (data with cycles) are problematic. This may change.

To use gobs, create an Encoder and present it with a series of data items as values or addresses that can be dereferenced to values. The Encoder makes sure all type information is sent before it is needed. At the receive side, a Decoder retrieves values from the encoded stream and unpacks them into local variables.

The source and destination values/types `need not correspond exactly`. For structs, fields (identified by name) that are in the source but absent from the receiving variable will be ignored. Fields that are in the receiving variable but missing from the transmitted type or value will be ignored in the destination. **If a field with the same name is present in both, their types must be compatible**. Both the receiver and transmitter will do all necessary indirection and dereferencing to convert between gobs and actual Go values.

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> &#123; A, B <span class="type">int</span> &#125;</span><br></pre></td></tr></table></figure>
can be sent from or received into any of these Go types below:

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> &#123; A, B <span class="type">int</span> &#125;	<span class="comment">// the same</span></span><br><span class="line">*<span class="keyword">struct</span> &#123; A, B <span class="type">int</span> &#125;	<span class="comment">// extra indirection of the struct</span></span><br><span class="line"><span class="keyword">struct</span> &#123; *A, **B <span class="type">int</span> &#125;	<span class="comment">// extra indirection of the fields</span></span><br><span class="line"><span class="keyword">struct</span> &#123; A, B <span class="type">int64</span> &#125;	<span class="comment">// different concrete value type; see below</span></span><br></pre></td></tr></table></figure>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">    <span class="string">&quot;encoding/gob&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> P <span class="keyword">struct</span> &#123;</span><br><span class="line">    X, Y, Z <span class="type">int</span></span><br><span class="line">    Name    <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Q <span class="keyword">struct</span> &#123;</span><br><span class="line">    X, Y *<span class="type">int32</span> <span class="comment">// when decode from P, Z is ignored, int converted to int32</span></span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This example shows the basic usage of the package: Create an encoder,</span></span><br><span class="line"><span class="comment">// transmit some values, receive them with a decoder.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Initialize the encoder and decoder. Normally enc and dec would be</span></span><br><span class="line">    <span class="comment">// bound to network connections and the encoder and decoder would</span></span><br><span class="line">    <span class="comment">// run in different processes but here is just a demo to show how it works !!!</span></span><br><span class="line">    <span class="keyword">var</span> network bytes.Buffer        <span class="comment">// Stand-in for a network connection</span></span><br><span class="line">    enc := gob.NewEncoder(&amp;network) <span class="comment">// Will write to network.</span></span><br><span class="line">    dec := gob.NewDecoder(&amp;network) <span class="comment">// Will read from network.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Encode (send) some values.</span></span><br><span class="line">    err := enc.Encode(P&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">&quot;Pythagoras&quot;</span>&#125;) <span class="comment">// instance of P struct serialized to buffer.</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(<span class="string">&quot;encode error:&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    err = enc.Encode(P&#123;<span class="number">1782</span>, <span class="number">1841</span>, <span class="number">1922</span>, <span class="string">&quot;Treehouse&quot;</span>&#125;) <span class="comment">// another instance of P struct serialized to buffer.</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(<span class="string">&quot;encode error:&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decode (receive) and print the values. as it&#x27;s stream first in, first out!!!</span></span><br><span class="line">    <span class="keyword">var</span> q Q</span><br><span class="line">    err = dec.Decode(&amp;q) <span class="comment">//after decode, first instance is removed from stream.</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(<span class="string">&quot;decode error 1:&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%q: &#123;%d, %d&#125;\n&quot;</span>, q.Name, *q.X, *q.Y)</span><br><span class="line">    </span><br><span class="line">    err = dec.Decode(&amp;q)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(<span class="string">&quot;decode error 2:&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%q: &#123;%d, %d&#125;\n&quot;</span>, q.Name, *q.X, *q.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

    "Pythagoras": &#123;3, 4&#125;
    "Treehouse": &#123;1782, 1841&#125;


## hash(get hash value)
Package crc32 implements the 32-bit cyclic redundancy check, or CRC-32, checksum mostly `used for data transfer over network`.

`Package maphash` provides `hash functions on byte sequences`. These hash functions are intended to be used to implement hash tables or other data structures that need to `map arbitrary strings or byte sequences to a uniform distribution on unsigned 64-bit integers`. Each different instance of a hash table or data structure should use its own Seed.
**maphash API**
- func (h *Hash) Sum64() uint64
- func (h *Hash) Write(b []byte) (int, error)
- func (h *Hash) WriteString(s string) (int, error)

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;hash/crc32&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;hash/crc64&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;hash/maphash&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maphashDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> h maphash.Hash</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add a string to the hash, and print the current hash value.</span></span><br><span class="line">    h.WriteString(<span class="string">&quot;hello, &quot;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, h.Sum64())</span><br><span class="line">    </span><br><span class="line">    h.Reset() <span class="comment">// seed unchanged, so same value for same string</span></span><br><span class="line">    h.WriteString(<span class="string">&quot;hello, &quot;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, h.Sum64())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">crcDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">maphashDemo()</span><br><span class="line">crcDemo()</span><br></pre></td></tr></table></figure>

## math
Package rand implements pseudo-random number generators.   
**random API**  
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">- func (r *Rand) Float32() float32 [0, 1)</span><br><span class="line">- func (r *Rand) Int() int</span><br><span class="line">- func (r *Rand) Int31() int32</span><br><span class="line">- func (r *Rand) Int63() int64</span><br><span class="line">                                    </span><br><span class="line">- func (r *Rand) Intn(n int) int        range [0, n)</span><br><span class="line">- func (r *Rand) Int31n(n int32) int32        [0, n)</span><br><span class="line">- func (r *Rand) Int63n(n int64) int64         \[0, n)</span><br><span class="line">                                    </span><br><span class="line">- func (r *Rand) Uint32() uint32</span><br><span class="line">- func (r *Rand) Uint64() uint64</span><br></pre></td></tr></table></figure>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// set seed</span></span><br><span class="line">    r := rand.New(rand.NewSource(<span class="number">99</span>))</span><br><span class="line">    fmt.Println(r.Float32(), r.Int(), r.Intn(<span class="number">100</span>), r.Uint32())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">randDemo()</span><br></pre></td></tr></table></figure>

    0.2635776 5864379541603903257 90 2699839765


## crypto
Package, crypto, aes, des, rsa, sha1, sha256, hmac, md5

## file/IO ops
There are many ways to read and write IO in golang. At present, I know `IO library, OS library, ioutil library, bufio library, bytes library and so on`, which one to choose?  which library should be used in what scenario?

- The OS library mainly deals with the operating system, so file operations are basically linked with the OS library, such as creating a file, deleting a file, change file mode, creating dir etc. This library is often used with ioutil library, bufio library, etc
    - *os.File is a type that implements io.Reader, and io.Writer (among others) which streams bytes to or from a file on disk
      It is useful if you don't want to read the whole file into memory, It has the downside of being a lower level construct,  meaning data must often be processed in loops (with error checks on each iteration), and that it must be manually managed (via Close())


- io library belongs to the bottom interface definition library. 
    - its function is to `define some basic interfaces and some basic constants,` and to explain the functions of these interfaces. The common interfaces are reader, writer, etc. Generally, `this library is only used to call its constants, such as io.EOF`.


- The ioutil library is included in the IO directory. It is mainly used as a toolkit. There are some practical functions, such as readall (read data from a source), readfile (read file content), WriteFile (write data to a file), readdir (get directory), it's easy to use, like readfile, `it does some operation automatically which we should do by ourself if use os.File`
    - It automatically allocates a byte slice of the correct size (no need to Read + append in a loop)
    - It automatically closes the file
    - It returns the first error that prevented it from working (so you only need a single error check)

- bufio provides wrapper types for io.Reader and io.Writer that buffer the input / output to improve efficiency.
    - If you are reading a file in one or a few large steps, you probably don't need it either
    - buffered input and output add some extra concerns
    - bufio.Scanner is a nice utility type to efficiently read independent lines of text from an io.Reader
        
        
- bytes provides helper functions and types for interacting with byte slices ([]byte)
    - `bytes.Reader turns a []byte into a io.Reader (as well as an io.Seeker to rewind)`
    - `bytes.Buffer uses []bytes to implement a reader/writer, it is useful when you want to use code that takes an io.Writer, and store the results in memory for use later`
       
       
- bufio vs bytes.Buffer: both of them provide a layer of caching function. The main difference between them is that `bufio is for file to memory caching, wrap other Reader/Writer`, while `bytes.Buffer is for memory to memory caching`.

<hr style="border:1px solid gray"> </hr>

<font color='red'>**Suggestion**</font>

- **file operation, create/delete/chmod use` os library`**
- **small file, load at once, use `ioutil`**
- **large file, `bufio` support read line by line, or read word by word etc**
- **control read size of file by yourself, read many times, `os.File`**
- **In memory reader/writer `bytes.Buffer`**

When Read encounters an error or end-of-file condition after successfully reading n > 0 bytes, it returns the number of bytes read. It may return the (non-nil) error from the same call or return the error (and n == 0) from a subsequent call. An instance of this general case is that **a Reader returning a non-zero number of bytes at the end of the input stream may return either err == EOF or err == nil. The next Read should return 0, EOF**.

Callers should always process the n > 0 bytes returned before considering the error err. Doing so correctly handles I/O errors that happen after reading some bytes and also both of the allowed EOF behaviors. 

[IO-Cookbook](https://jesseduffield.com/Golang-IO-Cookbook/)

<hr style="border:1px solid gray"> </hr>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">src:</span><br><span class="line"> - bufio</span><br><span class="line">  - bufio.go</span><br><span class="line"> - bytes</span><br><span class="line">  - buffer.go</span><br><span class="line">  - reader.go</span><br><span class="line"> - io</span><br><span class="line">  - ioutil</span><br><span class="line">   - ioutil.go</span><br><span class="line">  - io.go</span><br><span class="line"> - os</span><br><span class="line">  - file.go</span><br><span class="line"> - strings </span><br><span class="line">  - reader.go</span><br></pre></td></tr></table></figure>


<font color='red'  size=3>io/ioutil was a poorly defined collection of helpers, you should use os.xxx if avaiable.</font>

### os


standard package `os` provides basic operations file system while File provides read/write operations.

- func Chdir(dir string) error
- func Chmod(name string, mode FileMode) error
- func Chown(name string, uid, gid int) error

- func Stat(name string) (FileInfo, error)
- func IsExist(err error) bool
- func IsNotExist(err error) bool

- func ReadDir(name string) ([]DirEntry, error)
- func Mkdir(name string, perm FileMode) error
- func MkdirAll(path string, perm FileMode) error
- func MkdirTemp(dir, pattern string) (string, error)

- func Remove(name string) error
- func RemoveAll(path string) error
- func Rename(oldpath, newpath string) error

- func ReadFile(name string) ([]byte, error) // read all at once

- func Create(name string) (*File, error)
- func Open(name string) (*File, error)
- func OpenFile(name string, flag int, perm FileMode) (*File, error)


- func (f *File) Close() error
- func (f *File) Read(b []byte) (n int, err error) // read size of slice from file
- func (f *File) ReadAt(b []byte, off int64) (n int, err error)
- func (f *File) Write(b []byte) (n int, err error)
- func (f *File) WriteAt(b []byte, off int64) (n int, err error)
- func (f *File) WriteString(s string) (n int, err error)
- func (f *File) ReadDir(n int) ([]DirEntry, error)
- func (f *File) Sync() error


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FileMakePath</span><span class="params">(path <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;                                           </span><br><span class="line">    <span class="keyword">if</span> stat, err := os.Stat(path); os.IsExist(err) &#123;                             </span><br><span class="line">        <span class="keyword">if</span> stat.IsDir() &#123;                                                        </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>                                                           </span><br><span class="line">        &#125;                                                                        </span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;[util] %s exists, but not dir&quot;</span>, path)                 </span><br><span class="line">    &#125;                                                                            </span><br><span class="line">                                                                                 </span><br><span class="line">    <span class="comment">// create if not exists                                                      </span></span><br><span class="line">    <span class="keyword">if</span> err := os.MkdirAll(path, <span class="number">0777</span>); err != <span class="literal">nil</span> &#123;                              </span><br><span class="line">        <span class="keyword">return</span> err                                                               </span><br><span class="line">    &#125;                                                                            </span><br><span class="line">                                                                                </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>                                                                   </span><br><span class="line">&#125;      </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    info, err := os.Stat(<span class="string">&quot;/tmp/test&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> os.IsNotExist(err) &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;/tmp/test not found, creating it&quot;</span>)</span><br><span class="line">            _, err := os.Create(<span class="string">&quot;/tmp/test&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                fmt.Printf(<span class="string">&quot;create failed: %v\n&quot;</span>, err)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fmt.Println(<span class="string">&quot;created&quot;</span>)</span><br><span class="line">                os.Chmod(<span class="string">&quot;/tmp/test&quot;</span>, <span class="number">0777</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Println(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;stats of /tmp/test: %v\n&quot;</span>, info)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// If the file doesn&#x27;t exist, create it, or append to the file</span></span><br><span class="line">    file, err := os.OpenFile(<span class="string">&quot;/tmp/test&quot;</span>, os.O_CREATE|os.O_WRONLY, <span class="number">0644</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// write data to file</span></span><br><span class="line">    file.Write([]<span class="type">byte</span>(<span class="string">&quot;ab\n&quot;</span>))</span><br><span class="line">    file.WriteString(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    file.Close()</span><br><span class="line"></span><br><span class="line">    data := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">100</span>)</span><br><span class="line">    file, err = os.Open(<span class="string">&quot;/tmp/test&quot;</span>)</span><br><span class="line">    <span class="comment">// read data from file at most 100 bytes!!</span></span><br><span class="line">    _, err = file.Read(data)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;read error &quot;</span>, err)</span><br><span class="line">        file.Close()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;file content: \n%s\n&quot;</span>, <span class="type">string</span>(data))</span><br><span class="line">    file.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.Remove(<span class="string">&quot;/tmp/test&quot;</span>) != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;failed to remove file /tmp/test&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;removed file /tmp/test&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

    /tmp/test not found, creating it
    created
    file content: 
    ab
    hello                                                                                            
    removed file /tmp/test


### ioutil
#### read whole file once


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;write hello to file&quot;</span>)</span><br><span class="line">    <span class="comment">// easy to write and read file !!!</span></span><br><span class="line">    </span><br><span class="line">    err := ioutil.WriteFile(<span class="string">&quot;/tmp/test.txt&quot;</span>, []<span class="type">byte</span>(<span class="string">&quot;hello \nworld&quot;</span>), <span class="number">0644</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// read whole file at once, if file is large not good way</span></span><br><span class="line">    file, err := ioutil.ReadFile(<span class="string">&quot;/tmp/test.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;read content: %s&quot;</span>, file)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// readall from io.Reader</span></span><br><span class="line">    r := strings.NewReader(<span class="string">&quot;hello\nboy\n&quot;</span>)</span><br><span class="line">    buf, _ := ioutil.ReadAll(r)</span><br><span class="line">    fmt.Printf(<span class="type">string</span>(buf))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

    write hello to file
    read content: hello 
    worldhello
    boy


### bufio
In some case, **file is large, we want to read line by line, or read until meet delimiter or read word by word**, this what bufio supports, it also provides read any data size but with buffer.

**bufio is a wrapper of another io.Reader/io.Writer, then gives more advanced feature, hence in order to use it, you need an io.Reader firstly, as it wraps io.Reader/io.Writer, hence you should NOT close it with bufio interface, but with io.Reader/io.Writer interface, use interfaces provided by bufio for reading/writing only**


**API**
- `func (b *Reader) Read(p []byte) (n int, err error)`
>Read reads data into p. It returns the number of bytes read into p. The bytes are taken from at most one Read on the underlying Reader, hence n may be less than len(p).
- `func (b *Reader) ReadBytes(delim byte) ([]byte, error)`
>ReadBytes reads until the first occurrence of delim in the input, returning a slice **containing the data up to and including the delimiter**. If ReadBytes encounters an error before finding a delimiter, it returns the data read before the error and the error itself (often io.EOF). ReadBytes returns err != nil if and only if the returned data does not end in delim. For simple uses, a Scanner may be more convenient.
- `func (b *Reader) ReadString(delim byte) (string, error)`
>Same as ReadBytes as it just calls ReadBytes directly, then convert bytes to string 

- `func (s *Scanner) Scan() bool`
><font color='red' size=4>returns until the first occurrence of delim in the input(or error, EOF), by default delim  is `\n`, or `\r\n`</font>

**NOTE: `\r\n, \n` is returned by `ReadBytes() and ReadString()` which is not true for Scanner.Text(),Scanner.Bytes() which striped**

#### read file line by line


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := strings.NewReader(<span class="string">&quot;hello boy\ngirl\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reader</span></span><br><span class="line">    br := bufio.NewReader(r)</span><br><span class="line">    line, err := br.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%v&quot;</span>, err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// line with \n!!!, its count is 10!!!</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;%v: %d\n&quot;</span>, line, <span class="built_in">len</span>([]<span class="type">rune</span>(line)))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    line, err = br.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;%v&quot;</span>, line)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;%v&quot;</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%v: %d\n&quot;</span>, line, <span class="built_in">len</span>([]<span class="type">rune</span>(line)))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;use scanner&quot;</span>)</span><br><span class="line">    <span class="comment">// Scanner to read line by line</span></span><br><span class="line">    <span class="comment">// return to start position</span></span><br><span class="line">    r.Seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    scanner := bufio.NewScanner(r)</span><br><span class="line">    <span class="comment">// read word by word: scanner.Split(bufio.ScanWords)</span></span><br><span class="line">    <span class="keyword">for</span> scanner.Scan() &#123;<span class="comment">// returns until \n!!!</span></span><br><span class="line">        <span class="comment">//scaner.Text() has stripped line, no \n</span></span><br><span class="line">        fmt.Println(scanner.Text(), <span class="built_in">len</span>([]<span class="type">rune</span>(scanner.Text())))</span><br><span class="line">        fmt.Println(<span class="type">string</span>(scanner.Bytes()), <span class="built_in">len</span>(scanner.Bytes()))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err := scanner.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

    hello boy
    : 10
    girl
    : 5
    use scanner
    hello boy 9
    hello boy 9
    girl 4
    girl 4


### io.Copy and io.Pipe and bytes.Buffer and string.NewReader()

Package io provides basic interfaces to I/O primitives. Its primary job is to wrap existing implementations of such primitives, such as those in package os, into `shared public interfaces that abstract the functionality, plus some other related primitives`.

In most cases, `we did NOT use io library directly, but it provides two convenient ways io.Copy and io.Pipe which is used in most application.`

- `func Copy(dst Writer, src Reader) (written int64, err error)`
>Copy copies from src to dst until either EOF is reached on src or an error occurs. It returns the number of bytes copied and the first error encountered while copying, if any. A successful Copy returns err == nil, not err == EOF. Because Copy is defined to read from src until EOF, it does not treat an EOF from Read as an error to be reported.
If src implements the WriterTo interface, the copy is implemented by calling src.WriteTo(dst). Otherwise, if dst implements the ReaderFrom interface, the copy is implemented by calling dst.ReadFrom(src). 

- `func Pipe() (*PipeReader, *PipeWriter)`
>Pipe creates a `synchronous in-memory pipe`. It can be used to connect code expecting an io.Reader with code expecting an io.Writer. Reads and Writes on the pipe are matched one to one except when multiple Reads are needed to consume a single Write. That is, **each Write to the PipeWriter blocks until it has satisfied one or more Reads from the PipeReader that fully consume the written data**. The data is copied directly from the Write to the corresponding Read (or Reads); there is no internal buffering.

**Note**
- pipe.Write() returns only when **error happens or all data is received by reader, otherwise it blocks**
- pipe.Read() returns data received and tell Writer how many it receives, so that writer can write immediately after get the notification

**Cases**
- <font color='red'>io.Copy: Get data(bytes) from reader, without any change, Write to writer **(no user involved)**, this what io.Copy mostly used, reader and writer can anyone like file, string, in memory etc!!</font>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := strings.NewReader(<span class="string">&quot;hello boy\ngirl\n&quot;</span>)</span><br><span class="line">    <span class="comment">// copy from reader to writer</span></span><br><span class="line">    <span class="comment">// support any reader and any writer</span></span><br><span class="line">    io.Copy(os.Stdout, r)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> buffer *bytes.Buffer</span><br><span class="line">    buffer = bytes.NewBufferString(<span class="string">&quot;hello boy\ngirl\n&quot;</span>)</span><br><span class="line">    io.Copy(os.Stdout, buffer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

- <font color='red'>io.Pipe() same as io.Copy, but more limitation and more efficient, as reader and writer are bound from beginning and they are in memory, **need user call write() and read() API**.</font>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    preader, pwriter := io.Pipe()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        reader := strings.NewReader(<span class="string">&quot;ab&quot;</span>)</span><br><span class="line">        fmt.Println(<span class="string">&quot;writer writes data and blocks as reader is not ready&quot;</span>)</span><br><span class="line">        io.Copy(pwriter, reader)</span><br><span class="line">        fmt.Println(<span class="string">&quot;writer waked up after data is read&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read blocks until writer write data or writer close/error</span></span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">60</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;reader sleep 1 seconds before reading&quot;</span>)</span><br><span class="line">    time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">    c, err := preader.Read(buf)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;error reading&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        buf[<span class="number">2</span>] = <span class="string">&#x27;c&#x27;</span></span><br><span class="line">        <span class="comment">//fmt.Println(string(buf))</span></span><br><span class="line">        fmt.Println(<span class="type">string</span>(buf[:c]))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

    reader sleep 1 seconds before reading
    writer writes data and blocks as reader is not ready
    writer waked up after data is read
    ab


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// Importing fmt, io, and bytes</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Calling main</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Calling Pipe method</span></span><br><span class="line">    pipeReader, pipeWriter := io.Pipe()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Using Fprint in go function to write</span></span><br><span class="line">    <span class="comment">// data to the file</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// block here until reader read it all or read call Close()</span></span><br><span class="line">        n, err := fmt.Fprint(pipeWriter, <span class="string">&quot;Geeks\n&quot;</span>)</span><br><span class="line">        <span class="comment">// the print may be printed before or after last rcv!!!</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;pipeWriter returns %v bytes is written err: %v\n&quot;</span>, n, err)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Using Close method to close write</span></span><br><span class="line">        pipeWriter.Close()</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        n, err := io.ReadFull(pipeReader, buf)</span><br><span class="line">        <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;rcv: %v bytes: %q\n&quot;</span>, n, <span class="type">string</span>(buf))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

**Possible output**
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">rcv: 2 bytes: &quot;Ge&quot;</span><br><span class="line">rcv: 2 bytes: &quot;ek&quot;</span><br><span class="line">rcv: 2 bytes: &quot;s\n&quot;</span><br><span class="line">pipeWriter returns 6 bytes is written err: &lt;nil&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rcv: 2 bytes: &quot;Ge&quot;</span><br><span class="line">rcv: 2 bytes: &quot;ek&quot;</span><br><span class="line">pipeWriter returns 6 bytes is written err: &lt;nil&gt;</span><br><span class="line">rcv: 2 bytes: &quot;s\n&quot;</span><br></pre></td></tr></table></figure>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Calling main</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Calling Pipe method</span></span><br><span class="line">    pipeReader, pipeWriter := io.Pipe()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Using Fprint in go function to write</span></span><br><span class="line">    <span class="comment">// data to the file</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// block here until reader read it all or read call Close()</span></span><br><span class="line">        n, err := fmt.Fprint(pipeWriter, <span class="string">&quot;Geeks\n&quot;</span>)</span><br><span class="line">        fmt.Printf(<span class="string">&quot;pipeWriter returns: %v bytes is written err: %v\n&quot;</span>, n, err)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Using Close method to close write</span></span><br><span class="line">        pipeWriter.Close()</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// data into buffer</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;starts to read&quot;</span>)</span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        n, err := io.ReadFull(pipeReader, buf)</span><br><span class="line">        <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;rcv: %v bytes: %q\n&quot;</span>, n, <span class="type">string</span>(buf))</span><br><span class="line">            pipeReader.Close()</span><br><span class="line">            <span class="comment">// sleep a while for writer to quit first</span></span><br><span class="line">            time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

    starts to read
    rcv: 2 bytes: "Ge"
    pipeWriter returns: 2 bytes is written err: io: read/write on closed pipe



<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := strings.NewReader(<span class="string">&quot;some io.Reader stream to be read\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> _, err := io.Copy(os.Stdout, r); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// copy from reder to os.Stdout(console)</span></span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// an new memory buffer.</span></span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">60</span>)</span><br><span class="line">    buffer := bytes.NewBuffer(buf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// after Copy, reader reach to EOF, we we should reset it to read data again</span></span><br><span class="line">    r.Seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment">// read from reader to buffer!!!</span></span><br><span class="line">    buffer.ReadFrom(r)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%s&quot;</span>, buffer.String())</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%q&quot;</span>, buffer.String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

    some io.Reader stream to be read
                                                                some io.Reader stream to be read
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00some io.Reader stream to be read\n"

### list all files(file,dir) under a dir
- os.ReadDir (return all)
- os.File.ReadDir(can limit return entries)
- ioutil.ReadDir(less efficient than os.ReadDir
- filepath.Glob(support patterns)
- filepath.Walk(support recursive sub-dirs, above does not support this)

## signal

**[signal wiki page](https://en.wikipedia.org/wiki/Signal_(IPC))**

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;os/signal&quot;</span></span><br><span class="line">    <span class="string">&quot;syscall&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// os.Interrupt&lt;----&gt;syscall.SIGINT (Ctrl+C)</span></span><br><span class="line">    <span class="comment">// os.Kill     &lt;----&gt;syscall.SIGKILL</span></span><br><span class="line">    signal.Notify(c, os.Interrupt)</span><br><span class="line">    signal.Notify(c, os.Kill)</span><br><span class="line">    signal.Notify(c, syscall.SIGQUIT)</span><br><span class="line">    signal.Notify(c, syscall.SIGTERM)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> s := &lt;-c:</span><br><span class="line">        fmt.Println(<span class="string">&quot;sig: &quot;</span>, s)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

## random
Random numbers are generated by a Source. Top-level functions, such as and Int, use a default shared Source that produces a deterministic sequence of values each time a program is run. Use the Seed function to initialize the default Source if different behavior is required for each run. The default Source is safe for concurrent use by multiple goroutines, but Sources created by NewSource are not.

This package's outputs might be easily predictable regardless of how it's seeded. For random numbers suitable for security-sensitive work, see the `crypto/rand` package.

- Int/Int31/Int63: generate random number without range
- Intn/Int31n/Int63n: generate random number from [0, n)


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">    fmt.Println(rand.Int(), rand.Intn(<span class="number">10</span>))</span><br><span class="line">    fmt.Println(rand.Int31(), rand.Int31n(<span class="number">10</span>))</span><br><span class="line">    fmt.Println(rand.Int63(), rand.Int63n(<span class="number">10</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// generate bunch of numbers</span></span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">6</span>)</span><br><span class="line">    rand.Read(buf)</span><br><span class="line">    fmt.Println(buf)</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

    5656737410240953005 4
    670732630 8
    846728672197744499 9
    [40 95 241 197 58 113]


## template
There are two packages operating with templates `text/template and html/template`. Both provide the same interface, however the html/template package is used to generate HTML output safe against code injection.

Templates are executed by applying them to a `data structure`. Annotations in the template refer to elements of the data structure (typically a field of a struct or a key in a map) to control execution and derive values to be displayed. `Execution of the template walks the structure and sets the cursor, represented by a period '.' and called "dot", to the value at the current location in the structure as execution proceeds.`, **data structure is represented by a period '.'**

To obtain data from a struct, you can use the `&#123;&#123; .FieldName &#125;&#125;` action, which will replace it with FieldName value of given struct, on parse time.
</code></pre>
<p>There is also the <code>&#123;&#123; . &#125;&#125;</code> action that you can use to refer to a value of non-struct types.</p>
<p>Templates are provided to the appropriate functions either as string or as “raw string”. Actions represents the data evaluations, functions or control loops. <code>They are delimited by &#123;&#123; &#125;&#125;. Other, non delimited parts are left untouched</code>.</p>
<p>Here is the list of actions. <strong>“Arguments” and “pipelines” are evaluations of data</strong>, defined in detail in the corresponding sections that follow.</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;&#123;/* a comment */&#125;&#125;</span><br><span class="line">&#123;&#123;- /* a comment with white space trimmed from preceding and following text */ -&#125;&#125;</span><br><span class="line">	A comment; discarded. May contain newlines.</span><br><span class="line">	Comments do not nest and must start and end at the</span><br><span class="line">	delimiters, as shown here.</span><br><span class="line"></span><br><span class="line">&#123;&#123;pipeline&#125;&#125;</span><br><span class="line">	The default textual representation (the same as would be</span><br><span class="line">	printed by fmt.Print) of the value of the pipeline is copied</span><br><span class="line">	to the output.</span><br><span class="line"></span><br><span class="line">&#123;&#123;if pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line">	If the value of the pipeline is empty, no output is generated;</span><br><span class="line">	otherwise, T1 is executed. The empty values are false, 0, any</span><br><span class="line">	nil pointer or interface value, and any array, slice, map, or</span><br><span class="line">	string of length zero.</span><br><span class="line">	Dot is unaffected.</span><br><span class="line"></span><br><span class="line">&#123;&#123;if pipeline&#125;&#125; T1 &#123;&#123;else&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line">	If the value of the pipeline is empty, T0 is executed;</span><br><span class="line">	otherwise, T1 is executed. Dot is unaffected.</span><br><span class="line"></span><br><span class="line">&#123;&#123;if pipeline&#125;&#125; T1 &#123;&#123;else if pipeline&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line">	To simplify the appearance of if-else chains, the else action</span><br><span class="line">	of an if may include another if directly; the effect is exactly</span><br><span class="line">	the same as writing</span><br><span class="line">		&#123;&#123;if pipeline&#125;&#125; T1 &#123;&#123;else&#125;&#125;&#123;&#123;if pipeline&#125;&#125; T0 &#123;&#123;end&#125;&#125;&#123;&#123;end&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;range pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line">	The value of the pipeline must be an array, slice, map, or channel.</span><br><span class="line">	If the value of the pipeline has length zero, nothing is output;</span><br><span class="line">	otherwise, dot is set to the successive elements of the array,</span><br><span class="line">	slice, or map and T1 is executed. If the value is a map and the</span><br><span class="line">	keys are of basic type with a defined order, the elements will be</span><br><span class="line">	visited in sorted key order.</span><br><span class="line">    Dot is changed if pipeline is not zero</span><br><span class="line"></span><br><span class="line">&#123;&#123;range pipeline&#125;&#125; T1 &#123;&#123;else&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line">	The value of the pipeline must be an array, slice, map, or channel.</span><br><span class="line">	If the value of the pipeline has length zero, dot is unaffected and</span><br><span class="line">	T0 is executed; otherwise, dot is set to the successive elements</span><br><span class="line">	of the array, slice, or map and T1 is executed.</span><br><span class="line">    Dot is change if pipeline is not zero</span><br><span class="line">    </span><br><span class="line">&#123;&#123;template &quot;name&quot;&#125;&#125;</span><br><span class="line">	The template with the specified name is executed with nil data.</span><br><span class="line"></span><br><span class="line">&#123;&#123;template &quot;name&quot; pipeline&#125;&#125;</span><br><span class="line">	The template with the specified name is executed with dot set</span><br><span class="line">	to the value of the pipeline.</span><br><span class="line">    New temaplte&#x27;s dot is set with pipeline</span><br><span class="line"></span><br><span class="line">&#123;&#123;block &quot;name&quot; pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line">	A block is shorthand for defining a template</span><br><span class="line">		&#123;&#123;define &quot;name&quot;&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line">	and then executing it in place</span><br><span class="line">		&#123;&#123;template &quot;name&quot; pipeline&#125;&#125;</span><br><span class="line">	The typical use is to define a set of root templates that are</span><br><span class="line">	then customized by redefining the block templates within.</span><br><span class="line"></span><br><span class="line">&#123;&#123;with pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line">	If the value of the pipeline is empty, no output is generated;</span><br><span class="line">	otherwise, dot is set to the value of the pipeline and T1 is</span><br><span class="line">	executed.</span><br><span class="line">    Dot is change if pipeline is not zero</span><br><span class="line">    </span><br><span class="line">&#123;&#123;with pipeline&#125;&#125; T1 &#123;&#123;else&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line">	If the value of the pipeline is empty, dot is unaffected and T0</span><br><span class="line">	is executed; otherwise, dot is set to the value of the pipeline</span><br><span class="line">	and T1 is executed.</span><br><span class="line">    Dot is change if pipeline is not zero</span><br><span class="line">    </span><br><span class="line">. is change during scope, while $ is unchanged, it&#x27;s top .</span><br><span class="line">pipeline is empty means.</span><br><span class="line">0-     interger</span><br><span class="line">nil-   pointer, interface</span><br><span class="line">len=0  array, slice, map, string</span><br></pre></td></tr></table></figure>

<hr style="border:1px solid gray"> </hr>

<p><strong>Basics</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// template from a file</span></span><br><span class="line">t1, err := template.ParseFiles(<span class="string">&quot;test.html&quot;</span>)</span><br><span class="line"><span class="comment">// template from string</span></span><br><span class="line">t1, err := template.New(<span class="string">&quot;test&quot;</span>).Parse(<span class="string">`&#123;&#123;&quot;raw string&quot; | printf&#125;&#125;`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// output to stdout</span></span><br><span class="line">t1.Execute(os.Stdout, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// output to any Writer</span></span><br><span class="line">t1.Execute(Writer, <span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>Rules to write template, refer to <a href="https://pkg.go.dev/text/template">template format</a> and <a href="https://pkg.go.dev/text/template#hdr-Functions">built-in functions</a>, <a href="https://cloud.tencent.com/developer/article/1683688">template examples</a>, <a href="https://github.com/Masterminds/sprig">extra functions provided by sprig</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;html/template&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Inventory <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Id   <span class="type">uint</span></span><br><span class="line">    Cool <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sweaters := Inventory&#123;<span class="string">&quot;wool&quot;</span>, <span class="number">17</span>, <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    tmpl, err := template.New(<span class="string">&quot;test&quot;</span>).Parse(<span class="string">`</span></span><br><span class="line"><span class="string">&#123;&#123;&quot;raw string&quot; | printf&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;.Name&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123; with $Id :=  .Id&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;- $Id -&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;end -&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;if .Cool&#125;&#125; &#123;&#123;/*must has such field!!!*/&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;.Cool&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;else&#125;&#125;</span></span><br><span class="line"><span class="string">NO Cool in field</span></span><br><span class="line"><span class="string">&#123;&#123;end -&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;if (gt .Id 10)&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;- .Id -&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;end&#125;&#125;</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// render with data from struct!!!</span></span><br><span class="line">    err = tmpl.Execute(os.Stdout, sweaters)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>raw string
wool
17
NO Cool in field
17
</code></pre>
<h1 id="non-standard"><a href="#non-standard" class="headerlink" title="non-standard"></a>non-standard</h1><h2 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h2><p>uuid.UUID is new type(alias) <code>[16]byte</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/google/uuid&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    id := uuid.New()</span><br><span class="line">    fmt.Println(id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>string to uuid bytes</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">uid, _:= uuid.Parse(<span class="string">&quot;b1762c24-48ff-4f67-a66c-e3aeb66051f0&quot;</span>)</span><br><span class="line">bytes := uid[:] <span class="comment">// convert UUID to [16]byte</span></span><br></pre></td></tr></table></figure>
<p><strong>bytes to uuid string</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">uid, _:= uuid.FromBytes(bytes)</span><br><span class="line">ustr := uid.String()  <span class="comment">// convert UUID to string</span></span><br></pre></td></tr></table></figure>

<h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><p>Besides the standard log package, there are lots of log library for Go, here are some popular ones.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// These two line can be omitted if print log to console</span></span><br><span class="line">    outfile, _ := os.OpenFile(<span class="string">&quot;/tmp/my.log&quot;</span>, os.O_APPEND|os.O_WRONLY|os.O_CREATE, <span class="number">0600</span>)</span><br><span class="line">    logger := log.New(outfile, <span class="string">&quot;log_prefix &quot;</span>, log.Llongfile | log.Ldate|log.Ltime|log.Lmicroseconds)</span><br><span class="line"></span><br><span class="line">    logger.Println(<span class="string">&quot;hello, log!!!&quot;</span>)</span><br><span class="line">    <span class="comment">//print to console directly</span></span><br><span class="line">    log.Println(<span class="string">&quot;hello console&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cat /tmp/my.log</span></span><br><span class="line"><span class="comment">// log_prefix 2021/10/09 11:40:58.169531 /home/data/tmp/lg.go:13: hello, log!!!</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://github.com/sirupsen/logrus">logrus</a>–&gt;structured logger, completely API compatible with the standard library logger</li>
<li><a href="https://github.com/uber-go/zap">zap</a>–&gt;structured, leveled logging in Go, high performance</li>
<li><a href="https://github.com/golang/glog">glog</a>–&gt;simple, stable, standard lib provided by Go</li>
<li><a href="https://github.com/oklog/oklog">oklog</a>—-&gt;no updates years, old</li>
<li><a href="https://github.com/cihub/seelog">seelog</a>–&gt;no updates years, old</li>
<li><a href="https://github.com/rs/zerolog">zerolog</a> –&gt;json output</li>
</ul>
<p><strong>Suggestion:</strong>  </p>
<ul>
<li>For simple usage, use glog</li>
<li>Structured, use logrus</li>
<li>Need high performance, zap is best choice.</li>
</ul>
<h3 id="glog"><a href="#glog" class="headerlink" title="glog"></a>glog</h3><p>format when writing logs <code>&lt;header&gt;] &lt;message&gt;</code>, header has below format.<br><code>Lmmdd hh:mm:ss.uuuuuu threadid file:line</code></p>
<ul>
<li>L: log level, I(INFO), W(WARNING), E(ERROR), F(FATAL))</li>
<li>mmdd hh:mm:ss.uuuuuu time of log</li>
<li>threadid: thread id</li>
<li>file:line: file trigger the log</li>
</ul>
<p><strong>Log format Example</strong><br><code>I0715 13:28:17.923715   31920 main.go:14] hello message</code></p>
<p><strong>API</strong>  </p>
<ul>
<li>glog.Flush()</li>
<li>glog.Info()&#x2F;glog.Infof()&#x2F;glog.Infoln()</li>
<li>glog.Warning()&#x2F;glog.Warningf()&#x2F;glog.Warningln()</li>
<li>glog.Error()&#x2F;glog.Errorf()&#x2F;glog.Errorln()</li>
<li>glog.Fatal()&#x2F;glog.Fatalf()&#x2F;glog.Fatalln(), note os.Exit() when Fatalx() called.</li>
</ul>
<p><strong>NOTE</strong></p>
<ul>
<li><p><strong>glog.Infof(), glog.Errorf(), glog.Warningf() will auto added <code>\n</code> at last if user not set</strong></p>
</li>
<li><p>glog saves different log level to different files, but low log file contains high log as well, say INFO log files has ERROR log as well!!!</p>
</li>
<li><p>glog.Info&#x2F;Warning&#x2F;Error&#x2F;Fatal always writes log to file, no switch to turn it on&#x2F;off</p>
</li>
<li><p>use glog.V() and pass -v flag to control whether or not to write log to Info file, <strong>as V only provides <code>Infof()</code>, that means, it’s INFO log!!!, so do NOT use it for error, warning, trace logs!!!</strong></p>
</li>
<li><p>By default, glog saves logs to &#x2F;tmp, <code>change it to your path with -log_dir</code></p>
</li>
<li><p>By default, glog does not print log to std, change it <code>to stdio instead of file with -logtostderr</code></p>
</li>
<li><p>Need both std and file, <code>use -alsologtostderr as well as -log_dir</code></p>
</li>
<li><p><font color='red'><strong>must put it at main(): flag.Parse()</strong></font></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># log to /var/log dir, make sure it exists</span></span><br><span class="line">$ go run main.go  -log_dir=/var/log</span><br><span class="line"></span><br><span class="line"><span class="comment"># you can you see, for each start(as time pid is different), glog will create 4 logs files!!!</span></span><br><span class="line"><span class="comment"># 20210727-062649.9900--&gt;date: 2021 year 07.27  time:06.26.49  pid: 9900</span></span><br><span class="line">$ <span class="built_in">ls</span> /var/log</span><br><span class="line">g.centos.root.log.INFO.20210727-062649.9900 (named: &lt;program name&gt;.&lt;hostname&gt;.&lt;user name&gt;.<span class="built_in">log</span>.&lt;severity level&gt;.&lt;<span class="built_in">date</span>&gt;.&lt;time&gt;.&lt;pid&gt;)</span><br><span class="line">$ <span class="built_in">cat</span> g.centos.root.log.INFO.20210727-062649.9900</span><br><span class="line">I1115 09:52:34.216494   29618 g.go:36] hello</span><br><span class="line"><span class="built_in">date</span>  time              pid   file:line] <span class="variable">$msg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># log to stderr</span></span><br><span class="line">$ go run main.go -logtostderr</span><br></pre></td></tr></table></figure>


<p><strong>Sample code</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;flag&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/golang/glog&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    flag.Parse()</span><br><span class="line">    <span class="keyword">defer</span> glog.Flush()</span><br><span class="line"></span><br><span class="line">    glog.Info(<span class="string">&quot;This is info message&quot;</span>)</span><br><span class="line">    glog.Infof(<span class="string">&quot;This is info message: %v&quot;</span>, <span class="number">12345</span>)</span><br><span class="line">    glog.Infoln(<span class="string">&quot;This is info message:&quot;</span>, <span class="number">12345</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>V style</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;flag&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/golang/glog&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    flag.Parse()</span><br><span class="line">    <span class="keyword">defer</span> glog.Flush()</span><br><span class="line">    <span class="comment">// log only print when set -v equal or larger than 2</span></span><br><span class="line">    <span class="comment">// $ go run g.log -v 2, the number of level can be range from 0-int32!</span></span><br><span class="line">    <span class="comment">// but most of time we use 0--5</span></span><br><span class="line">    <span class="keyword">if</span> glog.V(<span class="number">2</span>) &#123;</span><br><span class="line">        glog.Info(<span class="string">&quot;Starting transaction...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    glog.V(<span class="number">2</span>).Infof(<span class="string">&quot;Processed elements %d&quot;</span>, <span class="number">10</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="logrus"><a href="#logrus" class="headerlink" title="logrus"></a>logrus</h3><p><strong>log Format</strong><br><code>$level[0000] message $field=$value $field=$value</code><br><code>INFO[0000] A walrus appears                              animal=walrus</code></p>
<p><strong>API</strong>  </p>
<ul>
<li>log.Trace(“Something very low level.”)</li>
<li>log.Debug(“Useful debugging information.”)</li>
<li>log.Info(“Something noteworthy happened!”)</li>
<li>log.Warn(“You should probably take a look at this.”)</li>
<li>log.Error(“Something failed but I’m not quitting.”)</li>
<li>log.Fatal(“Bye.”) &#x2F;&#x2F; Calls os.Exit(1) after logging</li>
<li>log.Panic(“I’m bailing.”) &#x2F;&#x2F; Calls panic() after logging</li>
</ul>
<p><strong>Sample code</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main                                                                    </span><br><span class="line">                                                                                </span><br><span class="line"><span class="keyword">import</span> (                                                                        </span><br><span class="line">    <span class="string">&quot;os&quot;</span>                                                                        </span><br><span class="line">                                                                                </span><br><span class="line">    log <span class="string">&quot;github.com/sirupsen/logrus&quot;</span>                                            </span><br><span class="line">)                                                                               </span><br><span class="line">                                                                                </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;                                                                   </span><br><span class="line">    <span class="comment">// Log as JSON instead of the default ASCII formatter.                      </span></span><br><span class="line">    <span class="comment">//log.SetFormatter(&amp;log.JSONFormatter&#123;&#125;)                                    </span></span><br><span class="line">                                                                                </span><br><span class="line">    <span class="comment">// Output to stdout instead of the default stderr                           </span></span><br><span class="line">    <span class="comment">// Can be any io.Writer, see below for File example                         </span></span><br><span class="line">    <span class="comment">// log.SetOutput(os.Stdout)                                                 </span></span><br><span class="line">                                                                                </span><br><span class="line">    <span class="comment">// You could set this to any `io.Writer` such as a file                     </span></span><br><span class="line">    file, err := os.OpenFile(<span class="string">&quot;logrus.log&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="number">0666</span>)</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;                                                             </span><br><span class="line">        log.SetOutput(file)                                                     </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;                                                                    </span><br><span class="line">        log.Info(<span class="string">&quot;Failed to log to file, using default stderr&quot;</span>)                 </span><br><span class="line">    &#125;                                                                           </span><br><span class="line">                                                                                </span><br><span class="line">    log.WithFields(log.Fields&#123;                                                  </span><br><span class="line">        <span class="string">&quot;animal&quot;</span>: <span class="string">&quot;walrus&quot;</span>,                                                     </span><br><span class="line">    &#125;).Info(<span class="string">&quot;A walrus appears&quot;</span>)                                                 </span><br><span class="line">&#125;                                                                               </span><br></pre></td></tr></table></figure>

<h2 id="gopsutil"><a href="#gopsutil" class="headerlink" title="gopsutil"></a>gopsutil</h2><p>In most monitor system, we need to get some info about the system, like CPU, memory, disk, net, process etc, gopsutil provides better API to support these, you do NOT need to deal with OS related files or API, gopsutil handles this for you, its supports get info about below aspects.</p>
<ul>
<li>cpu</li>
<li>disk</li>
<li>docker</li>
<li>host</li>
<li>load</li>
<li>mem</li>
<li>net</li>
<li>process</li>
<li>winservices</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/shirou/gopsutil/v3/mem&quot;</span></span><br><span class="line">    <span class="comment">// &quot;github.com/shirou/gopsutil/mem&quot;  // to use v2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    v, _ := mem.VirtualMemory()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// almost every return value is a struct</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Total: %v, Free:%v, UsedPercent:%f%%\n&quot;</span>, v.Total, v.Free, v.UsedPercent)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// convert to JSON. String() is also implemented</span></span><br><span class="line">    fmt.Println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>More details, please refer to <a href="https://pkg.go.dev/github.com/shirou/gopsutil">gopsutil</a></p>
<h2 id="file-ops"><a href="#file-ops" class="headerlink" title="file ops"></a>file ops</h2><p>As <code>os</code> package provides basic function to operation file system, it still have more work for user to do,that’s why <a href="https://github.com/spf13/afero">afero</a> comes in, it gives a lot of very powerful possibilities.</p>
<h3 id="afero"><a href="#afero" class="headerlink" title="afero"></a>afero</h3><p>Afero is a filesystem framework providing a simple, uniform and universal API interacting with any filesystem, as an abstraction layer providing interfaces, types and methods, it provides significant improvements over using the os package alone, most notably the ability to create mock and testing filesystems without relying on the disk.</p>
<p>It is <strong>suitable for use in any situation where you would consider using the OS package as it provides an additional abstraction</strong> that makes it easy to use a memory backed file system during testing. It also adds support for the http filesystem for full interoperability.</p>
<p><strong>File System Methods Available:</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Chmod(name <span class="type">string</span>, mode os.FileMode) : <span class="type">error</span></span><br><span class="line">Chown(name <span class="type">string</span>, uid, gid <span class="type">int</span>) : <span class="type">error</span></span><br><span class="line">Chtimes(name <span class="type">string</span>, atime time.Time, mtime time.Time) : <span class="type">error</span></span><br><span class="line">Create(name <span class="type">string</span>) : File, <span class="type">error</span></span><br><span class="line">Mkdir(name <span class="type">string</span>, perm os.FileMode) : <span class="type">error</span></span><br><span class="line">MkdirAll(path <span class="type">string</span>, perm os.FileMode) : <span class="type">error</span></span><br><span class="line">Name() : <span class="type">string</span></span><br><span class="line">Open(name <span class="type">string</span>) : File, <span class="type">error</span></span><br><span class="line">OpenFile(name <span class="type">string</span>, flag <span class="type">int</span>, perm os.FileMode) : File, <span class="type">error</span></span><br><span class="line">Remove(name <span class="type">string</span>) : <span class="type">error</span></span><br><span class="line">RemoveAll(path <span class="type">string</span>) : <span class="type">error</span></span><br><span class="line">Rename(oldname, newname <span class="type">string</span>) : <span class="type">error</span></span><br><span class="line">Stat(name <span class="type">string</span>) : os.FileInfo, <span class="type">error</span></span><br></pre></td></tr></table></figure>

<p><strong>File Interfaces and Methods Available:</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">io.Closer</span><br><span class="line">io.Reader</span><br><span class="line">io.ReaderAt</span><br><span class="line">io.Seeker</span><br><span class="line">io.Writer</span><br><span class="line">io.WriterAt</span><br><span class="line"></span><br><span class="line">Name() : <span class="type">string</span></span><br><span class="line">Readdir(count <span class="type">int</span>) : []os.FileInfo, <span class="type">error</span></span><br><span class="line">Readdirnames(n <span class="type">int</span>) : []<span class="type">string</span>, <span class="type">error</span></span><br><span class="line">Stat() : os.FileInfo, <span class="type">error</span></span><br><span class="line">Sync() : <span class="type">error</span></span><br><span class="line">Truncate(size <span class="type">int64</span>) : <span class="type">error</span></span><br><span class="line">WriteString(s <span class="type">string</span>) : ret <span class="type">int</span>, err <span class="type">error</span></span><br></pre></td></tr></table></figure>

<p><strong>Utilities</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">DirExists(path <span class="type">string</span>) (<span class="type">bool</span>, <span class="type">error</span>)</span><br><span class="line">Exists(path <span class="type">string</span>) (<span class="type">bool</span>, <span class="type">error</span>)</span><br><span class="line">FileContainsBytes(filename <span class="type">string</span>, subslice []<span class="type">byte</span>) (<span class="type">bool</span>, <span class="type">error</span>)</span><br><span class="line">GetTempDir(subPath <span class="type">string</span>) <span class="type">string</span></span><br><span class="line">IsDir(path <span class="type">string</span>) (<span class="type">bool</span>, <span class="type">error</span>)</span><br><span class="line">IsEmpty(path <span class="type">string</span>) (<span class="type">bool</span>, <span class="type">error</span>)</span><br><span class="line">ReadDir(dirname <span class="type">string</span>) ([]os.FileInfo, <span class="type">error</span>)</span><br><span class="line">ReadFile(filename <span class="type">string</span>) ([]<span class="type">byte</span>, <span class="type">error</span>)</span><br><span class="line">SafeWriteReader(path <span class="type">string</span>, r io.Reader) (err <span class="type">error</span>)</span><br><span class="line">TempDir(dir, prefix <span class="type">string</span>) (name <span class="type">string</span>, err <span class="type">error</span>)</span><br><span class="line">TempFile(dir, prefix <span class="type">string</span>) (f File, err <span class="type">error</span>)</span><br><span class="line">Walk(root <span class="type">string</span>, walkFn filepath.WalkFunc) <span class="type">error</span></span><br><span class="line">WriteFile(filename <span class="type">string</span>, data []<span class="type">byte</span>, perm os.FileMode) <span class="type">error</span></span><br><span class="line">WriteReader(path <span class="type">string</span>, r io.Reader) (err <span class="type">error</span>)</span><br></pre></td></tr></table></figure>

<p><strong>Declare a backend</strong><br>The backend can be In memory, native OS system, readonly etc</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/spf13/afero&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AppFs = afero.NewMemMapFs()</span><br><span class="line"><span class="comment">//OR</span></span><br><span class="line"><span class="keyword">var</span> AppFs = afero.NewOsFs()</span><br><span class="line"><span class="comment">//OR</span></span><br><span class="line"><span class="keyword">var</span> AppFs = afero.NewReadOnlyFs(afero.NewOsFs())</span><br></pre></td></tr></table></figure>

<h2 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h2><p>There are lots of pkgs to develop CLI, here only list some of them.</p>
<ul>
<li><a href="https://pkg.go.dev/flag">flag</a>: simple, standard lib, not support subcommand</li>
<li><a href="https://github.com/spf13/pflag">pflag</a>: implementing POSIX&#x2F;GNU-style –flags</li>
<li><a href="https://github.com/jessevdk/go-flags">go-flags</a>: This library provides similar functionality to the builtin flag library of go, but provides much more functionality and nicer formatting.</li>
<li><a href="https://github.com/urfave/cli">urfave&#x2F;cli</a>: popular one</li>
<li><a href="https://github.com/spf13/cobra">spf13&#x2F;cobra</a>: more powerful, used by k8s, docker etc</li>
</ul>
<p><strong>Suggestion</strong>  </p>
<ul>
<li>very simple use, no subcommand needed, less options, use flag</li>
<li>simple use, lots of options, use go-flags</li>
<li>complex command line cobra</li>
</ul>
<h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;flag&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// flag.int returns the var which is used to access parsed value</span></span><br><span class="line"><span class="keyword">var</span> cliName = flag.String(<span class="string">&quot;yourname&quot;</span>, <span class="string">&quot;nick&quot;</span>, <span class="string">&quot;Input Your Name&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> cliAge = flag.Int(<span class="string">&quot;yourage&quot;</span>, <span class="number">28</span>, <span class="string">&quot;Input Your Age&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> cliGender = flag.String(<span class="string">&quot;yourgender&quot;</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;Input Your Gender&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cliFlag <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// IntVar uses an existing var</span></span><br><span class="line">    flag.IntVar(&amp;cliFlag, <span class="string">&quot;flagname&quot;</span>, <span class="number">1234</span>, <span class="string">&quot;Just for demo&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// start parsing from os.Args[1:], os.Args[0] is the app name</span></span><br><span class="line">    flag.Parse()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// print parsed value</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;name=&quot;</span>, *cliName)</span><br><span class="line">    fmt.Println(<span class="string">&quot;age=&quot;</span>, *cliAge)</span><br><span class="line">    fmt.Println(<span class="string">&quot;gender=&quot;</span>, *cliGender)</span><br><span class="line">    fmt.Println(<span class="string">&quot;flagname=&quot;</span>, cliFlag)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="go-flags"><a href="#go-flags" class="headerlink" title="go-flags"></a>go-flags</h3><p>Package flags provides an extensive command line option parser. The flags package is similar in functionality to the go builtin flag package but provides more options and uses reflection to provide a convenient and succinct way of specifying command line options.</p>
<p>Supported features:</p>
<ul>
<li>Options with short names (-v)                                                 </li>
<li>Options with long names (–verbose)                                           </li>
<li>Options with and without arguments (bool v.s. other type)                     </li>
<li>Options with <code>optional arguments and default values</code>                            </li>
<li>Multiple option groups each containing a set of options                       </li>
<li>Generate and print well-formatted help message                                </li>
<li>Passing remaining command line arguments after – (optional)                  </li>
<li>Ignoring unknown command line options (optional)                              </li>
<li>Supports -I&#x2F;usr&#x2F;include -I&#x3D;&#x2F;usr&#x2F;include -I &#x2F;usr&#x2F;include option argument specification</li>
<li>Supports multiple short options -aux                                          </li>
<li>Supports all primitive go types (string, int{8..64}, uint{8..64}, float)      </li>
<li>Supports same option multiple times (can store in slice or last option counts)</li>
<li>Supports maps                                                                 </li>
<li>Supports function callbacks                                                   </li>
<li>Supports namespaces for (nested) option groups</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line">    gflags <span class="string">&quot;github.com/jessevdk/go-flags&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> opts <span class="keyword">struct</span> &#123;</span><br><span class="line">        <span class="comment">// Slice of bool will append &#x27;true&#x27; each time the option</span></span><br><span class="line">        <span class="comment">// is encountered (can be set multiple times, like -vvv)</span></span><br><span class="line">        Verbose []<span class="type">bool</span> <span class="string">`short:&quot;v&quot; long:&quot;verbose&quot; description:&quot;Show verbose debug information&quot;`</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Example of automatic marshalling to desired type (uint)</span></span><br><span class="line">        Offset <span class="type">uint</span> <span class="string">`long:&quot;offset&quot; description:&quot;Offset&quot;`</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Example of a callback, called each time the option is found.</span></span><br><span class="line">        Call <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>)</span></span> <span class="string">`short:&quot;c&quot; description:&quot;Call phone number&quot;`</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Example of a required flag</span></span><br><span class="line">        Name <span class="type">string</span> <span class="string">`short:&quot;n&quot; long:&quot;name&quot; description:&quot;A name&quot; required:&quot;true&quot;`</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Example of a flag restricted to a pre-defined set of strings</span></span><br><span class="line">        Animal <span class="type">string</span> <span class="string">`long:&quot;animal&quot; choice:&quot;cat&quot; choice:&quot;dog&quot;`</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Example of a value name</span></span><br><span class="line">        File <span class="type">string</span> <span class="string">`short:&quot;f&quot; long:&quot;file&quot; description:&quot;A file&quot; value-name:&quot;FILE&quot;`</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Example of a slice of strings</span></span><br><span class="line">        StringSlice []<span class="type">string</span> <span class="string">`short:&quot;s&quot; description:&quot;A slice of strings&quot;`</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Example of a map</span></span><br><span class="line">        IntMap <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span> <span class="string">`long:&quot;intmap&quot; description:&quot;A map from string to int&quot;`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Callback which will invoke callto:&lt;argument&gt; to call a number.</span></span><br><span class="line">    <span class="comment">// Note that this works just on OS X (and probably only with</span></span><br><span class="line">    <span class="comment">// Skype) but it shows the idea.</span></span><br><span class="line">    opts.Call = <span class="function"><span class="keyword">func</span><span class="params">(num <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">        cmd := exec.Command(<span class="string">&quot;open&quot;</span>, <span class="string">&quot;callto:&quot;</span>+num)</span><br><span class="line">        cmd.Start()</span><br><span class="line">        cmd.Process.Release()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    parser := gflags.NewParser(&amp;opts, gflags.Default|gflags.IgnoreUnknown|gflags.PassAfterNonOption)</span><br><span class="line">    parser.Usage = <span class="string">&quot;start \n\n start a pod&quot;</span></span><br><span class="line">    args, err := parser.Parse()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        os.Exit(<span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Verbosity: %v\n&quot;</span>, opts.Verbose)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Offset: %d\n&quot;</span>, opts.Offset)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Name: %s\n&quot;</span>, opts.Name)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Animal: %s\n&quot;</span>, opts.Animal)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;StringSlice: %v\n&quot;</span>, opts.StringSlice)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;IntMap: [a:%v b:%v]\n&quot;</span>, opts.IntMap[<span class="string">&quot;a&quot;</span>], opts.IntMap[<span class="string">&quot;b&quot;</span>])</span><br><span class="line">    <span class="comment">// after parse, args is changed, parased ones are removed</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Remaining args: %s\n&quot;</span>, strings.Join(args, <span class="string">&quot; &quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="spf13-x2F-cobra"><a href="#spf13-x2F-cobra" class="headerlink" title="spf13&#x2F;cobra"></a>spf13&#x2F;cobra</h3><p>Cobra is a library providing a simple interface to create powerful modern CLI interfaces similar to git &amp; go tools.</p>
<p><strong>Cobra provides:</strong></p>
<ul>
<li>Easy subcommand-based CLIs: app server, app fetch, etc.</li>
<li>Fully POSIX-compliant flags (including short &amp; long versions)</li>
<li>Nested subcommands</li>
<li>Global, local and cascading flags</li>
<li>Easy generation of applications &amp; commands with <strong>cobra init appname &amp; cobra add cmdname</strong></li>
<li>Intelligent suggestions (app srver… did you mean app server?)</li>
<li>Automatic help generation for commands and flags</li>
<li>Automatic help flag recognition of -h, –help, etc.</li>
<li>Automatically generated shell autocomplete for your application (bash, zsh, fish, powershell)</li>
<li>Automatically generated man pages for your application</li>
</ul>
<p>Cobra is built on a structure of commands, arguments &amp; flags.<br>Commands represent actions, Args are things and Flags are modifiers for those actions.like this <code>git clone URL --bare</code></p>
<p>How to write CLI by cobra</p>
<ul>
<li><a href="https://github.com/spf13/cobra/blob/master/user_guide.md">user guide</a></li>
<li><a href="https://github.com/spf13/cobra/blob/master/cobra/README.md">auto generate cmd</a></li>
<li><a href="https://towardsdatascience.com/how-to-create-a-cli-in-golang-with-cobra-d729641c7177">example using cobra</a></li>
</ul>
<h2 id="Go-cron-scheduling"><a href="#Go-cron-scheduling" class="headerlink" title="Go cron scheduling"></a>Go cron scheduling</h2><p><a href="https://github.com/go-co-op/gocron">go cron</a> is a Golang job scheduling package which lets you run Go functions periodically at pre-determined interval using a simple, human-friendly syntax.</p>
<p><img src="https://user-images.githubusercontent.com/19351306/110375142-2ba88680-8017-11eb-80c3-554cc746b165.png" alt="design"></p>
<ul>
<li>Scheduler: The scheduler tracks all the jobs assigned to it and makes sure they are passed to the executor when ready to be run. The scheduler is able to manage overall aspects of job behavior like limiting how many jobs are running at one time.</li>
<li>Job: The job is simply aware of the task (go function) it’s provided and is therefore only able to perform actions related to that task like preventing itself from overruning a previous task that is taking a long time.</li>
<li>Executor: The executor, as it’s name suggests, is simply responsible for calling the task (go function) that the job hands to it when sent by the scheduler.</li>
</ul>
<p><strong>Tags</strong><br>Jobs may have arbitrary tags added which can be useful when tracking many jobs. The scheduler supports both enforcing tags to be unique and when not unique, running all jobs with a given tag.</p>
<p><strong>Interval supports</strong></p>
<ul>
<li>milliseconds</li>
<li>seconds</li>
<li>minutes</li>
<li>hours</li>
<li>days</li>
<li>weeks</li>
<li>months</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := gocron.NewScheduler(time.UTC)</span><br><span class="line">s.TagsUnique()</span><br><span class="line"></span><br><span class="line">_, _ = s.Every(<span class="number">1</span>).Week().Tag(<span class="string">&quot;foo&quot;</span>).Do(task)</span><br><span class="line">_, err := s.Every(<span class="number">1</span>).Week().Tag(<span class="string">&quot;foo&quot;</span>).Do(task)</span><br><span class="line"><span class="comment">// error!!!</span></span><br><span class="line"></span><br><span class="line">s := gocron.NewScheduler(time.UTC)</span><br><span class="line"></span><br><span class="line">s.Every(<span class="number">2</span>).Day().Tag(<span class="string">&quot;tag&quot;</span>).At(<span class="string">&quot;10:00&quot;</span>).Do(task)</span><br><span class="line">s.Every(<span class="number">1</span>).Minute().Tag(<span class="string">&quot;tag&quot;</span>).Do(task)</span><br><span class="line">s.RunByTag(<span class="string">&quot;tag&quot;</span>)</span><br><span class="line"><span class="comment">// both jobs will run</span></span><br></pre></td></tr></table></figure>

<p><strong>Example</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := gocron.NewScheduler(time.UTC)</span><br><span class="line"></span><br><span class="line">s.Every(<span class="number">5</span>).Seconds().Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// strings parse to duration</span></span><br><span class="line">s.Every(<span class="string">&quot;5m&quot;</span>).Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">s.Every(<span class="number">5</span>).Days().Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">task = <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123; ... &#125;</span><br><span class="line"><span class="comment">// cron expressions supported</span></span><br><span class="line">s.Cron(<span class="string">&quot;*/1 * * * *&quot;</span>).Do(task) <span class="comment">// every minute</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// you can start running the scheduler in two different ways:</span></span><br><span class="line"><span class="comment">// starts the scheduler asynchronously</span></span><br><span class="line">s.StartAsync()</span><br><span class="line"><span class="comment">//OR</span></span><br><span class="line"><span class="comment">//starts the scheduler and blocks current execution path </span></span><br><span class="line">s.StartBlocking()</span><br></pre></td></tr></table></figure>

<p>More examples, refer to <a href="https://pkg.go.dev/github.com/go-co-op/gocron#pkg-examples">cron example</a></p>
<p><strong>Note:</strong><br>Q: I’ve removed my job from the scheduler, but how can I stop a long-running job that has already been triggered?<br>A: We recommend using a means of canceling your job, e.g. a context.WithCancel().</p>
<h2 id="HTTP-Server"><a href="#HTTP-Server" class="headerlink" title="HTTP Server"></a>HTTP Server</h2><h3 id="Restful-API-server"><a href="#Restful-API-server" class="headerlink" title="Restful API server"></a>Restful API server</h3><p>Here we only list pure restful api server package, which is small, fast.</p>
<ul>
<li><a href="https://github.com/bmizerany/pat">pat</a></li>
<li><a href="https://github.com/gorilla/mux">gorilla&#x2F;mux</a></li>
<li><a href="https://github.com/julienschmidt/httprouter">httrouter</a></li>
<li><a href="https://github.com/go-chi/chi">go-chi&#x2F;chi</a></li>
</ul>
<p>Let’s focus on mux which is powerful and used in many production</p>
<h4 id="gorilla-x2F-mux"><a href="#gorilla-x2F-mux" class="headerlink" title="gorilla&#x2F;mux"></a>gorilla&#x2F;mux</h4><p><strong>Paths can have variables. They are defined using the format {name} or {name:pattern}. If a regular expression pattern is not defined, the matched variable will be anything until the next slash.</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r := mux.NewRouter()</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/products/&#123;key&#125;&quot;</span>, ProductHandler)</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/articles/&#123;category&#125;/&quot;</span>, ArticlesCategoryHandler)</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/articles/&#123;category&#125;/&#123;id:[0-9]+&#125;&quot;</span>, ArticleHandler)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ArticlesCategoryHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    vars := mux.Vars(r)</span><br><span class="line">    w.WriteHeader(http.StatusOK)</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;Category: %v\n&quot;</span>, vars[<span class="string">&quot;category&quot;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr style="border:1px solid gray"> </hr>

<p><strong>Routes can also be restricted</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r := mux.NewRouter()</span><br><span class="line"></span><br><span class="line"><span class="comment">// restrict a particular route</span></span><br><span class="line">r.HandleFunc(<span class="string">&quot;/products&quot;</span>, ProductsHandler).Host(<span class="string">&quot;www.example.com&quot;</span>).Methods(<span class="string">&quot;GET&quot;</span>).Schemes(<span class="string">&quot;http&quot;</span>)</span><br></pre></td></tr></table></figure>
<hr style="border:1px solid gray"> </hr>

<p><strong>Group several routes that share the same requirements</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r := mux.NewRouter()</span><br><span class="line">s := r.PathPrefix(<span class="string">&quot;/products&quot;</span>).Subrouter()</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;/products/&quot;</span></span><br><span class="line">s.HandleFunc(<span class="string">&quot;/&quot;</span>, ProductsHandler)</span><br><span class="line"><span class="comment">// &quot;/products/&#123;key&#125;/&quot;</span></span><br><span class="line">s.HandleFunc(<span class="string">&quot;/&#123;key&#125;/&quot;</span>, ProductHandler)</span><br><span class="line"><span class="comment">// &quot;/products/&#123;key&#125;/details&quot;</span></span><br><span class="line">s.HandleFunc(<span class="string">&quot;/&#123;key&#125;/details&quot;</span>, ProductDetailsHandler)</span><br></pre></td></tr></table></figure>
<hr style="border:1px solid gray"> </hr>

<p><strong>Graceful shutdown</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;flag&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;os/signal&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wait time.Duration</span><br><span class="line">    flag.DurationVar(&amp;wait, <span class="string">&quot;graceful-timeout&quot;</span>, time.Second*<span class="number">15</span>, <span class="string">&quot;the duration for which the server gracefully wait for existing connections to finish - e.g. 15s or 1m&quot;</span>)</span><br><span class="line">    flag.Parse()</span><br><span class="line"></span><br><span class="line">    r := mux.NewRouter()</span><br><span class="line">    <span class="comment">// Add your routes as needed</span></span><br><span class="line"></span><br><span class="line">    srv := &amp;http.Server&#123;</span><br><span class="line">        Addr: <span class="string">&quot;0.0.0.0:8000&quot;</span>,</span><br><span class="line">        <span class="comment">// Good practice to set timeouts to avoid Slowloris attacks.</span></span><br><span class="line">        WriteTimeout: time.Second * <span class="number">15</span>,</span><br><span class="line">        ReadTimeout:  time.Second * <span class="number">15</span>,</span><br><span class="line">        IdleTimeout:  time.Second * <span class="number">60</span>,</span><br><span class="line">        Handler:      r, <span class="comment">// Pass our instance of gorilla/mux in.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Run our server in a goroutine so that it doesn&#x27;t block.</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := srv.ListenAndServe(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Println(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// We&#x27;ll accept graceful shutdowns when quit via SIGINT (Ctrl+C)</span></span><br><span class="line">    <span class="comment">// SIGKILL, SIGQUIT or SIGTERM (Ctrl+/) will not be caught.</span></span><br><span class="line">    signal.Notify(c, os.Interrupt)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Block until we receive our signal.</span></span><br><span class="line">    &lt;-c</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a deadline to wait for.</span></span><br><span class="line">    ctx, cancel := context.WithTimeout(context.Background(), wait)</span><br><span class="line">    <span class="keyword">defer</span> cancel()</span><br><span class="line">    <span class="comment">// Doesn&#x27;t block if no connections, but will otherwise wait</span></span><br><span class="line">    <span class="comment">// until the timeout deadline.</span></span><br><span class="line">    srv.Shutdown(ctx)</span><br><span class="line">    <span class="comment">// Optionally, you could run srv.Shutdown in a goroutine and block on</span></span><br><span class="line">    <span class="comment">// &lt;-ctx.Done() if your application should wait for other services</span></span><br><span class="line">    <span class="comment">// to finalize based on context cancellation.</span></span><br><span class="line">    log.Println(<span class="string">&quot;shutting down&quot;</span>)</span><br><span class="line">    os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>show all routes call walk of the router</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r.Walk(<span class="function"><span class="keyword">func</span><span class="params">(route *mux.Route, router *mux.Router, ancestors []*mux.Route)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">     pathTemplate, err := route.GetPathTemplate()</span><br><span class="line">     <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">         fmt.Println(<span class="string">&quot;ROUTE:&quot;</span>, pathTemplate)</span><br><span class="line">     &#125;</span><br><span class="line">     queriesTemplates, err := route.GetQueriesTemplates()</span><br><span class="line">     <span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(queriesTemplates) != <span class="number">0</span> &#123;</span><br><span class="line">         fmt.Println(<span class="string">&quot;Queries templates:&quot;</span>, strings.Join(queriesTemplates, <span class="string">&quot;,&quot;</span>))</span><br><span class="line">     &#125;</span><br><span class="line">     methods, err := route.GetMethods()</span><br><span class="line">     <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">         fmt.Println(<span class="string">&quot;Methods:&quot;</span>, strings.Join(methods, <span class="string">&quot;,&quot;</span>))</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         fmt.Println(<span class="string">&quot;Methods: Any&quot;</span>)</span><br><span class="line">     &#125;</span><br><span class="line">     fmt.Println()</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<p><strong>NOTE</strong></p>
<ul>
<li>Routes are tested in the order they were added to the router. If two routes match, the first one wins</li>
<li>each handler must declare like this <code>func HandlerXXX(w http.ResponseWriter, r *http.Request) &#123;&#125;</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">YourHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// no content-type, default text/plain</span></span><br><span class="line">    w.WriteHeader(http.StatusOK)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Gorialla\n&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  w.Header().Set(&quot;Content-type&quot;, &quot;application/json&quot;)</span></span><br><span class="line">    <span class="comment">//  p := struct &#123;</span></span><br><span class="line">    <span class="comment">//     Name string</span></span><br><span class="line">    <span class="comment">//  &#125;&#123;</span></span><br><span class="line">    <span class="comment">//      Name: &quot;gorilla&quot;,</span></span><br><span class="line">    <span class="comment">//  &#125;</span></span><br><span class="line">    <span class="comment">//  w.WriteHeader(http.StatusOK)</span></span><br><span class="line">    <span class="comment">//  json.NewEncoder(w).Encode(&amp;p)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := mux.NewRouter()</span><br><span class="line">    <span class="comment">// Routes consist of a path and a handler function.</span></span><br><span class="line">    r.HandleFunc(<span class="string">&quot;/&quot;</span>, YourHandler)</span><br><span class="line">    </span><br><span class="line">    srv := &amp;http.Server&#123;</span><br><span class="line">        Addr: <span class="string">&quot;0.0.0.0:8000&quot;</span>,</span><br><span class="line">        <span class="comment">// Good practice to set timeouts to avoid Slowloris attacks.</span></span><br><span class="line">        WriteTimeout: time.Second * <span class="number">15</span>,</span><br><span class="line">        ReadTimeout:  time.Second * <span class="number">15</span>,</span><br><span class="line">        IdleTimeout:  time.Second * <span class="number">60</span>,</span><br><span class="line">        Handler:      r, <span class="comment">// Pass our instance of gorilla/mux in.</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> err := srv.ListenAndServe(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="yaml-vs-json-vs-toml"><a href="#yaml-vs-json-vs-toml" class="headerlink" title="yaml vs json vs toml"></a>yaml vs json vs toml</h2><p>TOML shares traits with other file formats used for application configuration and data serialization, such as YAML and JSON. <code>TOML and JSON both are simple and use ubiquitous data types</code>, making them easy to code for or parse with machines. <code>TOML and YAML both emphasize human readability features</code>, like comments that make it easier to understand the purpose of a given line. <code>TOML differs in combining these, allowing comments (unlike JSON) but preserving simplicity (unlike YAML)</code>.</p>
<p><strong>spec</strong></p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/YAML">yaml wiki</a></li>
<li><a href="https://github.com/yaml/yaml-spec">yaml spec</a></li>
<li><a href="https://cyun.tech/encode-yaml/">yaml example</a></li>
<li><a href="https://datatracker.ietf.org/doc/html/rfc8259">json spec</a></li>
<li><a href="https://github.com/toml-lang/toml">toml spec</a></li>
</ul>
<p><strong>Golang support</strong></p>
<ul>
<li><a href="https://github.com/go-yaml/yaml">Yaml</a></li>
<li><a href="https://github.com/BurntSushi/toml/">BurntSushi&#x2F;toml</a><blockquote>
<p>This Go package provides a reflection interface similar to Go’s standard library json and xml packages. This package also supports the encoding.TextUnmarshaler and encoding.TextMarshaler interfaces so that you can define custom data representations, it supports tag as well like json   <strong>type b struct{Port string <code>toml:&quot;port,omitempty&quot;&#125;</code></strong></p>
</blockquote>
</li>
<li><a href="https://github.com/spf13/viper">Viper</a><ul>
<li>Find, load, and unmarshal a configuration file in <strong>JSON, TOML, YAML, HCL, INI, envfile or Java properties formats</strong>.</li>
<li>Provide a mechanism to set default values for your different configuration options.</li>
<li>Provide a mechanism to set override values for options specified through command line flags.</li>
<li>Provide an alias system to easily rename parameters without breaking existing code.</li>
<li>Make it easy to tell the difference between when a user has provided a command line or config file which is the same as the default.</li>
</ul>
</li>
</ul>
<h3 id="toml-decode"><a href="#toml-decode" class="headerlink" title="toml decode"></a>toml decode</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> config tomlConfig</span><br><span class="line"><span class="comment">// one line of code to parse toml file!!!</span></span><br><span class="line"><span class="keyword">if</span> _, err := toml.DecodeFile(<span class="string">&quot;example.toml&quot;</span>, &amp;config); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is a TOML document. Boom.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">title</span> = <span class="string">&quot;TOML Example&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[owner]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;Tom Preston-Werner&quot;</span></span><br><span class="line"><span class="attr">organization</span> = <span class="string">&quot;GitHub&quot;</span></span><br><span class="line"><span class="attr">bio</span> = <span class="string">&quot;GitHub Cofounder &amp; CEO\nLikes tater tots and beer.&quot;</span></span><br><span class="line"><span class="attr">dob</span> = <span class="number">1979</span>-<span class="number">05</span>-<span class="number">27</span>T07:<span class="number">32</span>:<span class="number">00</span>Z <span class="comment"># First class dates? Why not?</span></span><br><span class="line"></span><br><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">server</span> = <span class="string">&quot;192.168.1.1&quot;</span></span><br><span class="line"><span class="attr">ports</span> = [ <span class="number">8001</span>, <span class="number">8001</span>, <span class="number">8002</span> ]</span><br><span class="line"><span class="attr">connection_max</span> = <span class="number">5000</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[servers]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># You can indent as you please. Tabs or spaces. TOML don&#x27;t care.</span></span><br><span class="line">  <span class="section">[servers.alpha]</span></span><br><span class="line">  <span class="attr">ip</span> = <span class="string">&quot;10.0.0.1&quot;</span></span><br><span class="line">  <span class="attr">dc</span> = <span class="string">&quot;eqdc10&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[servers.beta]</span></span><br><span class="line">  <span class="attr">ip</span> = <span class="string">&quot;10.0.0.2&quot;</span></span><br><span class="line">  <span class="attr">dc</span> = <span class="string">&quot;eqdc10&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[clients]</span></span><br><span class="line"><span class="attr">data</span> = [ [<span class="string">&quot;gamma&quot;</span>, <span class="string">&quot;delta&quot;</span>], [<span class="number">1</span>, <span class="number">2</span>] ] <span class="comment"># just an update to make sure parsers support it</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Line breaks are OK when inside arrays</span></span><br><span class="line"><span class="attr">hosts</span> = [</span><br><span class="line">  <span class="string">&quot;alpha&quot;</span>,</span><br><span class="line">  <span class="string">&quot;omega&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/BurntSushi/toml&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> tomlConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">    Title   <span class="type">string</span></span><br><span class="line">    Owner   ownerInfo</span><br><span class="line">    DB      database <span class="string">`toml:&quot;database&quot;`</span> <span class="comment">// key in toml</span></span><br><span class="line">    Servers <span class="keyword">map</span>[<span class="type">string</span>]server</span><br><span class="line">    Clients clients</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ownerInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Org  <span class="type">string</span> <span class="string">`toml:&quot;organization&quot;`</span></span><br><span class="line">    Bio  <span class="type">string</span></span><br><span class="line">    DOB  time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> database <span class="keyword">struct</span> &#123;</span><br><span class="line">    Server  <span class="type">string</span></span><br><span class="line">    Ports   []<span class="type">int</span></span><br><span class="line">    ConnMax <span class="type">int</span> <span class="string">`toml:&quot;connection_max&quot;`</span></span><br><span class="line">    Enabled <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span> &#123;</span><br><span class="line">    IP <span class="type">string</span></span><br><span class="line">    DC <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> clients <span class="keyword">struct</span> &#123;</span><br><span class="line">    Data  [][]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    Hosts []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> config tomlConfig</span><br><span class="line">    <span class="keyword">if</span> _, err := toml.DecodeFile(<span class="string">&quot;example.toml&quot;</span>, &amp;config); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Title: %s\n&quot;</span>, config.Title)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Owner: %s (%s, %s), Born: %s\n&quot;</span>,</span><br><span class="line">        config.Owner.Name, config.Owner.Org, config.Owner.Bio,</span><br><span class="line">        config.Owner.DOB)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Database: %s %v (Max conn. %d), Enabled? %v\n&quot;</span>,</span><br><span class="line">        config.DB.Server, config.DB.Ports, config.DB.ConnMax,</span><br><span class="line">        config.DB.Enabled)</span><br><span class="line">    <span class="keyword">for</span> serverName, server := <span class="keyword">range</span> config.Servers &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Server: %s (%s, %s)\n&quot;</span>, serverName, server.IP, server.DC)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Client data: %v\n&quot;</span>, config.Clients.Data)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Client hosts: %v\n&quot;</span>, config.Clients.Hosts)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/BurntSushi/toml&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">        Age <span class="type">int</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> outputs Config</span><br><span class="line">    outputs.Age = <span class="number">10</span> <span class="comment">// default value if user not set</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> _, err := toml.Decode(<span class="string">&quot;&quot;</span>, &amp;outputs); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;decode from encoded buffer(toml to struct): %+v\n&quot;</span>, outputs)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>decode from encoded buffer(toml to struct): &#123;Age:10&#125;
</code></pre>
<h3 id="toml-encode"><a href="#toml-encode" class="headerlink" title="toml encode"></a>toml encode</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dst can be bytes.Buffer or File who implements io.Writer</span></span><br><span class="line">e := toml.NewEncoder(dst)</span><br><span class="line"><span class="comment">// inputs are struct which will be encode as toml as output to dst</span></span><br><span class="line">err := e.Encode(inputs)</span><br></pre></td></tr></table></figure>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/BurntSushi/toml&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">        Age        <span class="type">int</span></span><br><span class="line">        Cats       []<span class="type">string</span></span><br><span class="line">        Pi         <span class="type">float64</span></span><br><span class="line">        Perfection []<span class="type">int</span></span><br><span class="line">        DOB        time.Time</span><br><span class="line">        Ipaddress  net.IP</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> inputs = Config&#123;</span><br><span class="line">        <span class="number">13</span>,</span><br><span class="line">        []<span class="type">string</span>&#123;<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>&#125;,</span><br><span class="line">        <span class="number">3.145</span>,</span><br><span class="line">        []<span class="type">int</span>&#123;<span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">        time.Now(),</span><br><span class="line">        net.ParseIP(<span class="string">&quot;192.168.59.254&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// log to console!!!</span></span><br><span class="line">    log.SetOutput(os.Stdout)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> firstBuffer bytes.Buffer</span><br><span class="line">    <span class="comment">// Encoder can be file or bytes.Buffer who implements io.Writer</span></span><br><span class="line">    e := toml.NewEncoder(&amp;firstBuffer)</span><br><span class="line">    err := e.Encode(inputs)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// encode inputs to firstBuffer</span></span><br><span class="line">        log.Println(<span class="string">&quot;encoded first buffer toml format:&quot;</span>, firstBuffer.String())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> outputs Config</span><br><span class="line">    <span class="comment">// decode from firstBuffer to outputs</span></span><br><span class="line">    <span class="keyword">if</span> _, err := toml.Decode(firstBuffer.String(), &amp;outputs); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Printf(<span class="string">&quot;Could not decode:\n-----\n%s\n-----\n&quot;</span>,</span><br><span class="line">            firstBuffer.String())</span><br><span class="line">        log.Fatalln(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.Printf(<span class="string">&quot;decode from encoded buffer(toml to struct): %+v&quot;</span>, outputs)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// could test each value individually, but I&#x27;m lazy</span></span><br><span class="line">    <span class="keyword">var</span> secondBuffer bytes.Buffer</span><br><span class="line">    e2 := toml.NewEncoder(&amp;secondBuffer)</span><br><span class="line">    <span class="comment">// encode outputs to secondBuffer</span></span><br><span class="line">    err = e2.Encode(outputs)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.Println(<span class="string">&quot;encoded second buffer toml format:&quot;</span>, firstBuffer.String())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> firstBuffer.String() != secondBuffer.String() &#123;</span><br><span class="line">        log.Printf(</span><br><span class="line">            firstBuffer.String(),</span><br><span class="line">            <span class="string">&quot;\n\n is not identical to\n\n&quot;</span>,</span><br><span class="line">            secondBuffer.String())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>2022/07/01 17:23:30 encoded first buffer toml format: Age = 13
Cats = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]
Pi = 3.145
Perfection = [11, 2, 3, 4]
DOB = 2022-07-01T17:23:30.172328016+08:00
Ipaddress = &quot;192.168.59.254&quot;

2022/07/01 17:23:30 decode from encoded buffer(toml to struct): &#123;Age:13 Cats:[one two three] Pi:3.145 Perfection:[11 2 3 4] DOB:2022-07-01 17:23:30.172328016 +0800 CST Ipaddress:192.168.59.254&#125;
2022/07/01 17:23:30 encoded second buffer toml format: Age = 13
Cats = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]
Pi = 3.145
Perfection = [11, 2, 3, 4]
DOB = 2022-07-01T17:23:30.172328016+08:00
Ipaddress = &quot;192.168.59.254&quot;
</code></pre>
<h2 id="bit"><a href="#bit" class="headerlink" title="bit"></a>bit</h2><p><code>Only support 64 bits [0, 63].</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;k8s.io/kubernetes/pkg/kubelet/cm/topologymanager/bitmask&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    bm1 := bitmask.NewEmptyBitMask()</span><br><span class="line">    bm1.Add(<span class="number">0</span>)</span><br><span class="line">    bm1.Add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> bm1.IsEmpty() &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;bm1 is empty&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;bm1(0 as the first bit):&quot;</span>, bm1)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bm2 := bitmask.NewEmptyBitMask()</span><br><span class="line">    bm2.Add(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> bm1.IsEqual(bm2) &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;bm1 and bm2 are equal&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;bm1 and bm2 are not equal&quot;</span>)</span><br><span class="line">        fmt.Println(<span class="string">&quot;bm1:&quot;</span>, bm1)</span><br><span class="line">        fmt.Println(<span class="string">&quot;bm2:&quot;</span>, bm2)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bm1.Or(bm2)</span><br><span class="line">    fmt.Println(<span class="string">&quot;bm1=bm1|bm2:&quot;</span>, bm1)</span><br><span class="line"></span><br><span class="line">    bm1.Remove(<span class="number">3</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;bm1.Remove(3):&quot;</span>, bm1)</span><br><span class="line">    fmt.Println(<span class="string">&quot;bm1.GetBits:&quot;</span>, bm1.GetBits())</span><br><span class="line">    <span class="comment">// IterateBitMasks iterates all possible masks from a list of bits, issuing a callback on each mask.</span></span><br><span class="line">    <span class="string">&quot;    // [0, 1, 2], 瀵规瘡涓彲鑳界殑缁勫悎锛?璋冪敤func!!!\</span></span><br><span class="line"><span class="string">    &quot;</span>    <span class="comment">// 1, 10, 100   璁剧疆涓€浣?    &quot;    // 11, 101, 110 璁剧疆涓や綅</span></span><br><span class="line">    <span class="string">&quot;    // 111          璁剧疆涓変綅</span></span><br><span class="line"><span class="string">    bitmask.IterateBitMasks(bm1.GetBits(), func(mask bitmask.BitMask) &#123;</span></span><br><span class="line"><span class="string">        fmt.Println(mask)</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">bm1(0 as the first bit): 0111</span><br><span class="line">bm1 and bm2 are not equal</span><br><span class="line">bm1: 0111</span><br><span class="line">bm2: 1000</span><br><span class="line">bm1=bm1|bm2: 1111</span><br><span class="line">bm1.Remove(3): 0111</span><br><span class="line">bm1.GetBits: [0 1 2]</span><br><span class="line">01</span><br><span class="line">10</span><br><span class="line">100</span><br><span class="line">11</span><br><span class="line">0101</span><br><span class="line">0110</span><br><span class="line">0111</span><br></pre></td></tr></table></figure>

<h2 id="encoding-protobuffer"><a href="#encoding-protobuffer" class="headerlink" title="encoding(protobuffer)"></a>encoding(protobuffer)</h2><p>A very simple “address book” application that can read and write people’s contact details to and from a file. Each person in the address book has a name, an ID, an email address, and a contact phone number.</p>
<p>How do you <code>serialize and retrieve structured data</code> like this? There are a few ways to solve this problem:</p>
<ul>
<li>Use <code>gobs to serialize Go data structures</code>. This is a good solution in a Go-specific environment, but it doesn’t work well if you need to share data with applications written for other platforms.</li>
<li>You can <code>invent an ad-hoc way to encode the data items into a single string</code> such as encoding 4 ints as “12:3:-23:67”. This is a simple and flexible approach, although it does require writing one-off encoding and parsing code, and the parsing imposes a small run-time cost. This works best for encoding very simple data.</li>
<li><code>Serialize the data to XML(or json)</code>. This approach can be very attractive since XML is (sort of) human readable and there are binding libraries for lots of languages. This can be a good choice if you want to share data with other applications&#x2F;projects. However, XML is notoriously space intensive, and encoding&#x2F;decoding it can impose a huge performance penalty on applications. Also, navigating an XML DOM tree is considerably more complicated than navigating simple fields in a class normally would be.</li>
</ul>
<p><code>Protocol buffers are the flexible, efficient, automated solution to solve exactly this problem</code>. With protocol buffers, you write a .proto description of the data structure you wish to store. From that, the protocol buffer compiler creates a class that implements automatic encoding and parsing of the protocol buffer data with an efficient binary format. The generated class provides getters and setters for the fields that make up a protocol buffer and takes care of the details of reading and writing the protocol buffer as a unit. Importantly, the protocol buffer format supports the idea of extending the format over time in such a way that the code can still read data encoded with the old format.</p>
<p><strong><font color='red'>Rules for compatibility</font></strong><br>Sooner or later after you release the code that uses your protocol buffer, you will undoubtedly want to “improve” the protocol buffer’s definition. If you want your <code>new buffers to be backwards-compatible, and your old buffers to be forward-compatible</code> and you almost certainly do want this then there are some rules you need to follow. In the new version of the protocol buffer:</p>
<ul>
<li>you <strong>must not change the tag numbers of any existing fields</strong>.</li>
<li>you may delete fields.</li>
<li>you may add new fields but you must use fresh tag numbers (i.e. tag numbers that were never used in this protocol buffer, not even by deleted fields).</li>
</ul>
<p>If you follow these rules, <code>old code will happily read new messages and simply ignore any new fields</code>. To the old code, singular fields that were deleted will simply have their default value, and deleted repeated fields will be empty. <code>New code will also transparently read old messages</code>.</p>
<p>However, keep in mind that <code>new fields will not be present in old messages</code>, so you will need to do something reasonable with the default value. A type-specific default value is used: for strings, the default value is the empty string. For booleans, the default value is false. For numeric types, the default value is zero.</p>
<h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><p><a href="https://developers.google.com/protocol-buffers/docs/style">style guide</a> gives suggestion how to write xx.proto file when define message and rpc, here is a summary from that.</p>
<p><strong>All files should be ordered in the following manner:</strong></p>
<ul>
<li>License header (if applicable)</li>
<li>File overview</li>
<li>Syntax(proto2 or proto3)</li>
<li>Package(used by proto to import message defined in other package)</li>
<li>Imports (sorted)(imports other protos)</li>
<li>File options(like option go_package &#x3D; “github.com&#x2F;xvrzhao&#x2F;pb-demo&#x2F;proto&#x2F;article”;)</li>
<li>Everything else<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax=&quot;proto3&quot;;</span><br><span class="line">package hello;</span><br><span class="line">import &quot;store/name.proto&quot;</span><br><span class="line">option go_package = &quot;github.com/jason/hello&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>Message and field names</strong><br>Use CamelCase (with an initial capital) for message names for example, SongServerRequest. Use underscore_separated_names for field names (including oneof field and extension names) for example, song_name</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">message SongServerRequest &#123;</span><br><span class="line">  optional string song_name = 1; // for go, generated code is SongName!!!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Repeated fields</strong><br>Use pluralized names for repeated fields.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repeated string keys = 1;</span><br></pre></td></tr></table></figure>

<p><strong>Enums</strong><br>Use CamelCase (with an initial capital) for enum type names and CAPITALS_WITH_UNDERSCORES for value names:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum FooBar &#123;</span><br><span class="line">  FOO_BAR_UNSPECIFIED = 0;</span><br><span class="line">  FOO_BAR_FIRST_VALUE = 1;</span><br><span class="line">  FOO_BAR_SECOND_VALUE = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Services</strong><br>Use CamelCase (with an initial capital) for both the service name and any RPC method names:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service FooService &#123;</span><br><span class="line">  rpc GetSomething(GetSomethingRequest) returns (GetSomethingResponse);</span><br><span class="line">  rpc ListSomething(ListSomethingRequest) returns (ListSomethingResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="proto3"><a href="#proto3" class="headerlink" title="proto3"></a>proto3</h3><p><strong>Default values:</strong></p>
<ul>
<li>For strings, the default value is the empty string.</li>
<li>For bytes, the default value is empty bytes.</li>
<li>For bools, the default value is false.</li>
<li>For numeric types, the default value is zero.</li>
<li>For enums, the default value is the first defined enum value, which must be 0.</li>
<li>For message fields, the field is not set. Its exact value is language-dependent. See the generated code guide for details.</li>
</ul>
<p><strong>go references</strong>  </p>
<ul>
<li><a href="https://developers.google.com/protocol-buffers/docs/gotutorial">proto3 go tutorial</a></li>
<li><a href="https://developers.google.com/protocol-buffers/docs/reference/go-generated">proto3 go reference</a></li>
<li><a href="https://pkg.go.dev/google.golang.org/protobuf/proto">go API</a></li>
</ul>
<h4 id="build-proto3-of-go"><a href="#build-proto3-of-go" class="headerlink" title="build proto3 of go"></a>build proto3 of go</h4><p>In order to generate go code, you must have protoc and go plugins installed, here are steps to install them all.</p>
<p><strong>Prerequisite</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget -O ./protoc-3.15.8-linux-x86_64.zip https://github.com/protocolbuffers/protobuf/releases/download/v3.15.8/protoc-3.15.8-linux-x86_64.zip</span><br><span class="line">$ unzip protoc-3.15.8-linux-x86_64.zip -d /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install the protocol compiler plugins for Go using the following commands</span></span><br><span class="line"><span class="comment"># protoc-gen-go: go plugin or gogo/protobuf</span></span><br><span class="line"><span class="comment"># proto-gen-go-grpc: go rpc plugin as protoc-gen-go does not provide it, hence needs this plugin</span></span><br><span class="line">$ go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26</span><br><span class="line">$ go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1 <span class="comment"># this is not needed if no service!!!</span></span><br></pre></td></tr></table></figure>

<p><strong>gogo&#x2F;protobuf</strong><br>gogo&#x2F;protobuf is a fork of golang&#x2F;protobuf with extra code generation features, it provides several plugins for go code generate, <code>pick the right one for use</code></p>
<ul>
<li>protoc-gen-gofast(speed than protoc-gen-go)</li>
<li>protoc-gen-gogofast (same as gofast, but imports gogoprotobuf)</li>
<li>protoc-gen-gogofaster (same as gogofast, without XXX_unrecognized, less pointer fields)</li>
<li>protoc-gen-gogoslick (same as gogofaster, but with generated string, gostring and equal methods)</li>
<li>protoc-gen-gogo (Most Speed and most customization)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># basic way</span></span><br><span class="line">$ go get github.com/gogo/protobuf/protoc-gen-gofast</span><br><span class="line"></span><br><span class="line"><span class="comment"># others install protoc-gen-gogofast, protoc-gen-gogofaster, protoc-gen-gogoslick, protoc-gen-gogo</span></span><br><span class="line">$ go get github.com/gogo/protobuf/proto</span><br><span class="line">$ go get github.com/gogo/protobuf/jsonpb</span><br><span class="line">$ go get github.com/gogo/protobuf/&#123;binary&#125;</span><br><span class="line">$ go get github.com/gogo/protobuf/gogoproto</span><br><span class="line"></span><br><span class="line"><span class="comment"># just use one of them is enough!!!</span></span><br><span class="line">$ protoc --gofast_out=. --gofast_opt=paths=source_relative myproto.proto</span><br><span class="line">$ protoc --gogofast_out=. --gogofast_opt=paths=source_relative myproto.proto</span><br><span class="line">$ protoc --gogofaster_out=. --gogofaster_opt=paths=source_relative myproto.proto</span><br><span class="line">$ protoc --gogoslick_out=. --gogoslick_opt=paths=source_relative myproto.proto</span><br><span class="line"></span><br><span class="line"><span class="comment"># the best one to use!!!</span></span><br><span class="line">$ protoc --gogo_out=. --gogo_opt=paths=source_relative myproto.proto</span><br></pre></td></tr></table></figure>

<p>In order to generate Go code, the <strong>Go package’s import path must be provided for every .proto file</strong>). There are two ways to specify the Go import path:</p>
<ul>
<li><p>by declaring it within the .proto file<br>  <font color='green'>option go_package &#x3D; “example.com&#x2F;project&#x2F;protos&#x2F;fizz”;’</font></p>
</li>
<li><p>by declaring it on the command line when invoking protoc, by passing one or more <code>M$&#123;PROTO_FILE&#125;=$&#123;GO_IMPORT_PATH&#125;</code><br>  <font color='green'>$protoc –go_opt&#x3D;Mprotos&#x2F;buzz.proto&#x3D;example.com&#x2F;project&#x2F;protos&#x2F;fizz protos&#x2F;buzz.proto&#96;</font></p>
</li>
</ul>
<p><strong>compile proto</strong><br><strong>use cases for code generation of Go</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --go_out=. generate go code under this directory</span></span><br><span class="line"><span class="comment"># --go_opt=paths=source_relative generate go code same layout as its proto path under --go_out</span></span><br><span class="line"><span class="comment"># --go_opt=paths=import generate go code with go_package under --go_out</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/home/data/hello</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">cool/ protocols/</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate code in the same directory as its proto</span></span><br><span class="line">$ protoc --go_out=. --go_opt=paths=source_relative protocols/greet.proto</span><br><span class="line">$ protoc --go_out=. --go_opt=paths=source_relative protocols/*.proto</span><br><span class="line">$ <span class="built_in">ls</span> protocols/</span><br><span class="line">greet.pb.go  greet.proto</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate code with same layout as its proto but in different go_out</span></span><br><span class="line">$ protoc --go_out=cool --go_opt=paths=source_relative protocols/greet.proto</span><br><span class="line">$ <span class="built_in">ls</span> cool/protocols/ protocols/</span><br><span class="line">cool/protocols/:</span><br><span class="line">greet.pb.go</span><br><span class="line"></span><br><span class="line">protocols/:</span><br><span class="line">greet.proto</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate code with package layout defined in proto in different go_out</span></span><br><span class="line">$ protoc --go_out=cool --go_opt=paths=import protocols/greet.proto</span><br><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">|-- cool</span><br><span class="line">|   `-- github.com</span><br><span class="line">|       `-- hello</span><br><span class="line">|           `-- runtime</span><br><span class="line">|               `-- protocols</span><br><span class="line">|                   `-- greet</span><br><span class="line">|                       `-- greet.pb.go</span><br><span class="line">`-- protocols</span><br><span class="line">    `-- greet.proto</span><br><span class="line"></span><br><span class="line">$ protoc --go_out=<span class="variable">$GOPATH</span>/src --go_opt=paths=import protocols/greet.proto</span><br><span class="line"></span><br><span class="line"><span class="comment"># as service will create a separate pb file that&#x27;s different with message</span></span><br><span class="line"><span class="comment"># use these option for rpc generation: --go-grpc_out=. --go-grpc_opt=paths=source_relative</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if proto imports other protos, add searching path: -I=other/proto/:.</span></span><br></pre></td></tr></table></figure>

<p><font color='red'>Most used one: put your source at $GOPATH&#x2F;src&#x2F;github.com </font><br><code>$ protoc --go_out=$GOPATH/src/ --go_opt=paths=import --go-grpc_out=$GOPATH/src/ --go-grpc_opt=paths=import protocols/greet.proto</code><br><code>$ protoc --gogo_out=. --gogo_opt=paths=source_relative --go-grpc_out=$GOPATH/src/ --go-grpc_opt=paths=import protocols/greet.proto</code></p>
<p><font color='red'>Most used one for testing</font><br><code>$ protoc --go_out=. --go_opt=paths=source_relative protocols/greet.proto</code><br><code>$ protoc --gogo_out=. --gogo_opt=paths=source_relative protocols/greet.proto</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(base) [root@localhost hello]<span class="comment"># pwd</span></span><br><span class="line">/home/go/src/github.com/hello</span><br><span class="line">(base) [root@localhost hello]<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">|-- protocols</span><br><span class="line">|   `-- greet.proto</span><br><span class="line">`-- runtime</span><br><span class="line">    `-- protocols</span><br><span class="line">        `-- greet</span><br><span class="line">            `-- greet.pb.go</span><br></pre></td></tr></table></figure>



<h4 id="generated-go-code"><a href="#generated-go-code" class="headerlink" title="generated go code"></a>generated go code</h4><p>greet.proto</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line">package greet;</span><br><span class="line">//used by proto itself(independent with different language)</span><br><span class="line">// to prevent naming conflicts between different projects(protos).</span><br><span class="line">// import &quot;google/protobuf/timestamp.proto&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">option go_package = &quot;github.com/hello/runtime/protocols/greet&quot;;</span><br><span class="line">// used by protoc when generate go specific code</span><br><span class="line"></span><br><span class="line">message Person &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">  int32 id = 2;  // Unique ID number for this person.</span><br><span class="line">  string email = 3;</span><br><span class="line"></span><br><span class="line">  enum PhoneType &#123;</span><br><span class="line">    MOBILE = 0;</span><br><span class="line">    HOME = 1;</span><br><span class="line">    WORK = 2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  message PhoneNumber &#123;</span><br><span class="line">    string number = 1;</span><br><span class="line">    PhoneType type = 2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  repeated PhoneNumber phones = 4;</span><br><span class="line"></span><br><span class="line">  google.protobuf.Timestamp last_updated = 5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Our address book file is just one of these.</span><br><span class="line">message AddressBook &#123;</span><br><span class="line">  repeated Person people = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>For nested message, generated go code with its parent as prefix like <code>type Person_PhoneNumber struct</code></p>
<p><code>If a field value isn&#39;t set, a default value is used: zero for numeric types, the empty string for strings, false for bools</code>. For embedded messages, the default value is always the “default instance” or “prototype” of the message, which has none of its fields set. Calling the accessor to get the value of a field which has not been explicitly set always returns that field’s default value.</p>
<p><code>If a field is repeated, the field may be repeated any number of times (including zero</code>). The order of the repeated values will be preserved in the protocol buffer. Think of repeated fields as dynamically sized arrays. </p>
<p>There is <code>no correlation between the Go import path and the package specifier in the .proto file</code>. The latter is only relevant to the protobuf namespace, while the former is only relevant to the Go namespace. Also, there is <code>no correlation between the Go import path and the .proto import path</code>. </p>
<p>The generated Go field names <code>always use camel-case naming</code>, even if the field name in the .proto file uses lower-case with underscores (as it should). Thus, the proto field foo_bar_baz becomes FooBarBaz in Go.</p>
<p><strong>types mapping</strong>  </p>
<table>
<thead>
<tr>
<th>.proto Type</th>
<th>Notes</th>
<th>Go Type</th>
</tr>
</thead>
<tbody><tr>
<td>double</td>
<td></td>
<td>float64</td>
</tr>
<tr>
<td>float</td>
<td></td>
<td>float32</td>
</tr>
<tr>
<td>int32</td>
<td>Uses variable-length encoding. Inefficient for encoding negative numbers if your field is likely to have negative values, use sint32 instead.</td>
<td>int32</td>
</tr>
<tr>
<td>int64</td>
<td>Uses variable-length encoding. Inefficient for encoding negative numbers if your field is likely to have negative values, use sint64 instead.</td>
<td>int64</td>
</tr>
<tr>
<td>uint32</td>
<td>Uses variable-length encoding.</td>
<td>uint32</td>
</tr>
<tr>
<td>uint64</td>
<td>Uses variable-length encoding.</td>
<td>uint64</td>
</tr>
<tr>
<td>sint32</td>
<td>Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s.</td>
<td>int32</td>
</tr>
<tr>
<td>sint64</td>
<td>Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s.</td>
<td>int64</td>
</tr>
<tr>
<td>fixed32</td>
<td>Always four bytes. More efficient than uint32 if values are often greater than 2^28.</td>
<td>uint32</td>
</tr>
<tr>
<td>fixed64</td>
<td>Always eight bytes. More efficient than uint64 if values are often greater than 2^56.</td>
<td>uint64</td>
</tr>
<tr>
<td>sfixed32</td>
<td>Always four bytes.</td>
<td>int32</td>
</tr>
<tr>
<td>sfixed64</td>
<td>Always eight bytes.</td>
<td>int64</td>
</tr>
<tr>
<td>bool</td>
<td></td>
<td>bool</td>
</tr>
<tr>
<td>string</td>
<td>A string must always contain UTF-8 encoded or 7-bit ASCII text, and cannot be longer than 2^32.</td>
<td>string</td>
</tr>
<tr>
<td>bytes</td>
<td>May contain any arbitrary sequence of bytes no longer than 2^32.</td>
<td>[]byte</td>
</tr>
</tbody></table>
<p><strong>singular message field</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">message Baz &#123;</span><br><span class="line">  Bar foo = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&#x3D;&gt;&gt;</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Baz <span class="keyword">struct</span> &#123;</span><br><span class="line">        Foo *Bar <span class="comment">// it&#x27;s pointer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Repeated Fields</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">message Baz &#123;</span><br><span class="line">  repeated Bar foo = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&#x3D;&gt;</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Baz <span class="keyword">struct</span> &#123;</span><br><span class="line">        Foo  []*Bar</span><br><span class="line">&#125;</span><br><span class="line">baz := &amp;Baz&#123;</span><br><span class="line">  Foo: []*Bar&#123;</span><br><span class="line">    &#123;&#125;, <span class="comment">// First element. not &amp;?</span></span><br><span class="line">    &#123;&#125;, <span class="comment">// Second element.</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo := baz.GetFoo() <span class="comment">// foo type is []*Bar.</span></span><br><span class="line">b1 := foo[<span class="number">0</span>] <span class="comment">// b1 type is *Bar, the first element in foo.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Map Fields</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">message Bar &#123;&#125;</span><br><span class="line"></span><br><span class="line">message Baz &#123;</span><br><span class="line">  map&lt;string, Bar&gt; foo = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&#x3D;&gt;</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Baz <span class="keyword">struct</span> &#123;</span><br><span class="line">        Foo <span class="keyword">map</span>[<span class="type">string</span>]*Bar</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Enum</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">message SearchRequest &#123;</span><br><span class="line">  enum Corpus &#123;</span><br><span class="line">    UNIVERSAL = 0;</span><br><span class="line">    WEB = 1;</span><br><span class="line">    IMAGES = 2;</span><br><span class="line">    LOCAL = 3;</span><br><span class="line">    NEWS = 4;</span><br><span class="line">    PRODUCTS = 5;</span><br><span class="line">    VIDEO = 6;</span><br><span class="line">  &#125;</span><br><span class="line">  Corpus corpus = 1;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>&#x3D;&gt;</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SearchRequest_Corpus <span class="type">int32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">        SearchRequest_UNIVERSAL SearchRequest_Corpus = <span class="number">0</span></span><br><span class="line">        SearchRequest_WEB       SearchRequest_Corpus = <span class="number">1</span></span><br><span class="line">        SearchRequest_IMAGES    SearchRequest_Corpus = <span class="number">2</span></span><br><span class="line">        SearchRequest_LOCAL     SearchRequest_Corpus = <span class="number">3</span></span><br><span class="line">        SearchRequest_NEWS      SearchRequest_Corpus = <span class="number">4</span></span><br><span class="line">        SearchRequest_PRODUCTS  SearchRequest_Corpus = <span class="number">5</span></span><br><span class="line">        SearchRequest_VIDEO     SearchRequest_Corpus = <span class="number">6</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="use-generated-code"><a href="#use-generated-code" class="headerlink" title="use generated code"></a>use generated code</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">p := pb.Person&#123;</span><br><span class="line">        Id:    <span class="number">1234</span>,</span><br><span class="line">        Name:  <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">        Email: <span class="string">&quot;jdoe@example.com&quot;</span>,</span><br><span class="line">        Phones: []*pb.Person_PhoneNumber&#123;</span><br><span class="line">                &#123;Number: <span class="string">&quot;555-4321&quot;</span>, Type: pb.Person_HOME&#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// writing message to file(serialized)</span></span><br><span class="line">book := &amp;pb.AddressBook&#123;&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Write the new address book back to disk.</span></span><br><span class="line">out, err := proto.Marshal(book)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(<span class="string">&quot;Failed to encode address book:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := ioutil.WriteFile(fname, out, <span class="number">0644</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(<span class="string">&quot;Failed to write address book:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reading message back to struct</span></span><br><span class="line">in, err := ioutil.ReadFile(fname)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(<span class="string">&quot;Error reading file:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">book := &amp;pb.AddressBook&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := proto.Unmarshal(in, book); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(<span class="string">&quot;Failed to parse address book:&quot;</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="pty"><a href="#pty" class="headerlink" title="pty"></a>pty</h2><p>By default, Unix-style tty (i.e. console) drivers will take input in <code>&quot;cooked mode&quot;</code>. In this mode, it provides a certain amount of command-line editing. The user can type in a line of input, possibly deleting and retyping some of it (but that doesn’t always work) and <strong><code>the program won&#39;t see it until the user hits enter</code>.</strong></p>
<p>In contrast, raw mode sets up the TTY driver to <code>pass every character to the program as it is typed</code>. Programs are <code>started in cooked mode by default and need to enable raw mode</code>. that means in raw mode, ctrl+c, ctrl+\ passed in as well, signal hanler is not called!!!, but in cooked mode, it’s handler is called, hence program exits!!!</p>
<p>Here is example how to enable raw mode in C <a href="https://viewsourcecode.org/snaptoken/kilo/02.enteringRawMode.html">terminal in C</a> which calls ioctl to do this.</p>
<h3 id="go-package"><a href="#go-package" class="headerlink" title="go package"></a>go package</h3><p>Pty is a Go package for using unix pseudo-terminals.<br><code>go get github.com/creack/pty</code></p>
<h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><p><strong>run bash in pty to create a new terminal</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span></span><br><span class="line">    <span class="string">&quot;os/signal&quot;</span></span><br><span class="line">    <span class="string">&quot;syscall&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/creack/pty&quot;</span></span><br><span class="line">    <span class="string">&quot;golang.org/x/term&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// Create arbitrary command.</span></span><br><span class="line">    c := exec.Command(<span class="string">&quot;bash&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start the command with a pty.</span></span><br><span class="line">    <span class="comment">// run the command async(and cmd&#x27;s std set with pty file /dev/pts/x)</span></span><br><span class="line">    ptmx, err := pty.Start(c)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Make sure to close the pty at the end.</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; _ = ptmx.Close() &#125;() <span class="comment">// Best effort.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle pty size.</span></span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// window size change signal</span></span><br><span class="line">    signal.Notify(ch, syscall.SIGWINCH)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">range</span> ch &#123;</span><br><span class="line">            <span class="comment">// window size change, change ptmx to os.Stdin size</span></span><br><span class="line">            <span class="keyword">if</span> err := pty.InheritSize(os.Stdin, ptmx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                log.Printf(<span class="string">&quot;error resizing pty: %s&quot;</span>, err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    ch &lt;- syscall.SIGWINCH                        <span class="comment">// Initial resize.</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; signal.Stop(ch); <span class="built_in">close</span>(ch) &#125;() <span class="comment">// Cleanup signals when done.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set stdin in raw mode, key types is sent to pty directly without cookied</span></span><br><span class="line">    oldState, err := term.MakeRaw(<span class="type">int</span>(os.Stdin.Fd()))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; _ = term.Restore(<span class="type">int</span>(os.Stdin.Fd()), oldState) &#125;() <span class="comment">// Best effort.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copy stdin to the pty and the pty to stdout.</span></span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> The goroutine will keep reading until the next keystroke before returning.</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// io.Copy blocks if no input</span></span><br><span class="line">        <span class="comment">// when run $ ls</span></span><br><span class="line">        <span class="comment">// 1. for each char, l and s Copy from StdIn, then Copy to Stdout</span></span><br><span class="line">        <span class="comment">// 2. if enter is pressed, ptmx gets the full input as cmd.Stdin set with ptmx, so cmd gets the input &#x27;ls&#x27;, runs it and writes output to cmd.Stdout which is ptmx</span></span><br><span class="line">        <span class="comment">// 2. Copy the ls output from ptmx to os.Stdout, so we can see it</span></span><br><span class="line">        _, _ = io.Copy(ptmx, os.Stdin)</span><br><span class="line">        <span class="comment">//ptmx implement Reader/Writer interface</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// blocks if no output from ptmx</span></span><br><span class="line">    _, _ = io.Copy(os.Stdout, ptmx)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := test(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/creack/pty&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// create a command, not run here</span></span><br><span class="line">    c := exec.Command(<span class="string">&quot;grep&quot;</span>, <span class="string">&quot;--color=auto&quot;</span>, <span class="string">&quot;bar&quot;</span>)</span><br><span class="line">    <span class="comment">// Start assigns a pseudo-terminal tty os.File to c.Stdin, c.Stdout,</span></span><br><span class="line">    <span class="comment">// and c.Stderr, calls c.Start, and returns the File of pty(/dev/pts/X)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// set Stdxx of command: c.Stdin = c.Stdout = c.Stderr = os.File(/dev/pts/X)</span></span><br><span class="line">    <span class="comment">// then run command with c.Start()(async), when NO input, grep hangs for input</span></span><br><span class="line">    f, err := pty.Start(c)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// File(/dev/pts/X) of corresponding pty</span></span><br><span class="line">        <span class="comment">// write to /dev/pts/X, like input from user, input to command grep</span></span><br><span class="line">        f.Write([]<span class="type">byte</span>(<span class="string">&quot;foo\n&quot;</span>))</span><br><span class="line">        f.Write([]<span class="type">byte</span>(<span class="string">&quot;bar\n&quot;</span>))</span><br><span class="line">        f.Write([]<span class="type">byte</span>(<span class="string">&quot;baz\n&quot;</span>))</span><br><span class="line">        f.Write([]<span class="type">byte</span>&#123;<span class="number">4</span>&#125;) <span class="comment">// EOT</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// as cmd&#x27;s Stdout set to f, hence grep writes output to file /dev/ptx/X</span></span><br><span class="line">    <span class="comment">// copy output from f(read from /dev/ptx/X) to os.Stdout!!!</span></span><br><span class="line">    io.Copy(os.Stdout, f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<pre><code>foo
bar
baz
</code></pre>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="use-io-pipe-or-channel"><a href="#use-io-pipe-or-channel" class="headerlink" title="use io.pipe or channel?"></a>use io.pipe or channel?</h2><p>It depends on the data that will be transmitted, if data is stream, use io.Pipe, if data is fixed type, use channel, as it’s like datagram!!</p>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://golang.org/pkg/#stdlib">standard library</a></li>
<li><a href="https://pkg.go.dev/">pkg repo</a></li>
</ul>
]]></content>
      <categories>
        <category>go program</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>html-form</title>
    <url>/2020/08/18/html-form/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>An HTML form is used to collect user input. The user input is most often sent to a server for processing.</p>
<span id="more"></span>

<h2 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h2><p>Form always has a &lt;form&gt; element and several input elements and submit button inside this form, when user clicks the submit button, user input is sent to server,  <code>but Form fields(input, select etc)do not necessarily have to appear in a form tag. You can put them anywhere in a page. Such form-less fields cannot be submitted (only a form as a whole can)</code>.</p>
<p>how data is sent depends on form attributes. there are several form attributes</p>
<ul>
<li><p>action:  specify where to send the form-data when submitted.</p>
</li>
<li><p>method:  specify how to send form-data (the form-data is sent to the page specified in the action attribute).The form-data can be sent as <code>URL variables (with method=&quot;get&quot;)</code> or as <code>HTTP post transaction(body)</code> (with method&#x3D;”post”).</p>
<p>  <strong>Get Method Note</strong></p>
<ul>
<li>Appends <code>form-data into the URL in name/value pairs</code></li>
<li>The length of a <code>URL is limited</code> (about 3000 characters)</li>
<li>Never use GET to send sensitive data! (will be visible in the URL)</li>
<li>Useful for form submissions where a user wants to bookmark the result</li>
<li>GET is better for non-secure data, like query strings in Google</li>
</ul>
<p>  <strong>Post Method Note</strong></p>
<ul>
<li>Appends form-data inside the body of the HTTP request (data is not shown in URL)</li>
<li>Has no size limitations</li>
<li>Form submissions with POST cannot be bookmarked</li>
</ul>
</li>
<li><p>enctype: specifies how the form-data should be encoded when submitting it to the server, can  be used only if method&#x3D;”post”. as for ‘get’ it’s encoded with application&#x2F;x-www-form-urlencoded</p>
<ul>
<li>application&#x2F;x-www-form-urlencoded: Default. <code>All characters are encoded</code> before sent (spaces are converted to “+” symbols, and special characters are converted to ASCII HEX values)</li>
<li>multipart&#x2F;form-data: <code>No characters are encoded</code>. This value is required when you are using forms that have a file upload control</li>
<li>text&#x2F;plain: <code>Spaces are converted to &quot;+&quot; symbols</code>, but no special characters are encoded</li>
</ul>
</li>
<li><p>target: Specifies where to display the response that is received after submitting the form. by default a new page</p>
</li>
</ul>
<h2 id="Submit"><a href="#Submit" class="headerlink" title="Submit"></a>Submit</h2><p>After the button is clicked, the ‘submit’ event is triggers, the default submit handler <code>collects all input element with its name and value</code>, encodes them and sends them to server, after gets the response from the server, it <code>opens a new page with response display in that page</code>, this is the default behavior, if you do not like this way, you want to handle the response by yourself, you can overwrite the submit handler, in your own handlers, send the form data by ajax by yourself, something like this.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//with Jquery helper</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">postcode</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">//prevent default</span></span><br><span class="line">  event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    get attr from form</span></span><br><span class="line"><span class="comment">    get all inputs name and value by</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    serialize() URL-encoded(jquery object API) or serializeArray() json format</span></span><br><span class="line"><span class="comment">    this here is Dom element, not Jquery object!!!</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">//convert to jquery object</span></span><br><span class="line">  <span class="keyword">var</span> form = $(<span class="variable language_">this</span>);</span><br><span class="line">  $.<span class="title function_">post</span>(form.<span class="title function_">attr</span>(<span class="string">&#x27;action&#x27;</span>), form.<span class="title function_">serialize</span>(),</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">res, textStatus, jqXHR</span>) &#123;</span><br><span class="line">        <span class="comment">//handler response here</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//get the form by ID, reset submit event</span></span><br><span class="line">$(<span class="string">&#x27;#code-form&#x27;</span>).<span class="title function_">submit</span>(postcode);</span><br></pre></td></tr></table></figure>

<h2 id="File-Upload"><a href="#File-Upload" class="headerlink" title="File Upload"></a>File Upload</h2><p>If form has <code>file input</code>, method must set with <code>post</code> and encode with <code>multipart/form-data</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/upload-profile-pic&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Select your profile picture:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;profile_pic&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btn_upload_profile_pic&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Upload&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Uppy-js"><a href="#Uppy-js" class="headerlink" title="Uppy.js"></a>Uppy.js</h3><p>Use <a href="https://uppy.io/">Uppy.js</a> which is more powerful than form way.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;drag-drop-area&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> uppy = <span class="title class_">Uppy</span>.<span class="title class_">Core</span>(&#123;</span><br><span class="line">  <span class="comment">//lots of option you can set, refer to official site</span></span><br><span class="line">  <span class="attr">id</span>: <span class="string">&quot;uppy&quot;</span>,</span><br><span class="line">  <span class="attr">autoProceed</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">//upload more files</span></span><br><span class="line">  <span class="attr">allowMultipleUploads</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">debug</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">restrictions</span>: &#123;</span><br><span class="line">    <span class="comment">// file limition</span></span><br><span class="line">    <span class="attr">maxFileSize</span>: <span class="number">5000000</span>,</span><br><span class="line">    <span class="attr">minFileSize</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">maxNumberOfFiles</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">minNumberOfFiles</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">allowedFileTypes</span>: [<span class="string">&quot;image/*&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Use Dashboard.</span></span><br><span class="line">uppy.<span class="title function_">use</span>(<span class="title class_">Uppy</span>.<span class="property">Dashboard</span>, &#123;</span><br><span class="line">  <span class="attr">inline</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">570</span>,</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&quot;#drag-drop-area&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//use multipart/form-data encoding</span></span><br><span class="line">  uppy.<span class="title function_">use</span>(<span class="title class_">Uppy</span>.<span class="property">XHRUpload</span>, &#123;</span><br><span class="line">    <span class="attr">endpoint</span>: <span class="string">&#x27;/upload-profile-pic&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="comment">// set the name field that could be used by server</span></span><br><span class="line">    <span class="comment">// like &lt;input name=&#x27;profile_pic&#x27; /&gt;</span></span><br><span class="line">    <span class="attr">formData</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fieldName</span>: <span class="string">&#x27;profile_pic&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">uppy.<span class="title function_">on</span>(<span class="string">&quot;complete&quot;</span>, <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    <span class="string">&quot;Upload complete! We’ve uploaded these files:&quot;</span>,</span><br><span class="line">    result.<span class="property">successful</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>html</category>
        <category>tag</category>
      </categories>
      <tags>
        <tag>form</tag>
      </tags>
  </entry>
  <entry>
    <title>html-websocket</title>
    <url>/2021/09/15/html-websocket/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>WebSocket is a protocol providing full-duplex communication channels over a single TCP connection. The WebSocket protocol was standardized by the IETF as RFC 6455 in 2011, and the WebSocket API in Web IDL is being standardized by the W3C.</p>
<p><code>WebSocket is designed to be implemented in web browsers and web servers, but it can be used by any client or server application</code>. The WebSocket Protocol is an independent TCP-based protocol. <code>Its only relationship to HTTP is that its handshake is interpreted by HTTP servers as an Upgrade request</code>. The WebSocket protocol makes more interaction between a browser and a web server possible, facilitating the real-time data transfer from and to the server. This is made possible by providing a standardized way for the server to send content to the browser without being solicited by the client, and allowing for messages to be passed back and forth while keeping the connection open. In this way, a two-way (bi-directional) ongoing conversation can take place between a browser and the server. The communications are done over TCP port number 80, which is of benefit for those environments which block non-web Internet connections using a firewall. Similar two-way browser-server communications have been achieved in non-standardized ways using stopgap technologies such as Comet.</p>
<span id="more"></span>

<p>The WebSocket protocol specification defines ws and wss as two new uniform resource identifier (URI) schemes that are used for unencrypted and encrypted connections, respectively. Apart from the scheme name and fragment (# is not supported), the rest of the URI components are defined to use URI generic syntax.</p>
<p>WebSockets have to establish a connection to a server for data to flow. WebSockets only <code>establish this connection once by HTTP Method</code>, then all data is sent over this open <code>WS protocol connection(ws as tcp payload)</code>. This means each event being sent takes very little resources from both the server and the client because a new connection never has to be established, and ws protocol is small.</p>
<p>It uses HTTP protocol to setup the connection, then switch to WS protocol for data transmission. actually when lower TCP connection is setup, client sends <code>HTTP method</code> to server, this is handled by websocket, hence the TCP connection is not closed, now client and server can send ws protocl for data transmission)(<code>TCP+ws+payload</code>)</p>
<p><strong>So it’s very useful for server driver event, like to notify update to client(upgrade notification, stock price update etc)</strong></p>
<h1 id="Websocket-event"><a href="#Websocket-event" class="headerlink" title="Websocket event"></a>Websocket event</h1><p>When it comes to Web Socket events there are mainly four events. They are:</p>
<ul>
<li>Open: acts as a handshake between client and server</li>
<li>Message: happens when the server sends some data. Messages can be plain text messages or binary data</li>
<li>Close: This marks the end of communication between server and client.</li>
<li>Error: When an error occurs, when a communication channel is opened then the error event occurs</li>
</ul>
<p><strong>Connectino setup</strong><br>client request</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 192.168.43.135:12345</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Origin: file://</span><br><span class="line">Sec-WebSocket-Version: 13</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36</span><br><span class="line">Accept-Encoding: gzip, deflate, sdch</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4</span><br><span class="line">Sec-WebSocket-Key: bKdPyn3u98cTfZJSh4TNeQ==</span><br><span class="line">Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits </span><br></pre></td></tr></table></figure>

<p>server response</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: 4EaeSCkuOGBy+rjOSJSMV+VMoC0=</span><br><span class="line">WebSocket-Origin: file://</span><br><span class="line">WebSocket-Location: ws://192.168.43.135:12345/ </span><br></pre></td></tr></table></figure>

<p><strong>Data transmission</strong>  </p>
<p>websocket protocol is very short, its header only takes 8 bytes, two import ones</p>
<ul>
<li>Opcode: playload type(text, binary)</li>
<li>Payload length: len of payload</li>
</ul>
<p>server to client  </p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Frame 7: 79 bytes on wire (632 bits), 79 bytes captured (632 bits)</span><br><span class="line">Ethernet II, Src: Vmware_8a:3d:a7 (00:0c:29:8a:3d:a7), Dst: Vmware_c0:00:08 (00:50:56:c0:00:08)</span><br><span class="line">Internet Protocol Version 4, Src: 192.168.43.135, Dst: 192.168.43.1</span><br><span class="line">Transmission Control Protocol, Src Port: 12345, Dst Port: 50999, Seq: 205, Ack: 510, Len: 25</span><br><span class="line">WebSocket</span><br><span class="line">    1... .... = Fin: True</span><br><span class="line">    .000 .... = Reserved: 0x0</span><br><span class="line">    .... 0001 = Opcode: Text (1)</span><br><span class="line">    0... .... = Mask: False</span><br><span class="line">    .001 0111 = Payload length: 23</span><br><span class="line">    Payload</span><br><span class="line">JavaScript Object Notation</span><br><span class="line">Line-based text data</span><br><span class="line">    Welcome, 192.168.43.1 ! </span><br></pre></td></tr></table></figure>

<p>client to server  </p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Frame 9: 72 bytes on wire (576 bits), 72 bytes captured (576 bits)</span><br><span class="line">Ethernet II, Src: Vmware_c0:00:08 (00:50:56:c0:00:08), Dst: Vmware_8a:3d:a7 (00:0c:29:8a:3d:a7)</span><br><span class="line">Internet Protocol Version 4, Src: 192.168.43.1, Dst: 192.168.43.135</span><br><span class="line">Transmission Control Protocol, Src Port: 50999, Dst Port: 12345, Seq: 510, Ack: 230, Len: 18</span><br><span class="line">WebSocket</span><br><span class="line">    1... .... = Fin: True</span><br><span class="line">    .000 .... = Reserved: 0x0</span><br><span class="line">    .... 0001 = Opcode: Text (1)</span><br><span class="line">    1... .... = Mask: True</span><br><span class="line">    .000 1100 = Payload length: 12</span><br><span class="line">    Masking-Key: e17e8eb9</span><br><span class="line">    Masked payload</span><br><span class="line">    Payload</span><br><span class="line">JavaScript Object Notation</span><br><span class="line">Line-based text data</span><br><span class="line">    test message </span><br></pre></td></tr></table></figure>

<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><p><strong>client side in browser you can use other web socket client without browser</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;wss://echo.websocket.org&quot;</span>);</span><br><span class="line"></span><br><span class="line">ws.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params">evt</span>) &#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Connection open ...&quot;</span>); </span><br><span class="line">  ws.<span class="title function_">send</span>(<span class="string">&quot;Hello WebSockets!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;Received Message: &quot;</span> + evt.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// blob(binary)</span></span><br><span class="line">ws.<span class="property">binaryType</span> = <span class="string">&quot;blob&quot;</span>;</span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>.<span class="property">size</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.<span class="title function_">send</span>(<span class="string">&#x27;your message&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ArrayBuffer</span></span><br><span class="line">ws.<span class="property">binaryType</span> = <span class="string">&quot;arraybuffer&quot;</span>;</span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>.<span class="property">byteLength</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.<span class="property">onclose</span> = <span class="keyword">function</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Connection closed.&quot;</span>);</span><br><span class="line">&#125;;    </span><br></pre></td></tr></table></figure>

<p><strong>server side</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// use websocket library to setup a server</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">WebSocketServer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;ws&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// when client </span></span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocketServer</span>(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line"></span><br><span class="line">wss.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span> <span class="title function_">connection</span>(<span class="params">ws</span>) &#123;</span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span> <span class="title function_">incoming</span>(<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;received: %s&#x27;</span>, message);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ws.<span class="title function_">send</span>(<span class="string">&#x27;something&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://github.com/websockets/ws">websocket library</a></li>
<li><a href="https://wiki.wireshark.org/WebSocket">websocket packet wireshark</a></li>
</ul>
]]></content>
      <categories>
        <category>html</category>
        <category>websocket</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>html_jquery</title>
    <url>/2020/07/20/html-jquery/</url>
    <content><![CDATA[<h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><p>jQuery takes a lot of common tasks that require many lines of JavaScript code to accomplish, and wraps them into methods that you can call with a single line of code.</p>
<p>jQuery greatly simplifies JavaScript programming but run it make sure</p>
<ul>
<li>load your script after jquery</li>
<li>runs it when document is ready<span id="more"></span></li>
</ul>
<p><strong>The jQuery library contains the following features:</strong></p>
<ul>
<li>HTML&#x2F;DOM manipulation</li>
<li>CSS manipulation</li>
<li>HTML event methods</li>
<li>Effects and animations</li>
<li>AJAX</li>
<li>Utilities</li>
</ul>
<p><strong>use it on your website</strong><br>Include jQuery from a CDN, like Google</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//$(&quot;p&quot;) select all &lt;p&gt; elements</span></span><br><span class="line">    <span class="comment">//set its click callback!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* if you use raw method, you need to</span></span><br><span class="line"><span class="comment">     * get all elements by document.getElementByTagName(&quot;p&quot;)</span></span><br><span class="line"><span class="comment">     * then iterate each element and set it e.click=</span></span><br><span class="line"><span class="comment">     * jquery method can add event for one or an array based on selector</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    $(<span class="string">&quot;p&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// this set display: none</span></span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">hide</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="syntax"><a href="#syntax" class="headerlink" title="syntax"></a>syntax</h2><p>The jQuery syntax is tailor-made for selecting HTML elements and performing some action on the element(s).</p>
<p>Basic syntax is: $(selector).action()</p>
<ul>
<li>$ sign to define&#x2F;access jQuery</li>
<li>(selector) to “query (or find)” HTML elements</li>
<li>jQuery action() to be performed on the element(s)</li>
</ul>
<p>Examples:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//The optional speed parameter specifies the speed of the hiding/showing, and can take the following values: &quot;slow&quot;, &quot;fast&quot;, or milliseconds</span></span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">hide</span>(<span class="number">1000</span>)  <span class="comment">//hides the current element.</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">hide</span>(<span class="string">&quot;slow&quot;</span>) <span class="comment">//hides all &lt;p&gt; elements slowly</span></span><br><span class="line">$(<span class="string">&quot;.test&quot;</span>).<span class="title function_">hide</span>()   <span class="comment">//hides all elements with class=&quot;test&quot;.</span></span><br><span class="line">$(<span class="string">&quot;#test&quot;</span>).<span class="title function_">hide</span>()   <span class="comment">//hides the element with id=&quot;test&quot;.</span></span><br></pre></td></tr></table></figure>

<h2 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h2><p>It’s based on the existing CSS Selectors, and in addition, it has some own custom selectors <a href="https://www.w3schools.com/cssref/css_selectors.asp">css selector</a></p>
<h2 id="change-effects"><a href="#change-effects" class="headerlink" title="change effects"></a>change effects</h2><p>hide&#x2F;show vs fadeIn&#x2F;fadeOut slideDown&#x2F;slideUp are used to <code>display or hide element with different effects</code>.</p>
<ul>
<li>Fadeout is a function that will change the <code>opacity of an element to 0</code>, time can be a parameter of the function (but also has a default value if unspecified), opposite of fadeIn() that will <code>change opacity to 1</code>.   <ul>
<li>with fdeOut() you see the element from clear to unclear slowly, at last not see it(opacity changes)</li>
</ul>
</li>
<li>Hide function will <code>just set display:none to</code> the element, opposite to show() that will just set display:block.<ul>
<li>With hide(), you see the element from clear to disappear.</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).<span class="title function_">toggle</span>();</span><br><span class="line">  <span class="comment">//$(&quot;p&quot;).toggle(1000); speed</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>With jQuery you can fade an element in and out of visibility.<br>jQuery has the following fade methods:</p>
<ul>
<li>fadeIn()</li>
<li>fadeOut()</li>
<li>fadeToggle()</li>
<li>fadeTo()</li>
</ul>
<p>The jQuery fadeTo() method allows fading to a given opacity (value between 0 and 1)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">fadeToggle</span>();</span><br><span class="line">  $(<span class="string">&quot;#div2&quot;</span>).<span class="title function_">fadeToggle</span>(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;#div3&quot;</span>).<span class="title function_">fadeToggle</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>With jQuery you can create a sliding effect on elements.<br>jQuery has the following slide methods:</p>
<ul>
<li>slideDown()</li>
<li>slideUp()</li>
<li>slideToggle(</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#flip&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#panel&quot;</span>).<span class="title function_">slideToggle</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>The jQuery animate() method is used to create custom animations<br>Only properties containing numeric values!<br>Syntax:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(selector).<span class="title function_">animate</span>(&#123;params&#125;,speed,callback);</span><br></pre></td></tr></table></figure>

<p>The required params parameter defines the CSS properties to be animated</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//The following example demonstrates a simple use of the animate() method; it moves a &lt;div&gt; element to the right, until it has reached a left property of 250px:</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).<span class="title function_">animate</span>(&#123;<span class="attr">left</span>: <span class="string">&#x27;250px&#x27;</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//param defined the result should be from the orginal</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">    <span class="attr">left</span>: <span class="string">&#x27;250px&#x27;</span>,</span><br><span class="line">    <span class="attr">opacity</span>: <span class="string">&#x27;0.5&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&#x27;150px&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="string">&#x27;150px&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">    <span class="attr">left</span>: <span class="string">&#x27;250px&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&#x27;+=150px&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="string">&#x27;+=150px&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> div = $(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  div.<span class="title function_">animate</span>(&#123;<span class="attr">left</span>: <span class="string">&#x27;100px&#x27;</span>&#125;, <span class="string">&quot;slow&quot;</span>);</span><br><span class="line">  div.<span class="title function_">animate</span>(&#123;<span class="attr">fontSize</span>: <span class="string">&#x27;3em&#x27;</span>&#125;, <span class="string">&quot;slow&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>The jQuery stop() method is used to stop an animation or effect(slide) before it is finished.</p>
<p>with all above<br>JavaScript statements are executed line by line. However, with effects, the next line of code can be run even though the effect is not finished. This can create errors.</p>
<p>To prevent this, you can create a callback function.</p>
<p>A callback function is executed after the current effect is finished.</p>
<p>Typical syntax: $(selector).hide(speed,callback);</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).<span class="title function_">hide</span>(<span class="string">&quot;slow&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;The paragraph is now hidden&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="action-Chain"><a href="#action-Chain" class="headerlink" title="action Chain"></a>action Chain</h2><p>There is a technique called chaining, that allows us to run multiple jQuery commands, one after the other, on the same element(s).</p>
<p>Tip: This way, browsers do not have to find the same element(s) more than once.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#p1&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>).<span class="title function_">slideUp</span>(<span class="number">2000</span>).<span class="title function_">slideDown</span>(<span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="element"><a href="#element" class="headerlink" title="element"></a>element</h2><p>Three simple, but useful, jQuery methods for DOM manipulation are:</p>
<ul>
<li>text() - Sets or returns the text content of selected elements</li>
<li>html() - Sets or returns the content of selected elements (including HTML markup)</li>
<li>val() - Sets or returns the value of form fields</li>
</ul>
<h2 id="change-attribute"><a href="#change-attribute" class="headerlink" title="change attribute"></a>change attribute</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//GET</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>($(<span class="string">&quot;#w3s&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;href&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//SET</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#w3s&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;image/2.png&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//SET multiple attr</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#w3s&quot;</span>).<span class="title function_">attr</span>(&#123;</span><br><span class="line">    <span class="string">&quot;href&quot;</span> : <span class="string">&quot;https://www.w3schools.com/jquery/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span> : <span class="string">&quot;W3Schools jQuery Tutorial&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="change-style"><a href="#change-style" class="headerlink" title="change style"></a>change style</h2><p>Query has several methods for CSS manipulation. We will look at the following methods:</p>
<ul>
<li>addClass()    - Adds one or more classes to the selected elements</li>
<li>removeClass() - Removes one or more classes from the selected elements</li>
<li>toggleClass() - Toggles between adding&#x2F;removing classes from the selected elements</li>
<li>css()         - Sets or returns the style attribute</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;row&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//GET</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//SET</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;yellow&quot;</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(&#123;<span class="string">&quot;background-color&quot;</span>: <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;font-size&quot;</span>: <span class="string">&quot;200%&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//also set do this with css</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">width</span>(<span class="number">500</span>).<span class="title function_">height</span>(<span class="number">500</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="add-x2F-del-x2F-replace-element"><a href="#add-x2F-del-x2F-replace-element" class="headerlink" title="add&#x2F;del&#x2F;replace element"></a>add&#x2F;del&#x2F;replace element</h2><p>We will look at four jQuery methods that are used to add new content:</p>
<ul>
<li>append() - Inserts content at the end of the selected elements(as end child)</li>
<li>prepend() - Inserts content at the beginning of the selected elements(as first child)</li>
<li>after() - Inserts content after the selected elements(as siblings)</li>
<li>before() - Inserts content before the selected elements(as siblings)</li>
<li>replaceWith() - replace selected element with new one(element)</li>
<li>html()- replace children of selected element with new child(element)</li>
<li>text()- the content will be seen only as text, text(‘&lt;h1&gt;hello&lt;&#x2F;h1&gt;’), h1 has no meaning!!!</li>
</ul>
<p>Content here can be text or html element!</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;Some appended text.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">appendText</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> txt1 = <span class="string">&quot;&lt;p&gt;Text.&lt;/p&gt;&quot;</span>;               <span class="comment">// Create element with HTML</span></span><br><span class="line">  <span class="keyword">var</span> txt2 = $(<span class="string">&quot;&lt;p&gt;&lt;/p&gt;&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;Text.&quot;</span>);   <span class="comment">// Create with jQuery</span></span><br><span class="line">  <span class="keyword">var</span> txt3 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);  <span class="comment">// Create with DOM</span></span><br><span class="line">  txt3.<span class="property">innerHTML</span> = <span class="string">&quot;Text.&quot;</span>;</span><br><span class="line">  $(<span class="string">&quot;body&quot;</span>).<span class="title function_">append</span>(txt1, txt2, txt3);      <span class="comment">// Append the new elements</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Remove Elements&#x2F;Content</strong></p>
<ul>
<li>remove() - Removes the selected element (and its child elements)</li>
<li>empty() - Removes the child elements from the selected element</li>
</ul>
<p><strong>Filter the Elements to be Removed</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">remove</span>(<span class="string">&quot;.test, .demo&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="parent-x2F-child"><a href="#parent-x2F-child" class="headerlink" title="parent&#x2F;child"></a>parent&#x2F;child</h2><p>The parent() method returns the direct parent element of the selected element.<br>The parents() method returns all ancestor elements of the selected element, all the way up to the document’s root element (&lt;html&gt;).</p>
<p>The children() method returns all direct children of the selected element.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).<span class="title function_">children</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>Sibling</strong></p>
<ul>
<li>siblings()</li>
<li>next()</li>
<li>nextAll()</li>
<li>nextUntil()</li>
<li>prev()</li>
<li>prevAll()</li>
<li>prevUntil()</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;h2&quot;</span>).<span class="title function_">siblings</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;h2&quot;</span>).<span class="title function_">siblings</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>The first(), last(), eq(), filter() and not() Methods</p>
<p>The most basic filtering methods are first(), last() and eq(), which allow you to select a specific element based on its position in a group of elements.</p>
<p>Other filtering methods, like filter() and not() allow you to select elements that match, or do not match, a certain criteria.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).<span class="title function_">first</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//The eq() method returns an element with a specific index number of the selected elements.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//The index numbers start at 0, so the first element will have the index number 0 and not 1. The following example selects the second &lt;p&gt; element (index number 1):</span></span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).<span class="title function_">eq</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//The filter() method lets you specify a criteria. Elements that do not match the criteria are removed from the selection, and those that match will be returned.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//The following example returns all &lt;p&gt; elements with class name &quot;intro&quot;:</span></span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).<span class="title function_">filter</span>(<span class="string">&quot;.intro&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="events"><a href="#events" class="headerlink" title="events"></a>events</h2><p>Jquery provides lots of methods to attach callback for an event like, but all of them are shorthand of $(‘selector’).on() which is low level API. the callback and the default callback runs in this order</p>
<ul>
<li><ol>
<li>jQuery click-handlers</li>
</ol>
</li>
<li><ol start="2">
<li>onclick-handlers</li>
</ol>
</li>
<li><ol start="3">
<li>native&#x2F;default behavior (calling the link, writing it to window.location)</li>
</ol>
</li>
</ul>
<p><strong>but if you call <code>e.preventDefault()</code> in jquery handler, the native&#x2F;default behavior isn’t performed by the browser</strong></p>
<ul>
<li>$(‘selector’).click()</li>
<li>$(‘selector’).hover()</li>
<li>$(‘selector’).change()</li>
<li>$(‘selector’).focus()</li>
<li>$(‘selector’).keyup() etc</li>
<li>$(‘selector’).mousedown() etc</li>
<li>$(‘selector’).submit()</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Stupid way!!!</span></span><br><span class="line"><span class="comment">//iterate each html element and add addEventListener</span></span><br><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//this is html element, not jquery object</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, clickCallback);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// always use this way!!!</span></span><br><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>(clickCallback);</span><br></pre></td></tr></table></figure>

<p>The hover() method takes two functions and is a combination of the mouseenter() and mouseleave() methods.</p>
<p>The first function is executed when the mouse enters the HTML element, and the second function is executed when the mouse leaves the HTML element:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#p1&quot;</span>).<span class="title function_">hover</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;You entered p1!&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Bye! You now leave p1!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>The blur() method attaches an event handler function to an HTML form field.</p>
<p>The function is executed when the form field loses focus:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">blur</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;#ffffff&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>jQuery provides several methods for AJAX functionality.</p>
<p>With the jQuery AJAX methods, you can request text, HTML, XML, or JSON from a remote server using both HTTP Get and HTTP Post - And you can load the external data directly into the selected HTML elements of your web page!</p>
<h3 id="load"><a href="#load" class="headerlink" title="load"></a>load</h3><p>$(selector).load(URL,data,callback);<br>The required URL parameter specifies the URL you wish to load.<br>The optional data parameter specifies a set of query string key&#x2F;value pairs to send along with the request.<br>The optional callback parameter is the name of a function to be executed after the load() method is completed</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>jQuery and AJAX is FUN!!!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>This is some text in a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">load</span>(<span class="string">&quot;demo_test.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">load</span>(<span class="string">&quot;demo_test.txt&quot;</span>, <span class="keyword">function</span>(<span class="params">responseTxt, statusTxt, xhr</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(statusTxt == <span class="string">&quot;success&quot;</span>)</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;External content loaded successfully!&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(statusTxt == <span class="string">&quot;error&quot;</span>)</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;Error: &quot;</span> + xhr.<span class="property">status</span> + <span class="string">&quot;: &quot;</span> + xhr.<span class="property">statusText</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p><strong>$.get(URL,callback)</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $.<span class="title function_">get</span>(<span class="string">&quot;demo_test.asp&quot;</span>, <span class="keyword">function</span>(<span class="params">data, status</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Data: &quot;</span> + data + <span class="string">&quot;\nStatus: &quot;</span> + status);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="post"><a href="#post" class="headerlink" title="post"></a>post</h3><p><strong>$.post(URL,data,callback)</strong><br>The required URL parameter specifies the URL you wish to request.<br>The optional data parameter specifies some data to send along with the request.<br>The optional callback parameter is the name of a function to be executed if the request succeeds.<br>The following example uses the $.post() method to send some data along with the request:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $.<span class="title function_">post</span>(<span class="string">&quot;demo_test_post.asp&quot;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Donald Duck&quot;</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;Duckburg&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span>(<span class="params">data, status</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Data: &quot;</span> + data + <span class="string">&quot;\nStatus: &quot;</span> + status);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="get-json"><a href="#get-json" class="headerlink" title="get json"></a>get json</h3><p><strong>Get Json</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $.<span class="title function_">getJSON</span>(<span class="string">&quot;demo_ajax_json.js&quot;</span>, <span class="keyword">function</span>(<span class="params">data,result</span>)&#123;</span><br><span class="line">    $.<span class="title function_">each</span>(result, <span class="keyword">function</span>(<span class="params">i, field</span>)&#123;</span><br><span class="line">      $(<span class="string">&quot;div&quot;</span>).<span class="title function_">append</span>(field + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//Json.parse(data); No need this as getJSON</span></span><br><span class="line">    <span class="comment">//already parsed the json!!!</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h2><p>In addition, jQuery has a lot lot plugins, with these plugins you can do!!</p>
<ul>
<li>UI like bootstrap (static) not better than</li>
<li>Form validation</li>
<li>Animation</li>
<li>Special effects</li>
</ul>
<h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><ul>
<li><a href="https://www.w3schools.com/jquery/jquery_examples.asp">jquery examples</a></li>
<li><a href="https://htmlcheatsheet.com/jquery/">jquery cheatsheet</a></li>
</ul>
]]></content>
      <categories>
        <category>html</category>
        <category>jquery</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>html_sse</title>
    <url>/2020/08/19/html-sse/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Traditionally, client sends a request to the server to retrieve data; that is, client requests data from the server. With server-sent events(SSE), it’s possible for <code>a server to send new data to client at any time, but only server can send message, one way communication</code>.</p>
<p>Client with <code>http GET method to</code> setup a connection(keep it), server accepts it and keeps the connection as well, later on server sends event to client by this connection, when server sends event, <code>the event is as TCP payload, not http, no http at all for event sending</code>.</p>
<span id="more"></span>
<p><code>SSE is useful for stock price update, message notification</code>. but new way is to use <a href="https://cyun.tech/html-websocket/">websocket</a> for server event</p>
<p>The message(<code>must be UTF-8 encoded</code> when sending by server) has below fields, <code>each takes one line when sending</code>. </p>
<ul>
<li>event(optional)<br>  A string identifying the type of event described. If this is specified, an event will be dispatched on the browser to the listener for the specified event name; the website source code should use addEventListener() to listen for named events. The onmessage handler is called if no event name is specified for a message.</li>
<li>data(optional), can be text or json format. can be multiple such field<br>  The data field for the message. When the EventSource receives multiple consecutive lines that begin with data:, it concatenates them, inserting a newline character between each one. Trailing newlines are removed.</li>
<li>id<br>  The event ID to set the EventSource object’s last event ID value.</li>
</ul>
<p><strong>but on client side, you got the parsed data, an object with below fields mapping to these fields, the name may be different</strong></p>
<h2 id="Client-Side"><a href="#Client-Side" class="headerlink" title="Client Side"></a>Client Side</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// open a connection and keep it, if disconnect, browser will reconnect automatically.</span></span><br><span class="line"><span class="keyword">const</span> evtSource = <span class="keyword">new</span> <span class="title class_">EventSource</span>(<span class="string">&quot;/events&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//only handle event:&quot;ping&quot;, data is always a string(text, json format)</span></span><br><span class="line">evtSource.<span class="title function_">addEventListener</span>(<span class="string">&quot;ping&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> time = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(event.<span class="property">data</span>).<span class="property">time</span>;</span><br><span class="line">  newElement.<span class="property">innerHTML</span> = <span class="string">&quot;ping at &quot;</span> + time;</span><br><span class="line">  eventList.<span class="title function_">appendChild</span>(newElement);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// handle message without type</span></span><br><span class="line">evtSource.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> eventList = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"></span><br><span class="line">  newElement.<span class="property">innerHTML</span> = <span class="string">&quot;message: &quot;</span> + event.<span class="property">data</span>;</span><br><span class="line">  eventList.<span class="title function_">appendChild</span>(newElement);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">evtSource.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="comment">// such as a network timeout or issues pertaining to access control</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;EventSource failed:&quot;</span>, err);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Server-Side-JS"><a href="#Server-Side-JS" class="headerlink" title="Server Side(JS)"></a>Server Side(JS)</h2><p>Events sent by server</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">data: some text</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">data: another message</span><br><span class="line">data: with two lines </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type: userconnect</span><br><span class="line">data: &#123;&quot;username&quot;: &quot;bobby&quot;, &quot;time&quot;: &quot;02:33:48&quot;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $yarn add express-sse</span></span><br><span class="line">sse.<span class="property">js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">SSE</span> = <span class="built_in">require</span>(<span class="string">&#x27;express-sse&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> sse = <span class="keyword">new</span> <span class="title function_">SSE</span>();</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/events&#x27;</span>, sse.<span class="property">init</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//you can see sse in any other file</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sse = <span class="built_in">require</span>(<span class="string">&#x27;./sse&#x27;</span>).<span class="property">sse</span>;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// sse.send(content)</span></span><br><span class="line">  <span class="comment">// sse.send(content, eventName);</span></span><br><span class="line">  <span class="comment">// sse.send(content, eventName, customID);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//send message to all connections!!!!</span></span><br><span class="line">  <span class="comment">//if no sse connection, it does not send at all</span></span><br><span class="line">  sse.<span class="title function_">send</span>(<span class="string">&#x27;jason&#x27;</span>);</span><br><span class="line">  sse.<span class="title function_">send</span>(<span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">  sse.<span class="title function_">send</span>(<span class="number">100</span>);</span><br><span class="line">  sse.<span class="title function_">send</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;jason&quot;</span>&#125;, <span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">10000</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>html</category>
        <category>sse</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>sse</tag>
      </tags>
  </entry>
  <entry>
    <title>http-apache</title>
    <url>/2020/02/11/http-apache/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h1 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h1><p>Apache provides lots of   to user, these modules provide lots of directives you can use in conf file through these, user can modify the behavior of apache like <code>modify request, response header</code> etc.</p>
<p><strong>check enabled modules</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> /etc/apache2/mods-enabled/</span><br><span class="line">access_compat.load  authn_core.load  authz_user.load  deflate.load  filter.load       mpm_prefork.load  php5.load           ssl.conf</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><strong>check available modules</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> /etc/apache2/mods-available/</span><br><span class="line">access_compat.load  authz_core.load       charset_lite.load  file_cache.load           macro.load        proxy_ajp.load       remoteip.load          speling.load</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><strong>enable a mod</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># just add a symbol link in /etc/apache2/mods-enabled/ to  /etc/apache2/mods-available/</span></span><br><span class="line">$ <span class="built_in">ln</span> -s /etc/apache2/mods-available/macro.load /etc/apache2/mods-enabled/</span><br></pre></td></tr></table></figure>

<h1 id="create-web-server-by-python"><a href="#create-web-server-by-python" class="headerlink" title="create web server by python"></a>create web server by python</h1><p>In this case, you can add <code>any header</code> and <code>any body</code> to client, fully controlled by your self.</p>
<p><strong>define your own simple server</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3.5</span></span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> HTTPServer, BaseHTTPRequestHandler</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleHTTPRequestHandler</span>(<span class="title class_ inherited__">BaseHTTPRequestHandler</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">do_GET</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># only add status line, server and date headers</span></span><br><span class="line">    self.send_response(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># add response header by yourself</span></span><br><span class="line">    <span class="comment">#self.send_header(&quot;Content-Length&quot;, &quot;0&quot;)</span></span><br><span class="line">    <span class="comment"># flush the header buffer</span></span><br><span class="line">    self.end_headers()</span><br><span class="line">    self.wfile.write(<span class="string">b&#x27;Hello, world!\n&#x27;</span>)</span><br><span class="line">httpd = HTTPServer((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">8000</span>), SimpleHTTPRequestHandler)</span><br><span class="line">httpd.serve_forever()</span><br></pre></td></tr></table></figure>

<p><strong>use built-in simple server</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> SimpleHTTPRequestHandler</span><br><span class="line"><span class="keyword">from</span> socketserver <span class="keyword">import</span> TCPServer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GetHandler</span>(<span class="title class_ inherited__">SimpleHTTPRequestHandler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_GET</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># static web server, rewrite like above for dynamic</span></span><br><span class="line">        SimpleHTTPRequestHandler.do_GET(self)</span><br><span class="line"></span><br><span class="line">httpd = TCPServer((<span class="string">&quot;&quot;</span>, <span class="number">8000</span>), GetHandler)</span><br><span class="line"></span><br><span class="line">httpd.serve_forever()</span><br></pre></td></tr></table></figure>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="enable-keep-alive"><a href="#enable-keep-alive" class="headerlink" title="enable keep-alive"></a>enable keep-alive</h2><p>edit &#x2F;etc&#x2F;apache2&#x2F;apache2.conf with below</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># KeepAlive: Whether or not to allow persistent connections (more than</span><br><span class="line"># one request per connection). Set to &quot;Off&quot; to deactivate.</span><br><span class="line">#</span><br><span class="line">KeepAlive On</span><br><span class="line"></span><br><span class="line"># MaxKeepAliveRequests: The maximum number of requests to allow</span><br><span class="line"># during a persistent connection. Set to 0 to allow an unlimited amount.</span><br><span class="line"># We recommend you leave this number high, for maximum performance.</span><br><span class="line">#</span><br><span class="line">MaxKeepAliveRequests 100</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># KeepAliveTimeout: Number of seconds to wait for the next request from the</span><br><span class="line"># same client on the same connection. when timeout, apache will close the connection</span><br><span class="line">#</span><br><span class="line">KeepAliveTimeout 500</span><br></pre></td></tr></table></figure>

<h2 id="return-application-x2F-json-for-xx-json-file"><a href="#return-application-x2F-json-for-xx-json-file" class="headerlink" title="return application&#x2F;json for xx.json file"></a>return application&#x2F;json for xx.json file</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddType &#x27;application/json; charset=UTF-8&#x27; .json</span><br></pre></td></tr></table></figure>

<h2 id="modify-response-header"><a href="#modify-response-header" class="headerlink" title="modify response header"></a>modify response header</h2><p>modify header feature is provided by mod_headers.so, first you should enable such module by <mark class="label warning">ln -s /etc/apache2/mods-available/headers.load /etc/apache2/mods-enabled/</mark></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apache.conf</span></span><br><span class="line">Header <span class="built_in">set</span> Host <span class="string">&quot;www.test.com&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>Remember to restart service <mark class="label info">service apache2 restart</mark></p>
<p>more details about </p>
]]></content>
      <categories>
        <category>http</category>
        <category>http server</category>
      </categories>
      <tags>
        <tag>apache</tag>
        <tag>http server</tag>
      </tags>
  </entry>
  <entry>
    <title>http-cdn</title>
    <url>/2022/04/29/http-cdn/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>A content delivery network (CDN) is a group of servers set up in different locations worldwide to provide web content over a wide geographic area much faster.</p>
<p>CDN, also known as “distribution networks,” offers several points of presence (PoP) outside the origin server. This enables websites to better manage traffic by handling user requests more quickly, providing an overall better experience.</p>
<p>In short, you’re using a CDN every time you visit a high-traffic site such as Amazon or catch up with your friends on Facebook. Their data centers keep allows to bring such content much more quickly regardless of the geographic location of individual users or the main website server.</p>
<p>By spreading the delivery systems out over a large area, websites can reduce bandwidth consumption and page load times, shaving precious seconds off the time it takes to handle multiple user requests.</p>
<span id="more"></span>

<h1 id="CND-Inside"><a href="#CND-Inside" class="headerlink" title="CND Inside"></a>CND Inside</h1><h2 id="how-it-works"><a href="#how-it-works" class="headerlink" title="how it works"></a>how it works</h2><p><img src="https://humanwhocodes.com/images/wp-content/uploads/2011/11/cdn2.png" alt="how cnd works"></p>
<p>When the browser makes a <code>DNS request for a domain name that is handled by a CDN</code>, there is a slightly different process than with small, one-IP sites. The server handling DNS requests for the domain name looks at the incoming request to determine the best set of servers to handle it. At it’s simplest, <code>the DNS server does a geographic lookup based on the DNS resolver’s IP address and then returns an IP address for an edge server that is physically closest to that area</code>. </p>
<p>Edge servers are proxy caches that work in a manner similar to the browser caches. When a request comes into an edge server, it first checks the cache to see if the content is present. The cache key is the entire URL including query string (just like in a browser). If the content is in cache and the cache entry hasn’t expired, then the content is served directly from the edge server.</p>
<p>If, on the other hand, the content is not in the cache or the cache entry has expired, then the edge server makes a request to the origin server to retrieve the information. The origin server is the source of truth for content and is capable of serving all of the content that is available on the CDN. When the edge server receives the response from the origin server, it stores the content in cache based on the HTTP headers of the response</p>
<h2 id="why-needs-it"><a href="#why-needs-it" class="headerlink" title="why needs it?"></a>why needs it?</h2><p>To begin, CDNs are networks of servers strategically distributed in many parts of the globe. Each server acts as a content delivery tool and <code>they primarily function to reduce latency—the period it takes for a web page to load in entirety. In other words, CDNs improve one’s browsing experience because they speed things up</code>.</p>
<p>For example, let’s assume your site is hosted by a data center in Washington. When you don’t have a CDN, each of your visitors will have to download all of your website files from Washington. This isn’t a problem if your site visitors are from Vancouver, Pennsylvania, or Maryland. But what if they’re from Australia? Data does travel quickly, but that’s still 9,756 miles!</p>
<p>Simply put, no matter how updated and inventive your hardware is, distance is bound to delay your website’s loading speed for your users who are in distant parts of the world. This is exactly why websites that get good traffic need the technology. CDNs are one solution to retain customers. When you run a business, content delivery is an activity you can’t overlook. Otherwise, you’re only going to lose money.</p>
<h2 id="What-Can-a-CDN-Do"><a href="#What-Can-a-CDN-Do" class="headerlink" title="What Can a CDN Do?"></a>What Can a CDN Do?</h2><p>Modern CDNs can handle numerous IT tasks, helping you to:</p>
<ul>
<li>Improve page load speed</li>
<li>Handle high traffic loads</li>
<li>Block spammers, scrapers and other bad bots</li>
<li>Localize coverage without the cost</li>
<li>Reduce bandwidth consumption</li>
<li>Load balance between multiple servers</li>
<li>Protect your website from DDoS attacks</li>
<li>Secure your application</li>
<li>And more</li>
</ul>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="Which-is-CNAME"><a href="#Which-is-CNAME" class="headerlink" title="Which is CNAME"></a>Which is CNAME</h2><p>A canonical name record (CNAME) is used in the Domain Name System (DNS) to <code>create an alias from one domain name to another domain name</code>, usually used for CND network, <code>you may need to create alias of your origin server at DNS provider</code>, so taht dns lookup for your domain returns <code>CNAME(provided by CDN vendor)</code>, then dns lookup for CNAME will get <code>closer</code> IP(edge server) provided CND provider.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nslookup</span><br><span class="line">&gt; <span class="built_in">set</span> <span class="built_in">type</span>=A</span><br><span class="line">&gt; cyun.tech</span><br><span class="line"></span><br><span class="line"><span class="comment"># check cname</span></span><br><span class="line">&gt; <span class="built_in">set</span> <span class="built_in">type</span>=CNAME</span><br><span class="line">&gt; cyun.tech</span><br><span class="line"></span><br><span class="line"><span class="comment"># check TXT</span></span><br><span class="line">&gt; <span class="built_in">set</span> <span class="built_in">type</span>=TXT</span><br><span class="line">&gt; cyun.tech</span><br><span class="line"></span><br><span class="line"><span class="comment"># check name server</span></span><br><span class="line">&gt; <span class="built_in">set</span> <span class="built_in">type</span>=NS</span><br><span class="line">&gt; cyun.tech</span><br></pre></td></tr></table></figure>

<h2 id="How-to-Enable-CDN-for-your-website"><a href="#How-to-Enable-CDN-for-your-website" class="headerlink" title="How to Enable CDN for your website?"></a>How to Enable CDN for your website?</h2><ol>
<li>login your CDN vendor</li>
<li>enable CDN for your website in CDN console, <code>enter webiste domain and Origin server ip</code> then CDN network can get content from it for each <code>first request.</code></li>
<li><code>update DNS name server in DNS provider</code> with name server provider by CDN vendor, so taht <code>dns lookup for your domain will the edge server</code>.<br>Or</li>
<li><code>Add CNAME(provided by CDN vendor) in your DNS provider</code> to redirect dns lookup to edge server.</li>
</ol>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://www.hostinger.com/tutorials/what-is-cdn">what is cdn</a></li>
</ul>
]]></content>
      <categories>
        <category>http</category>
        <category>cdn</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>cdn</tag>
      </tags>
  </entry>
  <entry>
    <title>http-protocol-connection</title>
    <url>/2019/12/16/http-protocol-connection/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>HTTP mostly relies on TCP for its transport protocol, providing a connection between the client and the server. In its infancy(early stage like http1.0), HTTP used a single model to handle such connections. These connections were short-lived: <code>a new one created each time a request needed sending, and closed(server does) once the answer was sent</code></p>
<p>But in HTTP&#x2F;1.x, there are several models: <code>short-lived connections</code>,<code> persistent connections</code>, and HTTP pipelining(never used in practice, but the foundation of http2.0(pipeline mode)), The persistent-connection model keeps connections opened between successive requests, reducing the time needed to open new connections. The HTTP pipelining model goes one step further, by <code>sending several successive requests without even waiting for an answer</code>, reducing much of the latency in the network.</p>
<p><img src='https://mdn.mozillademos.org/files/13727/HTTP1_x_Connections.png' style="background-color:white"></img></p>
<span id="more"></span>

<h2 id="short-lived-connection"><a href="#short-lived-connection" class="headerlink" title="short-lived connection"></a>short-lived connection</h2><p>The default one in HTTP&#x2F;1.0, is short-lived connections. Each HTTP request is completed on its own connection; this means a TCP handshake happens before each HTTP request and these are serialized.</p>
<p>The TCP handshake itself is time-consuming, but a TCP connection adapts to its load, becoming more efficient with more sustained (or warm) connections. Short-lived connections do not make use of this efficiency feature of TCP, and performance degrades from optimum by persisting to transmit over a new, cold connection.</p>
<p><code>This model is the default model used in HTTP/1.0 (if there is no Connection header, or if its value is set to close). In HTTP/1.1, short-lived model is only used when the Connection header is sent with a value of close.</code></p>
<h2 id="persistent-connection-keep-alive"><a href="#persistent-connection-keep-alive" class="headerlink" title="persistent-connection(keep-alive)"></a>persistent-connection(keep-alive)</h2><p>A persistent connection is one which <code>remains open for a period of time, and can be reused for several request</code>s, saving the need for a new TCP handshake, and utilizing TCP’s performance enhancing capabilities. This connection will <code>not stay open forever: idle connections are closed after some time (a server may use the Keep-Alive header to specify a minimum time the connection should be kept open).</code></p>
<p>Persistent connections also have drawbacks; even when <code>idling they consume server resources</code>, and under heavy load, DoS attacks can be conducted. In such cases, using non-persistent connections, which are closed as soon as they are idle, can provide better performance.</p>
<p><code>In HTTP/1.1, persistence is the default, and the Connection header is not a must(but it is often added as a defensive measure against cases requiring a fallback to HTTP/1.0).</code></p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>If server does not allow keepalive(like apache, can be configed), no matter http1.0 or http1.1, server sends response; then (close the connection)FIN, if server allows keepalive, if client sends Connection header, uses the way that client suggested, if client no preference, by default, http1.0 send FIN(no keepalive), http1.1 not FIN(keepalive).</p>
<p>Improved connection management allows considerable boosting of performance in HTTP. With HTTP&#x2F;1.1 or HTTP&#x2F;1.0, using a persistent connection at least until it becomes idle leads to the best performance.</p>
]]></content>
      <categories>
        <category>http-protocol</category>
        <category>connection</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>keep-alive connection</tag>
      </tags>
  </entry>
  <entry>
    <title>http-protocol-cookie</title>
    <url>/2019/12/13/http-protocol-cookie/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>An HTTP cookie (web cookie, browser cookie) is a small piece of data that a <code>server sends to the user&#39;s web browser</code>. The browser may store it and <code>send it back with the next request to the same server</code>. Typically, it’s used to tell if two requests come from the same browser — keeping a user logged-in, for example. It remembers stateful information for the stateless HTTP protocol.</p>
<span id="more"></span>

<p>Cookies are mainly used for three purposes:</p>
<ul>
<li>Session management<br>Logins, shopping carts, game scores, or anything else the server should remember, stateful.</li>
<li>Personalization<br>User preferences, themes, and other settings</li>
<li>Tracking<br>Recording and analyzing user behavior</li>
</ul>
<p>Note: if you <strong><code>just want to store something in client</code></strong>, use storage APIs, as <strong><code>cookies are sent with every request if valid</code></strong>, so they can worsen performance, Web storage API (<code>localStorage and sessionStorage</code>) and IndexedDB.</p>
<h2 id="Cookie-types"><a href="#Cookie-types" class="headerlink" title="Cookie types"></a>Cookie types</h2><p>An expiration date or duration can be specified, after which the cookie is no longer sent. Additionally, restrictions to a specific domain and path can be set, limiting where the cookie is sent. <code>sent cookie or not depends on uri, domain, path etc</code></p>
<p><strong>session cookie</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/2.0 200 OK</span><br><span class="line">Content-type: text/html</span><br><span class="line">Set-Cookie: yummy_cookie=choco</span><br><span class="line">Set-Cookie: tasty_cookie=strawberry</span><br><span class="line"></span><br><span class="line">[page content]</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /sample_page.html HTTP/2.0</span><br><span class="line">Host: www.example.org</span><br><span class="line">Cookie: yummy_cookie=choco; tasty_cookie=strawberry</span><br></pre></td></tr></table></figure>

<p><strong><code>cookie without Expires or Max-Age is session cookie</code></strong> will be deleted when the client shuts down.</p>
<p><strong>Permanent cookies</strong></p>
<p><code>Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT</code></p>
<p><strong>Secure and HttpOnly</strong></p>
<p>A secure cookie is only sent to the server with an encrypted request over the HTTPS protocol.</p>
<p>HttpOnly cookies are inaccessible to JavaScript’s Document.cookie API</p>
<p><code>Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly</code></p>
<p><strong>CSRF token and SameSite</strong></p>
<p><code>SameSite cookies</code> let servers require that a cookie shouldn’t be sent with cross-site (where Site is defined by the registrable domain) requests, which provides <code>some protection against cross-site request forgery attacks (CSRF)</code>.</p>
<p><code>Set-Cookie: key=value; SameSite=Strict</code></p>
<p><code>CSRF tokens are used to protect against CSRF attacks</code></p>
<p><code>A CSRF token is a unique, secret, unpredictable value that is generated by the server-side application and transmitted to the client in such a way that it is included in a subsequent HTTP request made by the client</code>. When the later request is made, the server-side application validates that the request includes the expected token and rejects the request if the token is missing or invalid.</p>
<p>CSRF tokens can prevent CSRF attacks by making it impossible for an attacker to construct a fully valid HTTP request suitable for feeding to a victim user. Since the attacker cannot determine or predict the value of a user’s CSRF token, they cannot construct a request with all the parameters that are necessary for the application to honor the request.</p>
<p><code>Set-Cookie: CSRF=e8b667; Secure; Domain=example.com</code>, A CSRF token should be included in &lt;form&gt; elements via a hidden input field.</p>
<p><a href="https://portswigger.net/web-security/csrf">what’s csrf attack</a></p>
<h2 id="Scope-of-cookies-when-to-send-cookie"><a href="#Scope-of-cookies-when-to-send-cookie" class="headerlink" title="Scope of cookies(when to send cookie)"></a>Scope of cookies(when to send cookie)</h2><p>The <code>Domain and Path directives define the scope of the cookie: cookie is sent only when it matches domain and path</code>.</p>
<p>Domain specifies allowed hosts to receive the cookie. <code>If unspecified, it defaults to the host of the current document location, excluding subdomains. If Domain is specified, then subdomains are always included.</code></p>
<p>For example, if Domain&#x3D;mozilla.org is set, then cookies are included on subdomains like developer.mozilla.org.</p>
<p>Path indicates a <code>URL path that must exist in the requested URL</code> in order to send the Cookie header. The %x2F (“&#x2F;“) character is considered a directory separator, and subdirectories will match as well.</p>
<p>For example, <code>if Path=/docs is set, these paths will match</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/docs</span><br><span class="line">/docs/Web/</span><br><span class="line">/docs/Web/HTTP</span><br></pre></td></tr></table></figure>

<h2 id="see-cookie-for-a-website"><a href="#see-cookie-for-a-website" class="headerlink" title="see cookie for a website"></a>see cookie for a website</h2><p><img src="/images/http/firefox-cookie-panel.jgp" alt="cookie panel"></p>
]]></content>
      <categories>
        <category>http-protocol</category>
        <category>cookie</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>cookie</tag>
        <tag>local storage</tag>
      </tags>
  </entry>
  <entry>
    <title>http-protocol-faq</title>
    <url>/2019/12/13/http-protocol-faq/</url>
    <content><![CDATA[<h1 id="FAQs"><a href="#FAQs" class="headerlink" title="FAQs"></a>FAQs</h1><p>Here are list of faqs that are asked for web beginner, like <code>what Vary is</code> and difference between <code>Content-Encoding and Transfer-Encoding</code>, what <code>conditional request</code> is etc.</p>
<span id="more"></span>
<h2 id="How-response-Vary-header-is-used"><a href="#How-response-Vary-header-is-used" class="headerlink" title="How response Vary header is used"></a>How response Vary header is used</h2><p>In some case, server may return <code>different responses for the same uri</code> based on some info from request  headers, the based on headers are put in <code>Vary header</code>, one typical example is web server returns different web pages for mobile and desktop, but the uri is same, that means response depends on <code>User-Agent</code> request header, so put <code>User-Agent</code> in Vary response header, when proxy(nginx always cache response) receives the response, <code>it (nginx) stores the response with key (uri, User-Agent)</code>, next time when a new request comes in with same uri but different user-agent, proxy should request a fresh one from origin server, not use cached data, as the User-Agent(secondary key when searching cache) is different.</p>
<p><strong>response depends on User-Agent and Cookie</strong></p>
<ul>
<li><code>Vary: User-Agent, Cookie</code></li>
</ul>
<p>In one word, <code>it tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server.</code></p>
<h2 id="what-q-x3D-0-6-mean-in-header-value"><a href="#what-q-x3D-0-6-mean-in-header-value" class="headerlink" title="what q&#x3D;0.6 mean in header value"></a>what q&#x3D;0.6 mean in header value</h2><p>As for some headers, like <code>Accept-Language</code>, <code>Accept</code> it could contain multiple values, in that case which value should be used by server, q(relative quality factor) is used for this, <code>it indicates preference of each value, server should use highest one(q value is larger)</code>, when sends response to client, here is an example:</p>
<p><code>Accept-Language: en-us,en;q=0.5</code></p>
<p>en-us uses default q&#x3D;1 which is higher than en, so when server sends response to client, it should use en-us Language if it supports.</p>
<p><strong>Rules</strong></p>
<ul>
<li>without q provided use <code>default q=1</code></li>
<li><code>high</code> value means <code>much prefer</code></li>
<li>value <code>range [0, 1]</code></li>
<li><strong>format <code>value;q=0.5</code></strong></li>
</ul>
<h2 id="how-Etag-is-generated"><a href="#how-Etag-is-generated" class="headerlink" title="how Etag is generated"></a>how Etag is generated</h2><p>Etag(response header) is an <code>identifier for a specific version of a resource</code>(mostly for static resource), often a <code>hash value</code> of a resource, it’s generated by web server based on attributes(size, inode, modified-time etc) of the resource.</p>
<p><code>ETag: &quot;737060cd8c284d8af7ad3082f209582d&quot;</code></p>
<h2 id="headers-related-to-resume-from-break-point"><a href="#headers-related-to-resume-from-break-point" class="headerlink" title="headers related to resume from break point"></a>headers related to resume from break point</h2><p>In order to support this, client can request partial range of content, while server must support partial request, there are three headers, two response headers <code>Accept-Ranges</code>, <code>Content-Range</code>, one request header <code>Range</code>.</p>
<ul>
<li><code>Accept-Ranges</code> indicates if server supports partial request</li>
<li><code>Range</code> indicates which range client wants to get</li>
<li><code>Content-Range</code> indicates which range that server sends it to client.</li>
</ul>
<p><strong>server declares it supports</strong></p>
<p><code>Accept-Ranges: bytes</code></p>
<p><strong>client request a range</strong></p>
<p><code>Range: bytes=500-999</code></p>
<p><strong>server send the conent of that range</strong></p>
<p><code>Content-Range : bytes 500-999/1234</code></p>
<h2 id="Expires-vs-Cache-Control-max-age-value-header"><a href="#Expires-vs-Cache-Control-max-age-value-header" class="headerlink" title="Expires vs Cache-Control(max-age value) header"></a>Expires vs Cache-Control(max-age value) header</h2><p><code>Cache-Control</code> was introduced in <code>HTTP/1.1</code> and <code>offers more options than Expires</code>. They can be used to accomplish the same thing.</p>
<p>The data value for Expires is an <code>HTTP date</code> whereas Cache-Control max-age lets you specify a <code>relative amount of time</code> so you could specify ‘X hours after the page was requested’.</p>
<p>If a response includes a Cache-Control field with the max-age directive, a recipient MUST ignore the Expires field.</p>
<p><code>Cache-Control: max-age=3600</code></p>
<p><code>Expires: Tue, 18 Jul 2017 16:07:23 GMT</code></p>
<p><code>Always use Cache-Control as it offers more options</code></p>
<h2 id="Ways-to-do-conditional-request"><a href="#Ways-to-do-conditional-request" class="headerlink" title="Ways to do conditional request"></a>Ways to do conditional request</h2><p>Conditional request means client provides <code>condition</code> to server, server checks the <code>condition</code> if matched, sends the resource, otherwise, only sends header with special status code.</p>
<p><strong>Old way(http1.0)</strong></p>
<p><code>If-Unmodified-Since and If-Modified-Since, where the client sends a timestamp of the resource.</code></p>
<p><strong>http 1.1</strong></p>
<p><code>If-Modified and If-None-Modified, where the client sends an ETag representation of the resource</code></p>
<p><strong>Difference:</strong></p>
<p>Dates can be ordered, ETags can not.</p>
<p>This means that if some resource was modified a year ago, but never since, and we know it. Then we can correctly answer an If-Unmodified-Since request for arbitrary dates the last year and agree that sure… it has been unmodified since that date.</p>
<p>An Etag is only comparable for identity. Either it is <code>the same or it is not</code>. If you have the same resource as above, and during the year the docroot has been moved to a new disk and filesystem, giving all files new inodes but preserving modification dates. And someone had based the ETags on file’s inode number. Then we can’t say that the old ETag is still okay, without having a log of past-still-okay-ETags.</p>
<p>So I don’t see them as one obsoleting the other. They are for different situations. Either you can easily get a Last-Modified date of all the data in the page you’re about to serve, or you can easily get an ETag for what you will serve.</p>
<p>If you have a <code>dynamic webpage</code> with data from lots of db lookups it might be difficult to tell what the Last-Modified date is without making your database contain lots of modification dates. But you can always make an <code>md5 checksum of the result rendered page</code>.</p>
<p>When supporting these cache protocols I definitely go for only one of them, never both.</p>
<h2 id="TE-and-Transfer-Encoding-header"><a href="#TE-and-Transfer-Encoding-header" class="headerlink" title="TE and Transfer-Encoding header"></a>TE and Transfer-Encoding header</h2><p>The <code>TE request header</code> specifies the <code>transfer encodings the user agent is willing to accept</code>. (you could informally call it Accept-Transfer-Encoding, which would be more intuitive).</p>
<p><code>TE: chunked</code></p>
<p>The <code>Transfer-Encoding response header</code> specifies the form of encoding used to safely transfer the <code>payload body</code> to the user</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#chunked, only for Http1.1</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">#no encoding at transfor level</span><br><span class="line">Transfer-Encoding: identity</span><br></pre></td></tr></table></figure>

<p><strong>In which case chunked is used</strong></p>
<p>Regards to chunked encoding, there is one important response header <code>Trailer</code>, it allows the sender to include <code>additional fields(header) at the end of chunked messages</code> in order to supply metadata that might be dynamically generated while the message body is sent, such as a message integrity check, digital signature, or post-processing status.</p>
<p><code>Note: The TE request header needs to be set to &quot;trailers&quot; to allow trailer fields.</code></p>
<p>Chunked encoding is useful when larger amounts of data are sent to the client and <code>the total size of the response may not be known until the request has been fully processed</code>. For example, when generating a large HTML table resulting from a database query or when transmitting large images.</p>
<p>Data is sent in a series of chunks. The <code>Content-Length header is omitted</code> in this case and at the beginning of each chunk you need to add the length of the current chunk in <code>hexadecimal format</code>, followed by ‘\r\n’ and then the chunk itself, followed by another ‘\r\n’. The terminating chunk is a regular chunk, with the exception that its length is zero. It is followed by the trailer, which consists of a (possibly empty) sequence of entity header fields.</p>
<p>A chunked response looks like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Trailer: Expires</span><br><span class="line"></span><br><span class="line">7\r\n</span><br><span class="line">Mozilla\r\n</span><br><span class="line">9\r\n</span><br><span class="line">Developer\r\n</span><br><span class="line">7\r\n</span><br><span class="line">Network\r\n</span><br><span class="line">0\r\n</span><br><span class="line">Expires: Wed, 21 Oct 2015 07:28:00 GMT\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure>

<h2 id="Accept-Encoding-and-Content-Encoding"><a href="#Accept-Encoding-and-Content-Encoding" class="headerlink" title="Accept-Encoding and Content-Encoding"></a>Accept-Encoding and Content-Encoding</h2><p>The Content-Encoding entity header is used to <strong>compress the media-type</strong>. When present, its value indicates which encodings were applied to the entity-body. It <code>lets the client know how to decode in order to obtain the media-type referenced by the Content-Type header</code>.</p>
<p>The recommendation is to compress data as much as possible and therefore to use this field, but some types of resources, such as <code>jpeg images, are already compressed</code></p>
<p>The Accept-Encoding request HTTP header advertises which content encoding, usually a compression algorithm, <code>the client is able to understand</code>.</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Accept-Encoding: gzip</span><br><span class="line">Accept-Encoding: compress</span><br><span class="line">Accept-Encoding: deflate</span><br><span class="line"></span><br><span class="line"># As long as the identity value, meaning no encoding in some case like for image format.</span><br><span class="line">Accept-Encoding: identity</span><br></pre></td></tr></table></figure>

<p><code>Note: browser will decompress payload and show uncompressed web page to user</code></p>
<h2 id="Content-Encoding-vs-Transfer-Encoding"><a href="#Content-Encoding-vs-Transfer-Encoding" class="headerlink" title="Content-Encoding vs Transfer-Encoding"></a>Content-Encoding vs Transfer-Encoding</h2><p>Content-Encoding is how content is encoding, like if the web page is 100k, it’s better to encode it with gzip to reduce the payload, when server gets the encode data(or server encodes it by itself), the server may decide to transfer the gzip data(<code>Content-Encoding: gzip</code>) with chunked format(<code>Transfer-Encoding: chunked</code>), that’s what they are,  they apply at different levels, <code>Transfer-Encoding is hop by hop, it may change during transferring proxy</code>, while <code>Content-Encoding is end-to-end proxy never touch the payload!</code></p>
<p><code>Without Content-Encoding, assume it&#39;s uncompressed, without Transfer-Encoding, assume it&#39;s not chunked, but must has Content-length if has body</code></p>
<h2 id="method-PUT-whole-update-vs-POST-new-vs-PATCH-part-update"><a href="#method-PUT-whole-update-vs-POST-new-vs-PATCH-part-update" class="headerlink" title="method PUT(whole update) vs POST(new) vs PATCH(part update)"></a>method PUT(whole update) vs POST(new) vs PATCH(part update)</h2><p>The POST method is used to <code>submit an entity to the specified resource</code>, often causing a change in state or side effects on the server. <code>plan to create new</code>, if you run many times with same uri, many new objects may be created with same value</p>
<p><code>POST /questions</code></p>
<p>The PUT method <code>replaces all current representations of the target resource with the request payload</code>, or create new one if not found, <code>plan to replace</code>, if you run many times with same uri, there is only one objects created, as <code>PUT must provide a identity</code></p>
<p><code>PUT /questions/&#123;question-id&#125;</code></p>
<p>The PATCH method is used to apply <code>partial modifications to a resource.</code></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">method                          PATCH     POST         PUT</span><br><span class="line">Request has body	            Yes       Yes          Yes</span><br><span class="line">Successful response has body	Yes       Yes          NO</span><br><span class="line">Safe	                        No        NO           NO</span><br><span class="line">Idempotent	                    No        NO           Yes</span><br><span class="line">Cacheable	                    No        NO           NO</span><br><span class="line">Allowed in HTML forms	        No        Yes          NO</span><br><span class="line"></span><br><span class="line">Safe:       no side effect</span><br><span class="line">Idempotent: same result if ran many times</span><br></pre></td></tr></table></figure>

<p>A POST request is typically sent via an HTML form and results in a change on the server, in this case, it only supports three content types</p>
<ul>
<li>application&#x2F;x-www-form-urlencoded: <code>the keys and values are encoded in key-value tuples separated by &#39;&amp;&#39;, with a &#39;=&#39; between the key and the value.</code> Non-alphanumeric characters in both keys and values are percent encoded: this is the reason why this type is not suitable to use with binary data (use multipart&#x2F;form-data instead)</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">POST /test HTTP/1.1</span><br><span class="line">Host: foo.example</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 27</span><br><span class="line"></span><br><span class="line">field1=value1&amp;field2=value2</span><br></pre></td></tr></table></figure>

<ul>
<li><p>multipart&#x2F;form-data: each value is sent as a block of data (“body part”), with a user agent-defined delimiter (“boundary”) separating each part. The keys are given in the Content-Disposition header of each part.</p>
</li>
<li><p>text&#x2F;plain</p>
</li>
</ul>
<p><code>When the POST request is sent via a method other than an HTML form — like via an XMLHttpRequest(like in script) — the body can take any type</code></p>
<h2 id="GET-VS-HEAD"><a href="#GET-VS-HEAD" class="headerlink" title="GET VS HEAD"></a>GET VS HEAD</h2><p>The GET method requests a representation of the specified resource. Requests using <strong>GET should only retrieve data.</strong></p>
<p>The HEAD method asks for a response identical to that of a GET request, but <strong>without the response body.</strong></p>
<p><strong>HEAD same as GET but without body returned</strong></p>
<h2 id="OPTIONS-method"><a href="#OPTIONS-method" class="headerlink" title="OPTIONS method"></a>OPTIONS method</h2><p>The OPTIONS method is used to describe the communication options for the target resource.<br>The client can specify a URL for the OPTIONS method, or an asterisk (*) to refer to the entire server.</p>
<p><strong>Identifying allowed request methods</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -X OPTIONS http://example.org -i</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 16 Dec 2019 02:57:20 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 0</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Server: Apache/2.4.7 (Ubuntu)</span><br><span class="line">Allow: GET,HEAD,POST,OPTIONS</span><br></pre></td></tr></table></figure>
<h2 id="how-to-create-a-forever-http-connection"><a href="#how-to-create-a-forever-http-connection" class="headerlink" title="how to create a forever http connection"></a>how to create a forever http connection</h2><p>To open a connection that never dies until close it by explicitly</p>
<ul>
<li>Websocket</li>
<li>send http request with transfer-encoding: Chunked, but never set terminating chunk <code>0\r\n</code></li>
</ul>
<p>In the above two ways, after get respone from sever, server will not close it, the close happends only when client closes it or client sends <code>\0\r\n</code> to server</p>
]]></content>
      <categories>
        <category>http-protocol</category>
        <category>faq</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>faq</tag>
      </tags>
  </entry>
  <entry>
    <title>http-protocol-headers</title>
    <url>/2019/12/13/http-protocol-headers/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>HTTP headers let the client and the server pass additional information with an HTTP request or response. <code>An HTTP header consists of its case-insensitive name</code> followed by a colon (:), then by its value. <code>Whitespace before the value is ignored</code></p>
<span id="more"></span>

<p>Headers can be grouped according to their contexts:</p>
<ul>
<li>General headers <code>apply to both requests and responses</code>, but with <code>no relation to the data transmitted in the body</code>. like <code>Date, Cache-Control or Connection.</code></li>
<li>Request headers contain more information about the resource to be fetched, or about the client requesting the resource.</li>
<li>Response headers hold additional information about the response, like its location or about the server providing it.</li>
<li>Entity headers contain information about the <code>body of the resource</code>, like its content length or MIME type. like <code>Content-Length, Content-Language, Content-Encoding</code>.</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /home.html HTTP/1.1</span><br><span class="line">Host: developer.mozilla.org</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Referer: https://developer.mozilla.org/testpage.html</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">If-Modified-Since: Mon, 18 Jul 2016 02:36:04 GMT</span><br><span class="line">If-None-Match: &quot;c561c68d0ba92bbeb8b0fff2a9199f722e3a621a&quot;</span><br><span class="line">Cache-Control: max-age=0</span><br></pre></td></tr></table></figure>

<p><strong>End-to-end headers</strong></p>
<p>These headers must be <code>transmitted to the final recipient of the message</code>: the server for a request, or the client for a response. Intermediate <code>proxies must retransmit these headers unmodified</code> and caches must store them. like <code>Content-Encoding</code>.</p>
<p><strong>Hop-by-hop headers</strong><br>These headers are meaningful only for a single transport-level connection, and <code>must not be retransmitted by proxies or cached</code>. like <code>Transfer-Encoding</code>.</p>
<h2 id="Common-General-Header"><a href="#Common-General-Header" class="headerlink" title="Common General Header"></a>Common General Header</h2><p><strong>Date</strong></p>
<p>The Date general HTTP header contains the date and time at which the message was originated.<br><code>Date: Wed, 21 Oct 2015 07:28:00 GMT</code></p>
<p><strong>Connection</strong></p>
<p>The Connection general header controls whether or not the network connection stays open after the current transaction finishes.</p>
<p><code>Connection: keep-alive</code></p>
<p><strong>Cache-Control</strong></p>
<p>The Cache-Control general-header field is used to specify directives for caching mechanisms in both requests and responses. Caching directives are unidirectional, meaning that a given directive in a request is not implying that the same directive is to be given in the response</p>
<p><code>Cache-Control: public, max-age=31536000</code></p>
<h2 id="Common-Request-Header"><a href="#Common-Request-Header" class="headerlink" title="Common Request Header"></a>Common Request Header</h2><p><strong>HOST</strong></p>
<p>The Host header is mandatory in HTTP&#x2F;1.1 requests, domain of the server with&#x2F;without port, if no port provided, for http, it’s 80, https, 443.</p>
<p><code>Host: gethttp.info</code></p>
<p><strong>Referer</strong></p>
<p>tells the server where the requested URL came from. It will almost always be another URL, or else empty for a direct request, the Referer is the URL to the original page, let’s one web page depends on css&#x2F;js, when you get css&#x2F;js, the referer points to the web page.</p>
<p><code>Referer: https://www.quora.com/profile/Lee-Dowthwaite</code></p>
<p><strong>User-Agent</strong></p>
<p>User-Agent identifies the requesting system</p>
<p><code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36</code></p>
<p><strong>Accept</strong></p>
<p>The <strong>Accept header(server side: Content-type)</strong> is how a client (browser or application) tells the server what kind of content it can accept in the HTTP response. The content types are comma-separated, and take the form type&#x2F;subtype such as text&#x2F;html, application&#x2F;json or audio&#x2F;mpeg.</p>
<p><code>Accept: text/html, text/plain; q=0.6, */*; q=0.1</code><br><code>Accept: application/graphql, application/json; q=0.8, application/xml; q=0.7</code></p>
<p><strong>Accept-Encoding</strong></p>
<p><strong>Accept-Encoding(server side: Content-Encoding)</strong> defines what type of content encoding (usually a compression algorithm) the client can accept in the response body, Note(<code>server should use the suggested if it can do</code>)</p>
<p>Client can also explicitly prohibits this encoding by specifying <code>identity;q=0</code>, in this server must not use this encoding.</p>
<p><code>Accept-Encoding: br, gzip;q=0.9, deflate;q=0.8, *;q=0.1</code></p>
<p><strong>Accept-Language</strong></p>
<p>The HTTP Accept-Language header tells the server the client’s preferred natural language</p>
<p><code>Accept-Language: en-GB, en-US, en;q=0.9</code></p>
<p><strong>Authorization</strong></p>
<p>The HTTP Authorization header specifies the authorization scheme and any associated data or token, and carries that data as a header payload.</p>
<p><code>Authorization: Basic ZmFsa2VuOmpvc2h1YTU=</code> # encode64(user:password)</p>
<p>JWT or OAuth 2.0 token</p>
<p><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzY290Y2guaW8iLCJleH</code></p>
<p>a digest (or hash) value is created from a predetermined combination of the username, password, and some information from the server, including random (or “nonce”) values</p>
<p><code>Authorization: Digest adfsa23f31fsa32f2f</code> # hash(user, password, extra_info)</p>
<p><strong>Cookie</strong></p>
<p>The Cookie request-header field value contains a name&#x2F;value pair of information stored for that URL.<br><code>Cookie: name1=value1;name2=value2</code></p>
<h2 id="Common-Response-Header"><a href="#Common-Response-Header" class="headerlink" title="Common Response Header"></a>Common Response Header</h2><p><strong>Age</strong></p>
<p>The Age response-header field conveys the sender’s estimate of the amount of time since the response (or its revalidation) was generated at the origin server</p>
<p><code>Age: 100</code> # 100s</p>
<p><strong>Location</strong></p>
<p>The Location response-header field is used to redirect the recipient to a location other than the Request-URI for completion</p>
<p><code>Location: http://www.tutorialspoint.org/http/index.htm</code></p>
<p><strong>Retry-After</strong></p>
<p>The Retry-After response-header field can be used with a 503 (Service Unavailable) response to indicate how long the service is expected to be unavailable to the requesting client</p>
<p><code>Retry-After: 120</code></p>
<p><strong>Server</strong></p>
<p>The Server response-header field contains information about the software used by the origin server to handle the request</p>
<p><code>Server: Apache/2.2.14 (Win32)</code></p>
<p><strong>Set-Cookie</strong></p>
<p>The Set-Cookie response-header field contains a name&#x2F;value pair of information to retain for this URL.</p>
<p><code>Set-Cookie: name1=value1,name2=value2; Expires=Wed, 09 Jun 2021 10:18:14 GMT; Domain=xx.com; Path=/doc</code></p>
<p><strong>WWW-Authenticate</strong></p>
<p>The WWW-Authenticate response-header field must be included in 401 (Unauthorized) response messages</p>
<h2 id="Common-Entity-Headers"><a href="#Common-Entity-Headers" class="headerlink" title="Common Entity Headers"></a>Common Entity Headers</h2><p><strong>Allow</strong></p>
<p>The Allow entity-header field lists the set of methods supported by the resource identified by the Request-URI.</p>
<p><code>Allow: GET, HEAD, PUT</code></p>
<p><strong>Content-Encoding</strong></p>
<p>The Content-Encoding entity-header field is used as a modifier to the media-type.</p>
<p><code>Content-Encoding: gzip</code></p>
<p><strong>Content-Language</strong></p>
<p>The Content-Language entity-header field describes the natural language(s) of the intended audience for the enclosed entity</p>
<p><code>Content-Language: en</code></p>
<p><strong>Content-Length</strong></p>
<p><code>Content-Length: 3495</code></p>
<p><strong>Content-MD5</strong></p>
<p>The Content-MD5 entity-header field may be used to supply an MD5 digest of the entity for checking the integrity of the message upon receipt.</p>
<p><code>Content-MD5  : 8c2d46911f3f5a326455f0ed7a8ed3b3</code></p>
<p><strong>Content-Type</strong></p>
<p>The Content-Type entity-header field indicates the media type of the entity-body sent to the recipient or, in the case of the HEAD method, the media type that would have been sent, had the request been a GET.</p>
<p><code>Content-Type: text/html; charset=ISO-8859-4</code></p>
<p><strong>Expires</strong><br>The Expires entity-header field gives the date&#x2F;time after which the response is considered stale</p>
<p><code>Expires: Thu, 01 Dec 1994 16:00:00 GMT</code></p>
<p><strong>Last-Modified</strong><br>The Last-Modified entity-header field indicates the date and time at which the origin server believes the variant was last modified.</p>
<p><code>Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT</code></p>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="/2019/12/13/http-protocol-faq/" title="http-protocol-faq">header faq</a></li>
<li><a href="https://www.tutorialspoint.com/http/http_header_fields.htm">common headers</a></li>
<li><a href="https://en.wikipedia.org/wiki/List_of_HTTP_header_fields">all headers wiki </a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">all headers mdn</a></li>
<li><a href="https://www.geeksforgeeks.org/http-headers-content-type/">all content-type</a></li>
</ul>
]]></content>
      <categories>
        <category>http-protocol</category>
        <category>header</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>header</tag>
      </tags>
  </entry>
  <entry>
    <title>http-protocol-overview</title>
    <url>/2019/12/13/http-protocol-overview/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>HTTP is an extensible protocol which has evolved over time. It is an application layer protocol that is sent over TCP, or over a TLS-encrypted TCP connection,</p>
<p><img src="https://mdn.mozillademos.org/files/13673/HTTP%20&%20layers.png" alt="http protocol "></p>
<span id="more"></span>

<p>HTTP is a client-server protocol: requests are sent by one entity, the user-agent (or a proxy on behalf of it). Most of the time the user-agent is a Web browser, but it can be anything, for example a robot that crawls the Web to populate and maintain a search engine index.</p>
<p>Each individual request is sent to a server, which handles it and provides an answer, called the response. Between the client and the server there are numerous entities, collectively called proxies, which perform different operations and act as gateways or caches, for example.</p>
<p><img src="https://mdn.mozillademos.org/files/13679/Client-server-chain.png" alt="proxy"></p>
<p>These can be transparent, forwarding on the requests they(proxy) receive without altering them in any way, or non-transparent, in which case they will change the request in some way before passing it along to the server.</p>
<p><strong>Proxies may perform numerous functions:</strong></p>
<ul>
<li>caching (the cache can be public or private, like the browser cache)</li>
<li>filtering (like an antivirus scan or parental controls)</li>
<li>load balancing (to allow multiple servers to serve the different requests)</li>
<li>authentication (to control access to different resources)</li>
<li>logging (allowing the storage of historical information)</li>
</ul>
<p>HTTP is an extensible protocol that is easy to use. The client-server structure, combined with the ability to simply add headers, allows HTTP to advance along with the extended capabilities of the Web.</p>
<p>Though <code>HTTP/2</code> adds some complexity, by <code>embedding HTTP messages in frames</code> to improve performance, the basic structure of messages has stayed the same since HTTP&#x2F;1.0</p>
<h2 id="Http1-x-message"><a href="#Http1-x-message" class="headerlink" title="Http1.x message"></a>Http1.x message</h2><p>HTTP requests, and responses, share similar structure and are composed of:</p>
<ul>
<li>A start-line describing the requests to be implemented, or its status of whether successful or a failure. This start-line is always a single line.</li>
<li>An optional set of HTTP headers specifying the request, or describing the body included in the message.</li>
<li>A blank line indicating all meta-information for the request have been sent.</li>
<li>An optional body containing data associated with the request (like content of an HTML form), or the document associated with a response. The presence of the body and its size is specified by the start-line and HTTP headers.</li>
</ul>
<p><code>The start-line and HTTP headers of the HTTP message are collectively known as the header of the requests</code>, whereas its payload is known as the body.</p>
<img style="background-color:white" src="https://mdn.mozillademos.org/files/13827/HTTPMsgStructure2.png"/>

<h2 id="http2-0"><a href="#http2-0" class="headerlink" title="http2.0"></a>http2.0</h2><p>In the first half of the 2010s, Google demonstrated an alternative way of exchanging data between client and server, by implementing an experimental protocol SPDY. This amassed interest from developers working on both browsers and servers. Defining an increase in responsiveness, and solving the problem of duplication of data transmitted, <code>SPDY served as the foundations of the HTTP/2 protocol.</code></p>
<p><strong>The HTTP&#x2F;2 protocol has several prime differences from the HTTP&#x2F;1.1 version:</strong></p>
<ul>
<li>It is a binary protocol rather than text. It can no longer be read and created manually.  Despite this hurdle, improved optimization techniques can now be implemented.</li>
<li>It is a multiplexed protocol. Parallel requests can be handled over the same connection, removing the order and blocking constraints of the HTTP&#x2F;1.x protocol.</li>
<li>It compresses headers. As these are often similar among a set of requests, this removes duplication and overhead of data transmitted.</li>
<li>It allows a server to populate data in a client cache, in advance of it being required, through a mechanism called the server push.</li>
</ul>
<p>The next major version of HTTP, <code>HTTP/3, will use QUIC instead TCP/TLS for the transport layer portion.</code></p>
<h2 id="QUICK"><a href="#QUICK" class="headerlink" title="QUICK"></a>QUICK</h2><p>QUIC (pronounced ‘quick’) is a general-purpose transport layer network protocol initially designed by Jim Roskind at Google, it establishes a number of <code>multiplexed connections between two endpoints over User Datagram Protocol (UDP)</code>. This works hand-in-hand with HTTP&#x2F;2’s multiplexed connections, allowing multiple streams of data to reach all the endpoints independently, and hence independent of packet losses involving other streams. In contrast, HTTP&#x2F;2 hosted on Transmission Control Protocol (TCP) can suffer head-of-line-blocking delays of all multiplexed streams if any of the TCP packets are delayed or lost.</p>
<p>QUIC’s secondary goals include reduced connection and transport latency, and bandwidth estimation in each direction to avoid congestion. It also moves congestion control algorithms into the user space at both endpoints, rather than the kernel space, which it is claimed will allow these algorithms to improve more rapidly</p>
<p>In June 2015, an Internet Draft of a specification for QUIC was submitted to the IETF for standardization. A QUIC working group was established in 2016. In October 2018, the IETF’s HTTP and QUIC Working Groups jointly decided to call the HTTP mapping over QUIC “HTTP&#x2F;3” in advance of making it a worldwide standard.</p>
]]></content>
      <categories>
        <category>http-protocol</category>
        <category>overview</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>protocol</tag>
      </tags>
  </entry>
  <entry>
    <title>http-protocol-cache</title>
    <url>/2019/12/13/http-protocol-cache/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>The performance of web sites and applications can be <code>significantly improved by reusing previously fetched resources</code>. Web caches reduce latency and network traffic and thus lessen the time needed to display a representation of a resource. By making use of HTTP caching, Web sites become more responsive.</p>
<p>There are several kinds of caches: these can be grouped into two main categories: <code>private or shared caches</code>. <code>A shared cache is a cache that stores responses for reuse by more than one user</code>. A private cache is dedicated to a single user.</p>
<img src='https://mdn.mozillademos.org/files/13777/HTTPCachtType.png' style="background-color: white" />

<span id="more"></span>

<h2 id="Cache-what"><a href="#Cache-what" class="headerlink" title="Cache what"></a>Cache what</h2><p>HTTP caching is optional, but reusing a cached resource is usually desirable. However, <code>common HTTP caches are typically limited to caching responses to GET</code> and may decline other methods. The <code>primary cache key(may have secondary key like Vary header etc) consists of the request method and target URI</code> (oftentimes only the URI is used as only GET requests are caching targets). Common forms of caching entries are:</p>
<ul>
<li><code>Successful results of a retrieval request: a 200 (OK) response to a GET request containing a resource like HTML documents, images or files</code>.</li>
<li>Permanent redirects: a 301 (Moved Permanently) response.</li>
<li>Error responses: a 404 (Not Found) result page.</li>
<li>Incomplete results: a 206 (Partial Content) response.</li>
<li>Responses other than GET if something suitable for use as a cache key is defined.</li>
</ul>
<p>A cache entry might also <code>consist of multiple stored responses differentiated by a secondary key</code>, if the request is target of content negotiation.</p>
<h2 id="Cache-Control-header"><a href="#Cache-Control-header" class="headerlink" title="Cache-Control header"></a>Cache-Control header</h2><p>The Cache-Control HTTP&#x2F;1.1 general-header field is used to specify directives for caching mechanisms <code>in both requests and responses</code>.</p>
<p><strong>No caching</strong></p>
<p><code>Cache-Control: no-store</code></p>
<p><strong>Cache but revalidate</strong></p>
<p><code>Cache-Control: no-cache</code></p>
<p><strong>Validation</strong></p>
<p>When using the “must-revalidate” directive, the cache must verify the status of the stale resources before using it and expired ones should not be used</p>
<p><code>Cache-Control: must-revalidate</code></p>
<p><strong>Expiration</strong><br>The most important directive here is “<code>max-age=&lt;seconds&gt;</code>“ which is the maximum amount of time a resource will be considered fresh. Contrary to Expires, this directive is <code>relative to the time of the request</code>.</p>
<p><code>Cache-Control: max-age=600</code></p>
<h2 id="Freshness"><a href="#Freshness" class="headerlink" title="Freshness"></a>Freshness</h2><p>cache should <code>only be updated when client requests the uri</code>(server never notifies client when resource changes), <code>Before this expiration time, the resource is fresh; after the expiration time, the resource is stale</code>. Eviction algorithms often privilege fresh resources over stale resources. Note that <code>a stale resource is ignored</code> ; when the cache receives <strong><code>a request for a stale resource, it forwards this request with a If-None-Match to check if it is in fact still fresh</code></strong>. If so, the server returns a 304 (Not Modified) header without sending the body of the requested resource, saving some bandwidth.</p>
<img style="background-color:white" src="https://mdn.mozillademos.org/files/13771/HTTPStaleness.png"/>

<h2 id="cache-with-Vary-header"><a href="#cache-with-Vary-header" class="headerlink" title="cache with Vary header"></a>cache with Vary header</h2><p>The Vary HTTP response header determines how to match future request headers to decide whether a cached response can be used rather than requesting a fresh one from the origin server. without vary header, you can think key as just domain + uri, with vary header, cache key: domain + uri + Vary header.</p>
<p>When a cache receives a request that can be satisfied by a cached response that has a Vary header field, it must not use that cached response <code>unless all header fields as nominated by the Vary header match in both the original (cached) request and the new request</code>.</p>
<img style="background-color:white" src="https://mdn.mozillademos.org/files/13769/HTTPVary.png/">]]></content>
      <categories>
        <category>http-protocol</category>
        <category>cache</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>cache-control</tag>
      </tags>
  </entry>
  <entry>
    <title>http-protocol-response-code</title>
    <url>/2019/12/13/http-protocol-response-code/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>HTTP response status codes indicate <code>whether a specific HTTP request has been successfully completed</code>. Responses are grouped in five classes:</p>
<ul>
<li>Informational responses (100–199)</li>
<li><strong>Successful responses (200–299)</strong></li>
<li>Redirects (300–399)</li>
<li><strong>Client errors (400–499) detected by server</strong></li>
<li><strong>Server errors (500–599)</strong></li>
</ul>
<span id="more"></span>
<p>Let’s focus on some common status codes that’s used for each group.</p>
<h2 id="Informational-response"><a href="#Informational-response" class="headerlink" title="Informational response"></a>Informational response</h2><p>Actually, you rarely see such response.</p>
<h2 id="Successful-response"><a href="#Successful-response" class="headerlink" title="Successful response"></a>Successful response</h2><p><strong>200 OK</strong></p>
<p>The HTTP 200 OK success status response code indicates that the request has succeeded. A 200 response is cacheable by default.</p>
<p>The meaning of a success depends on the HTTP request method:</p>
<ul>
<li>GET: The resource has been fetched and is transmitted in the message body.</li>
<li>HEAD: The entity headers are in the message body.</li>
<li>POST: The resource describing the result of the action is transmitted in the message body.</li>
</ul>
<p>The successful result of a <code>PUT or a DELETE</code> is often <code>not a 200 OK</code> but a <code>204 No Content</code> (or a <code>201 Created</code> when the resource is uploaded for the first time).</p>
<p><strong>201 Created</strong></p>
<p>The HTTP 201 Created success status response code indicates that the request has succeeded and has led to the creation of a resource. The new resource is effectively created before this response is sent back and the new resource is returned in the body of the message, its location being either the URL of the request, or the content of the Location header.</p>
<p><code>The common use case of this status code is as the result of a POST request.</code></p>
<p><strong>202 Accepted</strong></p>
<p>The HyperText Transfer Protocol (HTTP) 202 Accepted response status code indicates that the request has been <code>received but not yet acted upon</code>. It is <code>non-committal</code>, meaning that there is no way for the HTTP to later send an asynchronous response indicating the outcome of processing the request. It is intended for cases where <code>another process or server handles the request, or for batch processing.</code></p>
<p><strong>203 Non-Authoritative Information</strong></p>
<p>This response code means the returned <code>meta-information is not exactly the same as is available from the origin server, but is collected from a local or a third-party copy</code>. This is mostly <code>used for mirrors or backups</code> of another resource. Except for that specific case, the “200 OK” response is preferred to this status.</p>
<p><strong>204 No Content</strong></p>
<p>The HTTP 204 No Content success status response code indicates that the <code>request has succeeded</code>, but that the <code>client doesn&#39;t need to go away from its current page</code>. A 204 response is cacheable by default. An ETag header is included in such a response.</p>
<p>The common use case is to return 204 as a result of a <code>PUT request, updating a resource, without changing the current content of the page displayed to the user</code>. If the resource is created, 201 Created is returned instead. If the page should be changed to the newly updated page, the 200 should be used instead</p>
<p><strong>205 Reset Content</strong></p>
<p>The HTTP 205 Reset Content response status tells the client to reset the document view, so for example to clear the content of a form, reset a canvas state, or to refresh the UI.</p>
<p><strong>206 Partial Content</strong></p>
<p>The HTTP 206 Partial Content success status response code indicates that the request has succeeded and has the body contains the requested ranges of data, as described in the Range header of the request.</p>
<h2 id="Redirects"><a href="#Redirects" class="headerlink" title="Redirects"></a>Redirects</h2><p><strong>301 Moved Permanently</strong></p>
<p>The URL of the requested resource has been changed permanently. The new URL is given in the response.</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 301 Moved Permanently</span><br><span class="line">Location: http://www.example.org/index.asp</span><br><span class="line"># new url</span><br></pre></td></tr></table></figure>
<p><strong>302 Found</strong></p>
<p>The HyperText Transfer Protocol (HTTP) 302 Found redirect status response code indicates that the resource requested has been <code>temporarily moved to the URL given by the Location header</code>. A browser redirects to this page but search engines don’t update their links to the resource as it’s temporarily.</p>
<p><strong>304 Not Modified</strong></p>
<p>The HTTP 304 Not Modified client redirection response code indicates that there is no need to retransmit the requested resources. It is an implicit redirection to a cached resource. This happens when the request method is safe, like a GET or a HEAD request, or when the request is conditional and uses a If-None-Match or a If-Modified-Since header.</p>
<p>The equivalent 200 OK response would have included the headers Cache-Control, Content-Location, Date, ETag, Expires, and Vary.</p>
<h2 id="Client-errors"><a href="#Client-errors" class="headerlink" title="Client errors"></a>Client errors</h2><p><strong>400 Bad Request</strong></p>
<p>The server could <code>not understand the request due to invalid syntax.</code></p>
<p><strong>401 Unauthorized</strong></p>
<p>Although the HTTP standard specifies “unauthorized”, semantically this response means “unauthenticated”. That is, the client <code>must authenticate itself to get the requested response.</code></p>
<p><strong>403 Forbidden</strong></p>
<p>The client does <code>not have access rights to the content</code>; that is, it is unauthorized, so the server is refusing to give the requested resource. <code>Unlike 401, the client&#39;s identity is known to the server.</code></p>
<p><strong>404 Not Found</strong></p>
<p>The server can <code>not find requested resource</code>. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurrence on the web.</p>
<p><strong>405 Method Not Allowed</strong></p>
<p>The request method is known by the server but has been <code>disabled and cannot be used</code>. For example, an API may forbid DELETE-ing a resource. The two mandatory methods, GET and HEAD, must never be disabled and should not return this error code.</p>
<p><strong>406 Not Acceptable</strong></p>
<p>This response is sent when the web server, after performing server-driven content negotiation, <code>doesn&#39;t find any content that conforms to the criteria given by the user agent.</code></p>
<p><strong>407 Proxy Authentication Required</strong></p>
<p>This is similar to 401 but <code>authentication is needed to be done by a proxy.</code></p>
<p><strong>408 Request Timeout</strong></p>
<p>This response is sent on an idle connection by some servers, even without any previous request by the client. It means that the server would like to shut down this unused connection. This response is used much more since some browsers, like Chrome, Firefox 27+, or IE9, use HTTP pre-connection mechanisms to speed up surfing. Also note that some servers merely shut down the connection without sending this message.</p>
<p><strong>410 Gone</strong></p>
<p>This response is sent when the requested content has been <code>permanently deleted from server</code>, with no forwarding address. Clients are expected to remove their caches and links to the resource. The HTTP specification intends this status code to be used for “limited-time, promotional services”. APIs should not feel compelled to indicate resources that have been deleted with this status code.</p>
<p><strong>411 Length Required</strong></p>
<p>Server rejected the request because the Content-Length header field is not defined and the server requires it.</p>
<p><strong>413 Payload Too Large</strong></p>
<p>Request entity is larger than limits defined by server; the server might close the connection or return an Retry-After header field.</p>
<p><strong>414 URI Too Long</strong></p>
<p>The URI requested by the client is longer than the server is willing to interpret.</p>
<p><strong>415 Unsupported Media Type</strong></p>
<p>The media format of the requested data is not supported by the server, so the server is rejecting the request.</p>
<p><strong>416 Requested Range Not Satisfiable</strong></p>
<p>The range specified by the Range header field in the request can’t be fulfilled; it’s possible that the range is outside the size of the target URI’s data.</p>
<p><strong>429 Too Many Requests</strong></p>
<p>The user has sent too many requests in a given amount of time (“rate limiting”).</p>
<p><strong>431 Request Header Fields Too Large</strong></p>
<p>The server is unwilling to process the request because its header fields are too large. The request may be resubmitted after reducing the size of the request header fields.</p>
<h2 id="Server-errors"><a href="#Server-errors" class="headerlink" title="Server errors"></a>Server errors</h2><p><strong>500 Internal Server Error</strong></p>
<p>The server has encountered a situation it doesn’t know how to handle, <code>This error response is a generic &quot;catch-all&quot; response</code>. Usually, this indicates the server cannot find a better 5xx error code to response</p>
<p><strong>501 Not Implemented</strong></p>
<p>The request method is not supported by the server and cannot be handled. The only methods that servers are required to support (and therefore that must not return this code) are GET and HEAD.</p>
<p><strong>502 Bad Gateway</strong></p>
<p>The HyperText Transfer Protocol (HTTP) 502 Bad Gateway server error response code indicates that the server, while acting as a gateway or <code>proxy, received an invalid response from the upstream server</code>.</p>
<p><strong>503 Service Unavailable</strong></p>
<p>The server is <code>not ready to handle the request</code>. Common causes are a <code>server that is down for maintenance or that is overloaded</code>. Note that together with this response, a user-friendly page explaining the problem should be sent. This responses should be used for temporary conditions and the Retry-After: HTTP header should, if possible, contain the estimated time before the recovery of the service. The webmaster must also take care about the caching-related headers that are sent along with this response, as these temporary condition responses should usually not be cached.</p>
<p><strong>504 Gateway Timeout</strong></p>
<p>The HyperText Transfer Protocol (HTTP) 504 Gateway Timeout server error response code indicates that the server, while acting as a gateway or <code>proxy, did not get a response in time from the upstream server that it needed in order to complete the request.</code></p>
]]></content>
      <categories>
        <category>http</category>
        <category>status-code</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>status-code</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript_basic</title>
    <url>/2020/07/22/javascript-basic/</url>
    <content><![CDATA[<h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1><ul>
<li>The single quote&#x2F;double quotes patterns are identical in terms of functionality</li>
<li>; can be ignore if unnecessary, but it’s not a good habit.</li>
<li>There’s no Integer in JavaScript (except BigInt), all are float(64 bits).</li>
<li>Index starts from 0, like for String and Array.</li>
</ul>
<span id="more"></span>

<p><strong>JS behaves like C style for supports operators.</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+   Add</span><br><span class="line">-   Minus</span><br><span class="line">*   Multiple</span><br><span class="line">/   Divid</span><br><span class="line">%   Modulo</span><br><span class="line">&amp;   AND</span><br><span class="line">|   OR</span><br><span class="line">^   XOR</span><br><span class="line">~   NOT</span><br><span class="line">&lt;&lt;  <span class="string">Shift Left</span></span><br><span class="line"><span class="string">&gt;&gt;  Shift</span> Right With Sign</span><br><span class="line">&gt;&gt;&gt; Shift Right With Zero Fill</span><br><span class="line"></span><br><span class="line">==  Equal</span><br><span class="line">!=  Not equal</span><br><span class="line">=== Equal using strict methods both value and <span class="built_in">type</span> are same</span><br><span class="line">!== Not equal using strict methods</span><br><span class="line"></span><br><span class="line">&gt;   Greater than</span><br><span class="line">&lt;   Less than</span><br><span class="line">&gt;=  Greater than or equal to</span><br><span class="line">&lt;=  Less than or equal to</span><br><span class="line"><span class="keyword">in</span>  check key of an object</span><br><span class="line">instanceof  Is an instance of an Object</span><br><span class="line"></span><br><span class="line">delete Removes a property from an object <span class="built_in">who</span> owns it, the inherited property can NOT deleted.</span><br><span class="line">void   Returns undefined</span><br><span class="line">typeof Returns a string representing the data <span class="built_in">type</span></span><br><span class="line">++  Increments a number</span><br><span class="line">--  Decrements a number</span><br><span class="line">+   Converts the operand to a number</span><br><span class="line">-   Negates the operand</span><br><span class="line">~   Bitwise NOT</span><br><span class="line">!   Logical NOT</span><br><span class="line"></span><br><span class="line">*=  Multiplies the left operand by the right operand</span><br><span class="line">/=  Divides the left operand by the right operand</span><br><span class="line">%=  Provides the division remainder (modulus) of the left and right operand</span><br><span class="line">+=  Adds the right operand to the left operand</span><br><span class="line">-=  Subtracts the right operand from the left operand</span><br><span class="line">&lt;&lt;=     Bitwise left <span class="built_in">shift</span></span><br><span class="line">&gt;&gt;=     Bitwise right <span class="built_in">shift</span></span><br><span class="line">&gt;&gt;&gt;=    Bitwise unsigned right <span class="built_in">shift</span></span><br><span class="line">&amp;=  Bitwise AND</span><br><span class="line">^=  Bitwise XOR</span><br><span class="line">|=  Bitwise OR</span><br></pre></td></tr></table></figure>

<h2 id="printing-in-JS"><a href="#printing-in-JS" class="headerlink" title="printing in JS"></a>printing in JS</h2><p>Printing is an easy way to show result, there are several ways to print variable value. here we go.</p>
<ul>
<li>in one line<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello \</span></span><br><span class="line"><span class="string">            jason&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li>in multiple lines<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello \n jason&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello</span></span><br><span class="line"><span class="string">jason`</span>);<span class="comment">//template string</span></span><br></pre></td></tr></table></figure></li>
<li>show one parameter at last position<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;jason&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>, name); # a space is added between after <span class="string">&#x27;hello&#x27;</span> automatically</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello %s&quot;</span>, name); # no auto added space</span><br></pre></td></tr></table></figure></li>
<li>show multiple parameters at different positions<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> msg = <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello %s msg %s&quot;</span>, name, msg);</span><br></pre></td></tr></table></figure></li>
<li>variable can be at any position<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, <span class="string">&quot;hi&quot;</span>); #has auto added space before <span class="string">&#x27;hi&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, <span class="string">&quot;hi&quot;</span>, name); # has auto added space before and after <span class="string">&#x27;hi&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, <span class="string">&quot;hi %s&quot;</span>, name); # <span class="variable constant_">NOT</span> support, %s must be <span class="keyword">in</span> the first string <span class="keyword">if</span> has</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name + <span class="string">&quot;hi %s&quot;</span>, name); # support</span><br></pre></td></tr></table></figure></li>
<li>template string<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;last_name&#125;</span> hi`</span>); <span class="comment">// last_name is name of a variable</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">==========================javascript types=============================================</span><br><span class="line">                                type</span><br><span class="line">                                |</span><br><span class="line">                                |</span><br><span class="line">               primitive--------+----+object</span><br><span class="line">                |                     |</span><br><span class="line">    +-----------+-----+               +---------+-------+--------+------+----------+</span><br><span class="line">    |                 |               |         |       |        |      |          |</span><br><span class="line">    |                 |               |         |       |        +      |          +</span><br><span class="line">  string              number        Number     String   Array   Map     Math Custom(class)</span><br><span class="line">    +                   +              ^         ^</span><br><span class="line">    |                   |    auto-box  |         |</span><br><span class="line">    |                   +--------------+         |</span><br><span class="line">    |                                            |</span><br><span class="line">    |                 auto-box                   |</span><br><span class="line">    +--------------------------------------------+</span><br><span class="line"></span><br><span class="line">    always use primitive string and number as they have high performance even in es6!</span><br><span class="line"></span><br><span class="line">======================================================================================</span><br></pre></td></tr></table></figure>

<h3 id="auto-boxing"><a href="#auto-boxing" class="headerlink" title="auto-boxing"></a>auto-boxing</h3><p>javaScript has two main type categories, primitive(string, number, boolean) and object.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// primitive</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="comment">// object, ss&#x27;s value can NOT change as well even it&#x27;s an object.</span></span><br><span class="line"><span class="keyword">const</span> ss = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;test&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>A primitive is converted to its wrapper type(auto-boxing) only when a method of the wrapper type is invoked, when auto-boxing happens, a temporary object is created and destroyed after that call.</p>
<p>It’s a primitive data type. It has no methods, it is nothing more than a pointer points to a raw data memory reference, which explains the much faster random access speed than object.</p>
<p>So what happens when you do s.charAt(i) for instance?</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s[<span class="number">0</span>] == s.<span class="title function_">charAt</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>Since s is not an instance of String, JavaScript will auto-box s, which has typeof string to its wrapper type, String, with typeof object or more precisely.</p>
<p><code>The auto-boxing behaviour casts a back and forth to its wrapper type as needed</code>.</p>
<p>If you want to force the auto-boxing or to cast a primitive to its wrapper type, you can use Object.prototype.valueOf, but the behaviour is different. Based on a wide letiety of test scenarios auto-boxing only applies the ‘required’ methods, without altering the primitive nature of the letiable. Which is why you get better speed.</p>
<p><strong>Set on wrapped temporary object has no lasting effect as that temporary is destroyed soon after</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">str.<span class="property">age</span> = <span class="number">10</span>; <span class="comment">// a temporary String object is created and set.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">age</span>); <span class="comment">//undefined as the temporary object is destroyed.</span></span><br></pre></td></tr></table></figure>

<h2 id="Numbers-and-Dates"><a href="#Numbers-and-Dates" class="headerlink" title="Numbers and Dates"></a>Numbers and Dates</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">number_date</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> a2 = <span class="number">0b11</span>;</span><br><span class="line">    <span class="keyword">const</span> a16 = <span class="number">0x10</span>;</span><br><span class="line">    <span class="keyword">const</span> n_number = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">const</span> n_object = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">12</span>) <span class="comment">//object</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a2, a16, n_number, n_object);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Math class</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>, <span class="title class_">Math</span>.<span class="title function_">random</span>(), <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">4.3</span>), <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="title class_">Math</span>.<span class="title function_">max</span>(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line">    <span class="comment">//Date class library</span></span><br><span class="line">    <span class="keyword">const</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(today.<span class="title function_">toString</span>(), today.<span class="title function_">getMilliseconds</span>(), today.<span class="title function_">getHours</span>(), )</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> / <span class="number">2</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">3</span> / <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//random float number from [0-1)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line">    <span class="comment">//random integer from [0-10)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="number">2</span> == <span class="number">3</span>); <span class="comment">// true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span>); <span class="comment">// false, never compare float!!!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">number_date</span>()</span><br></pre></td></tr></table></figure>

<pre><code>3 16 12 [Number: 12]
3.141592653589793 0.3273509254139666 4 1 3
Wed Nov 04 2020 18:26:24 GMT+0800 (China Standard Time) 700 18
1.5
1
0.8324244498379996
2
true
false
</code></pre>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">string_number_convert</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// use parseInt and parseFloat which are more poweroff than Number()</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="string">&#x27;123&#x27;</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="string">&#x27; 123&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//not a number</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="string">&#x27;123a&#x27;</span>)); <span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;123&#x27;</span>, <span class="number">10</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27; 123&#x27;</span>, <span class="number">10</span>));</span><br><span class="line">    <span class="comment">// still get a number</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27; 123a&#x27;</span>, <span class="number">10</span>)); <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//convert string to number</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//valueOf(valueOf is called when number is needed) is called implicitly,</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span> - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// call valueOf explicitly.</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>.<span class="title function_">valueOf</span>() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// convert number to string</span></span><br><span class="line">    <span class="keyword">const</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(num));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">2</span> + <span class="string">&#x27;hello&#x27;</span>); <span class="comment">//toString is called implicitly when string is needed.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">string_number_convert</span>()</span><br></pre></td></tr></table></figure>

<pre><code>123
123
NaN
123
123
123
2
2
123
123
2hello
</code></pre>
<h3 id="Special-number-NaN"><a href="#Special-number-NaN" class="headerlink" title="Special number NaN"></a>Special number NaN</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sepcial_number</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;special number: Infinity and -Infinity,NaN are numbers \nNaN: any number of other numeric operations that don not yield a meaningful result.&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Infinity</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(-<span class="title class_">Infinity</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">NaN</span>);</span><br><span class="line">    <span class="comment">// NaN is for **numeric operations** that don not yield a meaningful result</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>/<span class="number">0</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span> * <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// Strings cannot be divided, multiplied, or subtracted</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span> - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// NaN meaningless result, hence NaN==NaN is false!!!</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="title class_">NaN</span>)</span><br><span class="line">    <span class="comment">// check its value if it&#x27;s NaN or Not</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&#x27;1&#x27;</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// isNaN check if the parameter is number or not</span></span><br><span class="line">    <span class="comment">// not a number</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&#x27;1&#x27;</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sepcial_number</span>()</span><br></pre></td></tr></table></figure>

<pre><code>special number: Infinity and -Infinity,NaN are numbers
NaN: any number of other numeric operations that don not yield a meaningful result.
Infinity
-Infinity
number
NaN
NaN
NaN
false
true
false
false
false
false
true
false
</code></pre>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>Sting index starts with 0, not support -1 as the last index.</p>
<p>There are two ways to create a string, one uses string primitive, the other uses String object.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s_hi = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> s_hi_o = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line"><span class="comment">//The String object is a wrapper around the string primitive data type</span></span><br></pre></td></tr></table></figure>
<p>But you can call any of the methods of the String object on a string literal value—JavaScript automatically converts the string literal to a temporary String object, calls the method, then discards the temporary String object</p>
<p>strings are <code>immutable array-like objects</code>, you can’t change individual characters.</p>
<p>There is another big feature for string is <code>template string</code>, you access var from string directly, more like Bash, it’s easy to create complex string by accessing var.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;jason&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi $&#123;name&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">&quot;hi $&#123;name&#125;&quot;</span>;</span><br><span class="line">consolg.<span class="title function_">log</span>(msg);</span><br></pre></td></tr></table></figure>
<p><strong>run js from string</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">eval_demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">&#x27;var x = 10;&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">eval_demo();</span><br></pre></td></tr></table></figure>


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">string_demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//convert 100 to string</span></span><br><span class="line">    <span class="keyword">let</span> s_n = <span class="title class_">String</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s_n, <span class="string">&quot;hi number &quot;</span> + <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">let</span> s_hi = <span class="string">&quot;9hello, boy boy &quot;</span>;</span><br><span class="line">    s_hi[<span class="number">0</span>] = <span class="string">&quot;B&quot;</span>; <span class="comment">//no effect, but no exception.</span></span><br><span class="line">    <span class="comment">// last index: -1, not supported by function!!! s_hi[-1] not supported!!!</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s_hi, s_hi[<span class="number">0</span>], s_hi.<span class="property">length</span>,</span><br><span class="line">                <span class="comment">// auto-box happens</span></span><br><span class="line">                <span class="string">&#x27;\n&#x27;</span> + s_hi.<span class="title function_">indexOf</span>(<span class="string">&quot;ll&quot;</span>), <span class="comment">//check substring index</span></span><br><span class="line">                <span class="string">&#x27;\n&#x27;</span> + s_hi.<span class="title function_">slice</span>(<span class="number">1</span>, -<span class="number">1</span>),  <span class="comment">//slice, from index 1 to index -1</span></span><br><span class="line">                <span class="string">&#x27;\n&#x27;</span> + s_hi.<span class="title function_">substr</span>(<span class="number">1</span>, <span class="number">2</span>),  <span class="comment">//from index 1, include 2 bytes</span></span><br><span class="line">                <span class="string">&#x27;\n&#x27;</span> + s_hi.<span class="title function_">toUpperCase</span>(),</span><br><span class="line">                <span class="string">&#x27;\n&#x27;</span> + s_hi.<span class="title function_">replace</span>(<span class="string">&quot;ll&quot;</span>, <span class="string">&quot;xx&quot;</span>),<span class="comment">//replace substring, support regular pattern</span></span><br><span class="line">                <span class="string">&#x27;\n&#x27;</span> + s_hi.<span class="title function_">startsWith</span>(<span class="string">&quot;he&quot;</span>),</span><br><span class="line">                <span class="string">&#x27;\n&#x27;</span> + s_hi.<span class="title function_">endsWith</span>(<span class="string">&quot;xx&quot;</span>),</span><br><span class="line">                <span class="string">&#x27;\n&#x27;</span> + s_hi.<span class="title function_">includes</span>(<span class="string">&quot;ll&quot;</span>),</span><br><span class="line">                <span class="string">&#x27;\n&#x27;</span> + s_hi.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>),</span><br><span class="line">                <span class="string">&#x27;\n&#x27;</span> + s_hi.<span class="title function_">trim</span>(),<span class="comment">//trim tab, space from start and end.</span></span><br><span class="line">                <span class="string">&#x27;\n&#x27;</span> + s_hi.<span class="title function_">repeat</span>(<span class="number">3</span>)</span><br><span class="line">               ); <span class="comment">//repeat string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">string_demo</span>()</span><br></pre></td></tr></table></figure>

<pre><code>100 hi number 100
9hello, boy boy  9 16
3
hello, boy boy
he
9HELLO, BOY BOY
9hexxo, boy boy
false
false
true
9hello, boy boy
9hello, boy boy
9hello, boy boy 9hello, boy boy 9hello, boy boy
</code></pre>
<h3 id="some-String-APIs-support-regex"><a href="#some-String-APIs-support-regex" class="headerlink" title="some String  APIs support regex"></a>some String  APIs support regex</h3><p>when use with regex with such API, patter must be written in way <code>/pattern/</code>, not <code>&quot;pattern&quot;</code>.</p>
<ul>
<li>search: check if match return -1 if no match</li>
<li>match:  got the matched value, return null if no match</li>
<li>replace: repalce matched part, return a new string</li>
</ul>
<p>match: return an object that looks like an array, if no matched, null returned</p>
<ul>
<li>index: the start matched index</li>
<li>[0]: the full matched string</li>
<li>[1]…[n]: the substring matched in ()</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">string_regex_api</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s_hi = <span class="string">&quot;9hello, boy boy &quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s_hi.<span class="title function_">search</span>(<span class="regexp">/[0-9]h/g</span>), s_hi.<span class="title function_">search</span>(<span class="regexp">/[0-9]b/g</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The $1 and $2 in the replacement string refer to the parenthesized groups in</span></span><br><span class="line">    <span class="comment">// the pattern. $1 is replaced by the text that matched against the first group, $2</span></span><br><span class="line">    <span class="comment">// by the second, and so on, up to $9. The whole match can be referred to with $&amp;.</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s_hi.<span class="title function_">replace</span>(<span class="regexp">/(hello), (boy)/g</span>, <span class="string">&#x27;$2, $1&#x27;</span>));<span class="comment">//NOT &#x27;/boy/g&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s_hi.<span class="title function_">replace</span>(<span class="string">&#x27;boy&#x27;</span>, <span class="string">&#x27;girl&#x27;</span>)); <span class="comment">// only first replace without pattern</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> matched = s_hi.<span class="title function_">match</span>(<span class="regexp">/9([a-z]*)/</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(matched.<span class="property">index</span>, matched[<span class="number">0</span>], matched[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//dynamic pattern, must create RegExp explictly with dynamic value.</span></span><br><span class="line">    <span class="keyword">let</span> pattern = <span class="string">&#x27;9[a-z]&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(pattern);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s_hi.<span class="title function_">match</span>(reg)[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">string_regex_api</span>()</span><br></pre></td></tr></table></figure>

<pre><code>0 -1
9boy, hello boy
9hello, girl boy
0 9hello hello
9h
</code></pre>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>Array element can have different types, but most time, it stores same type.</p>
<p>Like string, there are two ways to create an array, <code>but both created object</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array_p = [<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> array_o = <span class="keyword">new</span> <span class="title class_">Array</span>([<span class="string">&quot;a&quot;</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="comment">//let array_o = new Array();</span></span><br><span class="line">array_o[<span class="number">2</span>] = <span class="string">&quot;c&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Array supports method same like Python</p>
<ul>
<li>pop(), push(elm) at end</li>
<li>shift(), unshift(elm) at head</li>
<li>reverse, sort</li>
<li>join</li>
<li>find: return the first element, filter use callback for testing, return a new filtered array.</li>
<li>indexOf&#x2F;lastIndexOf: return index or last of the element, -1 if not found</li>
<li>includes: like indexOf, but return true or false.</li>
<li>forEach, map, reduce, filter <strong>always use this if possible to avoid for loop</strong><ul>
<li><strong>forEach,map, reduce, filter provides second argument(thisArgs) used as this by callback handler</strong></li>
</ul>
</li>
<li>slice(subarray, copy array if no parameter), concat(combine two arrays): new array is returned, orignal unchanged</li>
<li>some&#x2F;every: return true if all&#x2F;some pass test.</li>
<li>Array.isArray(obj): return true if an arry</li>
</ul>
<p>check an element in an array with several ways</p>
<ul>
<li>for to loop every element</li>
<li>indexOf</li>
<li>includes</li>
</ul>
<p><strong>NOTE: index from 0 and element can be any type, not same</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">check_array_type</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// array is an object with constructor == Array</span></span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> arr);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arr == <span class="string">&#x27;object&#x27;</span> &amp;&amp; arr.<span class="property">constructor</span> == <span class="title class_">Array</span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;var arr is an array&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">check_array_type</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">array_demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">is_number</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="built_in">isNaN</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> array_p = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>];</span><br><span class="line">    array_p.<span class="title function_">push</span>(<span class="number">3</span>); <span class="comment">//add one at tail</span></span><br><span class="line">    array_p.<span class="title function_">shift</span>(); <span class="comment">//remove one from head</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(array_p,</span><br><span class="line">                <span class="comment">//auto-box</span></span><br><span class="line">                array_p.<span class="title function_">concat</span>([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]),</span><br><span class="line">                array_p.<span class="title function_">slice</span>(),  <span class="comment">//copy array</span></span><br><span class="line">                array_p.<span class="title function_">slice</span>(<span class="number">1</span>),</span><br><span class="line">                array_p.<span class="title function_">slice</span>(<span class="number">1</span>,<span class="number">2</span>), <span class="comment">//sub array index from [1, 2)</span></span><br><span class="line">                array_p.<span class="title function_">toString</span>(),</span><br><span class="line">                array_p.<span class="title function_">find</span>(is_number), <span class="comment">//first number in array</span></span><br><span class="line">                array_p.<span class="title function_">indexOf</span>(<span class="number">3</span>),</span><br><span class="line">                array_p.<span class="title function_">indexOf</span>(<span class="number">4</span>),</span><br><span class="line">                array_p.<span class="title function_">includes</span>(<span class="number">3</span>),</span><br><span class="line">                array_p.<span class="title function_">filter</span>(is_number),</span><br><span class="line">                array_p.<span class="title function_">join</span>(<span class="string">&#x27;;&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// good way to use but can not break at some point</span></span><br><span class="line">    array_p.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">elm</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(elm);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//better new way to iterator array, can break at some point</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> elm <span class="keyword">of</span> array_p) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(elm);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> elm <span class="keyword">in</span> array_p) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(elm); <span class="comment">//print index 0, 1, 2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//map, reduce, filter</span></span><br><span class="line">    <span class="keyword">let</span> array_n = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="comment">//map takes every element as input and return a value to contruct a new array</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(array_n.<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>)=&gt;</span> x+<span class="number">2</span>));</span><br><span class="line">    <span class="comment">//filter takes every element as input, return true or false, only true element contruct a new array</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(array_n.<span class="title function_">filter</span>(<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;<span class="keyword">if</span> (x&gt;<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>; <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;&#125;))</span><br><span class="line">    <span class="comment">//reduce takes parameter, previous call return value and current element, the final output is last call output</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(array_n.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prereturn, x</span>)=&gt;</span>prereturn + x))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(array_n.<span class="title function_">every</span>(<span class="function"><span class="params">x</span>=&gt;</span>x&gt;<span class="number">2</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(array_n.<span class="title function_">some</span>(<span class="function"><span class="params">x</span>=&gt;</span>x&gt;<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">array_demo</span>()</span><br></pre></td></tr></table></figure>

<pre><code>object
var arr is an array
[ &#39;a&#39;, 2, 3 ] [ &#39;a&#39;, 2, 3, 3, 4, 5 ] [ &#39;a&#39;, 2, 3 ] [ 2, 3 ] [ 2 ] a,2,3 2 2 -1 true [ 2, 3 ] a;2;3
a
2
3
a
2
3
0
1
2
arrCustom
[ 3, 4, 5 ]
[ 2, 3 ]
6
false
true
</code></pre>
<h3 id="delete-an-element-from-array"><a href="#delete-an-element-from-array" class="headerlink" title="delete an element from array"></a>delete an element from array</h3><table>
<thead>
<tr>
<th>Remove?</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>An item</td>
<td>array.splice(index, 1)</td>
</tr>
<tr>
<td>First item</td>
<td>array.shift()</td>
</tr>
<tr>
<td>Last item</td>
<td>array.pop()</td>
</tr>
<tr>
<td>What about delete?</td>
<td>Try to avoid delete, causes sparse arrays.</td>
</tr>
</tbody></table>
<p><strong>delete do NOT change length and leave empty slot! others NOT</strong></p>
<p>Using delete creates these kinds of holes. It removes an item from the array, but it doesn’t update the length property. This leaves the array in a funny state that is best avoided.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">array_del</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> array = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line">    <span class="keyword">delete</span> array[<span class="number">1</span>];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(array, array.<span class="property">length</span>);</span><br><span class="line">    array = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line">    <span class="comment">//first argument is element index!!!, the second is from that index how many elements will be deleted.</span></span><br><span class="line">    array.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(array, array.<span class="property">length</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">array_del</span>()</span><br></pre></td></tr></table></figure>

<pre><code>[ &#39;a&#39;, &lt;1 empty item&gt;, &#39;c&#39;, &#39;d&#39; ] 4
[ &#39;a&#39;, &#39;c&#39;, &#39;d&#39; ] 3
</code></pre>
<h2 id="MAP"><a href="#MAP" class="headerlink" title="MAP"></a>MAP</h2><p>Map is a litte different with Array, map uses keys as index while Array uses number.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">map_demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> map_o = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="comment">//map_o[&quot;a&quot;] = 1; //this never update size, never use this way!!!</span></span><br><span class="line">    map_o.<span class="title function_">set</span>(<span class="string">&quot;b&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="comment">//map_o.delete(&quot;b&quot;);//delete map_o[&#x27;b&#x27;]</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(map_o,</span><br><span class="line">                map_o.<span class="property">size</span>,</span><br><span class="line">                map_o.<span class="title function_">get</span>(<span class="string">&#x27;b&#x27;</span>),</span><br><span class="line">                <span class="comment">// check key exist</span></span><br><span class="line">                map_o.<span class="title function_">has</span>(<span class="string">&#x27;b&#x27;</span>));</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> iter = map_o.<span class="title function_">keys</span>();</span><br><span class="line">    <span class="keyword">while</span> (i &lt; map_o.<span class="property">size</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> key = iter.<span class="title function_">next</span>().<span class="property">value</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;item: %s %s&quot;</span>, key, map_o.<span class="title function_">get</span>(key));</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    map_o.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value, key</span>) &#123;</span><br><span class="line">        <span class="comment">//can loop each Map item, but can&#x27;t break/continue somehow!!</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//new ways, should we use for map!!!</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> [k, v] <span class="keyword">of</span> map_o) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(k, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">of</span> map_o.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">map_demo</span>();</span><br></pre></td></tr></table></figure>

<pre><code>Map &#123; &#39;b&#39; =&gt; 2 &#125; 1 2 true
item: b 2
b 2
b 2
b
</code></pre>
<h2 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h2><p>There is no Enum in javacript at all, use object to simulate it</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">enum_demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> size = &#123;<span class="attr">SMALL</span>: <span class="number">0</span>, <span class="attr">MEDIUM</span>: <span class="number">1</span>, <span class="attr">LARGE</span>: <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> count = [];</span><br><span class="line">    count[size.<span class="property">SMALL</span>] = <span class="number">1</span>;</span><br><span class="line">    count[size.<span class="property">MEDIUM</span>] = <span class="number">2</span>;</span><br><span class="line">    count[size.<span class="property">LARGE</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">enum_demo</span>()</span><br></pre></td></tr></table></figure>

<pre><code>[ 1, 2, 3 ]
</code></pre>
<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p><strong>arguments</strong></p>
<p>If you pass too many, the extra ones are ignored. If you pass too few, the missing parameters get assigned the value undefined, but you can access all arguments by <code>arguments</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test_arg</span>(<span class="params">a, b, c = <span class="number">12</span></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c,);</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test_arg</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 undefined 12</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">test_arg</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 2 4</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="Function-closure"><a href="#Function-closure" class="headerlink" title="Function closure"></a>Function closure</h3><p>This feature—being able to reference a specific instance of a local binding in<br>an enclosing scope—is called closure. A function that references bindings from<br>local scopes around it is called a closure</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f2 = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> counter = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="keyword">return</span> counter++;&#125;;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">// we calls first function(local counter =1) which can be accessed by inner function</span></span><br><span class="line"><span class="comment">// after return, the local counter is not freed at all as f2 still have a reference to it!!!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//counter as a global to f2</span></span><br><span class="line"><span class="title function_">f2</span>(); <span class="comment">//we call the second function</span></span><br><span class="line"><span class="title function_">f2</span>(); <span class="comment">//we call the second function</span></span><br></pre></td></tr></table></figure>

<p>Another case</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeAdder</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> add5 = <span class="title function_">makeAdder</span>(<span class="number">5</span>);</span><br><span class="line"><span class="title function_">add5</span>(<span class="number">6</span>); <span class="comment">//</span></span><br></pre></td></tr></table></figure>

<p>when makeAdder() is called, a scope object is created with one property: a, which is the argument passed to the makeAdder() function. makeAdder() then returns a newly created function. Normally JavaScript’s <code>garbage collector would clean up the scope object</code> created for makeAdder() at this point, but the returned function maintains a reference back to that scope object. As a result, <code>the scope object will not be garbage-collected until there are no more references to the function object that makeAdder() returned</code>.</p>
<h3 id="Arrow-function"><a href="#Arrow-function" class="headerlink" title="Arrow function"></a>Arrow function</h3><p>As js supports annymous function(a function without name), more over, you can even skip <code>function</code> keyword for annymous function, that’s arrow function <code>=&gt;</code>, like annymous function, you can use arrow function as a callback directly, or save it as function object, call it later on</p>
<p>There are severls rule to define an arrow function.</p>
<p><strong>parameter rule</strong></p>
<ul>
<li>If there are 0 Parameters, arrow functions use empty parenthesis: () &#x3D;&gt; { statements; }</li>
<li>If there is 1 Parameter, arrow functions can omit the parenthesis around the parameter: parameter &#x3D;&gt; { statements }</li>
<li>If there are 2+ Parameters, parameters go inside parenthesis: (param1, param2, …) &#x3D;&gt; { statements }</li>
</ul>
<p><strong>return rule</strong></p>
<ul>
<li>If an arrow function is simply <code>returning a single line of code</code>, you can omit the statement brackets and the return keyword.</li>
<li>if you arrow function does NOT return, say just long or printing, you can NOT omit brackets, that means brackets is not omitted in most case, with brackents if you want to return a value, you must use <code>return</code> keyword, otherwise, undefined is returned.</li>
</ul>
<h3 id="Definition-and-Call"><a href="#Definition-and-Call" class="headerlink" title="Definition and Call"></a>Definition and Call</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun_demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">arrow1</span> = name=&gt;name;</span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">arrow2</span> = (<span class="params"></span>)=&gt;&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi&quot;</span>);&#125; <span class="comment">//no return undefined returned</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">arrow3</span> = (<span class="params">a, b</span>)=&gt;a+b;</span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">arrow4</span> = (<span class="params">a, b</span>)=&gt;&#123;a+b;&#125;; <span class="comment">//undefined return as with brackets, need a return value, must use `return`</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">arrow5</span> = (<span class="params">a, b</span>)=&gt;&#123;<span class="keyword">return</span> a+b;&#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arrow1</span>(<span class="string">&quot;jason&quot;</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arrow2</span>()); <span class="comment">//print &#x27;hi&#x27; return undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arrow3</span>(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arrow4</span>(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arrow5</span>(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun_demo</span>()</span><br></pre></td></tr></table></figure>

<pre><code>jason
hi
undefined
3
undefined
3
</code></pre>
<h2 id="Class-x2F-Object-x2F-object"><a href="#Class-x2F-Object-x2F-object" class="headerlink" title="Class&#x2F;Object&#x2F;object"></a>Class&#x2F;Object&#x2F;object</h2><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p>There are two ways to declare a class ES5 way, ES6(ES2015), <code>object is light weighted Object</code>, object no built-in properties and methods, it’s more effecient thant Object, object behaves like a Map, key:value pairs, but it’s not a map hence <code>object.get(&#39;a&#39;)</code> will report error as object no built-in stuff.</p>
<ul>
<li><p>object key must be string, but Map key can be anything.</p>
</li>
<li><p>Object.assign() copies the values (of all enumerable own properties) from one or more source objects to a target object. It has a signature of Object.assign(target, …sources).</p>
</li>
</ul>
<p><strong>The target object is the first parameter and is also used as the return value</strong>.</p>
<ul>
<li>Object.assign() is useful for merging objects or cloning them shallowly.</li>
</ul>
<p><strong>property</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorthand to create an object</span></span><br><span class="line"><span class="keyword">let</span> ob1 = &#123;a, b&#125;; <span class="comment">// same as let ob1=&#123;&#x27;a&#x27;:1, &#x27;b&#x27;:2&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ob1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jason&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;your name&#x27;</span>: <span class="string">&#x27;jason&#x27;</span> <span class="comment">//&#x27;&#x27; is required as &#x27;your name&#x27; has space</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// two ways to access name property.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ob1.<span class="property">name</span>, ob1[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="comment">// only one way for &#x27;your name&#x27; property.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ob1[<span class="string">&#x27;your name&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// add one property</span></span><br><span class="line">ob1.<span class="property">age</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// merge two objects(ob1 is returned and modified, the key conflicts, the last source wins</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(ob1, &#123;<span class="attr">age</span>: <span class="number">100</span>, <span class="attr">id</span>: <span class="number">100</span>&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ob1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// clone an object</span></span><br><span class="line"><span class="keyword">let</span> clone_ob = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, ob1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clone_ob);</span><br></pre></td></tr></table></figure>


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">object_demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// object instance of it&#x27;s own property and functions</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        <span class="string">&quot;your name&quot;</span>: <span class="string">&quot;jason&quot;</span>, <span class="comment">// NOT ; but , &quot;&quot; is required</span></span><br><span class="line">        <span class="attr">id</span>: <span class="number">16</span>,          <span class="comment">// no quote is OK!</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">get_name_again</span>: <span class="keyword">function</span> <span class="title function_">get_name_again</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>[<span class="string">&#x27;your name&#x27;</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//shorthand to define a method</span></span><br><span class="line">        <span class="title function_">get_name</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>[<span class="string">&#x27;your name&#x27;</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    obj.<span class="property">get_name_v2</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>[<span class="string">&#x27;your name&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// two ways to access method</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">id</span>, obj.<span class="title function_">get_name</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">id</span>, obj[<span class="string">&quot;get_name_again&quot;</span>]());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">id</span>, obj.<span class="title function_">get_name_v2</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="comment">//loop all attributes and its value</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(key, obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// shorthand to create an object</span></span><br><span class="line">    <span class="keyword">let</span> ob1 = &#123;a, b&#125;; <span class="comment">// same as let ob1=&#123;&#x27;a&#x27;:1, &#x27;b&#x27;:2&#125;;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ob1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ob2 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&quot;b&quot;</span>: <span class="number">2</span>&#125;;</span><br><span class="line">    ob2[<span class="string">&#x27;c&#x27;</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">// delete a property</span></span><br><span class="line">    <span class="keyword">delete</span> ob2.<span class="property">a</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ob2,</span><br><span class="line">                ob2.<span class="property">c</span>,</span><br><span class="line">                ob2[<span class="string">&#x27;b&#x27;</span>],</span><br><span class="line">                 <span class="comment">// check key exist</span></span><br><span class="line">                <span class="string">&#x27;b&#x27;</span> <span class="keyword">in</span> ob2)</span><br><span class="line">    <span class="comment">//get keys of object, return an array of keys</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(ob2));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ob3 = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">let</span> ob4 = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">// compare object, it compares its address, hence it&#x27;s false.</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ob3 == ob4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">object_demo</span>()</span><br></pre></td></tr></table></figure>

<pre><code>16 jason
16 jason
16 jason
your name jason
id 16
get_name_again [Function: get_name_again]
get_name [Function: get_name]
get_name_v2 [Function]
&#123; a: 1, b: 2 &#125;
&#123; b: 2, c: 3 &#125; 3 2 true
[ &#39;b&#39;, &#39;c&#39; ]
false
</code></pre>
<h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><p>ES5 class</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get_name</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, id</span>) &#123;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name); <span class="comment">// call super class constructor bound to same this as Student.</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// same prototype as parent(extended),hence Student can see get_name as well!!!</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get_id</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">id</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">prefix_name</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;prefix_&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;jason&#x27;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="title function_">get_name</span>(), s1.<span class="title function_">prefix_name</span>(), s1.<span class="title function_">get_id</span>()); <span class="comment">// jason prefix_jason 10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>With ES6, add keyword like <code>class, construtor, static, super, extends</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// no function keyword</span></span><br><span class="line">    <span class="title function_">get_name</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">es5_class_demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//constructor function always with UpperCase first letter</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, id</span>) &#123;</span><br><span class="line">        <span class="string">&#x27;use strict&#x27;</span>; <span class="comment">// call me without new will throw an error!!</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get_name</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Outside method defines.</span></span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">set_name</span> = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// all instances have these, outside the contructor</span></span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">10</span>; <span class="comment">//static, shared by all instances</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;jason&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    p1.<span class="property">gender</span> = <span class="string">&#x27;male&#x27;</span>; <span class="comment">//only to this instance, add new attribute, do not use this way</span></span><br><span class="line">    <span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;cob&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">    p2.<span class="property">get_id</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">//add method to an existing object</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">id</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">get_name</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">name</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="title function_">get_id</span>());</span><br><span class="line">    p2.<span class="title function_">set_name</span>(<span class="string">&quot;frank&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="title function_">get_name</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">es5_class_demo</span>()</span><br></pre></td></tr></table></figure>

<pre><code>jason
cob
2
frank
10
</code></pre>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">es6_class_demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">get_name</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name, id</span>) &#123;</span><br><span class="line">            <span class="comment">// call parent constructor!!!</span></span><br><span class="line">            <span class="variable language_">super</span>(name);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">            <span class="comment">// parent and subclass has the same name property</span></span><br><span class="line">            <span class="comment">// actuall the two property are same one!!! on instance object!</span></span><br><span class="line">            <span class="comment">// never do this, avoid subclass has same name property with parent!!!</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">get_id</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">id</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">get_prefix_name</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// call parent&#x27;s function in child</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;prefix_&#x27;</span> + <span class="variable language_">super</span>.<span class="title function_">get_name</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;jason&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="title function_">get_name</span>(), s1.<span class="title function_">get_id</span>(), s1.<span class="title function_">get_prefix_name</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">es6_class_demo</span>();</span><br></pre></td></tr></table></figure>

<pre><code>hello 1 prefix_hello
</code></pre>
<h4 id="loop-properties"><a href="#loop-properties" class="headerlink" title="loop properties"></a>loop properties</h4><ol>
<li>for…in: which returns all the enumerable properties of an object, regardless of whether they are own properties, or inherited from the prototype chain.<ul>
<li>返回对象自身的和继承的<strong>可枚举属性</strong>（不含 Symbol 属性）。</li>
</ul>
</li>
<li>Object.keys(ob): which returns all own, enumerable properties of an object, an ECMA5 method<ul>
<li>返回一个数组，包括自身的（不含继承) 所有可枚举属性（不含 Symbol 属性）。</li>
</ul>
</li>
<li>Object.getOwnPropertyNames(obj): which returns all own properties of an object, both enumerable or not<ul>
<li>返回一个数组，包括自身的(不含继承) 所有属性（不含Symbol属性，但包括不可枚举属性）。</li>
</ul>
</li>
<li>Object.getOwnPropertySymbols(obj): which returns all own symbol properties of an object, enumerable or not<ul>
<li>返回一个数组。包含对象自身（不含继承）的所有 Symbol 属性。</li>
</ul>
</li>
<li>Reflect.ownKeys(obj)<br> 返回一个数组，包含对象所有的属性(不含继承）&#x3D;&#x3D; 3 + 4 。</li>
<li>obj.hasOwnProperty(prop): check if a property is inherited or actually belongs to that object</li>
<li>obj.propertyIsEnumerable(prop) if a property is enumerable.</li>
</ol>
<p><strong>use Object.defineProperty() to define non-enumerable property</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loop_properties</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> get_id = <span class="title class_">Symbol</span>(<span class="string">&quot;get_id&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> plain_object = &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="title function_">name</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> <span class="string">&#x27;plain&#x27;</span>&#125;,</span><br><span class="line">        <span class="comment">// define a symbol property with [Symbol]</span></span><br><span class="line">        [get_id]() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">id</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//add non-enumerable property, you never see me by for ...in</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(plain_object, <span class="string">&quot;get_name&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;get_name&#x27;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> plain_object) &#123;</span><br><span class="line">        <span class="comment">// no get_name printed here as it&#x27;s not enumerable!!!</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(attr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="comment">// add a symbol properity to an object.</span></span><br><span class="line">    plain_object[id] = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// access a symbol function.</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(plain_object[get_id]());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(plain_object));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(plain_object));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(plain_object));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(plain_object));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// plain_object.hasOwnProperty = 10;</span></span><br><span class="line">    <span class="comment">// not safe if hasOwnProperty is set</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(plain_object.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;id&#x27;</span>));</span><br><span class="line">    <span class="keyword">var</span> hasOwn = &#123;&#125;.<span class="property">hasOwnProperty</span>; <span class="comment">//extract or Object.prototype.hasOwnProperty</span></span><br><span class="line">    hasOwn.<span class="title function_">call</span>(plain_object, <span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">loop_properties</span>()</span><br></pre></td></tr></table></figure>

<pre><code>id
name
12
[ &#39;id&#39;, &#39;name&#39; ]
[ &#39;id&#39;, &#39;name&#39;, &#39;get_name&#39; ]
[ Symbol(get_id), Symbol(id) ]
[ &#39;id&#39;, &#39;name&#39;, &#39;get_name&#39;, Symbol(get_id), Symbol(id) ]
true
</code></pre>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getAllPropertyNames</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="comment">// own, inherited properties, enumerable and non-enumerable!!!</span></span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">while</span> (obj) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">p</span> =&gt;</span> result.<span class="title function_">push</span>(p));</span><br><span class="line">    result.<span class="title function_">push</span>(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">    <span class="comment">//get parent prototype!!!</span></span><br><span class="line">    obj = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">      <span class="attr">abc</span>: <span class="number">123</span>,</span><br><span class="line">      <span class="attr">xyz</span>: <span class="number">1.234</span>,</span><br><span class="line">      <span class="attr">foobar</span>: <span class="string">&quot;hello&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getAllPropertyNames</span>(obj));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// obj1 has no inherited property!!!</span></span><br><span class="line">    <span class="keyword">let</span> obj1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">    obj1.<span class="property">abc</span> = <span class="number">123</span>;</span><br><span class="line">    obj1.<span class="property">xyz</span>= <span class="number">1.234</span>;</span><br><span class="line">    obj1.<span class="property">foobar</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getAllPropertyNames</span>(obj1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>[
  &#39;abc&#39;,              &#39;xyz&#39;,
  &#39;foobar&#39;,           &#39;#&#39;,
  &#39;constructor&#39;,      &#39;__defineGetter__&#39;,
  &#39;__defineSetter__&#39;, &#39;hasOwnProperty&#39;,
  &#39;__lookupGetter__&#39;, &#39;__lookupSetter__&#39;,
  &#39;isPrototypeOf&#39;,    &#39;propertyIsEnumerable&#39;,
  &#39;toString&#39;,         &#39;valueOf&#39;,
  &#39;__proto__&#39;,        &#39;toLocaleString&#39;,
  &#39;#&#39;
]
[ &#39;abc&#39;, &#39;xyz&#39;, &#39;foobar&#39;, &#39;#&#39; ]
</code></pre>
<h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>A “symbol” represents a unique identifier, it’s mostly used to avoid conflict, <code>you can image it as a unique string</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// id is a symbol with the description &quot;id&quot;</span></span><br><span class="line"><span class="keyword">let</span> id1 = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);  <span class="comment">// id1 is not in global registry!!!!</span></span><br><span class="line"><span class="keyword">let</span> id2 = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="comment">//They are not equal, but only the description is same for debug meta data</span></span><br><span class="line">id1 == id2; <span class="comment">// false!!!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// id is a symbol with the description &quot;id&quot;</span></span><br><span class="line"><span class="keyword">let</span> id1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;name&quot;</span>);  <span class="comment">//create if not found in global registry!!</span></span><br><span class="line"><span class="keyword">let</span> id2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;name&quot;</span>);  <span class="comment">//check global registry with &#x27;name&#x27; key, return if found</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id1 == id2); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> id3 = <span class="title class_">Symbol</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> id4 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id3 == id4); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>That call checks the global registry, and if there’s a symbol described as key, then returns it, otherwise creates a new symbol Symbol(key) and stores it in the registry by the given key.</p>
<p>Symbols don’t auto-convert to a string, and Symbolic properties do not participate in for..in loop.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">symbol_demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> id1 = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> id2 = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(id1.<span class="title function_">toString</span>(), id2.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> name = <span class="title class_">Symbol</span>(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> user = &#123; <span class="comment">// belongs to third-party code</span></span><br><span class="line">      <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">      [name]: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">      <span class="comment">// MUST use [] to refer to symbol.</span></span><br><span class="line">      <span class="comment">//no one else can change the value outside of third-party, it&#x27; safe for library</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//without function keyword</span></span><br><span class="line">      [id]()&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//with function keyword</span></span><br><span class="line">      <span class="attr">get_age</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(user[name], user[id]());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Symbolic properties do not participate in for..in loop.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> att <span class="keyword">in</span> user) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(att, user[att]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="title function_">get_age</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">symbol_demo</span>()</span><br></pre></td></tr></table></figure>

<pre><code>Symbol(id) Symbol(id)
John 10
age 30
get_age [Function: get_age]
30
</code></pre>
<h2 id="Iterator-x2F-Generator"><a href="#Iterator-x2F-Generator" class="headerlink" title="Iterator&#x2F;Generator"></a>Iterator&#x2F;Generator</h2><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p>Iterator is an object, with next method, it wrapps an object(string, array, map) to make it iterable, so that you can iterate the wrapped object by <code>for/of</code>, most of time, you did not call iterator at all, but now how see how it works.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// String, Array, Map etc has a property Symbol.iterator which returns an Iterator.</span></span><br><span class="line"><span class="keyword">let</span> okIterator = <span class="string">&quot;OK&quot;</span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(okIterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// . &#123;value: &quot;O&quot;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(okIterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// . &#123;value: &quot;K&quot;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(okIterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// . &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>Iterator Abstract Interface required</strong><br>First let simulate an Iterator which has <code>next()</code> method, it returns an object which has two keys <code>value</code> and <code>done</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//user is an object.</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeIterator</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> index &lt; array.<span class="property">length</span>?</span><br><span class="line">                &#123;<span class="attr">value</span>: array[index++], <span class="attr">done</span>: <span class="literal">false</span>&#125; :</span><br><span class="line">                &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;; <span class="comment">/* here return an object instance which has next method */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterS = <span class="title function_">makeIterator</span>([<span class="number">99</span>,<span class="number">88</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterS.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterS.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterS.<span class="title function_">next</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> iter = arr1[<span class="title class_">Symbol</span>.<span class="property">iterator</span>](); <span class="comment">/*!get Iterator of array!*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iter.<span class="title function_">next</span>())  <span class="comment">/* value: 1 done: false */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iter.<span class="title function_">next</span>())  <span class="comment">/* value: undefined, done: true */</span></span><br></pre></td></tr></table></figure>

<p><a href="https://medium.com/@madasamy/explanation-about-iterators-and-generators-in-javascript-es6-f7e669cbe96e">Iterator</a></p>
<h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><p>When you define a function with function* (placing an asterisk after the word function), it becomes a generator. <code>When you call a generator, it returns an iterator</code>.</p>
<p>Every time you call next on the iterator, the function runs until it hits a yield expression, which pauses it and causes the yielded value to become the next value produced by the iterator. When the function returns (the one in the example never does), the iterator is done.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">generator_demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//Generator!!</span></span><br><span class="line">    <span class="keyword">function</span> *<span class="title function_">helloWorldGen</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> x;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">        x = <span class="keyword">yield</span>  <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">        <span class="comment">// called get &#x27;world&#x27; but x undefined if next doesn&#x27;t take parameter for next call!</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//generator return an Iterator.</span></span><br><span class="line">    <span class="keyword">let</span> hw_gen = <span class="title function_">helloWorldGen</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(hw_gen.<span class="title function_">next</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(hw_gen.<span class="title function_">next</span>());</span><br><span class="line">    <span class="comment">// when next takes parameter, it indicates the last yield express value used internal!</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(hw_gen.<span class="title function_">next</span>(<span class="number">2</span>)); <span class="comment">//console.log(hw_gen.next());</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> elm <span class="keyword">of</span> <span class="title function_">helloWorldGen</span>()) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(elm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> objiter = &#123;</span><br><span class="line">        <span class="attr">data</span>: [<span class="string">&quot;kk&quot;</span>, <span class="string">&quot;dd&quot;</span>],</span><br><span class="line"></span><br><span class="line">        <span class="comment">//* means a Generator, if you call generator, it returns an Iterator</span></span><br><span class="line">        *[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">data</span>) &#123;</span><br><span class="line">                <span class="comment">//yield like return, but next call still goes here</span></span><br><span class="line">                <span class="keyword">yield</span> item;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> elm <span class="keyword">of</span> objiter) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(elm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">generator_demo</span>()</span><br></pre></td></tr></table></figure>

<pre><code>&#123; value: &#39;hello&#39;, done: false &#125;
&#123; value: &#39;world&#39;, done: false &#125;
&#123; value: 2, done: true &#125;
hello
world
kk
dd
</code></pre>
<h2 id="Async-operation"><a href="#Async-operation" class="headerlink" title="Async operation"></a>Async operation</h2><p>There are couples of ways of syanc operation, from ES5(callback), ES6(Promise), ES7(async&#x2F;await, really new), most of them just wants to make easier to understand and use, here we go</p>
<h3 id="Promise-ES6"><a href="#Promise-ES6" class="headerlink" title="Promise(ES6)"></a>Promise(ES6)</h3><p>Create Promise by three ways</p>
<ul>
<li>one is use new call resolve or reject based on condition —&gt;common way</li>
<li>the other two are call resolve() or reject directly</li>
</ul>
<p><code>Promise.resolve(&#39;hello&#39;) and Promise.reject(&#39;hello&#39;) set Promise&#39;s state with Resolved or Rejected!</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Basic Implementation of Promise</span></span><br><span class="line"><span class="comment">/* 1. each Promise only take one function as its parameter</span></span><br><span class="line"><span class="comment"> * 2. must provide built-in method, then, resolve, reject</span></span><br><span class="line"><span class="comment"> * 3. user passed function when create a Promise and call the passed function with built-in resolve, reject methond</span></span><br><span class="line"><span class="comment"> * 4. built-in then() used to add resolve callbacks and failed callback to proper queue.</span></span><br><span class="line"><span class="comment"> * 5. built-in resolve and reject called callbacked in the proper queues added by then.</span></span><br><span class="line"><span class="comment"> * 6. built-in resolve and reject are called by caller at proper time.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">my_promise_demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">MyPromise</span> = <span class="keyword">function</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> state = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">      <span class="keyword">let</span> doneList = [];</span><br><span class="line">      <span class="keyword">let</span> failList= [];</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">then</span> = <span class="function">(<span class="params">done ,fail</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">switch</span>(state)&#123;</span><br><span class="line">              <span class="keyword">case</span> <span class="string">&#x27;pending&#x27;</span>:</span><br><span class="line">                  <span class="keyword">if</span>(done)</span><br><span class="line">                      doneList.<span class="title function_">push</span>(done);</span><br><span class="line">                  <span class="keyword">if</span>(fail)</span><br><span class="line">                      failList.<span class="title function_">push</span>(fail);</span><br><span class="line">                  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">              <span class="comment">// no need to add to the queue as state is settled.</span></span><br><span class="line">              <span class="keyword">case</span> <span class="string">&#x27;fulfilled&#x27;</span>:</span><br><span class="line">                  <span class="title function_">done</span>();</span><br><span class="line">                  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="string">&#x27;rejected&#x27;</span>:</span><br><span class="line">                  <span class="title function_">fail</span>();</span><br><span class="line">                  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// function keyword can&#x27;t be omitted in function class! can be ignore in class</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">tryToJson</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> value;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              value = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(obj);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              value = obj;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> value</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//user calls resolve and rejct with proper value</span></span><br><span class="line">      <span class="comment">//then resolve passed such value to done callbacks added by then()</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">          state = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> value = <span class="title function_">tryToJson</span>(newValue);</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; doneList.<span class="property">length</span>; i++)&#123;</span><br><span class="line">                  <span class="comment">//call done hander added by then</span></span><br><span class="line">                  <span class="keyword">let</span> temp = doneList[i](value);</span><br><span class="line">                  <span class="keyword">if</span> (temp <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">                      <span class="keyword">let</span> newP = temp;</span><br><span class="line">                      <span class="comment">//done handler returns a new Promise.</span></span><br><span class="line">                      <span class="keyword">for</span> (i++; i &lt; doneList.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                          <span class="comment">//add leftlist to new Promise</span></span><br><span class="line">                          newP.<span class="title function_">then</span>(doneList[i], failList[i]);</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      <span class="comment">//the previous done return value as the parameter for next done handler.</span></span><br><span class="line">                      value = temp;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">          state = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> value = <span class="title function_">tryToJson</span>(newValue);</span><br><span class="line">              <span class="keyword">let</span> tempRe = failList[<span class="number">0</span>](value);</span><br><span class="line">              <span class="keyword">if</span>(tempRe <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>)&#123;</span><br><span class="line">                  <span class="keyword">let</span> newP = tempRe;</span><br><span class="line">                  <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;doneList.<span class="property">length</span>;i++) &#123;</span><br><span class="line">                      newP.<span class="title function_">then</span>(doneList[i],failList[i]);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">//如果不是promise，执行完当前的fail之后，继续执行doneList</span></span><br><span class="line">                  value = tempRe;</span><br><span class="line">                  doneList.<span class="title function_">shift</span>();</span><br><span class="line">                  failList.<span class="title function_">shift</span>();</span><br><span class="line">                  <span class="title function_">resolve</span>(value);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">fn</span>(resolve,reject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">MyPromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">catch</span> = <span class="keyword">function</span>(<span class="params">onRejected</span>) &#123;</span><br><span class="line">      <span class="comment">//catch is just another .then with undefined as input</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, onRejected)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">promiFn</span> = (<span class="params">resolve, reject</span>) =&gt; &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> ps = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(promiFn);</span><br><span class="line">    ps.<span class="title function_">then</span>(<span class="function"><span class="params">d</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resolve:&quot;</span>, d)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error:&quot;</span>, e);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">my_promise_demo</span>();</span><br></pre></td></tr></table></figure>

<pre><code>resolve: 2
</code></pre>
<h4 id="standard-promise-API"><a href="#standard-promise-API" class="headerlink" title="standard promise API"></a>standard promise API</h4><ul>
<li>catch(): registers a handler to be called when the promise is rejected, this callback can also register by .then(success, fail) as second parameter.</li>
<li>.then(success, fail): register success or fail, <code>It returns another promise</code>, which resolves to the value that the handler function returns or, if that returns a promise, waits for that promise and then resolves to its result</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promise_demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;resolve&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&quot;reject&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//then takes two parameters, success, fail, most of time, we did not set fail, but use catch as well.</span></span><br><span class="line">    p.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>)&#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    promise1.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// for each then, it will return a new Promise, and pass the return value to next then</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Promise.all可以接受一个元素为Promise对象的数组作为参数，</span></span><br><span class="line">    <span class="comment">//当这个数组里面所有的promise对象都变为!!!resolved or rejected!时，该方法才会返回</span></span><br><span class="line">    <span class="comment">//返回值 是所有的Promise的传递的值的数组`)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>)&#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;,<span class="number">300</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>)&#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line">      &#125;,<span class="number">100</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2]).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 打印[1,2]</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Promise.race的含义是只要有一个promise对象进入Resloved或者Rejected状态的话，</span></span><br><span class="line">    <span class="comment">//程序就会停止，且会继续后面的处理逻辑；</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `delay`毫秒后执行resolve</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">timerPromise</span>(<span class="params">delay</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>)&#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set timeout&#x27;</span>,delay);</span><br><span class="line">              <span class="title function_">resolve</span>(delay);</span><br><span class="line">          &#125;,delay);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 任何一个promise变为resolve或reject 的话程序就停止运行</span></span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">race</span>([</span><br><span class="line">      <span class="title function_">timerPromise</span>(<span class="number">1</span>),</span><br><span class="line">      <span class="title function_">timerPromise</span>(<span class="number">32</span>),</span><br><span class="line">      <span class="title function_">timerPromise</span>(<span class="number">64</span>),</span><br><span class="line">      <span class="title function_">timerPromise</span>(<span class="number">128</span>)</span><br><span class="line">    ]).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reslove timeout&#x27;</span>,value);    <span class="comment">// =&gt; 1</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">promise_demo</span>();</span><br></pre></td></tr></table></figure>

<pre><code>resolve
8
set timeout 1
reslove timeout 1
</code></pre>
<h3 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h3><ul>
<li><strong>async ensures that the function returns a promise</strong>, and <code>wraps non-promises in it</code>, nothing to do for promise return, <span style="color:red">console.log(async_function()), it shows promise!!!</span></li>
<li><code>await makes JavaScript wait until that promise settles and returns its result</code><ul>
<li>If it’s an error, the exception is generated — same as if throw error were called at that very place.</li>
<li>Otherwise, it returns the resolved result not promise.</li>
</ul>
</li>
</ul>
<p><strong>Note:</strong></p>
<ul>
<li><p>await only works inside an async function, await won’t work in the top-level code as the top-level is not a async function.</p>
</li>
<li><p>await <code>literally</code> makes JavaScript wait until the promise settles, and then go on with the result. that doesn’t cost any CPU resources, because the engine can do other jobs in the meantime: execute other scripts, handle events.</p>
</li>
</ul>
<p>async&#x2F;await function no longer, like a regular JavaScript function, runs from start to completion in one go. Instead, it can be <code>frozen at any point that has an await, and can be resumed at a later time</code></p>
<p><em>async&#x2F;await aims to replace Promise.then().catch which is hard to understand</em></p>
<p><strong>typical use for async&#x2F;wait</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/no-user-here&#x27;</span>);</span><br><span class="line">    <span class="comment">//json() is async as well! need await</span></span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="comment">// catches errors both in fetch and response.json</span></span><br><span class="line">    <span class="title function_">alert</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// wait for the array of results</span></span><br><span class="line"><span class="keyword">let</span> results = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">  <span class="title function_">fetch</span>(url1),</span><br><span class="line">  <span class="title function_">fetch</span>(url2),</span><br><span class="line">  ...</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p><strong>Guide</strong></p>
<p><code>When we use async/await, we rarely need .then, because await handles the waiting for us. And we can use a regular try..catch instead of .catch. That’s usually (but not always) more convenient</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">async_wait_demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">solve</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//wrapper to Promise.resolve(1);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">2</span>);<span class="comment">//no wrapper, as it&#x27;s a promise</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> s = <span class="title function_">solve</span>();</span><br><span class="line">        <span class="keyword">let</span> svalue = <span class="keyword">await</span> s;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(svalue);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> rvalue = <span class="keyword">await</span> <span class="title function_">reject</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(rvalue);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">            <span class="comment">//err has the value 2</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//async always return a Promise(wrapper or not)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">test</span>()</span><br><span class="line">    <span class="comment">//test().then(data=&gt;console.log(data)); is fine!! should we use it this way?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">retun_is_promise</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">retun_is_promise</span>());</span><br><span class="line"><span class="comment">//get resolved promise value</span></span><br><span class="line"><span class="title function_">retun_is_promise</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resolved data: &quot;</span>, data));</span><br><span class="line"></span><br><span class="line"><span class="title function_">async_wait_demo</span>();</span><br></pre></td></tr></table></figure>

<pre><code>Promise &#123; 1 &#125;
</code></pre>
<h2 id="spread-destructing-operator"><a href="#spread-destructing-operator" class="headerlink" title="spread destructing operator"></a>spread destructing operator</h2><p>These are special cases for Array and object, shorthand.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">operator_demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//spread using ...</span></span><br><span class="line">    <span class="keyword">let</span> array1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">    <span class="comment">// let array2 = array1.concat(3);</span></span><br><span class="line">    <span class="keyword">let</span> array2 = [...array1, <span class="number">3</span>];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(array2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ob1 = &#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">//spread using ...</span></span><br><span class="line">    <span class="keyword">let</span> ob2 = &#123;...ob1, <span class="string">&quot;b&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ob2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">rest</span>(<span class="params">a, ...rest</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(rest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">rest</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">//the rest parameters as an array</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//destructing, the left, should no more than right, the right is iterable!!!</span></span><br><span class="line">    <span class="keyword">let</span> [<span class="keyword">as</span>, bs, cs] = <span class="string">&quot;str&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">as</span>, bs, cs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> [a, b, c=<span class="number">3</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>]; <span class="comment">// c default is overwritten</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//other store left attributes with new object</span></span><br><span class="line">    <span class="comment">//the var name must be same as key as object has no order,</span></span><br><span class="line">    <span class="comment">// you need to which value you want to destruct on left side</span></span><br><span class="line">    <span class="keyword">let</span> &#123;oa, ob, ...other&#125; = &#123;<span class="string">&quot;oa&quot;</span>:<span class="number">1</span>, <span class="string">&quot;ob&quot;</span>:<span class="number">2</span>, <span class="string">&quot;oc&quot;</span>:<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="comment">//other is new object with &#123;&quot;oc&quot;: 3&#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oa, ob, other);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dest</span>(<span class="params">d, [a, b, c=<span class="number">3</span>]</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">dest</span>(<span class="number">4</span>, [<span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//must have &#123;&#125; in parameter and pass an object with same key</span></span><br><span class="line">    <span class="comment">//a rename a1, c is object, take all left.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">mdest</span>(<span class="params">d, &#123;a:a1, b, ...c&#125;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a1, b, d, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">adest</span>(<span class="params">d, obj</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>, obj.<span class="property">b</span>, d, obj.<span class="property">c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">mdest</span>(<span class="number">3</span>, &#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>, <span class="string">&quot;b&quot;</span>:<span class="number">2</span>, <span class="string">&quot;c&quot;</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span>&#125;);</span><br><span class="line">    <span class="title function_">adest</span>(<span class="number">3</span>, &#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>, <span class="string">&quot;b&quot;</span>:<span class="number">2</span>, <span class="string">&quot;c&quot;</span>: <span class="number">3</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">operator_demo</span>()</span><br></pre></td></tr></table></figure>

<pre><code>resolved data:  1
1
2
set timeout 32
[ 1, 2, 3 ]
&#123; a: 1, b: 2 &#125;
[ 2, 3 ]
s t r
1 2 4
1 2 &#123; oc: 3 &#125;
1 2 3
1 2 3 &#123; c: 3, d: 4 &#125;
1 2 3 3
</code></pre>
<h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><h3 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h3><p>ES5 commonJS way used by node</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//one symbol(default)</span></span><br><span class="line"><span class="comment">//add.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//default</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = add;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="comment">//rename import symbol</span></span><br><span class="line"><span class="keyword">var</span> add_two = <span class="built_in">require</span>(<span class="string">&quot;./add&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">&quot;./add&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add_two</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//several symbols</span></span><br><span class="line"><span class="comment">//op.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add_two</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sub</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//rename export symbols</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">add</span> = add_two;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">sub</span> = sub;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="keyword">var</span> &#123;add, sub&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./op&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sub_two = <span class="built_in">require</span>(<span class="string">&#x27;./op&#x27;</span>).<span class="property">sub</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sub_two</span>(<span class="number">2</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><p>ES5 has severals way to export and import for a module while ES6 defines a standard way, here we go.<br>It only loads the required at compiling, you can load some exported symbols or all.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;stat <span class="keyword">as</span> fileStat, readFile&#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>        <span class="comment">//load all exported symbols!</span></span><br><span class="line"><span class="comment">//fs.count, fs.stat, fs.readFile, fs.number</span></span><br></pre></td></tr></table></figure>

<p><strong>export ways</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fs.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">stat</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">readFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Or this way</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stat</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readFile</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// with this way can rename when export, Better Way!!!</span></span><br><span class="line"><span class="keyword">export</span> &#123;stat, readFile, count <span class="keyword">as</span> number&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>default export</strong><br>Each module can only has one default export which has no export name(actuall it’s <code>default</code> name)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fs.js</span></span><br><span class="line"><span class="comment">//no function name</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//use module name as default name, it&#x27;s common way.</span></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">as</span> renamed_stat <span class="keyword">from</span> fs;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> renamed_stat <span class="keyword">from</span> fs&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Node-finding-module"><a href="#Node-finding-module" class="headerlink" title="Node finding module"></a>Node finding module</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># js search module in such path order(current, global)</span></span><br><span class="line"><span class="comment"># make sure npm or yarn add module at proper path</span></span><br><span class="line"></span><br><span class="line">(base) root@dev:~/shared/github<span class="comment"># node</span></span><br><span class="line">&gt; module.paths</span><br><span class="line">[ <span class="string">&#x27;/root/windows/shared/github/repl/node_modules&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;/root/windows/shared/github/node_modules&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;/root/windows/shared/node_modules&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;/root/windows/node_modules&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;/root/node_modules&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;/node_modules&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;/root/.node_modules&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;/root/.node_libraries&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;/root/anaconda3/lib/node&#x27;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># check yarn/npm global module dir</span></span><br><span class="line">$ yarn global <span class="built_in">dir</span></span><br><span class="line">$ npm <span class="built_in">ls</span> -g --depth 0</span><br></pre></td></tr></table></figure>

<h2 id="Low-leve-API-for-buffer"><a href="#Low-leve-API-for-buffer" class="headerlink" title="Low-leve API for buffer"></a>Low-leve API for buffer</h2><p>In some case, you may want to manipulate on buffer(bytes level) like in network programming, JS supports this by providing low-level API <code>Binary buffer</code> and <code>DataView</code>.</p>
<h2 id="for-in-vs-for-of"><a href="#for-in-vs-for-of" class="headerlink" title="for in vs for of"></a>for in vs for of</h2><ul>
<li><p>The for…in statement iterates over the <code>enumerable properties(include inherited) of an object</code>, in an <code>arbitrary order</code> different js engine may produce different result, it used to <code>check attribute(key) of object</code>, the each key is a string!!!</p>
</li>
<li><p>The for…of statement iterates over <code>values that the iterable object(string, array, map)</code> defines to be iterated over, <code>get the value of each iterator object</code> like string, array, map!</p>
</li>
</ul>
<p><strong>Be Careful</strong></p>
<ul>
<li>Make sure <code>not to modify an object while enumerating its properties with a for...in loop</code>.</li>
<li>Use a while loop or classic for loop instead of a for…in loop when iterating over an object whose contents might change during the loop.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">for_in_of_demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">arrCustom</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> iterable = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>];</span><br><span class="line">    iterable.<span class="property">foo</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">in</span> iterable) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> i, i); <span class="comment">//0, 1, 2, &quot;foo&quot;, &quot;arrCustom&quot;</span></span><br><span class="line">      <span class="comment">// ther order is not guaranteed, it depends on js engine.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">in</span> iterable) &#123;</span><br><span class="line">      <span class="comment">// arrCustom is not peoprity but prototype(method)</span></span><br><span class="line">      <span class="keyword">if</span> (iterable.<span class="title function_">hasOwnProperty</span>(i)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// logs 0, 1, 2, &quot;foo&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// logs 3, 5, 7</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">for_in_of_demo</span>()</span><br></pre></td></tr></table></figure>

<pre><code>string 0
string 1
string 2
string foo
string arrCustom
0
1
2
foo
3
5
7
</code></pre>
<h2 id="let-vs-const-vs-var"><a href="#let-vs-const-vs-var" class="headerlink" title="let vs const vs var"></a>let vs const vs var</h2><p>let and const declarations allow you to create block-scoped variables<br>A variable declared with the var keyword is available from the <code>function</code> it is declared in.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// myVarVariable *is* visible out here</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> myVarVariable = <span class="number">0</span>; myVarVariable &lt; <span class="number">5</span>; myVarVariable++) &#123;</span><br><span class="line">  <span class="comment">// myVarVariable is visible to the whole function</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// myVarVariable *is* visible out here</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// Matt</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// Matt</span></span><br></pre></td></tr></table></figure>
<h3 id="var-special"><a href="#var-special" class="headerlink" title="var special"></a>var special</h3><p>without declaration to access a variable, a <code>global variable is defined after that access</code>, <code>it&#39;s valid non strict mode</code> even it’s not good way to do so.</p>
<p><strong>var Declaration Hoisting</strong><br>The interpreter pulls all variable declarations to the top of its scope. It also allows you to use redundant var declarations without penalty.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">26</span>; <span class="comment">// you not see age value until here</span></span><br><span class="line">    <span class="title function_">inner</span>(); <span class="comment">// you can see inner here as function declaration always lift up!!!</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>equal to below</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> age;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">    age = <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// &quot;use strict&quot;;</span></span><br><span class="line">    b = <span class="number">15</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// undefined as all var declarations are pulled up to begining of function.</span></span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br></pre></td></tr></table></figure>

<pre><code>15
undefined
15
set timeout 64
set timeout 128
[ 1, 2 ]
</code></pre>
<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p><strong>let is not hoisted</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// ReferenceError: age is not defined</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span></span><br></pre></td></tr></table></figure>

<p>A let declaration also does not allow for any redundant declarations within a block scope. Doing so will result in an error:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="keyword">let</span> age; <span class="comment">// SyntaxError; identifier &#x27;age&#x27; has already been declared</span></span><br></pre></td></tr></table></figure>

<h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;&#125; <span class="comment">// TypeError: assignment to constant variable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a, b</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1, 2, 3, 4, 5</span></span><br></pre></td></tr></table></figure>

<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference">Reference</a></li>
</ul>
]]></content>
      <categories>
        <category>html</category>
        <category>js</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s_APIServer_access</title>
    <url>/2021/06/08/k8s-apiserver-access/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Here let’s foucs on how Kubernets controll access to API server, When a request reaches the API, it goes through several stages, illustrated in the following diagram.</p>
<p><img src="https://d33wubrfki0l68.cloudfront.net/673dbafd771491a080c02c6de3fdd41b09623c90/50100/images/docs/admin/access-control-overview.svg" alt="API Access Control"></p>
<span id="more"></span>

<h1 id="Stage-of-Access-control"><a href="#Stage-of-Access-control" class="headerlink" title="Stage of Access control"></a>Stage of Access control</h1><h2 id="Transport-security"><a href="#Transport-security" class="headerlink" title="Transport security"></a>Transport security</h2><p>In a typical Kubernetes cluster, the API serves on port 443, protected by TLS. The API server presents a certificate and client can present a TLS client certificate at this stage as well, but it’s an optional(verify client is not a must).</p>
<h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><p>The cluster creation script or cluster admin configures the API server to run one or more <a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/">Authenticator modules</a>.</p>
<p>All Kubernetes clusters have two categories of users: service accounts managed by Kubernetes, and normal users.</p>
<ul>
<li>client certificates, password, and plain tokens, bootstrap tokens as normal user</li>
<li><code>JSON Web Tokens (used for service accounts)</code>.</li>
</ul>
<p>To manually create a service account, use the <code>kubectl create serviceaccount (NAME)</code> command. This creates a service account in the current namespace and an associated secret(auto created).</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create serviceaccount jenkins</span><br><span class="line">$ kubectl get secret jenkins-token-1yvwg -o yaml</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">secrets:</span><br><span class="line">- name: jenkins-token-1yvwg</span><br><span class="line"></span><br><span class="line">$ kubectl get secret jenkins-token-1yvwg -o yaml</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  ca.crt: (APISERVER<span class="string">&#x27;S CA BASE64 ENCODED)</span></span><br><span class="line"><span class="string">  namespace: ZGVmYXVsdA==</span></span><br><span class="line"><span class="string">  token: (BEARER TOKEN BASE64 ENCODED)</span></span><br><span class="line"><span class="string">kind: Secret</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  # ...</span></span><br><span class="line"><span class="string">type: kubernetes.io/service-account-token</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<h2 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h2><p>In Kubernetes, <code>you must be authenticated (logged in) before your request can be authorized (granted permission to access).</code></p>
<p>It <code>evaluates all of the request attributes against all policies</code> and allows or denies the request. All parts of an API request must be allowed by some policy in order to proceed. This means that permissions are denied by default.</p>
<p><strong>Request Attributes</strong></p>
<ul>
<li>user - The user string provided during authentication.</li>
<li>group - The list of group names to which the authenticated user belongs.</li>
<li>extra - A map of arbitrary string keys to string values, provided by the authentication layer.</li>
<li>API - Indicates whether the request is for an API resource.</li>
<li>Request path - Path to miscellaneous non-resource endpoints like &#x2F;api or &#x2F;healthz.</li>
<li>API request verb - API verbs like get, list, create, update, patch, watch, delete, and deletecollection are used for resource requests. To determine the request verb for a resource API endpoint, see Determine the request verb.</li>
<li>HTTP request verb - Lowercased HTTP methods like get, post, put, and delete are used for non-resource requests.</li>
<li>Resource - The ID or name of the resource that is being accessed (for resource requests only) – For resource requests using get, update, patch, and delete verbs, you must provide the resource name.</li>
<li>Subresource - The subresource that is being accessed (for resource requests only).</li>
<li>Namespace - The namespace of the object that is being accessed (for namespaced resource requests only).</li>
<li>API group - The API Group being accessed (for resource requests only). An empty string designates the core API group</li>
</ul>
<p>Kubernetes sometimes <code>checks authorization for additional permissions using specialized verbs</code>.</p>
<ul>
<li>RBAC<br>  bind and escalate verbs on roles and clusterroles resources in the rbac.authorization.k8s.io API group.</li>
<li>Authentication<br>  impersonate verb on users, groups, and serviceaccounts in the core API group, and the userextras in the authentication.k8s.io API group</li>
</ul>
<p>Kubernetes supports multiple authorization modules, such as <code>ABAC mode, RBAC Mode, and Webhook mode.</code></p>
<ul>
<li><p>ABAC - <strong>Attribute-based access control (ABAC)</strong> defines an access control paradigm whereby access rights are granted to users through the use of policies which combine attributes together. The policies can use any type of attributes (user attributes, resource attributes, object, environment attributes, etc). To learn more about using the ABAC mode, see <a href="https://kubernetes.io/docs/reference/access-authn-authz/abac/">ABAC Mode</a></p>
</li>
<li><p>RBAC - <strong>Role-based access control (RBAC)</strong> is a method of regulating access to computer or network resources based on the roles of individual users within an enterprise. In this context, access is the ability of an individual user to perform a specific task, such as view, create, or modify a file. To learn more about using the RBAC mode, see <a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/">RBAC Mode</a></p>
</li>
</ul>
<blockquote>
<p>When specified RBAC (Role-Based Access Control) uses the rbac.authorization.k8s.io API group to drive authorization decisions, allowing admins to dynamically configure permission policies through the Kubernetes API.</p>
</blockquote>
<ul>
<li>Webhook - A WebHook is an HTTP callback: an HTTP POST that occurs when something happens; a simple event-notification via HTTP POST. A web application implementing WebHooks will POST a message to a URL when certain things happen. To learn more about using the Webhook mode, see <a href="https://kubernetes.io/docs/reference/access-authn-authz/webhook/">Webhook Mode</a>.</li>
</ul>
<h2 id="Admission-control"><a href="#Admission-control" class="headerlink" title="Admission control"></a>Admission control</h2><p>An admission controller is a piece of code that intercepts requests to the Kubernetes API server prior to persistence of the object, but after the request is authenticated and authorized.</p>
<p>Admission controllers may be “validating”, “mutating”, or both. Mutating controllers may modify the objects they admit; validating controllers may not.</p>
<p>For example.</p>
<ul>
<li><p><code>EventRateLimit</code>  mitigates the problem where the API server gets flooded by event requests.</p>
</li>
<li><p><code>LimitRanger</code>  will observe the incoming request and ensure that it does not violate any of the constraints enumerated in the LimitRange object in a Namespace.</p>
</li>
</ul>
<h1 id="Check-permission"><a href="#Check-permission" class="headerlink" title="Check permission"></a>Check permission</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check for current user</span></span><br><span class="line">$ kubectl auth can-i create deployments --namespace dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># check for other user: dave</span></span><br><span class="line">$ kubectl auth can-i list secrets --namespace dev --as dave</span><br></pre></td></tr></table></figure>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://kubernetes.io/docs/concepts/security/controlling-access/">API control access</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>k8s_autoscale</title>
    <url>/2021/06/08/k8s-autoscale/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Autoscaling allows you to dynamically adjust to demand without intervention from the individuals in charge of operating the cluster.</p>
<p>Kubernetes autoscaling helps optimize resource usage and costs by automatically scaling a cluster up and down in line with demand.</p>
<p>Kubernetes enables autoscaling at the <code>cluster/node level</code> as well as at the <code>pod level</code>.</p>
<span id="more"></span>

<h1 id="Autoscaler"><a href="#Autoscaler" class="headerlink" title="Autoscaler"></a>Autoscaler</h1><p>Autoscaling eliminates the need for constant manual reconfiguration to match changing application workload levels. Kubernetes can autoscale by adjusting the capacity (vertical autoscaling) and number (horizontal autoscaling) of pods, and&#x2F;or by adding or removing nodes in a cluster (cluster autoscaling).</p>
<img src="https://www.kubecost.com/images/why-autoscale.png" alt="scale level" width="500"/>

<p>There are actually three autoscaling features for Kubernetes: <code>Horizontal Pod Autoscaler</code>, <code>Vertical Pod Autoscaler,</code> and <code>Cluster Autoscaler</code>. Let’s take a closer look at each and what they do.</p>
<h2 id="Horizontal-Pod-Autoscaler-HPA"><a href="#Horizontal-Pod-Autoscaler-HPA" class="headerlink" title="Horizontal Pod Autoscaler(HPA)"></a>Horizontal Pod Autoscaler(HPA)</h2><p>Horizontal scaling, which is sometimes referred to as “scaling in&#x2F;out,” allows Kubernetes administrators to <code>dynamically (i.e., automatically) increase or decrease the number of running pods as your application’s usage changes</code>.</p>
<p>A cluster operator <code>declares their target usage for metrics,</code> such as CPU or memory utilization, <code>as well their desired maximum and minimum desired number of replicas,</code>. The cluster will then reconcile the number of replicas accordingly, and <code>scale up or down the number of running pods based on their current usage and the desired target</code>.</p>
<p><img src="https://cyun.tech/images/k8s/hpa-autoscaling.png" alt="HPA Design"></p>
<h2 id="Vertical-Pod-Autoscaler-VPA"><a href="#Vertical-Pod-Autoscaler-VPA" class="headerlink" title="Vertical Pod Autoscaler(VPA)"></a>Vertical Pod Autoscaler(VPA)</h2><p>VPA refers to <code>adding more resources (such as CPU or memory) to an existing machine</code>. it’s sometimes referred to as “scaling up&#x2F;down”</p>
<p>The cluster operator <code>declares their target usage for metrics</code>, such as CPU or memory utilization. The cluster will then <code>reconcile the size(CPU, Memory) of the service’s pod or pods based on their current usage and the desired target</code>.</p>
<p>Vertical Pod Autoscaler (VPA) frees the users from necessity of setting up-to-date <code>resource limits and requests for the containers in their pods</code>. When configured, it will set the requests automatically based on usage and thus allow proper scheduling onto nodes so that appropriate resource amount is available for each pod. It will also maintain ratios between limits and requests that were specified in initial containers configuration.</p>
<p>It <code>can both down-scale pods that are over-requesting resources</code>, and also <code>up-scale pods that are under-requesting resources based on their usage over time</code>.</p>
<p>Autoscaling is configured with a <code>Custom Resource Definition object called VerticalPodAutoscaler</code>. It allows to specify which pods should be vertically autoscaled as well as if&#x2F;how the resource recommendations are applied.</p>
<p><img src="https://cyun.tech/images/k8s/vpa-diagram.png" alt="VPA Design"></p>
<p>For each VPA resource,  there are three modes in which VPAs operate:</p>
<ul>
<li>“Auto”: VPA assigns resource requests on pod creation as well as updates them on existing pods using the preferred update mechanism. Currently this is equivalent to “Recreate” (see below). Once restart free (“in-place”) update of pod requests is available, it may be used as the preferred update mechanism by the “Auto” mode. NOTE: This feature of VPA is experimental and may cause downtime for your applications.</li>
<li>“Recreate”: VPA assigns resource requests on pod creation as well as updates them on existing pods by evicting them when the requested resources differ significantly from the new recommendation (respecting the Pod Disruption Budget, if defined). This mode should be used rarely, only if you need to ensure that the pods are restarted whenever the resource request changes. Otherwise prefer the “Auto” mode which may take advantage of restart free updates once they are available. NOTE: This feature of VPA is experimental and may cause downtime for your applications.</li>
<li>“Initial”: VPA only assigns resource requests on pod creation and never changes them later.</li>
<li>“Off”: VPA does not automatically change resource requirements of the pods. The recommendations are calculated and can be inspected in the VPA object.</li>
</ul>
<p><strong>VPA does not modify the template in the deployment, but the actual requests of the pods are updated</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx:1.13.12</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">&quot;64Mi&quot;</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">&quot;250m&quot;</span></span><br><span class="line">    <span class="attr">limits:</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">&quot;128Mi&quot;</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>enable VPA</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># step1: enable metric server https://github.com/kubernetes-incubator/metrics-server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step2: install VerticalPodAutoscaler resource and it&#x27;s controller</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/kubernetes/autoscaler.git</span><br><span class="line">$ <span class="built_in">cd</span> autoscaler/vertical-pod-autoscaler</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">unset</span> <span class="variable">$REGISTRY</span></span><br><span class="line">$ <span class="built_in">unset</span> <span class="variable">$TAG</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start VPA controller etc</span></span><br><span class="line">$ ./hack/vpa-up.sh  <span class="comment"># openssl must be version 1.1.1 or higher</span></span><br><span class="line"></span><br><span class="line">$ kubectl create -f examples/hamster.yaml</span><br><span class="line"><span class="comment"># The above command creates a deployment with 2 pods, each running a single container that requests 100 millicores and tries to utilize slightly above 500 millicores. The command also creates a VPA config pointing at the deployment. VPA will observe the behavior of the pods and after about 5 minutes they should get updated with a higher CPU request</span></span><br><span class="line">$ kubectl get vpa</span><br><span class="line">$ kubectl describe vpa</span><br><span class="line">...</span><br><span class="line">apiVersion: <span class="string">&quot;autoscaling.k8s.io/v1&quot;</span>                                             </span><br><span class="line">kind: VerticalPodAutoscaler                                                     </span><br><span class="line">metadata:                                                                       </span><br><span class="line">  name: hamster-vpa                                                             </span><br><span class="line">spec:                                                                           </span><br><span class="line">  targetRef:                                                                    </span><br><span class="line">    apiVersion: <span class="string">&quot;apps/v1&quot;</span>                                                       </span><br><span class="line">    kind: Deployment                                                            </span><br><span class="line">    name: hamster                                                               </span><br><span class="line">  resourcePolicy:                                                               </span><br><span class="line">    containerPolicies:                                                          </span><br><span class="line">      - containerName: <span class="string">&#x27;*&#x27;</span>                                                      </span><br><span class="line">        minAllowed:                                                             </span><br><span class="line">          cpu: 100m                                                             </span><br><span class="line">          memory: 50Mi                                                          </span><br><span class="line">        maxAllowed:                                                             </span><br><span class="line">          cpu: 1                                                                </span><br><span class="line">          memory: 500Mi                                                         </span><br><span class="line">        controlledResources: [<span class="string">&quot;cpu&quot;</span>, <span class="string">&quot;memory&quot;</span>]      </span><br><span class="line">  updatePolicy:</span><br><span class="line">    updateMode: <span class="string">&quot;Auto&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># debug</span></span><br><span class="line">$ kubectl -n kube-system get pods|grep vpa</span><br><span class="line">$ kubectl -n kube-system get deploy|grep vpa</span><br><span class="line">$ kubectl get customresourcedefinition| grep verticalpodautoscalers</span><br><span class="line"></span><br><span class="line"><span class="comment"># stop using VPA</span></span><br><span class="line"><span class="comment"># Note that if you stop running VPA in your cluster, the resource requests for the pods already modified by VPA will not change, but any new pods will get resources as defined in your controllers (i.e. deployment or replicaset) and not according to previous recommendations made by VPA.</span></span><br><span class="line">$ ./hack/vpa-down.sh</span><br></pre></td></tr></table></figure>
<p><strong>Note</strong></p>
<ul>
<li><p>Updating running pods is an experimental feature of VPA. Whenever VPA updates the pod resources the pod is recreated, which causes all running containers to be restarted. <strong>The pod may be recreated on a different node</strong></p>
</li>
<li><p><strong>Vertical Pod Autoscaler should not be used with the Horizontal Pod Autoscaler (HPA) on CPU or memory at this moment</strong>. However, you can use VPA with HPA on custom and external metrics.</p>
</li>
<li><p>VPA recommendation might exceed available resources (e.g. Node size, available size, available quota) and cause pods to go pending. This can be partly addressed by using VPA together with Cluster Autoscaler.</p>
</li>
<li><p><strong>Multiple VPA resources matching the same pod</strong> have undefined behavior.</p>
</li>
</ul>
<h2 id="Cluster-Autoscaler-CA"><a href="#Cluster-Autoscaler-CA" class="headerlink" title="Cluster Autoscaler(CA)"></a>Cluster Autoscaler(CA)</h2><p>HPA and VPA essentially make sure that all of the services running in your cluster can dynamically handle demand while not over-provisioning during slower usage periods. That’s a good thing.</p>
<p>It’s what allows for the autoscaling of the cluster itself, <code>increasing and decreasing the number of nodes available for your pods to run on.</code></p>
<p><strong>Cluster Autoscaler will reach out to a cloud provider’s API</strong> and scale up or down the number of nodes attached to the cluster accordingly, <em>so it’s different config for different cloud providers, only works in cloud env.</em></p>
<p>Cluster Autoscaler is a tool that automatically adjusts the size of the Kubernetes cluster when one of the following conditions is true:</p>
<ul>
<li>there are pods that failed to run in the cluster due to insufficient resources(to increase node)</li>
<li>there are nodes in the cluster that have been underutilized for an extended period of time and their pods can be placed on other existing nodes.(decrease node, migrate pod to other nodes).</li>
</ul>
<p>Here is an example for <a href="https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/alicloud/README.md">Alibaba Cloud</a>.</p>
<p>Cloud provider that has cluster autoscaler provided</p>
<ul>
<li>AWS</li>
<li>GKE</li>
<li>Azure</li>
<li>AliCloud<br>…</li>
</ul>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://enterprisersproject.com/article/2021/3/kubernetes-autoscaling-explanation">autoscaling concept</a></li>
<li><a href="https://github.com/kubernetes/autoscaler">official autoscaler</a></li>
<li><a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/">official HPA</a></li>
<li><a href="https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler">official VPA</a></li>
<li><a href="https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler">official cluster autoscaler</a></li>
<li><a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/autoscaling/vertical-pod-autoscaler.md#architecture-overview">VPA design</a></li>
<li><a href="https://www.kubecost.com/kubernetes-autoscaling">k8s autoscaling</a></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
        <category>autoscale</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s_cmd</title>
    <url>/2020/06/28/k8s-cmd/</url>
    <content><![CDATA[<h1 id="K8s-commands"><a href="#K8s-commands" class="headerlink" title="K8s commands"></a>K8s commands</h1><p>Kubernetes resources are usually created&#x2F;edited by <code>posting a JSON or YAML manifest</code> to the Kubernetes REST API endpoint, as with this manifest, you have <code>more control of the resource</code>, also it is a bit complex, hence K8S provides specific commands to create&#x2F;edit limited properties of resources.<br><img src="https://cyun.tech/images/k8s/k8s_cheat_sheet.png" alt="k8s_cheat_sheet"></p>
<span id="more"></span>

<p><strong>create&#x2F;delete resource</strong><br>you can create resource by generic API with yaml file or you can create it by specific command for specific resource</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create configmap| deployment| namespace| secret| job <span class="variable">$options</span></span><br><span class="line">$ kubectl create -f xxx.yaml</span><br></pre></td></tr></table></figure>

<p><strong>modify resource</strong><br><img src="https://cyun.tech/images/k8s/k8s_modify_resource.png" alt="k8s_modify_resource"></p>
<p><strong>NOTE</strong></p>
<ul>
<li><p><code>apply</code> manages applications through files defining Kubernetes resources. It creates and updates resources in a cluster through running kubectl apply. <strong>This is the recommended way of managing Kubernetes applications on production</strong>.</p>
</li>
<li><p><code>apply</code> behaves like <code>create</code> if resource does not exist, otherwise, modify it, but the yaml must be full definition of a resource, so modification always needs <code>kubectl get deploy kubia -o yaml</code>, then modify the field, then apply it back.</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f ./my-manifest.yaml            <span class="comment"># create resource(s)</span></span><br><span class="line">$ kubectl apply -f ./my1.yaml -f ./my2.yaml      <span class="comment"># create from multiple files</span></span><br><span class="line">$ kubectl apply -f ./dir                         <span class="comment"># create resource(s) in all manifest files in dir</span></span><br><span class="line">$ kubectl apply -f https://git.io/vPieo          <span class="comment"># create resource(s) from url</span></span><br></pre></td></tr></table></figure>

<p><strong>creating from json&#x2F;yaml file</strong><br><code>More control of resources</code>, it’s a bit complex, but for each resource type, only a few properties are a must ,you only need to set that part, please refer to each resource type to see how to create each type from json&#x2F;yaml.</p>
<p><strong>get help for each resource, properties</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl explain pods</span><br><span class="line">KIND:     Pod</span><br><span class="line">VERSION:  v1</span><br><span class="line"></span><br><span class="line">DESCRIPTION:</span><br><span class="line">     Pod is a collection of containers that can run on a host. This resource is</span><br><span class="line">     created by clients and scheduled onto hosts.</span><br><span class="line"></span><br><span class="line">FIELDS:</span><br><span class="line">   apiVersion	&lt;string&gt;</span><br><span class="line">     APIVersion defines the versioned schema of this representation of an</span><br><span class="line">     object. Servers should convert recognized schemas to the latest internal</span><br><span class="line">     value, and may reject unrecognized values. More info:</span><br><span class="line">     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md<span class="comment">#resources</span></span><br><span class="line"></span><br><span class="line">   kind	&lt;string&gt;</span><br><span class="line">     Kind is a string value representing the REST resource this object</span><br><span class="line">     represents. Servers may infer this from the endpoint the client submits</span><br><span class="line">     requests to. Cannot be updated. In CamelCase. More info:</span><br><span class="line">     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md<span class="comment">#types-kinds</span></span><br><span class="line">...</span><br><span class="line">$ kubectl explain pod.metadata</span><br><span class="line">...</span><br><span class="line">$ kubectl explain pod.metadata.labels</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="K8s-mostly-used-resources"><a href="#K8s-mostly-used-resources" class="headerlink" title="K8s mostly used resources"></a>K8s mostly used resources</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAME                              SHORTNAMES      NAMESPACED   KIND</span><br><span class="line"> componentstatuses                 cs              false        ComponentStatus</span><br><span class="line"> configmaps                        cm              true         ConfigMap</span><br><span class="line"> namespaces                        ns              false        Namespace</span><br><span class="line"></span><br><span class="line"> nodes                             no              false        Node</span><br><span class="line"></span><br><span class="line"> persistentvolumeclaims            pvc             true         PersistentVolumeClaim</span><br><span class="line"></span><br><span class="line"> persistentvolumes                 pv              false        PersistentVolume</span><br><span class="line"></span><br><span class="line"> pods                              po              true         Pod</span><br><span class="line"> replicationcontrollers            rc              true         ReplicationController</span><br><span class="line"> resourcequotas                    quota           true         ResourceQuota</span><br><span class="line"> secrets                                           true         Secret</span><br><span class="line"> services                          svc             true         Service</span><br><span class="line"> daemonsets                        ds              true         DaemonSet</span><br><span class="line"> deployments                       deploy          true         Deployment</span><br><span class="line"> replicasets                       rs              true         ReplicaSet</span><br><span class="line"> cronjobs                          cj              true         CronJob</span><br><span class="line"> jobs                                              true         Job</span><br><span class="line"> events                            ev              true         Event</span><br><span class="line"> ingresses                         ing             true         Ingress</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure>

<p><strong>generic options for all resources</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--all-namespaces</span><br><span class="line">-n=kube-system</span><br><span class="line">-n kube-system</span><br><span class="line">-o wide</span><br><span class="line">-o json</span><br></pre></td></tr></table></figure>
<h2 id="cluster"><a href="#cluster" class="headerlink" title="cluster"></a>cluster</h2><ul>
<li><p>context related</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># context is groups of running info, higher than ns</span></span><br><span class="line"><span class="comment"># context has cluster and default ns for it</span></span><br><span class="line">$ sudo kubectl config current-context</span><br><span class="line">$ sudo kubectl config get-contexts</span><br><span class="line">CURRENT   NAME       CLUSTER    AUTHINFO   NAMESPACE</span><br><span class="line">*         minikube   minikube   minikube   default</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a new context and switch to it, must create test-ns before it</span></span><br><span class="line">$ sudo kubectl config set-context test-ctx --namespace=test-ns --user=minikube --cluster=minikube</span><br><span class="line">$ sudo kubectl config get-contexts</span><br><span class="line">CURRENT   NAME       CLUSTER    AUTHINFO   NAMESPACE</span><br><span class="line">*         minikube   minikube   minikube   default</span><br><span class="line">          test-ctx   minikube   minikube   test-ns</span><br><span class="line"></span><br><span class="line">$ sudo kubectl config use-context test-ctx</span><br></pre></td></tr></table></figure>
</li>
<li><p>nodes related</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show all nodes(master and worker)</span></span><br><span class="line">$ sudo kubectl get no -o wide</span><br><span class="line">NAME   STATUS   ROLES                  AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION       CONTAINER-RUNTIME</span><br><span class="line">dev    Ready    control-plane,master   17h   v1.20.2   10.116.5.201   &lt;none&gt;        Ubuntu 18.04.5 LTS   4.15.0-139-generic   docker://20.10.5</span><br><span class="line"></span><br><span class="line"><span class="comment"># get details about node</span></span><br><span class="line">$ kubectl describe nodes</span><br><span class="line"></span><br><span class="line">$ kubectl describe node dev</span><br><span class="line">Name:               dev</span><br><span class="line">Roles:              master</span><br><span class="line">Labels:             beta.kubernetes.io/arch=amd64</span><br><span class="line">                    beta.kubernetes.io/os=linux</span><br><span class="line">                    kubernetes.io/arch=amd64</span><br><span class="line">...</span><br><span class="line">CPU INO /OS INFO/ Pod Running</span><br><span class="line"></span><br><span class="line"><span class="comment"># label related</span></span><br><span class="line"><span class="comment"># set and filter with label</span></span><br><span class="line">$ kubectl label node dev disk=ssd</span><br><span class="line">$ kubectl get node -l disk=ssd</span><br></pre></td></tr></table></figure>
</li>
<li><p>cluster info</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl cluster-info</span><br><span class="line">Kubernetes master is running at https://192.168.1.1:8443</span><br><span class="line">KubeDNS is running at https://192.168.1.1:8443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br></pre></td></tr></table></figure></li>
<li><p>addon related</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ minikube addons list</span><br><span class="line">|-----------------------------|----------|--------------|</span><br><span class="line">|         ADDON NAME          | PROFILE  |    STATUS    |</span><br><span class="line">|-----------------------------|----------|--------------|</span><br><span class="line">| ambassador                  | minikube | disabled     |</span><br><span class="line">| dashboard                   | minikube | enabled ✅   |</span><br><span class="line">| default-storageclass        | minikube | enabled ✅   |</span><br><span class="line">| efk                         | minikube | disabled     |</span><br><span class="line">| freshpod                    | minikube | disabled     |</span><br><span class="line">| gvisor                      | minikube | disabled     |</span><br><span class="line">| helm-tiller                 | minikube | disabled     |</span><br><span class="line">| ingress                     | minikube | disabled     |</span><br><span class="line">| ingress-dns                 | minikube | disabled     |</span><br><span class="line">| istio                       | minikube | disabled     |</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable ingress plugin</span></span><br><span class="line">$ minikube addons <span class="built_in">enable</span> ingress</span><br><span class="line">The <span class="string">&#x27;ingress&#x27;</span> addon is enabled.</span><br><span class="line"></span><br><span class="line"><span class="comment"># after ingress is enabled, a ingress pod is running listen on 80/443 by nginx</span></span><br><span class="line"><span class="comment"># and meanwhile docker-proxy starts as well on the node which ingress pod runs.</span></span><br><span class="line"><span class="comment"># so that if you access that node on port 80, it will proxy the traffic to ingress container</span></span><br><span class="line"><span class="comment"># which performs ingress rules and selects the proper endpoint depends on rule</span></span><br><span class="line"></span><br><span class="line">$ sudo kubectl get po -n kube-system -o wide -l app.kubernetes.io/name=ingress-nginx</span><br><span class="line">NAME                                        READY   STATUS      RESTARTS   AGE   IP           NODE   NOMINATED NODE   READINESS GATES</span><br><span class="line">ingress-nginx-controller-797b4b5ff7-jk8wp   1/1     Running     0          10h   172.17.0.6   dev    &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">$ ps -ef | grep docker-proxy</span><br><span class="line">ubuntu   19579  1156  0 01:44 pts/1    00:00:00 grep -i -n --color docker-proxy</span><br><span class="line">root     26472  6646  0 Mar25 ?        00:00:00 /usr/bin/docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 443 -container-ip 172.17.0.6 -container-port 443</span><br><span class="line">root     26485  6646  0 Mar25 ?        00:00:00 /usr/bin/docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 80 -container-ip 172.17.0.6 -container-port 80</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker-proxy just adds iptable rules based on parameters for ingress pod.</span></span><br></pre></td></tr></table></figure>
<h2 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h2><p><strong>create ns from yaml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersioin:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test-ns</span></span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f ns.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a namespace from command line</span></span><br><span class="line">$ kubectl create namespace test-ns</span><br><span class="line"><span class="comment"># show all namespaces</span></span><br><span class="line">$ kubectl get ns</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete ns will delete resource in that namespace as well!! like Pod, replicaSet, deployment etc</span></span><br><span class="line">$ kubectl delete test-ns</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete all pods in default ns</span></span><br><span class="line">$ kubectl delete pods --all</span><br><span class="line"><span class="comment"># delete all resource in default ns, after the delete, the ns is still there!!!</span></span><br><span class="line">$ kubectl delete all --all</span><br></pre></td></tr></table></figure>
<h2 id="POD"><a href="#POD" class="headerlink" title="POD"></a>POD</h2><p><strong>create standalone pod(no replicaset, no deployment involved) from yaml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubia-mannual</span></span><br><span class="line">    <span class="comment"># speicify namespace of this pod</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">kubia</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">    <span class="comment"># without nodeSelector, pod can be scheduled to any node</span></span><br><span class="line">    <span class="attr">nodeSelector:</span></span><br><span class="line">      <span class="comment"># select scheduled node(s) with such label</span></span><br><span class="line">      <span class="comment"># which has highest priority, select pod then create deployment(like Daemset on the selected node)</span></span><br><span class="line">      <span class="attr">disk:</span> <span class="string">&quot;ssd&quot;</span></span><br><span class="line">    <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">luksa/kubia</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">kubia-mannual</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># it just says the container is listening on 8080</span></span><br><span class="line">      <span class="comment"># even without it, you still can access 8080 for this pod</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># add liveness probe</span></span><br><span class="line">      <span class="attr">livenessProbe:</span></span><br><span class="line">        <span class="attr">httpGet:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">          <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># this creates a standalone pod(no replicacontroller, no replicaset, no deployment)</span></span><br><span class="line"><span class="comment"># even for standalone pod, if it dies, will be restarted by k8s</span></span><br><span class="line">$ kubectl create -f pod.yaml</span><br></pre></td></tr></table></figure>
<p><strong>create standalone pod from cmd</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl run kubia-t --image=luksa/kubia --port=8080</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get pods from default namespace</span></span><br><span class="line">$ kubectl get pods</span><br><span class="line"></span><br><span class="line"><span class="comment"># show ip of a given pod/all pods</span></span><br><span class="line">$ kubectl get pods -o wide</span><br><span class="line">$ kubectl get pods kubia -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># more detail about pods</span></span><br><span class="line">$ kubectl describe pods</span><br><span class="line">$ kubectl describe pods kube-apiserver-dev-alokb</span><br><span class="line"></span><br><span class="line"><span class="comment"># output pod conf with yaml or json</span></span><br><span class="line">$ kubectl get pod kubia -o yaml</span><br><span class="line">$ kubectl get pod kubia -o json</span><br><span class="line"></span><br><span class="line"><span class="comment"># get logs of a given pod</span></span><br><span class="line">$ kubectl logs kubia-mannual</span><br><span class="line"><span class="comment"># get logs of a container(add container name) in a given pod(pod may have multiple containers)</span></span><br><span class="line">$ kubectl logs kubia-mannual -c kubia-mannual</span><br><span class="line"></span><br><span class="line"><span class="comment"># access service in pod(pod is listening on 8080) without service resource</span></span><br><span class="line"><span class="comment"># way 1:</span></span><br><span class="line">$ curl http://<span class="variable">$pod_ip</span>:8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># way 2:</span></span><br><span class="line"><span class="comment"># forward host port to container port, after run it hangs(added iptable rule on host)</span></span><br><span class="line">$ kubectl port-forward kubia-mannual 8888:8080</span><br><span class="line"><span class="comment"># open another terminal</span></span><br><span class="line">$ curl localhost:8888</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete pod/pods</span></span><br><span class="line">$ kubectl delete pods kubia</span><br><span class="line"><span class="comment"># delete all pods and service in current namespace</span></span><br><span class="line">$ kubectl delete pods,svc --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete pod with label selector</span></span><br><span class="line">$ kubectl delete pods -l app=kubia</span><br><span class="line"></span><br><span class="line"><span class="comment"># run cmd in specific container of a pod</span></span><br><span class="line">$ kubectl <span class="built_in">exec</span> <span class="variable">$&#123;POD_NAME&#125;</span> -c <span class="variable">$&#123;CONTAINER_NAME&#125;</span> -- <span class="variable">$&#123;CMD&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># run bash of a pod (if only one container, container name can be omitted)</span></span><br><span class="line"><span class="comment"># same like $ docker exec -it $container -- bash</span></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it <span class="variable">$&#123;POD_NAME&#125;</span> -- bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># modify any field of POD</span></span><br><span class="line">$ kubectl edit po kubia</span><br></pre></td></tr></table></figure>

<p><strong>Label related</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get po --show-labels</span><br><span class="line"><span class="comment"># modify an existing label of a pod</span></span><br><span class="line">$ kubectl label po kubia-mannual run=jason --overwrite</span><br><span class="line"><span class="comment"># add a new label to a pod</span></span><br><span class="line">$ kubectl label po kubia-mannual release=v1</span><br><span class="line"></span><br><span class="line"><span class="comment"># show pod with specific labels(filter)</span></span><br><span class="line">$ kubectl get po -l run=jason</span><br><span class="line">$ kubectl get po -l run!=jason</span><br><span class="line">$ kubectl get po -l <span class="string">&#x27;run in (jason, test)&#x27;</span></span><br><span class="line">$ kubectl get po -l <span class="string">&#x27;run notin (jason, test)&#x27;</span></span><br><span class="line">$ kubectl get po -l run</span><br><span class="line"><span class="comment"># not have run label</span></span><br><span class="line">$ kubectl get po -l <span class="string">&#x27;!run&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># similar like label, but used only for description</span></span><br><span class="line">$ kubectl annotate pod kubia-manual author=<span class="string">&quot;jason&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="Replica"><a href="#Replica" class="headerlink" title="Replica"></a>Replica</h2><p><strong>create rc from yaml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="comment"># Old type, deprecated!!!</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubia</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="comment"># create pod with such label</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">kubia</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubia</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">luksa/kubia</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># only way to create rc is from yaml</span></span><br><span class="line">$ kubectl create -f rc.yaml</span><br><span class="line">$ kubectl get rc</span><br><span class="line">$ kubectl describe rc kubia</span><br><span class="line"><span class="comment"># scale a rc, run less or more pod of this rc</span></span><br><span class="line"></span><br><span class="line">$ kubectl scale rc kubia --replicas=3</span><br><span class="line"><span class="comment"># change the label of a pod can move it in or out of scope of replication controller</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># modify any field of rc</span></span><br><span class="line">$ kubectl edit rc kubia</span><br><span class="line"><span class="comment"># delete rc, pod controlled by it will be deleted as well</span></span><br><span class="line">$ kubectl delete rc kubia</span><br><span class="line"><span class="comment"># only delete rc, keep pod running</span></span><br><span class="line">$ kubectl delete rc kubia --cascade=<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>create rs from yaml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicaSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubia</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># label selector</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">kubia</span></span><br><span class="line">    <span class="comment"># expression selector</span></span><br><span class="line">    <span class="comment"># matchExpressions:</span></span><br><span class="line">    <span class="comment">#   - key: app</span></span><br><span class="line">    <span class="comment">#     operator: In</span></span><br><span class="line">    <span class="comment">#     values:</span></span><br><span class="line">    <span class="comment">#       - kubia</span></span><br><span class="line">    <span class="comment"># In—Label’s value must match one of the specified values.</span></span><br><span class="line">    <span class="comment"># NotIn—Label’s value must not match any of the specified values.</span></span><br><span class="line">    <span class="comment"># Exists—Pod must include a label with the specified key (the value isn’t important). When using this operator, you shouldn’t specify the values field.</span></span><br><span class="line">    <span class="comment"># DoesNotExist—Pod must not include a label with the specified key. The values property must not be specified.</span></span><br><span class="line">    <span class="comment"># If you specify multiple expressions, all those expressions must evaluate to true for the selector to match a pod.</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="comment"># create pod with such label</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">kubia</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubia</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">luksa/kubia</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">          <span class="comment"># optional, mount from html to /var/htdocs</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/var/htdocs</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># optional part</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">        <span class="comment"># emptyDir type, shared by containers in the same pod!!!</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">          <span class="attr">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f rs.yaml</span><br><span class="line"><span class="comment"># expose from host, add iptable rules to rc</span></span><br><span class="line">$ kubectl expose rc kubia --port=80 --target-port=8000</span><br><span class="line">$ kubectl get rs</span><br><span class="line">$ kubectl describe rs kubia</span><br><span class="line"><span class="comment"># scale a rs, run less or more pod of this rs</span></span><br><span class="line">$ kubectl scale rc kubia --replicas=3</span><br><span class="line"><span class="comment"># change the label of a pod can move it in or out of scope of ReplicaSet</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># modify any field of rs</span></span><br><span class="line">$ kubectl edit rs kubia</span><br><span class="line"><span class="comment"># delete rs, pod controlled by it will be deleted as well</span></span><br><span class="line">$ kubectl delete rs kubia</span><br><span class="line"><span class="comment"># only delete rs, keep pod running</span></span><br><span class="line">$ kubectl delete rs kubia --cascade=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="comment"># DaemonSet name is kubia</span></span><br><span class="line">  <span class="comment"># pod name is kubia-xxx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubia</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># no replica as only one such pod for each worker node</span></span><br><span class="line">  <span class="comment"># label selector</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">kubia</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="comment"># create pod with such label</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">kubia</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubia</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">luksa/kubia</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f ds.yaml</span><br><span class="line">$ kubectl get ds</span><br><span class="line">$ sudo kubectl get ds</span><br><span class="line">NAME     DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE</span><br><span class="line">kubia    1         1         1       1            1           &lt;none&gt;          10s</span><br><span class="line"></span><br><span class="line">$ kubectl describe ds kubia</span><br><span class="line"><span class="comment"># change the label of a pod can move it in or out of scope of DaemonSet</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># modify any field of ds</span></span><br><span class="line">$ kubectl edit ds kubia</span><br><span class="line"><span class="comment"># delete ds, pod controlled by it will be deleted as well</span></span><br><span class="line">$ kubectl delete ds kubia</span><br><span class="line"><span class="comment"># only delete rs, keep pod running</span></span><br><span class="line">$ kubectl delete ds kubia --cascade=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="Job-CronJob"><a href="#Job-CronJob" class="headerlink" title="Job, CronJob"></a>Job, CronJob</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">batch-job</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># there two are optional, by default they are 1</span></span><br><span class="line">  <span class="comment"># by default, run once and one pod runs</span></span><br><span class="line">  <span class="attr">completions:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">batch-job</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">luksa/batch-job</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f jb.yaml</span><br><span class="line"></span><br><span class="line">$ kubectl get <span class="built_in">jobs</span></span><br><span class="line">NAME        COMPLETIONS   DURATION   AGE</span><br><span class="line">batch-job   0/1           11s        11s</span><br><span class="line"></span><br><span class="line"><span class="comment"># After a while job is done</span></span><br><span class="line">$ kubectl get job</span><br><span class="line">NAME        COMPLETIONS   DURATION   AGE</span><br><span class="line">batch-job   1/1           2m11s      2m24s</span><br><span class="line"></span><br><span class="line">$ kubectl describe <span class="built_in">jobs</span> batch-job</span><br><span class="line"></span><br><span class="line"><span class="comment"># modify any field of job</span></span><br><span class="line">$ kubectl edit <span class="built_in">jobs</span> batch-job</span><br><span class="line"></span><br><span class="line"><span class="comment"># after the job run successfully, job and pod are not deleted but show status completed</span></span><br><span class="line">$ kubectl delete <span class="built_in">jobs</span> batch-job</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">batch-job-every-15</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">&quot;0,15,30,45 * * * *&quot;</span></span><br><span class="line">  <span class="attr">jobTemplate:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">metadata:</span></span><br><span class="line">          <span class="attr">labels:</span></span><br><span class="line">            <span class="attr">app:</span> <span class="string">batch-job</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main</span></span><br><span class="line">              <span class="attr">image:</span> <span class="string">luksa/batch-job</span></span><br><span class="line"></span><br><span class="line"><span class="string">schedule</span> <span class="string">has</span> <span class="string">the</span> <span class="string">same</span> <span class="string">format</span> <span class="string">as</span> <span class="string">linux</span> <span class="string">cron</span> <span class="string">job</span></span><br><span class="line"></span><br><span class="line"><span class="string">┌─────────────</span> <span class="string">minute</span> <span class="string">(0</span> <span class="bullet">-</span> <span class="number">59</span><span class="string">)</span></span><br><span class="line"><span class="string">│</span> <span class="string">┌─────────────</span> <span class="string">hour</span> <span class="string">(0</span> <span class="bullet">-</span> <span class="number">23</span><span class="string">)</span></span><br><span class="line"><span class="string">│</span> <span class="string">│</span> <span class="string">┌─────────────</span> <span class="string">day</span> <span class="string">of</span> <span class="string">the</span> <span class="string">month</span> <span class="string">(1</span> <span class="bullet">-</span> <span class="number">31</span><span class="string">)</span></span><br><span class="line"><span class="string">│</span> <span class="string">│</span> <span class="string">│</span> <span class="string">┌─────────────</span> <span class="string">month</span> <span class="string">(1</span> <span class="bullet">-</span> <span class="number">12</span><span class="string">)</span></span><br><span class="line"><span class="string">│</span> <span class="string">│</span> <span class="string">│</span> <span class="string">│</span> <span class="string">┌─────────────</span> <span class="string">day</span> <span class="string">of</span> <span class="string">the</span> <span class="string">week</span> <span class="string">(0</span> <span class="bullet">-</span> <span class="number">6</span><span class="string">)</span> <span class="string">(Sunday</span> <span class="string">to</span> <span class="string">Saturday;</span></span><br><span class="line"><span class="string">│</span> <span class="string">│</span> <span class="string">│</span> <span class="string">│</span> <span class="string">│</span>                                   <span class="number">7</span> <span class="string">is</span> <span class="string">also</span> <span class="string">Sunday</span> <span class="string">on</span> <span class="string">some</span> <span class="string">systems)</span></span><br><span class="line"><span class="string">│</span> <span class="string">│</span> <span class="string">│</span> <span class="string">│</span> <span class="string">│</span></span><br><span class="line"><span class="string">│</span> <span class="string">│</span> <span class="string">│</span> <span class="string">│</span> <span class="string">│</span></span><br><span class="line"><span class="string">*</span> <span class="string">*</span> <span class="string">*</span> <span class="string">*</span> <span class="string">*</span></span><br><span class="line"></span><br><span class="line"><span class="string">*</span>	<span class="string">any</span> <span class="string">value</span></span><br><span class="line"><span class="string">,</span>	<span class="string">value</span> <span class="string">list</span> <span class="string">separator</span></span><br><span class="line"><span class="string">-</span>	<span class="string">range</span> <span class="string">of</span> <span class="string">values</span></span><br><span class="line"><span class="string">/</span>	<span class="string">step</span> <span class="string">values</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f cjb.yaml</span><br><span class="line">$ kubectl get cj</span><br><span class="line">NAME                 SCHEDULE             SUSPEND   ACTIVE   LAST SCHEDULE   AGE</span><br><span class="line">batch-job-every-15   0,15,30,45 * * * *   False     0        &lt;none&gt;          11s</span><br><span class="line"></span><br><span class="line">$ kubectl describe cronjobs batch-job-every-15</span><br><span class="line"></span><br><span class="line"><span class="comment"># modify any field of cjob</span></span><br><span class="line">$ kubectl edit cronjobs batch-job-every-15</span><br><span class="line"></span><br><span class="line">$ kubectl delete cronjobs batch-job-every-15</span><br></pre></td></tr></table></figure>

<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p><strong>ClusterIP service</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubia</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># optional, default select pod randomly</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">ClientIP</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ClusterIP automatically assigned when created or set it manually like below!!!</span></span><br><span class="line">  <span class="comment"># clusterIP: 10.2.2.1</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="comment"># service port 80---&gt;container port 8080</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># if multiple ports for a service, each port must have a name</span></span><br><span class="line">    <span class="comment"># - name: http</span></span><br><span class="line">    <span class="comment">#   port: 80</span></span><br><span class="line">    <span class="comment">#   targetPort: 8080</span></span><br><span class="line">    <span class="comment"># - name: https</span></span><br><span class="line">    <span class="comment">#   port: 443</span></span><br><span class="line">    <span class="comment">#   targetPort: 8443</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pods(in the same namespace) behind the service</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">kubia</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ kubectl create -f service.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># default service only has cluster ip, no external-ip</span></span><br><span class="line">$ kubectl get svc</span><br><span class="line">NAME    TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubia   ClusterIP   10.102.75.1   &lt;none&gt;        80/TCP    9s</span><br><span class="line"></span><br><span class="line"><span class="comment"># show endpoint Object of all service</span></span><br><span class="line"><span class="comment"># endpoint Object is create automatically when service is creating.</span></span><br><span class="line">$ kubectl get ep</span><br><span class="line">NAME    ENDPOINTS                                           AGE</span><br><span class="line">kubia   172.17.0.11:8080,172.17.0.12:8080,172.17.0.7:8080   72s</span><br><span class="line"></span><br><span class="line">$ kubectl describe ep kubia</span><br><span class="line">$ kubectl edit ep kubia</span><br><span class="line"></span><br><span class="line">$ kubectl describe svc kubia</span><br><span class="line">$ kubectl delete svc kubia</span><br><span class="line">$ kubectl edit svc kubia</span><br><span class="line"></span><br><span class="line">$ kubectl get po -o wide</span><br><span class="line">kubia-6555dff44f-h8kfd                1/1     Running     0          4m49s   172.17.0.11   dev    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubia-6555dff44f-k55fd                1/1     Running     0          4m49s   172.17.0.7    dev    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubia-6555dff44f-mvsqj                1/1     Running     0          4m49s   172.17.0.12   dev    &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p><strong>let’s check the core (nat) rules generated on the node after a service is created</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># default/kubia is service name, 10.105.109.83 is service cluster ip</span></span><br><span class="line">Chain KUBE-SERVICES (2 references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">   11   660 KUBE-SVC-L5EAUEZ74VZL5GSC  tcp  --  any    any     anywhere             10.105.109.83        /* default/kubia: cluster IP */ tcp dpt:http</span><br><span class="line"></span><br><span class="line"><span class="comment"># three pods target with random mode</span></span><br><span class="line">Chain KUBE-SVC-L5EAUEZ74VZL5GSC (1 references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">    2   120 KUBE-SEP-PERL6L2Q363TRRKS  all  --  any    any     anywhere             anywhere             /* default/kubia: */ statistic mode random probability 0.33333333349</span><br><span class="line">    3   180 KUBE-SEP-5SWG4BFKF7ZYVF5R  all  --  any    any     anywhere             anywhere             /* default/kubia: */ statistic mode random probability 0.50000000000</span><br><span class="line">    6   360 KUBE-SEP-5ZBQGZX3PSGHKG5K  all  --  any    any     anywhere             anywhere             /* default/kubia: */</span><br><span class="line"></span><br><span class="line"><span class="comment"># on pod rule 172.17.0.6 pod ip with port 8080</span></span><br><span class="line">Chain KUBE-SEP-PERL6L2Q363TRRKS (1 references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">    0     0 KUBE-MARK-MASQ  all  --  any    any     172.17.0.6           anywhere             /* default/kubia: */</span><br><span class="line">    2   120 DNAT       tcp  --  any    any     anywhere             anywhere             /* default/kubia: */ tcp to:172.17.0.6:8080</span><br></pre></td></tr></table></figure>

<p><strong>NodeType service</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubia</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="comment"># service port 80---&gt;container port 8080</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30000</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">kubia</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create service from one command line</span></span><br><span class="line">$ kubectl expose deployment kubia --<span class="built_in">type</span>=NodePort --port=80 --target-port=8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># when you create a nodePort service,</span></span><br><span class="line"><span class="comment"># it creates clusterIP service automatically</span></span><br><span class="line"><span class="comment"># (but this is not true for ingress, you have to create clusterIP service manually),</span></span><br><span class="line"><span class="comment"># then add extra iptables rules to clusterIp service</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if nodePort service exists, no need to create ClusterIP service,otherwise error: services &quot;xxxx&quot; already exists</span></span><br><span class="line"><span class="comment"># clusterIp service is also some iptables rules.</span></span><br><span class="line">$ kubectl create -f nodeport.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># nodePort service</span></span><br><span class="line">$ kubectl get svc</span><br><span class="line">NAME    TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubia   NodePort   10.104.24.124   &lt;none&gt;        80:30000/TCP   8s</span><br><span class="line"><span class="comment"># curl node port, 80 is service port</span></span><br><span class="line">$ curl 10.109.176.199:80</span><br><span class="line">$ curl <span class="variable">$Node_IP</span>:30000</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NodePort service---&gt;ClusterIP service---&gt;Pod</span><br><span class="line">LoadBalancer service---&gt;NodePort service---&gt;ClusterIP service---&gt;Pod</span><br></pre></td></tr></table></figure>
<h2 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h2><p><strong>Must enable ingress controller firstly</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ minikube addons <span class="built_in">enable</span> ingress</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubia</span></span><br><span class="line"><span class="comment"># no ingress port needed</span></span><br><span class="line"><span class="comment"># ingress listens on 80 for http</span></span><br><span class="line"><span class="comment"># ingress listens on 443 for https</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">kubia.example.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Exact</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">kubia</span> <span class="comment"># must create ClusterIP service manually!!!</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f in.yaml</span><br><span class="line"></span><br><span class="line">$ kubectl get ingress</span><br><span class="line"></span><br><span class="line">Name:             kubia</span><br><span class="line">Namespace:        test-ns</span><br><span class="line"><span class="comment"># ingress IP, it&#x27;s public IP!!!(node IP)</span></span><br><span class="line">Address:          10.116.5.201</span><br><span class="line">Default backend:  default-http-backend:80 (&lt;error: endpoints <span class="string">&quot;default-http-backend&quot;</span> not found&gt;)</span><br><span class="line">Rules:</span><br><span class="line">  Host               Path  Backends</span><br><span class="line">  ----               ----  --------</span><br><span class="line">  kubia.example.com</span><br><span class="line">                     /   kubia:80 (172.17.0.11:8080,172.17.0.12:8080,172.17.0.7:8080)</span><br><span class="line">  <span class="comment"># kubia:80 is clusterIP service with three endpoints</span></span><br><span class="line">  <span class="comment"># Ingress depends on cluster service to get the endpoints and use it directly!!!</span></span><br><span class="line">Annotations:         &lt;none&gt;</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason  Age   From                      Message</span><br><span class="line">  ----    ------  ----  ----                      -------</span><br><span class="line">  Normal  CREATE  81s   nginx-ingress-controller  Ingress test-ns/kubia</span><br><span class="line">  Normal  UPDATE  27s   nginx-ingress-controller  Ingress test-ns/kubia</span><br></pre></td></tr></table></figure>

<h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubia</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">kubia</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">kubia</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">kubia</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">luksa/kubia:v1</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nodejs</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create deploy from one command line</span></span><br><span class="line">$ kubectl create deployment kubia --image=luksa/kubia:v1</span><br><span class="line"></span><br><span class="line"><span class="comment"># create dp with --record in version history</span></span><br><span class="line"><span class="comment"># have the change to rollback if upgrade fails.</span></span><br><span class="line">$ kubectl create -f dp.yaml --record</span><br><span class="line">$ sudo kubectl get deploy</span><br><span class="line">NAME    READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">kubia   3/3     3            3           21s</span><br><span class="line">$ kubectl get deploy kubia</span><br><span class="line"></span><br><span class="line">$ kubectl describe deploy kubia</span><br><span class="line">$ kubectl edit deploy kubia</span><br><span class="line"><span class="comment"># deployment will create ReplicaSet automatically</span></span><br><span class="line">$ sudo kubectl get rs</span><br><span class="line">NAME               DESIRED   CURRENT   READY   AGE</span><br><span class="line">kubia-6555dff44f   3         3         3       95s</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger upgrade by change image version</span></span><br><span class="line">$ kubectl <span class="built_in">set</span> image deploy kubia nodejs=luksa/kubia:v2</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">$ kubectl edit deploy kubia</span><br><span class="line"><span class="comment"># scale a deploy</span></span><br><span class="line">$ kubectl scale deploy kubia --replicas=2</span><br><span class="line"></span><br><span class="line"><span class="comment"># check the status when rolling happens</span></span><br><span class="line">$ kubectl rollout status deployment kubia</span><br><span class="line"></span><br><span class="line"><span class="comment"># if the new version has issue, rollback to previous one</span></span><br><span class="line">$ kubectl rollout undo deployment kubia</span><br><span class="line">$ kubectl rollout undo deployment kubia --to-revision=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># check the version history of a given deployment when several upgrade happened</span></span><br><span class="line">$ kubectl rollout <span class="built_in">history</span> deployment kubia</span><br><span class="line"></span><br><span class="line">$ kubectl rollout pause deployment kubia</span><br><span class="line">$ kubectl rollout resume deployment kubia</span><br></pre></td></tr></table></figure>

<h2 id="configMap-downwardAPI-secret"><a href="#configMap-downwardAPI-secret" class="headerlink" title="configMap, downwardAPI, secret"></a>configMap, downwardAPI, secret</h2><p><strong>create configMap from shell</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create configMap from literal, file, dir</span></span><br><span class="line"><span class="comment"># --from-file without key will use file name as the key</span></span><br><span class="line"><span class="comment"># --from-file with dir will use all files</span></span><br><span class="line"><span class="comment"># kubectl create configmap my-cfg --from-file=test.json --from-file=key1=hi.txt --from-file=test_dir/ --from-literal=key2=hello</span></span><br><span class="line"></span><br><span class="line">$ kubectl create configmap my-cfg --from-file=conf.cfg --from-literal=<span class="built_in">id</span>=jason</span><br><span class="line">$ kubectl get cm</span><br><span class="line">NAME               DATA   AGE</span><br><span class="line">my-cfg             2      17s</span><br><span class="line"></span><br><span class="line">$ kubectl describe cm my-cfg</span><br><span class="line">Name:         my-cfg</span><br><span class="line">Namespace:    test-ns</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span>:</span><br><span class="line">----</span><br><span class="line">jason</span><br><span class="line"></span><br><span class="line">conf.cfg:</span><br><span class="line">----</span><br><span class="line">name = hello</span><br><span class="line"></span><br><span class="line">Events:  &lt;none&gt;</span><br><span class="line"><span class="comment"># never use yaml to create configMap as you have to copy file content in yaml file!!!</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>use configMap from env var in pod’s container</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pod definition with value from configMap</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">FIRST_VAR</span></span><br><span class="line">  <span class="attr">valueFrom:</span></span><br><span class="line">    <span class="attr">configMapKeyRef:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">my-cfg</span></span><br><span class="line">      <span class="attr">key:</span> <span class="string">foo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or all entries from configMap as env vars</span></span><br><span class="line"><span class="attr">envFrom:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">prefix:</span> <span class="string">CONFIG_</span></span><br><span class="line">  <span class="attr">configMapRef:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">my-cfg</span></span><br></pre></td></tr></table></figure>

<p><strong>mount configmap entry as a file keep existing if has same file</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mount configmap entries to a dir in the pod</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubia-hc</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">kubia</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">    <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">luksa/kubia</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">kubia</span></span><br><span class="line">      <span class="comment"># mount individual entries under a dir but keep existing file under that dir</span></span><br><span class="line">      <span class="comment"># say mount to /etc, but still keep existing file under etc</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/new.json</span></span><br><span class="line">          <span class="comment"># subPath says new.json is a file</span></span><br><span class="line">          <span class="comment"># without subPath, new.json is treated as a path!!!!</span></span><br><span class="line">          <span class="attr">subPath:</span> <span class="string">new.json</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">      <span class="attr">configMap:</span></span><br><span class="line">        <span class="comment"># use configMap declared by configMap</span></span><br><span class="line">        <span class="comment"># if no item provided, it will use all entries!!!</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">my-cfg</span></span><br><span class="line">        <span class="attr">items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">test.json</span></span><br><span class="line">          <span class="comment"># rename it</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">new.json</span></span><br></pre></td></tr></table></figure>


<p><strong>mount configmap entry as a file hide existing if has same file</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mount configmap entries to a dir in the pod</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubia-hc</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">kubia</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">    <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">luksa/kubia</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">kubia</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">          <span class="comment"># if this path does not exist, create</span></span><br><span class="line">          <span class="comment"># if exists, hide all existing files with configMap entries</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/test</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">      <span class="attr">configMap:</span></span><br><span class="line">        <span class="comment"># use configMap declared by configMap</span></span><br><span class="line">        <span class="comment"># if no items provided, it will use all entries!!!</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">my-cfg</span></span><br><span class="line">        <span class="attr">items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">test.json</span></span><br><span class="line">          <span class="comment"># rename it</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">new.json</span></span><br></pre></td></tr></table></figure>

<h3 id="secrets"><a href="#secrets" class="headerlink" title="secrets"></a>secrets</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create secrets</span></span><br><span class="line">$ kubectl create secret generic test_sc --from-file=key1=test.json</span><br><span class="line">$ kubectl get secrets</span><br><span class="line">$ kubectl describe secrets</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># secret is mounted in-memory files</span></span><br><span class="line">  <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">default-token-l5wrk</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default-token-l5wrk</span></span><br><span class="line">    <span class="attr">secret:</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">default-token-l5wrk</span></span><br><span class="line">    <span class="comment"># no items lists, all entries in secret are mounted to mountPath!!!</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># use secret from env</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">FOO_SECRET</span></span><br><span class="line">  <span class="attr">valueFrom:</span></span><br><span class="line">    <span class="attr">secretKeyRef:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">fortune-https</span></span><br><span class="line">      <span class="attr">key:</span> <span class="string">foo</span></span><br></pre></td></tr></table></figure>

<p><strong>downwardAPI</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check Pod manifest to get the field name</span></span><br><span class="line"><span class="comment"># use ENV in container</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">  <span class="attr">valueFrom:</span></span><br><span class="line">    <span class="attr">fieldRef:</span></span><br><span class="line">      <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">  <span class="attr">valueFrom:</span></span><br><span class="line">    <span class="attr">fieldRef:</span></span><br><span class="line">      <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">  <span class="comment"># under container with file</span></span><br><span class="line">  <span class="attr">volumeMounts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">downward</span></span><br><span class="line">    <span class="attr">mountPath:</span> <span class="string">/etc/downward</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">downward</span></span><br><span class="line">    <span class="attr">downwardAPI:</span></span><br><span class="line">      <span class="attr">items:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">&quot;podName&quot;</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">&quot;podIP&quot;</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br></pre></td></tr></table></figure>

<p><strong>talk to API server</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get svc</span><br><span class="line">NAMESPACE              NAME                                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">default                kubernetes                           ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP                  9d</span><br><span class="line"></span><br><span class="line"><span class="comment"># on the node</span></span><br><span class="line">$ kubectl proxy</span><br><span class="line">Starting to serve on 127.0.0.1:8001</span><br><span class="line"><span class="comment"># proxy will talk to API server(10.96.0.1) and do the authentication, cool</span></span><br><span class="line"></span><br><span class="line">$ curl localhost:8001</span><br><span class="line"></span><br><span class="line"><span class="comment"># talk to API server within a pod</span></span><br><span class="line"><span class="comment"># as for each pod, we mount</span></span><br><span class="line"><span class="comment"># 1. a token(from secret) that can be used to talk with API server</span></span><br><span class="line"><span class="comment"># 2. ca: used to verify server&#x27;s certificate.</span></span><br><span class="line"><span class="comment"># at /var/run/secrets/kubernetes.io/serviceaccount</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># inside a container, run below command</span></span><br><span class="line">$ <span class="built_in">export</span> TOKEN=$(<span class="built_in">cat</span> /var/run/secrets/kubernetes.io/serviceaccount/token)</span><br><span class="line">$ curl -H <span class="string">&quot;Authorization: Bearer <span class="variable">$TOKEN</span>&quot;</span> https://kubernetes</span><br><span class="line"></span><br><span class="line"><span class="comment"># another way, you can run another container within a pod, this container runs kubectl proxy</span></span><br><span class="line"><span class="comment"># so other container in the same pod, can access localhost:80001 as proxy to talk with API server.</span></span><br></pre></td></tr></table></figure>
<h2 id="Volumes"><a href="#Volumes" class="headerlink" title="Volumes"></a>Volumes</h2><p><strong>check default storageClass provided by minikube</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo minikube addons <span class="built_in">enable</span> storage-provisioner</span><br><span class="line">$ sudo kubectl get pod -n kube-system</span><br><span class="line">NAME                                        READY   STATUS             RESTARTS   AGE</span><br><span class="line">storage-provisioner                         1/1     Running            0          20h</span><br><span class="line"></span><br><span class="line">$ sudo kubectl get storageClass</span><br><span class="line">NAME                 PROVISIONER                RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</span><br><span class="line">standard (default)   k8s.io/minikube-hostpath   Delete          Immediate           <span class="literal">false</span>                  19h</span><br></pre></td></tr></table></figure>

<p><strong>declare pvc use storageClass</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">data-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># use standard storageClass which is created by minikube automatically</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">standard</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">100Mi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br></pre></td></tr></table></figure>

<p><strong>use data-pvc from pod</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">  <span class="attr">volumeMounts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">    <span class="attr">mountPath:</span> <span class="string">/var/store</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">  <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">    <span class="attr">claimName:</span> <span class="string">data-pvc</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get sc</span><br><span class="line">$ kubectl describe sc</span><br><span class="line">$ kubectl edit sc</span><br><span class="line"></span><br><span class="line"><span class="comment"># create pvc use storageClass</span></span><br><span class="line">$ kubectl create -f pvc.yaml</span><br><span class="line">$ kubectl get pvc</span><br><span class="line">NAME       STATUS    VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">data-pvc   Pending                                      standard       38s</span><br><span class="line"></span><br><span class="line"><span class="comment"># After a while</span></span><br><span class="line">$ kubectl get pvc</span><br><span class="line">NAME       STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">data-pvc   Bound    pvc-0289f274-ab70-4a0f-9a6d-8c7d10bac7fe   100Mi      RWO            standard       35m</span><br><span class="line"></span><br><span class="line"><span class="comment"># pv is created automatically for pvc when it uses storageClass</span></span><br><span class="line">$ kubectl get pv</span><br><span class="line">NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM              STORAGECLASS   REASON   AGE</span><br><span class="line">pvc-a59a4fac-5b1e-44e1-a066-ff33cfc2b1bc   100Mi      RWO            Delete           Bound    default/data-pvc   standard                104s</span><br></pre></td></tr></table></figure>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><a href="https://kubernetes.io/docs/reference/kubectl/cheatsheet/">kubectl cheatsheet</a></li>
<li><a href="https://www.manning.com/books/kubernetes-in-action">kubernetes-in-action</a></li>
<li><a href="https://alta3.com/posters/k8s.pdf">Alta3</a></li>
<li><a href="https://crontab.guru/">cron example</a></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
        <category>overview</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>k8s_command</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s_components</title>
    <url>/2020/06/28/k8s-components/</url>
    <content><![CDATA[<h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h1><h2 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h2><p>A pod is a group of <strong>one or more</strong> <mark class="label danger">tightly related containers</mark> that will always <mark class="label info">run together on the same worker node and in the same Linux namespace(s)</mark>. Each pod is like a separate logical machine with its own IP, hostname, processes, and so on, running a single application.</p>
<span id="more"></span>

<p>when deciding whether to put two containers into a single pod or into two separate pods, you always need to ask yourself the following questions:<br><strong>Two container in a single pod?</strong></p>
<ul>
<li>Do they need to be run together or can they run on different hosts?</li>
<li>Do they represent a single whole or are they independent components?</li>
<li>Must they be scaled together or individually?</li>
</ul>
<p><strong>Static pod</strong><br>Static pod is a kind of pod created <strong>before scheduler&#x2F;api server starts by kubelet</strong>, kubelet scans &#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F; which is the place for static pod description.</p>
<p><strong>Note: static pod which only runs on master node(s)</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -al /etc/kubernetes/manifests/</span><br><span class="line">total 24</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jun  2 13:36 .</span><br><span class="line">drwxr-xr-x 4 root root 4096 Jun  2 13:36 ..</span><br><span class="line">-rw------- 1 root root 2172 Jun  2 13:36 etcd.yaml</span><br><span class="line">-rw------- 1 root root 3714 Jun  2 13:36 kube-apiserver.yaml</span><br><span class="line">-rw------- 1 root root 3384 Jun  2 13:36 kube-controller-manager.yaml</span><br><span class="line">-rw------- 1 root root 1426 Jun  2 13:36 kube-scheduler.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># static pod which only runs on master node(s)!!!</span></span><br><span class="line">$ kubectl get pod -n kube-system</span><br><span class="line">NAME                                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">etcd-linux-node1.example.com                      1/1     Running   0          114m</span><br><span class="line">kube-apiserver-linux-node1.example.com            1/1     Running   0          114m</span><br><span class="line">kube-controller-manager-linux-node1.example.com   1/1     Running   0          114m</span><br><span class="line">kube-scheduler-linux-node1.example.com            1/1     Running   0          114m</span><br></pre></td></tr></table></figure>

<h3 id="labels"><a href="#labels" class="headerlink" title="labels"></a>labels</h3><p>Organizing pods and all other Kubernetes objects are done through labels, labels are a simple, yet incredibly powerful Kubernetes feature for <mark class="label danger">organizing not only pods, but all other Kubernetes resources</mark>. A label is an arbitrary <code>key-value pair you attach to a resource</code>, which is then utilized when <strong>selecting resources using label selectors</strong> (resources are filtered based on whether they include the label specified in the selector).</p>
<p>A resource can have <code>more than one label</code>, as long as the keys of those labels are <code>unique within that resource</code>. You usually attach labels to resources when you create them, but you can also add additional labels or even modify the values of existing labels later without having to recreate the resource.</p>
<p><strong>A label selector can select resources based on (key, value, equal, not equal) whether the resource</strong></p>
<ul>
<li>Contains (or doesn’t contain) a label with a certain key</li>
<li>Contains a label with a certain key and value</li>
<li>Contains a label with a certain key, but with a value not equal to the one you specify</li>
</ul>
<h3 id="Annotations"><a href="#Annotations" class="headerlink" title="Annotations"></a>Annotations</h3><p>A great use of annotations is <strong>adding descriptions for each pod or other API object</strong>, <mark class="label danger">it is key-value pair</mark>, but not used as selector!</p>
<h3 id="liveness-probe-check-container-healthy"><a href="#liveness-probe-check-container-healthy" class="headerlink" title="liveness probe(check container healthy)"></a>liveness probe(check container healthy)</h3><mark class="label danger">Without health check(liveness probes), as long as the process is still running, Kubernetes will consider the container to be healthy, even your application goes into deadlock or infinite loop</mark>, K8s will NOT restart it.
<p>Kubernetes can check if a container is still alive through liveness probes, you can <code>specify a liveness probe for each container in the pod’s specification</code>. Kubernetes will <strong>periodically execute</strong> the probe and <strong><code>restart the container if the probe fails</code></strong>.</p>
<p><strong>Kubernetes can probe a container using one of the three mechanisms:</strong></p>
<ul>
<li><p><strong>An HTTP GET probe</strong> performs an HTTP GET request on the container’s IP address, a port and path you specify. If the probe receives a response, and the response code doesn’t represent an error (in other words, if the HTTP response code is 2xx or 3xx), the probe is considered successful. If the server returns an error response code or if it doesn’t respond at all, the probe is considered a failure and the container will be restarted as a result.</p>
</li>
<li><p><strong>A TCP Socket probe</strong> tries to open a TCP connection to the specified port of the container. If the connection is established successfully, the probe is successful. Otherwise, the container is restarted.</p>
</li>
<li><p><strong>An Exec probe</strong> executes an arbitrary command inside the container and checks the command’s exit status code. <strong>If the status code is 0, the probe is successful</strong>. All other codes are considered failures.</p>
</li>
</ul>
<h3 id="readiness-probe-ready-to-handle-request"><a href="#readiness-probe-ready-to-handle-request" class="headerlink" title="readiness probe(ready to handle request)"></a>readiness probe(ready to handle request)</h3><p>The readiness probe is <strong>invoked periodically</strong> and determines whether the specific pod should receive client requests or not.</p>
<p><strong>Three types of readiness probes exist:</strong></p>
<ul>
<li><strong>An Exec probe</strong>, where a process is executed. The container’s status is determined by the process’ exit status code.</li>
<li><strong>An HTTP GET probe</strong>, which sends an HTTP GET request to the container and the HTTP status code of the response determines whether the container is ready or not.</li>
<li><strong>A TCP Socket probe</strong>, which opens a TCP connection to a specified port of the container. If the connection is established, the container is considered ready.</li>
</ul>
<p>When a container is started, Kubernetes can be configured to wait for a configurable amount of time to pass before performing the first readiness check. After that, it invokes the probe periodically and acts based on the result of the readiness probe. <mark class="label danger">If a pod reports that it is not ready, it is removed from the service(endpoint). If the pod then becomes ready again, it is re-added to service endpoint</mark>.</p>
<p><strong>Readiness vs Liveness</strong><br>Unlike liveness probes, <mark class="label info">if a container fails the readiness check, it will not be killed or restarted</mark>. This is an important distinction between liveness and readiness probes.<br><strong>Liveness probes keep pods healthy by killing off unhealthy containers and replacing them with new, healthy ones, whereas readiness probes make sure that only pods that are ready to serve requests receive them</strong>.</p>
<p>If you don’t add a readiness probe to your pods, they’ll become service endpoints almost immediately. If your application takes too long to start listening for incoming connections, client requests hitting the service will be forwarded to the pod while it’s still starting up and not ready to accept incoming connections. Clients will therefore see “Connection refused” types of errors before it’s ready.</p>
<h3 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h3><p>Mostly a volume is bound to the lifecycle of a pod and will stay in existence only while the pod exists, but depending on the volume type, the <strong>volume’s files may remain intact even after the pod and volume disappear</strong>, here are list of volume types.</p>
<ul>
<li>emptyDir—A simple empty directory used for <code>storing transient data</code>, deleted when pod is gone.</li>
<li>hostPath—Used for <code>mounting directories from the worker node’s filesystem into the pod</code>.</li>
<li>gitRepo—A volume initialized by checking out the contents of a Git repository.</li>
<li>nfs—An <code>NFS share mounted into the pod</code>.</li>
<li>persistentVolumeClaim—A way to use a pre or dynamically provisioned <code>persistent storage</code></li>
<li>others by cloud provider</li>
</ul>
<p><strong>sharing data between <code>multiple containers in a pod</code> by emptyDir</strong></p>
<p>The volume starts out as an empty directory, the app running inside the pod can then write any files it needs to it, because the volume’s lifetime is tied to that of the pod, <mark class="label danger">the volume contents are lost when the pod is deleted</mark></p>
<p>The emptyDir you used as the volume was created on the actual disk of the worker node hosting your pod, so its performance depends on the type of the node’s disks, but you can tell Kubernetes to create the emptyDir on a tmpfs filesystem (in memory instead of on disk). To do this,set the emptyDir’s medium to Memory like this:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">emptyDir:</span></span><br><span class="line">    <span class="attr">medium:</span> <span class="string">Memory</span></span><br></pre></td></tr></table></figure>

<p><strong>share files <code>between host and pod(in the host) by hostPath</code></strong></p>
<p>If a pod is deleted and the next pod uses a hostPath volume pointing to the same path on the host, the new pod will see whatever was left behind by the previous pod, but only if it’s scheduled to the same node as the first pod, it’s persistent, each pod shares files with node that it’s scheduled to, if pod is deleted and recreated on another node, it does NOT see the previous content as the node is different. this type of volume is useful for DaemonSet pod.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ca-certs</span></span><br><span class="line">  <span class="attr">hostPath:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/etc/ssl/certs</span></span><br><span class="line">    <span class="comment"># create if dir not exist</span></span><br><span class="line">    <span class="comment"># type: FileOrCreate</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br></pre></td></tr></table></figure>

<p><strong>share files <code>across nodes</code> by NFS or cloud provider method</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">1.2</span><span class="number">.3</span><span class="number">.4</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/some/path</span></span><br></pre></td></tr></table></figure>
<h4 id="Persistentvolume-and-PersistentVolumeClaim"><a href="#Persistentvolume-and-PersistentVolumeClaim" class="headerlink" title="Persistentvolume and PersistentVolumeClaim"></a>Persistentvolume and PersistentVolumeClaim</h4><p>All the persistent volume types above have required the developer of the pod to have knowledge of the actual network storage infrastructure available in the cluster. For example, to create a NFS-backed volume, the developer has to know the actual server the NFS export is located on, we can decouple pods from the underlying storage technology, <code>create a &#39;virtual storage&#39; that takes care of underlying storage technology, let pod uses this &#39;virtual storage&#39;</code>, new resources were introduced. They are Persistentvolumes and PersistentVolumeClaims.</p>
<p>As soon as you create the claim, <code>Kubernetes finds the appropriate PersistentVolume and binds it to the claim, binding is done by Kubernetes not user</code>, you just claim what you wants.</p>
<p><img src="https://cyun.tech/images/k8s/k8s_pvc_pv_example.png" alt="k8s_pv_pvc_example"></p>
<p><code>PersistentVolume resources are cluster-scoped and thus cannot be created in a specific namespace</code>, but <code>PersistentVolumeClaims can only be created in a specific namespace, they can then only be used by pods in the same namespace</code>.</p>
<p><img src="https://cyun.tech/images/k8s/k8s_pv_pvc_relation.png" alt="k8s_pv_pvc_relation"></p>
<p><strong>here just declare virtual storage disk, mongodb as backend</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">data-pv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadOnlyMany</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">pv-class</span> <span class="comment"># delcare which class I&#x27;m !!!</span></span><br><span class="line">  <span class="attr">gcePersistentDisk:</span></span><br><span class="line">    <span class="attr">pdName:</span> <span class="string">mongodb</span></span><br><span class="line">    <span class="attr">fsType:</span> <span class="string">ext4</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">data-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">pv-class</span> <span class="comment"># used to check which PV to use !!!</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="comment"># request 100M from data-pv</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">100Mi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br></pre></td></tr></table></figure>

<p>Use it from pod description</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">  <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">    <span class="attr">claimName:</span> <span class="string">data-pvc</span></span><br><span class="line"><span class="comment"># you need create pv and pvc first when use it in pod like this.</span></span><br></pre></td></tr></table></figure>

<p><strong>Dynamic provisioning of PersistentVolumes</strong><br>Can K8s create PV for us automatically, user only creates PVC? yes, it’s storageClass, the cluster admin, instead of creating PersistentVolumes, can deploy a <strong>PersistentVolume provisioner and define one or more StorageClass objects</strong> to let users choose what type of PersistentVolume they want. The users can refer to the StorageClass in their PersistentVolumeClaims and the provisioner will take that into account when provisioning the persistent storage.</p>
<p><img src="https://cyun.tech/images/k8s/k8s_storage_class.png" alt="k8s_storageClass"></p>
<p><strong>Behind Storage class it’s PersistentVolume provisioner who creates PV automatically.!!!</strong></p>
<p><strong>declare StorageClass</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">fast</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># auto create pv when needs</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">kubernetes.io/gce-pd</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">pd-ssd</span></span><br><span class="line">  <span class="attr">zone:</span> <span class="string">europe-west1-b</span></span><br></pre></td></tr></table></figure>

<p><strong>Use storageClass in PVC instead of PV directly</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">data-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">fast</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">100Mi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br></pre></td></tr></table></figure>

<p>Use VolumeClaim from pod description</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">  <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">    <span class="attr">claimName:</span> <span class="string">data-pvc</span></span><br></pre></td></tr></table></figure>


<p><strong>For all volumes, we need to mount it to pod for use</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubia</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">luksa/kubia</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">    <span class="comment"># optional, mount from html to /var/htdocs</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/var/htdoc</span></span><br></pre></td></tr></table></figure>

<h2 id="Namespaces"><a href="#Namespaces" class="headerlink" title="Namespaces"></a>Namespaces</h2><p>K8s Namespace like a container, limits the scope of the resources, so you can use <code>same resource name in different namespaces</code>, most of resources are namespaced, that means you need to give the namespace name when you list resource, without namespace given, ‘default’ namespace is used, check resource if it’s namespaced by <strong><code>$ kubectl api-resources</code></strong>.</p>
<p>Namespaces allow you to isolate objects into distinct groups, which allow you to operate only on those belonging to the specified namespace, but <code>they don’t provide any kind of isolation of running object, it&#39;s only for viewing</code></p>
<h2 id="Replication"><a href="#Replication" class="headerlink" title="Replication"></a>Replication</h2><p>Replication is used to create pod with several copies, monitor them, restart them or create new one if fails, make sure the number of running <strong>pod equals user desires</strong>, <strong>it uses label selector to select pod(s)</strong>.</p>
<h3 id="ReplicationController-deprecated"><a href="#ReplicationController-deprecated" class="headerlink" title="ReplicationController(deprecated)"></a>ReplicationController(deprecated)</h3><p>A ReplicationController’s job is to make sure that an exact number of pods always matches its label selector. If it doesn’t, the ReplicationController takes the appropriate action to reconcile the actual with the desired number.</p>
<p><img src="https://cyun.tech/images/k8s/k8s_replication_controller.png" alt="replication_controller"></p>
<p>A ReplicationController has three essential parts:</p>
<ul>
<li>A label selector, which determines what pods are in the ReplicationController’s scope</li>
<li>A replica count, which specifies the desired number of pods that should be running</li>
<li>A pod template, which is used when creating new pod replicas</li>
</ul>
<p>Changes to the label selector and the pod template have no effect on existing pods. <strong>Changing the label selector makes the existing pods fall out of the scope of the ReplicationController, so the controller stops caring about them</strong>.</p>
<h3 id="ReplicaSet"><a href="#ReplicaSet" class="headerlink" title="ReplicaSet"></a>ReplicaSet</h3><p>It’s a new generation of ReplicationController, <code>a ReplicaSet behaves exactly like a ReplicationController</code>, but it has <strong><code>more expressive pod selectors</code></strong>, Whereas a ReplicationController’s label selector only allows matching pods that include a certain label, a ReplicaSet’s selector also <strong>allows matching pods that lack a certain label or pods that include a certain label key, regardless of its value</strong>.</p>
<h3 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h3><p><code>DaemonSets run only a single pod replica on each node</code>, whereas ReplicaSets scatter them around the whole cluster randomly.</p>
<p>Cases like pods that <strong>perform system-level operations</strong>. For example, you’ll want to run a log collector and a resource monitor on every node.</p>
<mark class="label danger">Even node can be made unschedulable, preventing pods from being deployed to it. A DaemonSet will deploy pods even to such node</mark>, because the **unschedulable attribute is only used by the Scheduler, whereas pods managed by a DaemonSet bypass the Scheduler completely**.

<h3 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h3><p>Job is similar to the other resources replica, but it allows you to <strong><code>run a pod whose container isn’t restarted when the process running inside finishes successfully</code></strong>. Once it does, the pod is considered complete, <strong>in case of failure during running, the job(pod) can be restarted.</strong></p>
<p>In the event of a <code>node failure</code>, the pods on that node that are managed by a Job will be rescheduled to other nodes the way ReplicaSet pods are. In the event of <code>a failure of the process itself</code> (when the process returns an error exit code), the Job can be configured to <code>either restart the container or not</code>.</p>
<p><strong>By default, Job only runs once successfully</strong>, but you can run it more times, each run after another finish, more over, you can run jobs at same time by setting <code>parallelism: 2</code> to allow run two same jobs at the same time.</p>
<h3 id="CronJob"><a href="#CronJob" class="headerlink" title="CronJob"></a>CronJob</h3><p>Job resources run their pods immediately when you create the Job resource, but many batch jobs need to be run at a specific time in the future or repeatedly in the specified interval, this is CronJob object. <code>no difference with Job object except when it runs</code>.</p>
<mark class="label danger">Cronjob depends on Job, as Job resources will be created from the CronJob resource at approximately the scheduled time. The Job then creates the pods.</mark>

<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p>A Kubernetes Service is a resource you create to <strong>make a single, constant point of entry to a group of pods(selected by label selector) providing the same service</strong>. <mark class="label danger">Each service has an IP address and port that never change while the service exists. no interface for this ip, **ip is virtual just used to create iptable rules**</mark>, Clients can open connections to service IP and port, and those connections are then routed to one of the pods(may run on another node) backing that service. <strong><code>randomly selected (or RR selected with ipvs)pod which may or may not be the one running on the node the connection is being made to</code></strong>.</p>
<p>Service does NOT create pod like replication, but uses label selector to select pods(created by rs or deploy) as endpoints. <strong>when you create a service with label selector, an EndPoint object is created automatically which holds pod ip lists.</strong></p>
<p>By default service load-balances request by randomly to it’s backend, but you can change its behavior by setting <code>sessionAffinity: ClientIP</code></p>
<p><strong>ClusterIP type internal service</strong><br>For this kind of service, the service has a <strong>fixed cluster IP(auto assigned or manually set)</strong>, cluster IP means it’s only accessible in the cluster. when such service is created, it only creates iptable nat rule(or ipvs rules), no interface configured with such cluster ip of service.</p>
<p><strong>You have a few ways to make a service accessible externally:</strong></p>
<ul>
<li><p><strong>Setting the service type to NodePort</strong>—For a NodePort service, each cluster node opens a port on the node itself (hence the name) and redirects traffic received on that port to the underlying service’s endpoint. <strong>The service isn’t accessible only at the internal cluster IP and port, but also through a dedicated port on all nodes</strong>. <code>you need to know node&#39;s ip to access the service</code>.</p>
</li>
<li><p><strong>Setting the service type to LoadBalancer</strong>, an extension of the NodePort type—This makes the service accessible through a dedicated load balancer, <code>provisioned from the cloud infrastructure Kubernetes is running on</code>. The load balancer <code>redirects traffic to the node port across all the nodes</code>. Clients connect to the service through the load balancer’s IP, <strong>you only need an load balancer’s ip for accessing the service also NodePort service can be accessed not only through the service’s internal cluster IP, but also through any node’s IP and the reserved node port</strong></p>
</li>
<li><p><strong>Creating an Ingress resource</strong>, a radically <strong>different mechanism</strong> for <strong>exposing multiple services through a single public IP address</strong>,It operates at the HTTP level (network layer 7) and can thus offer more features than layer 4 services.</p>
</li>
</ul>
<p><strong>node port external service</strong></p>
<p>NodePort service(node ip)—–&gt;Pod(IP)</p>
<p>Even you access one node, the request may be routed to other node which has the service pod, but why we still need loadbalancer service type <code>because when that node fails, your clients can’t access the service anymore</code>, that’s why it makes sense to put a load balancer in front of the nodes to make sure you’re spreading requests across all healthy nodes and never sending them to a node that’s offline at that moment.</p>
<p><img src="https://cyun.tech/images/k8s/k8s_node_port_service.png" alt="node_port_service"></p>
<p><strong>loadbalancer type external service</strong></p>
<p>LoadBalancer service—&gt;NodePort service(healthy node)—–&gt;Pod(randomly selected or Client IP Or RR(ipvs) or WRR(ipvs))</p>
<p>Send request to healthy node. it needs cloud provider support!!!</p>
<p><img src="https://cyun.tech/images/k8s/k8s_loadbalancer_service.png" alt="loadbalancer_service"></p>
<h2 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h2><p>Each service requires its own LoadBalancer with its own public IP address, whereas <code>an Ingress only requires one, even when providing access to dozens of services</code>.</p>
<p>When a client sends an HTTP request to the Ingress, <code>the host and path in the request determine which service the request is forwarded to, to make Ingress resources work, an Ingress controller(pod) needs to be running in the cluster</code>. Different Kubernetes environments use different implementations of the controller.</p>
<p>When you create Ingress resource, actually, you push several lua rules into ingress controller, based on the lua rule, ingress controller sends the request to the proper pod which gets from service definition.</p>
<p><strong>ingress requires clusterIP service as backend, ingress controller sends reqeust to pod directly not sends to clusterIP!!!</strong></p>
<p><img src="https://cyun.tech/images/k8s/k8s_ingress.png" alt="k8s_ingress"></p>
<h2 id="configMap-secret-and-downwardAPI"><a href="#configMap-secret-and-downwardAPI" class="headerlink" title="configMap, secret and downwardAPI"></a>configMap, secret and downwardAPI</h2><p>configMap and secret are used to <code>pass any data</code> to running container, while downwardAPI is <code>used to pass Kubernetes metadata</code> to running container.</p>
<h3 id="configMap"><a href="#configMap" class="headerlink" title="configMap"></a>configMap</h3><p>Kubernetes allows separating configuration options into a separate object called a ConfigMap, which is <code>a map containing key/value pairs with the values ranging from short literals to full config files</code>, that means the value can be a simple string or content of a file, <strong><code>the contents of the map are passed to containers either as environment variables or files in a volume</code></strong>.</p>
<p><img src="https://cyun.tech/images/k8s/k8s_configMap.png" alt="k8s_configMap"></p>
<p><strong>Different between use configMap as env var and volume</strong></p>
<ul>
<li><strong>env var for short content, while volume for large content</strong>.</li>
<li>env var is not updated after container starts, so update configMap, env var no change</li>
<li><strong>volume will be updated if you update configMap</strong></li>
</ul>
<mark class="label danger">The list of **environment variables also cannot be updated after the pod is created**</mark>

<h3 id="secret"><a href="#secret" class="headerlink" title="secret"></a>secret</h3><p>Secrets are much like ConfigMaps, they’re also maps that hold key-value pairs. <code>They can be used the same way as a ConfigMap</code>.<br>You can</p>
<ul>
<li>Pass Secret entries to the container as environment variables</li>
<li>Expose Secret entries as files in a volume</li>
</ul>
<p><strong>secret is for sensitive data secrets are always stored in memory and never written to physical storage</strong>. On the <code>master node itself (more specifically in etcd), Secrets used to be stored in decrypted form</code>, which meant the master node needs to be secured to keep the sensitive data stored in Secrets secure.</p>
<p><strong>The contents of a Secret’s entries are shown in different encode(encrypted) formats, whereas those of a ConfigMap are shown in clear text, when you see it by <code>kubectl describe secrets</code></strong>. the showing format is determined by Secret type.</p>
<ul>
<li>generic secret: Base64-encoded</li>
<li>tls secret: xxx</li>
<li>service-account-token: yyy</li>
</ul>
<p>When you <strong><code>expose the Secret to a container through a secret volume, the value of the Secret entry is decoded and written to the file in its actual form (regardless if it is plain text or binary). The same is also true when exposing the Secret entry through an environment variable</code></strong>. In both cases, the app doesn’t need to decode it, but can read the file’s contents or look up the environment variable value and use it directly.</p>
<h3 id="downwardAPI"><a href="#downwardAPI" class="headerlink" title="downwardAPI"></a>downwardAPI</h3><p>Kubernetes downwardAPI allows you to <code>pass metadata about the pod and its environment</code> through environment variables or files (in a downwardAPI volume), limits the passed data to running container.</p>
<p><img src="/images/k8s/k8s_downWardAPI.png" alt="k8s_downWardAPI"></p>
<p><strong>Metadata contains these:</strong></p>
<ul>
<li><strong>The pod’s name</strong></li>
<li>The pod’s IP address</li>
<li><strong>The namespace the pod belongs to</strong></li>
<li>The name of the node the pod is running on</li>
<li>The name of the service account the pod is running under</li>
<li>The CPU and memory requests for each container</li>
<li>The CPU and memory limits for each container</li>
<li><strong>The pod’s labels</strong></li>
<li>The pod’s annotations</li>
</ul>
<p>But the metadata exposed is limit, if you need more info about the cluster, talk to the API server directly in the pod, first we need to know restful API before we talk to it, but API server needs authentication, <code>the kubectl proxy command runs a proxy server that accepts HTTP connections on your local machine and proxies them to the API server while taking care of authentication</code>, so you don’t need to pass the authentication token in every request.</p>
<h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><p><strong><code>Deployment aims to upgrade automatically</code></strong>, without deploy, using replicaSet, you need to upgrade(to new image) manually.</p>
<p><strong>With deploy</strong></p>
<ul>
<li>it will <code>create replicaSet automatically</code></li>
<li><code>upgrade automatically</code> at server side</li>
<li>still need create service</li>
</ul>
<p><strong>upgrade(rolling update way) without deployment</strong></p>
<p>Rolling update: replace old pod one by one with new pod, not replace them at once! it needs two replicaSet for rolling update, old replicaSet scales down while new replicaSet scales up, this could be done by one command <code>kubectl rolling-update kubia-v1 kubia-v2 --image=luksa/kubia:v2</code> kubia-v1 is old replicaSet, kubia-v2 is new will be created after you run such command,</p>
<p>it will do below step by step <strong>in client(call API server by kubectl)</strong>:</p>
<ul>
<li>create new replicaSet</li>
<li>scale up new replicaSet</li>
<li>scale down old replicaSet</li>
</ul>
<p>One big issue for this old way is that if you lost network connectivity while kubectl was performing the update, the update process would be interrupted mid-way. <code>Pods and ReplicationControllers would end up in an intermediate state</code></p>
<p>While compared with deployment, <strong>all these actions above are done inside server</strong>, no API call, hence if something goes wrong, we can rollback to original state.</p>
<p>A Deployment is a higher-level resource meant for deploying applications and updating them declaratively, instead of doing it through a <strong>ReplicationController or a ReplicaSet, which are both considered lower-level concepts</strong>.</p>
<p>When you create a Deployment, a ReplicaSet resource is created underneath, the actual pods are created and managed by the Deployment’s ReplicaSets, not by the Deployment directly.</p>
<p>Creating a Deployment isn’t that different from creating a ReplicationController. <strong>A Deployment is also composed of a label selector, a desired replica count, and a pod template(like replicaset)</strong>. In addition to that, it also contains a field, which specifies a deployment strategy that defines how an <strong>update should be performed when the Deployment resource is modified</strong>.</p>
<p>Default strategy is to perform a rolling update (<strong>the strategy is called RollingUpdate, no service down, good way</strong>). The alternative is the Recreate strategy, which deletes all the old pods at once and then creates new ones</p>
<p>Recreate strategy causes all old pods to be deleted before the new ones are Recreate created. Use this strategy when your application doesn’t support running multiple versions in parallel and requires the old version to be stopped completely before the new one is started. This strategy does involve a short period of time when your app becomes completely unavailable.</p>
<p>You should <strong>use rolling strategy only when your app can handle running both the old and new version at the same time</strong>.</p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a href="https://www.manning.com/books/kubernetes-in-action">kubernetes-in-action</a></p>
]]></content>
      <categories>
        <category>k8s</category>
        <category>overview</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s_concept</title>
    <url>/2020/06/28/k8s-concept/</url>
    <content><![CDATA[<h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h1><p>Kubernetes is a software system that allows you to easily <mark class="label warning">deploy and manage containerized applications</mark> on top of it. It <code>relies on the features of Linux containers to run heterogeneous applications</code> without having to know any internal details of these applications and without having to manually deploy these applications on each host.</p>
<span id="more"></span>

<p>Because <strong>these apps run in containers, they don’t affect other apps running on the same server, which is critical when you run applications for completely different organizations on the same hardware.</strong> <code>This is of paramount importance for cloud providers</code>, because they strive for the best possible utilization of their hardware while still having to maintain complete isolation of hosted applications.</p>
<p>Kubernetes enables you to run your software applications on thousands of computer nodes as if all those nodes were a single, enormous computer. It <mark class="label warning">abstracts away the underlying infrastructure and</mark>, by doing so, simplifies development, deployment, and management for both development and the operations teams.</p>
<p><img src="https://cyun.tech/images/k8s/k8s_abstract_microservice.png" alt="k8s_concept"></p>
<p>But before we go into Kubernetes, let’s first take a look at microservice that drives Kubernetes into our eyes.</p>
<h2 id="Microservice"><a href="#Microservice" class="headerlink" title="Microservice"></a>Microservice</h2><p>Today, big applications are slowly being broken down into smaller, independently running components called microservices. Because <strong>microservices are decoupled from each other, they can be developed, deployed, updated, and scaled individually</strong>. This enables you to change components quickly and as often as necessary to keep up with today’s rapidly changing business requirements.</p>
<p><img src="https://cyun.tech/images/k8s/k8s_micro_service.png" alt="microservice"></p>
<p><strong>Pros</strong>:</p>
<ul>
<li>developed individually with the language(c, C++, python, Go etc) you like.</li>
<li>deployed individually, deploy multiple key service for performance and HA</li>
<li>update individually, upgrade some microservices that needed.</li>
<li>scale individually, for key microsevices that have the bottleneck.</li>
</ul>
<p><strong>Cons</strong>:</p>
<ul>
<li>With large microservices, it needs more effort to deploy, upgrade, scale, handle failure, we have to do this manually or write our own script.</li>
</ul>
<p><strong>Why needs Kubernetes</strong>:<br>We need <strong>automation</strong>, which includes automatic scheduling of those components to our servers, <code>automatic configuration, supervision, and failure-handling</code>. This is where Kubernetes comes in, with kubernetes, you do not need to do it manually or write your own script.</p>
<h2 id="Core-Concept"><a href="#Core-Concept" class="headerlink" title="Core Concept"></a>Core Concept</h2><p>A Kubernetes cluster is composed of many nodes, which can be split into two types:</p>
<ul>
<li>The master node, which hosts the Kubernetes Control Plane that controls and manages the whole Kubernetes system</li>
<li>Worker nodes that run the actual applications you deploy</li>
</ul>
<p><img src="https://cyun.tech/images/k8s/k8s_overview.png" alt="k8s_overview"></p>
<p><strong>THE CONTROL PLANE</strong><br>The Control Plane is what controls the cluster and makes it function. It consists of multiple components that can run on a single master node or be split across multiple nodes and replicated to ensure high availability. These components are</p>
<ul>
<li>The Kubernetes API Server, which you and the other Control Plane components<br>communicate with</li>
<li>The Scheduler, which schedules your apps (assigns a worker node to each deployable component of your application)</li>
<li>The Controller Manager, which performs cluster-level functions, such as replicating components, keeping track of worker nodes, handling node failures, and so on</li>
<li>etcd, a reliable distributed data store that persistently stores the cluster configuration.</li>
</ul>
<p>The components of the <strong>Control Plane hold and control the state of the cluster, but they don’t run your applications. This is done by the (worker) nodes</strong>.</p>
<p><strong>THE NODES</strong><br>The worker nodes are the machines that run your containerized applications. The task of running, monitoring, and providing services to your applications is done by the following components:</p>
<ul>
<li>Docker, rkt, or another container runtime, which runs your containers</li>
<li>The <strong>Kubelet, which talks to the API server and manages containers on its node</strong></li>
<li>The Kubernetes Service Proxy <strong>(kube-proxy), which load-balances network traffic</strong> between application components</li>
</ul>
<p><strong>Master and worker node talk by kubelet trough API server, one end is kubelet, the other end is API server</strong></p>
<mark class="label warning">Actually, each components run in container as well.</mark>

<h2 id="run-an-application-by-k8s"><a href="#run-an-application-by-k8s" class="headerlink" title="run an application by k8s"></a>run an application by k8s</h2><p>To run an application in Kubernetes, you first need to package it up into one or more container images, push those images to an image registry, and then post a description of your app to the Kubernetes API server</p>
<p>The description includes information such as the container image or images that contain your application components, how those components are related to each other, and which ones need to be run co-located (together on the same node) and which don’t. For each component, you can also specify how many copies (or replicas) you want to run. Additionally, the description also includes which of those components provide a service to either internal or external clients and should be exposed through a single IP address and made discoverable to the other components</p>
<p>When the <code>API server processes your app’s description</code>, the <code>Scheduler schedules the specified groups of containers onto the available worker nodes</code> based on computational resources required by each group and the unallocated resources on each node at that moment. The <code>Kubelet on those nodes then instructs the Container Runtime (Docker, for example) to pull the required container images and run the containers</code>.</p>
<p><strong>keep application running</strong><br>Once the application is running, Kubernetes continuously makes sure that the <strong>deployed state of the application always matches the description you provided</strong>.</p>
<p>Similarly, if a whole worker node dies or becomes inaccessible, Kubernetes will <code>select new nodes for all the containers that were running on the node and run them on the newly selected nodes.</code><br><strong>scale</strong><br>While the application is running, you can decide you want to increase or decrease the number of copies, and Kubernetes will spin up additional ones or stop the excess ones.</p>
<p><img src="https://cyun.tech/images/k8s/k8s_run_application.png" alt="k8s_run_application"></p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a href="https://www.manning.com/books/kubernetes-in-action">Kubernetes-in-action</a><br><a href="https://kubernetes.io/docs/concepts/storage">Kubernete Storage</a><br><a href="https://kubernetes.io/docs/concepts/">Kubernete Concepts</a></p>
]]></content>
      <categories>
        <category>k8s</category>
        <category>overview</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s_cri_oci</title>
    <url>/2021/06/09/k8s-cri-oci/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><img src="https://merlijn.sebrechts.be/img/2020/container-runtimes.jpg" alt="CRI and OCI"></p>
<ul>
<li>The OCI or Open Containers Initiative is an organization that creates container standards. <code>The OCI runtime spec defines the API of a low-level container runtime and the OCI image spec defines what a “Docker image” actually is.</code></li>
<li>The Kubernetes project has also defined a number of standards. Relevant for this article is the CRI: the Container Runtime Interface. <code>This interface defines how Kubernetes talks with a high-level container runtime.</code></li>
</ul>
<span id="more"></span>

<p><strong>Companies involved</strong></p>
<ul>
<li>CRI-O and podman is created by RedHat for OpenShift, it’s open source now.</li>
<li>containerd and runc maintained by community</li>
<li>gVisor is developed by Google</li>
<li>Kata-runtime comes from Intel and Hyper.sh for security reason, it’s start special VM!!!!</li>
</ul>
<h2 id="Container-Runtime"><a href="#Container-Runtime" class="headerlink" title="Container Runtime"></a>Container Runtime</h2><p><strong>low level container runtime</strong><br>An OCI runtime is relatively simple. You give it the root filesystem of the container and a json file describing core properties of the container, and the runtime spins up the container and connects it to an existing network using a pre-start hook.</p>
<p>At the moment, we have three main OCI runtimes or low-level container runtimes.</p>
<ul>
<li>runc, which is the default for most tools such as Docker and Podman. This is based on the code initially donated by Docker.</li>
<li>kata-run from the “Kata Containers” project, which aims to provide much better security and isolation between containers by running each container in a lightweight VM. It’s a merge of the runv and Intel Clear Containers projects.</li>
<li>gVisor is created by Google. It provides better isolation by running each container in a tight security sandbox.</li>
</ul>
<p><strong>high-level container runtime</strong>  </p>
<ul>
<li>Actually creating the network of a container.</li>
<li>Managing container images.</li>
<li>Preparing the environment of a container.</li>
<li>Managing local&#x2F;persistent storage.</li>
</ul>
<p>There are also three main high-level container runtimes.</p>
<ul>
<li><p>containerd is a CRI-compatible container runtime which was <strong>donated to the CNCF by Docker</strong>. It is currently the default in many Kubernetes distributions such ad Canonical’s Charmed Kubernetes. It supports all OCI-compliant runtimes and has a special shim for kata-run.</p>
</li>
<li><p>CRI-O is a bridge between Kubernetes and OCI-compliant runtimes <strong>created by Red Hat</strong>. It has the big advantage that it gets released in lock-step with Kubernetes itself. Each CRI-O version is compatible with the Kubernetes version that has the same version number. <strong>This runtime is the default in OpenShift</strong>.</p>
</li>
<li><p>Docker itself can also be used as a <strong>CIR-compatible container runtime using the docker-shim</strong>. However, many Kubernetes distributors are moving away from this solution, due to the added unnecessary complexity of Docker.</p>
</li>
</ul>
<h2 id="kubernetes-CRI-leaded-by-Kubernetes-Google"><a href="#kubernetes-CRI-leaded-by-Kubernetes-Google" class="headerlink" title="kubernetes CRI(leaded by Kubernetes[Google])"></a>kubernetes CRI(leaded by Kubernetes[Google])</h2><p>The CRI was released in December <code>2016 by Kubernetes</code> (<strong>Container Runtime Interface</strong>). In order to avoid subsequent compatibility, Kubernetes attempted to support another container runtime project led by CoreOS, rkt, but needed to write a lot of compatible code, etc. Other runtimes have implemented maintenance work, so a single CRI interface has been released. <strong>Any runtime that supports CRI can be explicitly used as Kubernetes’ underlying runtime;</strong>, kubelet calls same API(CRI implemented by runtime) to manage container.</p>
<p><strong>Default CRI history</strong><br><img src="https://cyun.tech/images/k8s/k8s_default_cri.png" alt="CRI"></p>
<p><img src="https://cyun.tech/images/k8s/containerd_cri.png" alt="containerd history"></p>
<p><img src="https://static001.infoq.cn/resource/image/8e/93/8ec0259387eae710e478f8683c374893.png" alt="detail about containerd"></p>
<h2 id="OCI-leaded-by-Docker"><a href="#OCI-leaded-by-Docker" class="headerlink" title="OCI(leaded by Docker)"></a>OCI(leaded by Docker)</h2><p><code>In 2015</code>, Docker and other leaders in the container industry jointly founded the <strong>Open Container Initiative (OCI)</strong> (it is also a project under the Linux Foundation).</p>
<p>Two specifications are primarily used by OCI:</p>
<ul>
<li>Runtime-spec: How to run the package when the container is running on the file system defined.</li>
<li>image-spec: How to create a package on a file system that can be run by OCI.</li>
</ul>
<p>As an original work, Docker donated its own container image format and runtime (now runc) to OCI.</p>
<p><strong>OCI has nothing related to Kubernetes, it defines the specification how to create images and start container.</strong></p>
<h1 id="K8s"><a href="#K8s" class="headerlink" title="K8s"></a>K8s</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># If you don&#x27;t specify a runtime, kubeadm automatically tries to detect an installed container runtime by scanning through a list of well known Unix domain sockets.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Runtime	Path to Unix domain socket</span></span><br><span class="line"><span class="comment"># Docker	    /var/run/dockershim.sock</span></span><br><span class="line"><span class="comment"># containerd	/run/containerd/containerd.sock</span></span><br><span class="line"><span class="comment"># CRI-O	        /var/run/crio/crio.sock</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> If both Docker and containerd are detected, Docker takes precedence.</span></span><br><span class="line"><span class="comment"># If any other two or more runtimes are detected, kubeadm exits with an error.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check runtime used by kubelet, check runtime parameter</span></span><br><span class="line">$ ps -ef | grep kubelet </span><br><span class="line"></span><br><span class="line"><span class="comment"># --container-runtime string     Default: `docker`</span></span><br><span class="line"><span class="comment"># The container runtime to use. Possible values: `docker`, `remote`.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --container-runtime-endpoint string     Default: `unix:///var/run/dockershim.sock`</span></span><br><span class="line"><span class="comment"># possible values: &#x27;/run/containerd/containerd.sock&#x27;, &#x27;/var/run/crio/crio.sock&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="multiple-runtime-support"><a href="#multiple-runtime-support" class="headerlink" title="multiple runtime support"></a>multiple runtime support</h2><p>A k8s cluster can have multiple runetime!!!</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">node.k8s.io/v1alpha1</span>  <span class="comment"># RuntimeClass is defined in the node.k8s.io API group</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RuntimeClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myclass</span>  <span class="comment"># The name the RuntimeClass will be referenced by</span></span><br><span class="line">  <span class="comment"># RuntimeClass is a non-namespaced resource</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">runtimeHandler:</span> <span class="string">myconfiguration</span>  <span class="comment"># The name of the corresponding CRI configuration</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mypod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">runtimeClassName:</span> <span class="string">myclass</span></span><br><span class="line">  <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>


<h1 id="standalone-container"><a href="#standalone-container" class="headerlink" title="standalone container"></a>standalone container</h1><p>docker is best choice for this, but this is another choice to try. <a href="https://www.linkedin.com/pulse/part-ii-why-docker-openshift-4-rhel-8-scott-mccarty/">why redhat deos not use docker for openshift</a></p>
<ul>
<li>Use Podman managing pods and containers. It’s a CLI tool which is very similar to docker. It uses libpod which uses runc in backend and is fully compatible with “Docker Images”.</li>
<li>Use Buildah for building “Docker Images”. It supports building containers from DockerFiles, but you can also build them with simple shell scripts!</li>
<li>Use CRI-O for running containers with Kubernetes. If you want to debug pods and containers maintained by Kubernetes, you can use the crictl tool instead of the docker commands.</li>
</ul>
<p><strong>Note: Podman can’t be used as kubernetes runtime</strong></p>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><p><a href="https://pankajconnect.medium.com/cant-docker-work-anymore-in-kubernetes-k8s-abandoned-docker-800fe676db49">history of k8s with docker</a></p>
</li>
<li><p><a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#containerd">setup runtime for k8s</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
        <category>cri</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s_faq</title>
    <url>/2020/06/28/k8s-faq/</url>
    <content><![CDATA[<h1 id="Pods"><a href="#Pods" class="headerlink" title="Pods"></a>Pods</h1><h2 id="why-pod-is-in-pending-status"><a href="#why-pod-is-in-pending-status" class="headerlink" title="why pod is in pending status?"></a>why pod is in pending status?</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pods === pod</span></span><br><span class="line">$ kubectl get pod</span><br><span class="line">$ kubectl get pods</span><br><span class="line"><span class="comment"># there are many reason for this check why, use describe which gives status and events</span></span><br><span class="line">$ kubectl describe pods kubia-mannual</span><br><span class="line">Name:         kubia-mannual</span><br><span class="line">Namespace:    default</span><br><span class="line">Priority:     0</span><br><span class="line">Node:         &lt;none&gt;</span><br><span class="line">Labels:       run=kubia</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Status:       Pending</span><br><span class="line">IP:</span><br><span class="line">IPs:          &lt;none&gt;</span><br><span class="line">Containers:</span><br><span class="line">...</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason            Age                 From               Message</span><br><span class="line">  ----     ------            ----                ----               -------</span><br><span class="line">  Warning  FailedScheduling  6s (x4 over 2m45s)  default-scheduler  0/1 nodes are available: 1 node(s) didn<span class="string">&#x27;t match node selector.</span></span><br></pre></td></tr></table></figure>

<h2 id="pod-is-restarted-how-can-I-see-previous-container-log"><a href="#pod-is-restarted-how-can-I-see-previous-container-log" class="headerlink" title="pod is restarted, how can I see previous container log"></a>pod is restarted, how can I see previous container log</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl logs mypod --previous</span><br></pre></td></tr></table></figure>
<h2 id="how-can-I-check-why-pod-is-restart"><a href="#how-can-I-check-why-pod-is-restart" class="headerlink" title="how can I check why pod is restart"></a>how can I check why pod is restart</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl describe po mypod</span><br><span class="line">...</span><br><span class="line">Events:</span><br><span class="line">  Normal   Scheduled  2m30s                default-scheduler        Successfully assigned default/kubia-hc to dev-alokb</span><br><span class="line">  Warning  Unhealthy  54s (x3 over 74s)    kubelet, dev-alokb       Liveness probe failed: HTTP probe failed with statuscode: 500</span><br><span class="line">  Normal   Killing    53s                  kubelet, dev-alokb       Container kubia-hc failed liveness probe, will be restarted</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<h2 id="how-can-I-check-liveness-setting-for-a-pod"><a href="#how-can-I-check-liveness-setting-for-a-pod" class="headerlink" title="how can I check liveness setting for a pod"></a>how can I check liveness setting for a pod</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl describe po mypod</span><br><span class="line">...</span><br><span class="line">Liveness:       http-get http://:8080/ delay=10s <span class="built_in">timeout</span>=1s period=10s <span class="comment">#success=1 #failure=3</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="how-pod-the-service-internal-cluster-ip-after-it-knows-the-service-name"><a href="#how-pod-the-service-internal-cluster-ip-after-it-knows-the-service-name" class="headerlink" title="how pod the service internal cluster ip after it knows the service name?"></a>how pod the service internal cluster ip after it knows the service name?</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubia        ClusterIP   10.108.36.232   &lt;none&gt;        80/TCP    10m</span><br></pre></td></tr></table></figure>
<p><strong>by environment</strong><br>if pod is created after service, several variables are passed to pod by env</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check env on a pod which is backend of a service</span></span><br><span class="line">$ kubectl <span class="built_in">exec</span> kubia-vtzwq -- <span class="built_in">env</span> | grep KUBIA</span><br><span class="line">KUBIA_SERVICE_PORT=80</span><br><span class="line">KUBIA_PORT_80_TCP_PROTO=tcp</span><br><span class="line">KUBIA_PORT_80_TCP_ADDR=10.108.36.232</span><br><span class="line">KUBIA_PORT_80_TCP=tcp://10.108.36.232:80</span><br><span class="line">KUBIA_PORT=tcp://10.108.36.232:80</span><br><span class="line">KUBIA_SERVICE_HOST=10.108.36.232</span><br><span class="line">KUBIA_PORT_80_TCP_PORT=80</span><br></pre></td></tr></table></figure>
<p><strong>by DNS server</strong><br>Actually, each pod configure a internal DNS server(dns service at kube-system)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> kubia-vtzwq -- <span class="built_in">cat</span> /etc/resolv.conf</span><br><span class="line">nameserver 10.96.0.10</span><br><span class="line">search default.svc.cluster.local svc.cluster.local cluster.local ...</span><br></pre></td></tr></table></figure>
<p>Here dns server is a service cluster ip of kube-system</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get svc -n=kube-system -o wide</span><br><span class="line">NAME       TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE     SELECTOR</span><br><span class="line">kube-dns   ClusterIP   10.96.0.10   &lt;none&gt;        53/UDP,53/TCP,9153/TCP   7d14h   k8s-app=kube-dns</span><br><span class="line"></span><br><span class="line"><span class="comment"># show all pod with labels</span></span><br><span class="line">$ kubectl get po -n=kube-system --show-labels</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line"><span class="comment"># filter with selector two pods behind the dns service</span></span><br><span class="line">$ kubectl get po -l k8s-app=kube-dns -n=kube-system</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-66bff467f8-77978   1/1     Running   0          7d14h</span><br><span class="line">coredns-66bff467f8-mtqbt   1/1     Running   0          7d14h</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> kubia-vtzwq -- curl kubia:80</span><br></pre></td></tr></table></figure>

<h2 id="how-to-support-tls-in-Ingress"><a href="#how-to-support-tls-in-Ingress" class="headerlink" title="how to support tls in Ingress"></a>how to support tls in Ingress</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl genrsa -out tls.key 2048</span><br><span class="line">$ openssl req -new -x509 -key tls.key -out tls.cert -days 360 -subj/CN=kubia.example.com</span><br><span class="line">$ kubectl create secret tls tls-secret --cert=tls.cert --key=tls.key</span><br><span class="line"><span class="comment"># later on use the secret in Ingress like this</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubia</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kubia.example.com</span></span><br><span class="line">    <span class="comment"># secrete resource that created before</span></span><br><span class="line">    <span class="comment"># only enable ssl when access ingress, but ingress controller to backend still use Http!!!</span></span><br><span class="line">    <span class="attr">secretame:</span> <span class="string">tls-secret</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">kubia.example.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">          <span class="attr">backend:</span></span><br><span class="line">            <span class="attr">serviceName:</span> <span class="string">kubia-nodeport</span></span><br><span class="line">            <span class="attr">servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>
<h2 id="why-needs-headless-service-no-ClusterIP"><a href="#why-needs-headless-service-no-ClusterIP" class="headerlink" title="why needs headless service(no ClusterIP)"></a>why needs headless service(no ClusterIP)</h2><p>In some case, you want to know all endpoints of a service by internal DNS lookup, if service has ClusterIP, so dns server only returns the ClusterIP of the service, but for headless service, it returns several,  each record each for a endpoint.</p>
<p>For headless Services, a cluster IP is not allocated, <strong>kube-proxy does not handle these Services, and there is no load balancing or proxying done by the platform for them</strong>.</p>
<p><strong>DNS server here provides service&lt;—–&gt;IP mapping</strong></p>
<ul>
<li>cluster service, return ClusterIP</li>
<li>headless service, return IP(s) of each endpoint(pod).</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubia</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># headless service, no ClusterIP</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="comment"># service port 80---&gt;container port 8080</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">kubia</span></span><br></pre></td></tr></table></figure>

<h2 id="directly-talk-to-api-server-by-restful-API-skip-kubectl"><a href="#directly-talk-to-api-server-by-restful-API-skip-kubectl" class="headerlink" title="directly talk to api server by restful API, skip kubectl"></a>directly talk to api server by restful API, skip kubectl</h2><p>In some cause, we may no kubectl installed or we want to use restful API directly talking with api server from source source code like js&#x2F;python, there are <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/">API reference with example</a>, but first you need to authenticate with server first, either by your self, or use kube-proxy which will do this for you.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># on one node</span></span><br><span class="line">$ sudo kubectl proxy --address=0.0.0.0 --disable-filter=<span class="literal">true</span></span><br><span class="line">Starting to serve on [0.0.0.0]:8001</span><br><span class="line"><span class="comment"># curl&lt;---kubectl proxy&lt;-----api server------&gt;</span></span><br><span class="line">$ curl http://localhost:8001/apis/apps/v1/namespaces/default/deployments</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;DeploymentList&quot;</span>,</span><br><span class="line">  <span class="string">&quot;apiVersion&quot;</span>: <span class="string">&quot;apps/v1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;resourceVersion&quot;</span>: <span class="string">&quot;44164&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;items&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;kubia&quot;</span>,</span><br><span class="line">        <span class="string">&quot;namespace&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="string">&quot;uid&quot;</span>: <span class="string">&quot;80400a5b-0db9-4997-b1a5-b097181b97af&quot;</span>,</span><br><span class="line">        <span class="string">&quot;resourceVersion&quot;</span>: <span class="string">&quot;42156&quot;</span>,</span><br><span class="line">        <span class="string">&quot;generation&quot;</span>: 2,</span><br><span class="line">        <span class="string">&quot;creationTimestamp&quot;</span>: <span class="string">&quot;2021-03-28T11:55:17Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;annotations&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;deployment.kubernetes.io/revision&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="how-to-use-host-network-directly-for-pod"><a href="#how-to-use-host-network-directly-for-pod" class="headerlink" title="how to use host network directly for pod"></a>how to use host network directly for pod</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">60</span></span><br><span class="line">      <span class="comment"># use host network diretly</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">ingress</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">traefik:v1.7.20</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">traefik-ingress-lb</span></span><br></pre></td></tr></table></figure>

<h2 id="how-to-limit-resource-used-by-container"><a href="#how-to-limit-resource-used-by-container" class="headerlink" title="how to limit resource used by container"></a>how to limit resource used by container</h2><p>There are two kinds resource check for K8S pod, but it’s <code>set at each containers of that pod separately</code>.</p>
<ul>
<li>request: schedule to node only if it can proivde these resource, used by scheduler</li>
<li>limits: how much cpu&#x2F;memory container can use</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx:1.13.12</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">&quot;64Mi&quot;</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">&quot;250m&quot;</span></span><br><span class="line">    <span class="attr">limits:</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">&quot;128Mi&quot;</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>k8s</category>
        <category>FAQ</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>k8s_faq</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s_ha</title>
    <url>/2021/06/08/k8s-ha/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>One of the main advantages of Kubernetes is how it brings greater reliability and stability to the container-based distributed application, through the use of dynamic scheduling of containers. But, how do you <code>make sure Kubernetes itself stays up when a component or its master node goes down?</code></p>
<p>Kubernetes High-Availability is about setting up Kubernetes, along with its supporting components in a way that there is no single point of failure. A single master cluster can easily fail, while a multi-master cluster uses multiple master nodes, each of which has access to same worker nodes. In a single master cluster the important component like API server, controller manager lies only on the single master node and if it fails you cannot create more services, pods etc. However, in case of Kubernetes HA environment, these important components are replicated on multiple masters(usually three masters) and if any of the masters fail, the other masters keep the cluster up and running.</p>
<span id="more"></span>

<h1 id="HA-topology"><a href="#HA-topology" class="headerlink" title="HA topology"></a>HA topology</h1><p>There two options for configuring the topology of your highly available (HA) Kubernetes clusters.</p>
<p>You can set up an HA cluster:</p>
<ul>
<li>With stacked control plane nodes, where etcd nodes are colocated with control plane nodes</li>
<li>With external etcd nodes, where etcd runs on separate nodes from the control plane</li>
</ul>
<h2 id="Stacked-etcd-topology"><a href="#Stacked-etcd-topology" class="headerlink" title="Stacked etcd topology"></a>Stacked etcd topology</h2><p>A stacked HA cluster is a topology where the distributed data storage cluster provided by etcd is stacked on top of the cluster formed by the nodes managed by kubeadm that run control plane components.</p>
<p><code>Each control plane node runs an instance of the kube-apiserver, kube-scheduler, and kube-controller-manager</code>. <strong>The kube-apiserver is exposed to worker nodes using a load balancer.</strong></p>
<p><code>Each control plane node creates a local etcd member and this etcd member communicates only with the kube-apiserver of this node. The same applies to the local kube-controller-manager and kube-scheduler instances.</code></p>
<p>This topology <code>couples the control planes and etcd members on the same nodes</code></p>
<p>Proc:</p>
<ul>
<li>It is simpler to set up than a cluster with external etcd nodes, and simpler to manage for replication.</li>
</ul>
<p>Cons</p>
<ul>
<li>A stacked cluster runs the risk of failed coupling. If one node goes down, both an etcd member and a control plane instance are lost, and redundancy is compromised. You can mitigate this risk by adding more control plane nodes.</li>
</ul>
<p>This is the default topology in kubeadm. A local etcd member is created automatically on control plane nodes when using kubeadm init and kubeadm join –control-plane.</p>
<p><img src="https://d33wubrfki0l68.cloudfront.net/d1411cded83856552f37911eb4522d9887ca4e83/b94b2/images/kubeadm/kubeadm-ha-topology-stacked-etcd.svg" alt="Stacked etcd"></p>
<h2 id="External-etcd-topology"><a href="#External-etcd-topology" class="headerlink" title="External etcd topology"></a>External etcd topology</h2><p>An HA cluster with external etcd is a topology where the distributed data storage cluster provided by etcd is external to the cluster formed by the nodes that run control plane components.</p>
<p>Like the stacked etcd topology, each control plane node in an external etcd topology runs an instance of the kube-apiserver, kube-scheduler, and kube-controller-manager. And the kube-apiserver is exposed to worker nodes using a load balancer. However, <code>etcd members run on separate hosts, and each etcd host communicates with the kube-apiserver of each control plane node.</code></p>
<p>This topology <code>decouples the control plane and etcd member</code>.<br>Proc:</p>
<ul>
<li>It provides an HA setup where losing a control plane instance or an etcd member has less impact and does not affect the cluster redundancy as much as the stacked HA topology.</li>
</ul>
<p>Cons:</p>
<ul>
<li>This topology requires twice the number of hosts as the stacked HA topology. A minimum of three hosts for control plane nodes and three hosts for etcd nodes are required for an HA cluster with this topology.</li>
</ul>
<p><img src="https://d33wubrfki0l68.cloudfront.net/ad49fffce42d5a35ae0d0cc1186b97209d86b99c/5a6ae/images/kubeadm/kubeadm-ha-topology-external-etcd.svg" alt="external etcd"></p>
<p><strong>API server LB and HA</strong><br><img src="https://cyun.tech/images/k8s/APIServer_LB_HA.jpg" alt="APIserver LB"></p>
<p><strong>Note</strong>  </p>
<ul>
<li>use HA proxy to expose virtual IP that’s used by worker node for connection, behind HA proxy is the real API server that serves the request.</li>
<li>use Keepalived for HA proxy HA, if one HA proxy is down, the other takes over.</li>
</ul>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/">K8s HA topology</a></li>
<li><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/">HA cluster setup Kubeadm</a></li>
<li><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/setup-ha-etcd-with-kubeadm/">external etcd cluster</a></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
        <category>HA</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>HA</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s_kata_container</title>
    <url>/2021/06/09/k8s-kata-container/</url>
    <content><![CDATA[<p>more effort</p>
]]></content>
  </entry>
  <entry>
    <title>k8s_minikube</title>
    <url>/2021/03/24/k8s-minikube/</url>
    <content><![CDATA[<h1 id="minikube"><a href="#minikube" class="headerlink" title="minikube"></a>minikube</h1><p>minikube is <code>local Kubernetes</code>, focusing on making it easy to learn and develop for Kubernetes.</p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start k8s cluster</span></span><br><span class="line">$ minikube start</span><br><span class="line"><span class="comment"># for china use this one</span></span><br><span class="line">$ sudo minikube start --driver=none --extra-config=kubeadm.ignore-preflight-errors=NumCPU --force --image-mirror-country=cn</span><br><span class="line"></span><br><span class="line">$ minikube pause</span><br><span class="line">$ minikube stop</span><br><span class="line"></span><br><span class="line">$ minikube status</span><br><span class="line">minikube</span><br><span class="line"><span class="built_in">type</span>: Control Plane</span><br><span class="line">host: Running</span><br><span class="line">kubelet: Running</span><br><span class="line">apiserver: Running</span><br><span class="line">kubeconfig: Configured</span><br><span class="line">timeToStop: Nonexistent</span><br><span class="line"></span><br><span class="line">$ minikube delete --all</span><br><span class="line"></span><br><span class="line">$ minikube addons list</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable ingress plugin</span></span><br><span class="line">$ minikube addons <span class="built_in">enable</span> ingress</span><br><span class="line">The <span class="string">&#x27;ingress&#x27;</span> addon is enabled.</span><br><span class="line"></span><br><span class="line"><span class="comment"># after ingress is enabled, an ingress pod is running listen on 80 by nginx</span></span><br><span class="line"><span class="comment"># and meanwhile docker-proxy starts as well on the node which ingress pod runs.</span></span><br><span class="line"><span class="comment"># so that if you access that node on port 80, it will proxy the traffic to ingress container</span></span><br><span class="line"><span class="comment"># which performs ingress rules and selects the proper endpoint</span></span><br><span class="line"></span><br><span class="line">root     10678  1009  0 Jun30 ?        00:00:00 /usr/bin/docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 80 -container-ip 172.17.0.6 -container-port 80</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ kubectl cluster-info</span><br><span class="line">Kubernetes control plane is running at https://10.116.5.201:8443</span><br><span class="line">KubeDNS is running at https://10.116.5.201:8443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class="line"><span class="comment"># after cluster starts, check or deploy pod, service</span></span><br><span class="line">$ kubectl get po -A</span><br><span class="line">NAMESPACE     NAME                          READY   STATUS             RESTARTS   AGE</span><br><span class="line">kube-system   coredns-54d67798b7-f6wq8      1/1     Running            0          11h</span><br><span class="line">kube-system   etcd-dev                      1/1     Running            0          11h</span><br><span class="line">kube-system   kube-apiserver-dev            1/1     Running            0          11h</span><br><span class="line">kube-system   kube-controller-manager-dev   1/1     Running            0          11h</span><br><span class="line">kube-system   kube-proxy-fsd9r              1/1     Running            0          11h</span><br><span class="line">kube-system   kube-scheduler-dev            1/1     Running            0          11h</span><br><span class="line">kube-system   storage-provisioner           0/1     ImagePullBackOff   0          11h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a sample deployment and expose it on port 8080:</span></span><br><span class="line">$ kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.4</span><br><span class="line">$ kubectl expose deployment hello-minikube --<span class="built_in">type</span>=NodePort --port=8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># check service</span></span><br><span class="line">$ kubectl get services hello-minikube</span><br><span class="line"></span><br><span class="line"><span class="comment"># map to host port 7080</span></span><br><span class="line">$ kubectl port-forward service/hello-minikube 7080:8080</span><br><span class="line">$ curl http://localhost:7080/</span><br></pre></td></tr></table></figure>

<h1 id="troubleshooting"><a href="#troubleshooting" class="headerlink" title="troubleshooting"></a>troubleshooting</h1><h2 id="dashboard-is-not-working"><a href="#dashboard-is-not-working" class="headerlink" title="dashboard is not working"></a>dashboard is not working</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># run minikube command with more logs for troubleshooting</span></span><br><span class="line">$ minikube addons <span class="built_in">enable</span> dashboard</span><br><span class="line">$ minikube addons <span class="built_in">enable</span> metrics-server</span><br><span class="line"><span class="comment"># if pod is not ready due to pull image error like this</span></span><br><span class="line">$ kubectl get po -n kubernetes-dashboard --show-labels</span><br><span class="line">NAME                                         READY   STATUS             RESTARTS   AGE   LABELS</span><br><span class="line">dashboard-metrics-scraper-8554f74445-rnq6d   0/1     ImagePullBackOff   0          15m   k8s-app=dashboard-metrics-scraper,pod-template-hash=8554f74445</span><br><span class="line">kubernetes-dashboard-6c87f58d7c-48gk7        0/1     ImagePullBackOff   0          15m   gcp-auth-skip-secret=<span class="literal">true</span>,k8s-app=kubernetes-dashboard,pod-template-hash=6c87f58d7c</span><br><span class="line"></span><br><span class="line"><span class="comment"># change the image for these pods</span></span><br><span class="line"><span class="comment"># registry.cn-hangzhou.aliyuncs.com/lxm-k8s/metrics-scraper:v1.0.6</span></span><br><span class="line"><span class="comment"># registry.cn-hangzhou.aliyuncs.com/lixunan/kubernetes-dashboard:v2.1.0</span></span><br><span class="line">$ sudo kubectl <span class="built_in">set</span> image deploy kubernetes-dashboard kubernetes-dashboard=registry.cn-hangzhou.aliyuncs.com/lixunan/kubernetes-dashboard:v2.1.0 -n  kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">$ sudo kubectl <span class="built_in">set</span> image deploy dashboard-metrics-scraper dashboard-metrics-scraper=registry.cn-hangzhou.aliyuncs.com/lxm-k8s/metrics-scraper:v1.0.6 -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment"># local access from this machine</span></span><br><span class="line">$ minikube dashboard</span><br><span class="line">🤔  Verifying dashboard health ...</span><br><span class="line">🚀  Launching proxy ...</span><br><span class="line">🤔  Verifying proxy health ...</span><br><span class="line">http://127.0.0.1:43909/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/</span><br><span class="line"></span><br><span class="line"><span class="comment"># remote access by proxy, all interfaces</span></span><br><span class="line">$ sudo kubectl proxy --address=<span class="string">&#x27;0.0.0.0&#x27;</span> --disable-filter=<span class="literal">true</span></span><br><span class="line"><span class="comment"># http://10.117.5.21:8001/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/#/overview?namespace=default</span></span><br><span class="line"></span><br><span class="line">$ kubectl get po -n kubernetes-dashboard --show-labels</span><br><span class="line">$ kubectl describe po -l k8s-app=kubernetes-dashboard -n kubernetes-dashboard</span><br><span class="line">$ kubectl logs -l k8s-app=kubernetes-dashboard -n kubernetes-dashboard</span><br></pre></td></tr></table></figure>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://minikube.sigs.k8s.io/docs/start/">Get Started</a></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
        <category>deploy</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s_network_cni</title>
    <url>/2021/06/08/k8s-network-cni/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>CNI (Container Network Interface), a Cloud Native Computing Foundation project, <strong>consists of a specification and libraries for writing plugins to configure network interfaces in Linux containers, along with a number of supported plugins</strong>. CNI concerns itself only with network connectivity of containers and removing allocated resources when the container is deleted. Because of this focus, CNI has a wide range of support and the specification is simple to implement.</p>
<p>A <code>CNI plugin</code> is responsible for inserting a network interface into the container network namespace (e.g., one end of a virtual ethernet (veth) pair) and making any necessary changes on the host (e.g., attaching the other end of the veth into a bridge). It then <strong>assigns an IP address to the interface and sets up the routes consistent with the IP Address Management</strong> section by invoking the appropriate IP Address Management (IPAM) plugin.</p>
<p><strong>Main tasks</strong>  </p>
<ul>
<li>insert interface in container</li>
<li>assign ip address to contaner</li>
<li>setup routes or iptables rules</li>
</ul>
<span id="more"></span>
<p><strong>Plugins provided by CNI projects</strong><br><strong>interface</strong></p>
<ul>
<li>bridge：create a bridge and add container to it</li>
<li>loopback：create a loopback</li>
<li>ptp: create veth pair</li>
<li>vlan: create a vlan dev</li>
</ul>
<p><strong>IPAM：IP assignment</strong></p>
<ul>
<li>host-local：create and maintain a local ip database</li>
</ul>
<p><strong>Meta:</strong></p>
<ul>
<li>flannel：create flannel dev and set route for cross node communication</li>
<li>tuning：adjust the seeting for a dev</li>
<li>portmap：map hostport to container port using iptables.</li>
</ul>
<h1 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h1><h2 id="Kubernets-network-model"><a href="#Kubernets-network-model" class="headerlink" title="Kubernets network model"></a>Kubernets network model</h2><p>Kubernetes imposes the following fundamental requirements on any networking implementation for pods on the same node</p>
<ul>
<li>pods on a node can communicate with all pods on all nodes without NAT</li>
<li>agents on a node (e.g. system daemons, kubelet) can communicate with all pods on that node</li>
</ul>
<p>But it does NOT impose pods comunication between nodes, this is done by Network plugins which mostly implement CNI, so that kubernetes calls CNI standard API to config its network.</p>
<p><strong>CNI plugins</strong></p>
<ul>
<li>ACI: Cisco Application Centric Infrastructure offers an integrated overlay and underlay SDN solution that supports containers, virtual machines, and bare metal servers</li>
<li>Antrea: It leverages Open vSwitch as the networking data plane.</li>
<li>AWS VPC CNI for Kubernetes</li>
<li>Azure CNI for Kubernetes</li>
<li>Calico: Calico is an open source networking and network security solution for <code>containers, virtual machines, and native host-based workloads</code></li>
<li>Cilium: Cilium is open source software for providing and transparently <code>securing network connectivity between application containers</code>. Cilium is L7&#x2F;HTTP aware and can enforce network policies on L3-L7 using an identity based security model that is decoupled from network addressing, and it can be used in combination with other CNI plugins</li>
<li>Flannel: Flannel is a very <code>simple overlay network</code> that satisfies the Kubernetes requirements</li>
<li>Google Compute Engine (GCE)</li>
<li>OVN: OVN is an opensource network virtualization solution developed by the Open vSwitch community. It lets one create logical switches, logical routers, stateful ACLs, load-balancers etc to build different virtual networking topologies.</li>
</ul>
<p><strong>how CNI plugin is called</strong>  </p>
<ul>
<li>When the container runtime expects to perform network operations on a container, it (like the kubelet in the case of K8s) calls the CNI plugin with the desired command.</li>
<li>The container runtime also provides related network configuration and container-specific data to the plugin.</li>
<li>The CNI plugin performs the required operations and reports the result.</li>
</ul>
<p><strong>CNI is called twice by K8s (kubelet) to set up loopback and eth0 interfaces for a pod.</strong></p>
<h2 id="Flannel"><a href="#Flannel" class="headerlink" title="Flannel"></a>Flannel</h2><h1 id="CNI-conf-for-Kubernet"><a href="#CNI-conf-for-Kubernet" class="headerlink" title="CNI conf for Kubernet"></a>CNI conf for Kubernet</h1><p>The CNI plugin is selected by passing Kubelet the <code>--network-plugin=cni</code> command-line option. Kubelet <code>reads a file from --cni-conf-dir (default /etc/cni/net.d)</code> and uses the CNI configuration from that file to set up each pod’s network. The CNI configuration file must match the CNI specification, and any required CNI plugins referenced by the configuration must be present in <code>--cni-bin-dir (default /opt/cni/bin).</code></p>
<ul>
<li>Kubelet has <code>--network-plugin=cni</code> command-line option</li>
<li>cni conf file at <code>--cni-conf-dir (default /etc/cni/net.d)</code></li>
<li>cni plugin(binary) at <code>--cni-bin-dir (default /opt/cni/bin).</code></li>
<li>IPAM of host-local for used IP address at <code>/var/lib/cni/networks/cbr0</code></li>
</ul>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://kubernetes.io/docs/concepts/cluster-administration/networking/">Networking</a></li>
<li><a href="https://github.com/containernetworking/cni">CNI Project</a></li>
<li><a href="https://www.youtube.com/watch?v=YjjrQiJOyME">CNI introduction</a></li>
<li><a href="https://www.cni.dev/">CNI website</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>k8s_operator</title>
    <url>/2021/06/08/k8s-operator/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>When</strong><br>Consider adding a Custom Resource to Kubernetes if you want to define new controllers, application configuration objects or other declarative API.</p>
<p><strong>How</strong><br>Custom resources can appear and disappear in a running cluster through dynamic registration, and cluster admins can update custom resources independently of the cluster itself. Once a custom resource is installed, users can create and access its objects using kubectl, just as they do for built-in resources like Pods.</p>
<p><strong>Operator pattern</strong><br>The <code>combination of a custom resource API and a control loop is called the Operator pattern</code>, The Operator pattern is used to manage specific, <code>usually stateful, applications</code>.</p>
<p>Kubernetes provides two ways to add custom resources to your cluster:</p>
<ul>
<li><code>CRDs</code> are simple and can be created without any programming.</li>
<li><code>API Aggregation</code> requires programming, but allows more control over API behaviors like how data is stored and conversion between API versions.</li>
</ul>
<p>CRDs are easier to use. Aggregated APIs are more flexible. Choose the method that best meets your needs.</p>
<p>Typically, CRDs are a good fit if:</p>
<ul>
<li>You have a handful of fields</li>
<li>You are using the resource within your company, or as part of a small open-source project (as opposed to a commercial product)</li>
</ul>
<p>In this article, let’s focus one CRD.</p>
<span id="more"></span>

<h1 id="Operator-pattern"><a href="#Operator-pattern" class="headerlink" title="Operator pattern"></a>Operator pattern</h1><h2 id="CRD"><a href="#CRD" class="headerlink" title="CRD"></a>CRD</h2><p>The <code>CustomResourceDefinition</code> API resource allows you to define custom resources. Defining a CRD object creates a new custom resource with a name and schema that you specify.</p>
<p>Kubernetes <code>client libraries</code> can be used to access custom resources. <strong>Not all client libraries support custom resources. The Go and Python client libraries do.</strong></p>
<p>When you create a new CustomResourceDefinition (CRD), the Kubernetes API Server <code>creates a new RESTful resource path </code>for each version you specify. The CRD can be either namespaced or cluster-scoped, as specified in the CRD’s scope field. As with existing built-in objects, deleting a namespace deletes all custom objects in that namespace. <code>CustomResourceDefinitions themselves are non-namespaced</code> and are available to all namespaces.</p>
<p><strong>resourcedefinition.yaml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiextensions.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CustomResourceDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="comment"># name must match the spec fields below, and be in the form: &lt;plural&gt;.&lt;group&gt;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">crontabs.stable.example.com</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># group name to use for REST API: /apis/&lt;group&gt;/&lt;version&gt;</span></span><br><span class="line">  <span class="attr">group:</span> <span class="string">stable.example.com</span></span><br><span class="line">  <span class="comment"># list of versions supported by this CustomResourceDefinition</span></span><br><span class="line">  <span class="attr">versions:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v1</span></span><br><span class="line">      <span class="comment"># Each version can be enabled/disabled by Served flag.</span></span><br><span class="line">      <span class="attr">served:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># One and only one version must be marked as the storage version.</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">schema:</span></span><br><span class="line">        <span class="attr">openAPIV3Schema:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">          <span class="attr">properties:</span></span><br><span class="line">            <span class="attr">spec:</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line"></span><br><span class="line">              <span class="comment"># we can add more to each filed or property, like</span></span><br><span class="line">              <span class="comment"># - default value</span></span><br><span class="line">              <span class="comment"># - validation</span></span><br><span class="line">              <span class="comment"># - limit</span></span><br><span class="line">              <span class="attr">properties:</span></span><br><span class="line">                <span class="attr">cronSpec:</span></span><br><span class="line">                  <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">                <span class="attr">image:</span></span><br><span class="line">                  <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">                <span class="attr">replicas:</span></span><br><span class="line">                  <span class="attr">type:</span> <span class="string">integer</span></span><br><span class="line">  <span class="comment"># either Namespaced or Cluster</span></span><br><span class="line">  <span class="attr">scope:</span> <span class="string">Namespaced</span></span><br><span class="line">  <span class="attr">names:</span></span><br><span class="line">    <span class="comment"># plural name to be used in the URL: /apis/&lt;group&gt;/&lt;version&gt;/&lt;plural&gt;</span></span><br><span class="line">    <span class="attr">plural:</span> <span class="string">crontabs</span></span><br><span class="line">    <span class="comment"># singular name to be used as an alias on the CLI and for display</span></span><br><span class="line">    <span class="attr">singular:</span> <span class="string">crontab</span></span><br><span class="line">    <span class="comment"># kind is normally the CamelCased singular type. Your resource manifests use this.</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">CronTab</span></span><br><span class="line">    <span class="comment"># shortNames allow shorter string to match your resource on the CLI</span></span><br><span class="line">    <span class="attr">shortNames:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ct</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f resourcedefinition.yaml</span><br><span class="line"><span class="comment"># Then a new namespaced RESTful API endpoint is created at:</span></span><br><span class="line">/apis/stable.example.com/v1/namespaces/*/crontabs/...</span><br><span class="line"></span><br><span class="line"><span class="comment"># then you can create custom object with these API.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># my-crontab.yaml</span></span><br><span class="line"></span><br><span class="line">apiVersion: <span class="string">&quot;stable.example.com/v1&quot;</span></span><br><span class="line">kind: CronTab</span><br><span class="line">metadata:</span><br><span class="line">  name: my-new-cron-object</span><br><span class="line">spec:</span><br><span class="line">  cronSpec: <span class="string">&quot;* * * * */5&quot;</span></span><br><span class="line">  image: my-awesome-cron-image</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f my-crontab.yaml</span><br><span class="line">$ kubectl get crontab</span><br></pre></td></tr></table></figure>

<p><strong>Delete CRD</strong><br>When you delete a CustomResourceDefinition, the server will uninstall the RESTful API endpoint and delete all custom objects stored in it.</p>
<p>More detail to define CRD, refer to <a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/">CRD guide</a>.</p>
<h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><p>custom controller is a controller who is control loop that watches the state of your cluster, then make or request changes where needed. Each controller tries to move the current cluster state closer to the desired state.</p>
<p>custom controller is also client of the Kubernetes API that act on a Custom Resource, custom controller written with Go or Python runs a daemon to watch Custom Resource through API server and takes proper action to make it in desired state.</p>
<p>In order to write custom controller, you have to learn detail about <a href="https://kubernetes.io/docs/reference/using-api/client-libraries/">client library</a>, kubernetes provides client library for various programming languages, like <a href="https://github.com/kubernetes/client-go/">Go</a>, <a href="https://github.com/kubernetes-client/python/">Python</a>, Java, JS etc.</p>
<p><strong>Samples:</strong></p>
<ul>
<li>Here is a <a href="https://github.com/kubernetes/client-go/tree/master/examples">Go client sample</a>.</li>
<li>Here is a <a href="https://github.com/kubernetes/sample-controller">Go controller sample</a></li>
</ul>
<h2 id="Tools-of-writing-operator"><a href="#Tools-of-writing-operator" class="headerlink" title="Tools of writing operator"></a>Tools of writing operator</h2><p><code>Operator involves defining CRD and writing custom controller</code>, it’s little complex if starting from zero, as there are lots of common logic for custom controller, hence there are some tools you can use to write your own cloud native Operator.</p>
<ul>
<li>Charmed Operator Framework</li>
<li><strong>kubebuilder</strong></li>
<li>KUDO (Kubernetes Universal Declarative Operator)</li>
<li>Metacontroller along with WebHooks that you implement yourself</li>
<li><strong><a href="https://operatorframework.io/">Operator Framework</a></strong> (most popular one)</li>
<li>shell-operator</li>
</ul>
<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul>
<li><a href="https://github.com/kubernetes/sample-controller">sample controller without tool</a></li>
<li><a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/">CRD</a></li>
<li><a href="https://operatorframework.io/">operator framework</a></li>
<li><a href="https://operatorhub.io/">operator hub, operator samples</a></li>
<li><a href="https://github.com/operator-framework/awesome-operators">awesome operators, samples</a></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
        <category>operator</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>crd</tag>
        <tag>operator</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s_service_deep</title>
    <url>/2021/06/08/k8s-service-deep/</url>
    <content><![CDATA[<h1 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h1><p>A Kubernetes Service is a resource you create to <strong>make a single, constant point of entry to a group of pods(selected by label selector) providing the same service</strong>.  service has an IP address and port that <strong>never change while the service exists</strong>, but Pod address could change during upgrade, or pod is removed or deleted during scale, hence we SHOULD NOT access pod address directly for a service, we need a dedicated ip for the cased mentioned, that’s why service comes in.</p>
<p>More details about service, refer to <a href="https://kubernetes.io/docs/concepts/services-networking/_print/">k8s service</a></p>
<p><strong>enable source ip persistence for a service</strong><br>If you want to make sure that connections from a particular client are passed to the same Pod each time, you can select the session affinity based on the client’s IP addresses by setting <code>service.spec.sessionAffinity to &quot;ClientIP&quot; (the default is &quot;None&quot;)</code>. You can also set the maximum session sticky time by setting <code>service.spec.sessionAffinityConfig.clientIP.timeoutSeconds</code> appropriately. (the default value is 10800, which works out to be 3 hours).</p>
<span id="more"></span>
<h2 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h2><p>kube-proxy is a key component of any Kubernetes deployment.  Its role is to <code>load-balance traffic that is destined for services (via cluster IPs and node ports) to the correct backend pods</code>.  Kube-proxy can run in one of three modes, each implemented with different data plane technologies: userspace, iptables, or IPVS.  </p>
<p>The userspace mode is very old, slow, and definitely not recommended!  we DO NOT discuss it here.</p>
<p><strong>iptables vs IPVS</strong></p>
<ul>
<li>IPVS has better performance with larger service and pods</li>
<li>IPVS has more algorithms then iptables</li>
<li>IPVS supports server health checking and connection retries, etc.</li>
</ul>
<p><strong>Note</strong>  </p>
<ul>
<li>cluser ip of service, pod ip and endpoint are assigned by controller manager</li>
<li>kube-proxy watches apiserver for service and endpoint object, then update iptables or IPVS rules.</li>
<li>kube-proxy runs in each node(kube-system namespace)</li>
</ul>
<p>Why not use round-robin DNS to replace kube-proxy?<br>A question that pops up every now and then is why Kubernetes relies on proxying to forward inbound traffic to backends. What about other approaches? For example, would it be possible to configure DNS records that have multiple A values (or AAAA for IPv6), and rely on round-robin name resolution?</p>
<p>There are a few reasons for using proxying for Services:</p>
<ul>
<li>There is a long history of DNS implementations not respecting record TTLs, and <code>caching the results of name lookups after they should have expired.</code></li>
<li>Some apps do DNS lookups only once and <code>cache the results indefinitely.</code></li>
<li>Even if apps and libraries did proper re-resolution, the low or zero TTLs on the DNS records could impose a high load on DNS that then becomes difficult to manage</li>
</ul>
<h3 id="Iptables"><a href="#Iptables" class="headerlink" title="Iptables"></a>Iptables</h3><p>In this mode, kube-proxy watches the Kubernetes control plane for the addition and removal of Service and Endpoint objects. For each Service, it installs iptables rules, which capture traffic to the Service’s clusterIP and port, and redirect that traffic to one of the Service’s backend sets. For each Endpoint object, it installs iptables rules which select a backend Pod.</p>
<p><img src="https://d33wubrfki0l68.cloudfront.net/27b2978647a8d7bdc2a96b213f0c0d3242ef9ce0/e8c9b/images/docs/services-iptables-overview.svg" alt="iptables mode"></p>
<p>By default, kube-proxy in iptables mode chooses a backend at random.<br>If kube-proxy is running in iptables mode and the first Pod that’s selected does not respond, the connection fails, there is no try next pod!!!</p>
<p>When access service by cluster ip(inside cluster), OUTPUT chain is checked., while when access service by NodePort address, PREROUTING chain is checked, but both will jump to KUBE-SERVICE chain created by kube-proxy, more detail see section below enable iptables for kube-proxy.</p>
<h3 id="Ipvs"><a href="#Ipvs" class="headerlink" title="Ipvs"></a>Ipvs</h3><p>n IPVS mode, kube-proxy watches Kubernetes Services and Endpoints, <strong>calls netlink interface to create IPVS rules accordingly and synchronizes IPVS rules with Kubernetes Services and Endpoints periodically</strong>. This control loop ensures that IPVS status matches the desired state. When accessing a Service, IPVS directs traffic to one of the backend Pods.</p>
<p>The IPVS proxy mode is based on netfilter hook function that is similar to iptables mode, but uses a hash table as the underlying data structure and works in the kernel space. That means kube-proxy in IPVS mode redirects traffic with lower latency than kube-proxy in iptables mode, with much better performance when synchronising proxy rules. Compared to the other proxy modes, IPVS mode also supports a higher throughput of network traffic.</p>
<p>IPVS provides more options for balancing traffic to backend Pods; these are:</p>
<ul>
<li>rr: round-robin</li>
<li>lc: least connection (smallest number of open connections)</li>
<li>dh: destination hashing</li>
<li>sh: source hashing</li>
<li>sed: shortest expected delay</li>
<li>nq: never queue</li>
</ul>
<p><img src="https://d33wubrfki0l68.cloudfront.net/2d3d2b521cf7f9ff83238218dac1c019c270b1ed/9ac5c/images/docs/services-ipvs-overview.svg" alt="IPVS mode"></p>
<p>When creating a ClusterIP type Service, IPVS proxier will do the following three things:</p>
<ul>
<li>Make sure a dummy interface exists in the node, defaults to kube-IPVS0</li>
<li>Bind Service IP addresses to the dummy interface</li>
<li>Create IPVS virtual servers for each Service IP address respectively</li>
</ul>
<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><h4 id="enable-iptables-mode"><a href="#enable-iptables-mode" class="headerlink" title="enable iptables mode"></a>enable iptables mode</h4><p>When access service by cluster ip(inside cluster), OUTPUT chain is checked., while when access service by NodePort address, PREROUTING chain is checked, but both will jump to KUBE-SERVICE chain created by kube-proxy.</p>
<h3 id="Ipvs-1"><a href="#Ipvs-1" class="headerlink" title="Ipvs"></a>Ipvs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set from beginning when create cluster Cluster Created by Kubeadm</span></span><br><span class="line"><span class="comment"># conf file for kubeadm init</span></span><br><span class="line">...</span><br><span class="line">kubeProxy:</span><br><span class="line">  config:</span><br><span class="line">    mode: <span class="string">&quot;&quot;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># change after kube-proxy runs</span></span><br><span class="line">$ kubectl edit configmaps kube-proxy -n kube-system</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ kubectl get  svc</span><br><span class="line">NAME               TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">nginx-1623168286   NodePort    10.1.172.5   &lt;none&gt;        80:31067/TCP   9m11s</span><br><span class="line"><span class="comment"># service cluster ip(10.1.172.5:80) and  (nodeaddress:31067) for the service</span></span><br><span class="line"></span><br><span class="line">$ kubectl get ep</span><br><span class="line">NAME               ENDPOINTS            AGE</span><br><span class="line">nginx-1623168286   10.2.2.18:8080       9m2s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># check KUBE-SERVICE chain</span></span><br><span class="line">$ iptables -nv -L PREROUTING -t nat</span><br><span class="line">Chain PREROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">25960 2231K KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */</span><br><span class="line"></span><br><span class="line">$ iptables -nv -L OUTPUT  -t nat</span><br><span class="line">Chain OUTPUT (policy ACCEPT 39 packets, 2451 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line"> 986K   60M KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># nat table of kube-service chain, rule for cluster-ip named with KUBE-SVC-XXX and nodePort(stay at last rule)</span></span><br><span class="line"> $ iptables -nv -L KUBE-SERVICES -t nat</span><br><span class="line">Chain KUBE-SERVICES (2 references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 KUBE-SVC-YTBFCGJW6SOUTSSA  tcp  --  *      *       0.0.0.0/0            10.1.172.5           /* default/nginx-1623168286:http cluster IP */ tcp dpt:80</span><br><span class="line">  303 18611 KUBE-NODEPORTS  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service nodeports; NOTE: this must be the last rule <span class="keyword">in</span> this chain */ ADDRTYPE match dst-type LOCAL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ iptables -nv -L KUBE-NODEPORTS  -t nat</span><br><span class="line"></span><br><span class="line">Chain KUBE-NODEPORTS (1 references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 KUBE-SVC-YTBFCGJW6SOUTSSA  tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-1623168286:http */ tcp dpt:31067</span><br><span class="line"></span><br><span class="line"><span class="comment"># SVC backend rule named with KUBE-SEP-XXX</span></span><br><span class="line">$ iptables -nv -L KUBE-SVC-YTBFCGJW6SOUTSSA -t nat</span><br><span class="line">Chain KUBE-SVC-YTBFCGJW6SOUTSSA (2 references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 KUBE-SEP-NUA5P77FXIMWW66U  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-1623168286:http */</span><br><span class="line"></span><br><span class="line">$ iptables -nv -L KUBE-SEP-NUA5P77FXIMWW66U  -t nat</span><br><span class="line">Chain KUBE-SEP-NUA5P77FXIMWW66U (1 references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/nginx-1623168286:http */ tcp to:10.2.2.20:8080</span><br><span class="line"><span class="comment"># real backend</span></span><br></pre></td></tr></table></figure>

<h4 id="enable-IPVS-mode"><a href="#enable-IPVS-mode" class="headerlink" title="enable IPVS mode"></a>enable IPVS mode</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># load module &lt;module_name&gt;</span></span><br><span class="line">$ modprobe -- ip_vs</span><br><span class="line">$ modprobe -- ip_vs_rr</span><br><span class="line">$ modprobe -- ip_vs_wrr</span><br><span class="line">$ modprobe -- ip_vs_sh</span><br><span class="line"></span><br><span class="line">$ modprobe -- nf_conntrack_ipv4</span><br><span class="line"><span class="comment"># OR (use nf_conntrack instead of nf_conntrack_ipv4 for Linux kernel 4.19 and later)</span></span><br><span class="line">$ modprobe -- nf_conntrack </span><br><span class="line"></span><br><span class="line">$ lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># set from beginning when create cluster Cluster Created by Kubeadm</span></span><br><span class="line"><span class="comment"># conf file for kubeadm init</span></span><br><span class="line">...</span><br><span class="line">kubeProxy:</span><br><span class="line">  config:</span><br><span class="line">    mode: ipvs</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># change after kube-proxy runs</span></span><br><span class="line">$ kubectl edit configmaps kube-proxy -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># install ipvs tool to check ipvs rule</span></span><br><span class="line"><span class="comment"># Ubuntu18</span></span><br><span class="line">$ apt-get install ipvsadm</span><br><span class="line"><span class="comment"># Centos7</span></span><br><span class="line">$ yum install -y ipvsadm</span><br><span class="line"></span><br><span class="line"><span class="comment"># after create a service check ipvs rule</span></span><br><span class="line">$ ipvsadm -<span class="built_in">ln</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ kubectl get  svc</span><br><span class="line">NAME               TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">nginx-1623168286   NodePort    10.1.172.5   &lt;none&gt;        80:31067/TCP   9m11s</span><br><span class="line"><span class="comment"># service cluster ip(10.1.172.5:80) and  (nodeaddress:31067) for the service</span></span><br><span class="line"></span><br><span class="line">$ kubectl get ep</span><br><span class="line">NAME               ENDPOINTS            AGE</span><br><span class="line">nginx-1623168286   10.2.2.18:8080       9m2s</span><br><span class="line"><span class="comment"># pods that provides nginx service</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For cluster-IP, kube-proxy configure it at virtual device: kube-ipvs0 </span></span><br><span class="line"><span class="comment"># and create one rule for cluster-ip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for nodePort 31067, kube-proxy create several rules, each for one address of interfaces on the node</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">$ ip addr</span><br><span class="line">8: kube-ipvs0: &lt;BROADCAST,NOARP&gt; mtu 1500 qdisc noop state DOWN group default </span><br><span class="line">    <span class="built_in">link</span>/ether 9a:f2:1d:c0:84:ec brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.1.172.5/32 scope global kube-ipvs0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">$ ipvsadm -<span class="built_in">ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line"></span><br><span class="line"><span class="comment"># each address of all device on that node</span></span><br><span class="line">TCP  192.168.56.11:31067 rr</span><br><span class="line">  -&gt; 10.2.2.18:8080               Masq    1      0          0              </span><br><span class="line"></span><br><span class="line"><span class="comment"># cluster ip     </span></span><br><span class="line">TCP  10.1.172.5:80 rr</span><br><span class="line">  -&gt; 10.2.2.18:8080               Masq    1      0          0       </span><br><span class="line"></span><br><span class="line"><span class="comment"># each address of all device on that node</span></span><br><span class="line">TCP  10.2.0.0:31067 rr</span><br><span class="line">  -&gt; 10.2.2.18:8080               Masq    1      0          0         </span><br><span class="line">TCP  10.2.0.1:31067 rr</span><br><span class="line">  -&gt; 10.2.2.18:8080               Masq    1      0          0         </span><br><span class="line">TCP  127.0.0.1:31067 rr</span><br><span class="line">  -&gt; 10.2.2.18:8080               Masq    1      0          0         </span><br><span class="line">TCP  172.17.0.1:31067 rr</span><br><span class="line">  -&gt; 10.2.2.18:8080               Masq    1      0          0         </span><br></pre></td></tr></table></figure>

<p><strong>NOTE</strong><br>When kube-proxy starts in IPVS proxy mode, it verifies whether IPVS kernel modules are available. <code>If the IPVS kernel modules are not detected, then kube-proxy falls back to running in iptables proxy mode</code>.</p>
<h3 id="debug-kube-proxy"><a href="#debug-kube-proxy" class="headerlink" title="debug kube-proxy"></a>debug kube-proxy</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check process running</span></span><br><span class="line">$ ps -ef | grep kube-proxy</span><br><span class="line">$ kubectl get pod -n kube-system | grep kube-proxy</span><br><span class="line"></span><br><span class="line">$ kubectl get configmaps -n kube-system</span><br><span class="line"><span class="comment"># check conf for kube-proxy, mode used and parameter for each mode</span></span><br><span class="line">$ kubectl describe configmaps kube-proxy -n kube-system</span><br></pre></td></tr></table></figure>

<h2 id="coredns"><a href="#coredns" class="headerlink" title="coredns"></a>coredns</h2><p>Kubernetes DNS schedules a DNS Pod and Service on the cluster, and configures the kubelets to tell individual containers to use the DNS Service’s IP to resolve DNS names.</p>
<p><code>Every Service defined in the cluster (including the DNS server itself) is assigned a DNS name. By default, a client Pod&#39;s DNS search list includes the Pod&#39;s own namespace and the cluster&#39;s default domain</code>.</p>
<p>You can (and almost always should) set up a DNS service for your Kubernetes cluster using an add-on.</p>
<p>A cluster-aware DNS server, such as CoreDNS, watches the Kubernetes API for new Services and creates a set of DNS records for each one. If DNS has been enabled throughout your cluster then all Pods should automatically be able to resolve Services by their DNS name.</p>
<p>For example, if you have a Service called my-service in a Kubernetes namespace my-ns, the control plane and the DNS Service acting together create a DNS record for my-service.my-ns. Pods in the my-ns namespace should be able to find the service by doing a name lookup for my-service (my-service.my-ns would also work).</p>
<p>Pods in other namespaces must qualify the name as my-service.my-ns. These names will resolve to the cluster IP assigned for the Service.</p>
<p>Kubernetes also supports DNS SRV (Service) records for named ports. If the my-service.my-ns Service has a port named http with the protocol set to TCP, you can do a DNS SRV query for _http._tcp.my-service.my-ns to discover the port number for http, as well as the IP address.</p>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><p><a href="https://xigang.github.io/2019/07/21/kubernetes-service/">service example</a></p>
</li>
<li><p><a href="https://www.tigera.io/blog/comparing-kube-proxy-modes-iptables-or-IPVS/">IPVS VS iptables</a></p>
</li>
<li><p><a href="https://kubernetes.io/blog/2018/07/09/IPVS-based-in-cluster-load-balancing-deep-dive/">IPVS in k8s</a></p>
</li>
<li><p><a href="https://coredns.io/">coredns</a></p>
</li>
<li><p><a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/">kube-proxy</a></p>
</li>
<li><p><a href="https://kubernetes.io/docs/concepts/services-networking/_print/">service inside</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
        <category>service</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s_pkg_manager</title>
    <url>/2021/06/07/k8s-pkg-manager/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Helm is the best way to find, share, and use software built Kubernetes, a software in k8s may be one separate deployment or several deployments that works together to provides service to user, Helm manages these yaml files with concept <code>Chart</code>, <strong><code>Chart is a bundle of yaml files and other files related to the software</code></strong>, Chart helps you <code>define, install, and upgrade, rollback</code> even the most complex Kubernetes application, Chart likes <code>deb package</code> which creates package with xx.deb, while to <code>create an application for k8s by Helm, you need to create Chart files with fixed layout and follow its syntax</code>.</p>
<span id="more"></span>

<p>For Helm, there are three important concepts:</p>
<ul>
<li>The chart is a bundle of information necessary to create an instance of a Kubernetes application.</li>
<li>The config contains configuration information that can be merged into a packaged chart to create a releasable object.</li>
<li><strong>A release is a running instance of a chart, combined with a specific config.</strong></li>
</ul>
<h1 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h1><p>In order to use helm, we need to install it firstly with below command</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Centos7 to install snap</span></span><br><span class="line">$ yum install -y snapd</span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now snapd.socket</span><br><span class="line">$ <span class="built_in">ln</span> -s /var/lib/snapd/snap /snap</span><br><span class="line"></span><br><span class="line">$ sudo snap install helm --classic</span><br></pre></td></tr></table></figure>
<p><strong>As helm install application in k8s(create deployment), hence in order to use it, you MUST have kubernetes and kubectl installed before. there are required!!!</strong></p>
<p><strong>Helm and K8s compatibility</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Helm Version	Supported Kubernetes Versions</span><br><span class="line">3.5.x	        1.20.x - 1.17.x</span><br><span class="line">3.4.x	        1.19.x - 1.16.x</span><br><span class="line">3.3.x	        1.18.x - 1.15.x</span><br><span class="line">3.2.x	        1.18.x - 1.15.x</span><br><span class="line">3.1.x	        1.17.x - 1.14.x</span><br><span class="line">3.0.x	        1.16.x - 1.13.x</span><br><span class="line">2.16.x	        1.16.x - 1.15.x</span><br><span class="line">2.15.x	        1.15.x - 1.14.x</span><br><span class="line">2.14.x	        1.14.x - 1.13.x</span><br><span class="line">2.13.x	        1.13.x - 1.12.x</span><br><span class="line">2.12.x	        1.12.x - 1.11.x</span><br><span class="line">2.11.x	        1.11.x - 1.10.x</span><br><span class="line">2.10.x	        1.10.x - 1.9.x</span><br><span class="line">2.9.x	        1.10.x - 1.9.x</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><a href="https://helm.sh/docs/topics/version_skew/">K8s Version supported by Helm</a></p>
<h2 id="Command-used-for-helm"><a href="#Command-used-for-helm" class="headerlink" title="Command used for helm"></a>Command used for helm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo snap install helm --classic</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------repo related----------------------------------</span></span><br><span class="line"><span class="comment"># Hub is groups of package from many repos!!!</span></span><br><span class="line"></span><br><span class="line">$ helm search hub mysql</span><br><span class="line"><span class="comment"># search from official hub which will tell you which repo has such package!!!</span></span><br><span class="line"><span class="comment"># then add the right repo with below command</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># add a chart repo, hence you can search, download, install charts from there</span></span><br><span class="line">$ helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class="line">$ helm repo list</span><br><span class="line">$ helm repo update      <span class="comment"># Make sure we get the latest list of charts</span></span><br><span class="line">$ helm search repo mysql <span class="comment"># search from user added repo</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------------------------------install/uninstall package-----------------------</span></span><br><span class="line">$ helm show chart bitnami/mysql</span><br><span class="line">$ helm show values bitnami/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># get all chart info</span></span><br><span class="line">$ helm show all bitnami/mysql</span><br><span class="line"><span class="comment"># get deps of this chart</span></span><br><span class="line">$ helm dep list bitnami/mysql</span><br><span class="line"></span><br><span class="line">$ helm install bitnami/mysql --generate-name</span><br><span class="line"><span class="comment"># Whenever you install a chart, a new release is created.</span></span><br><span class="line"><span class="comment"># So one chart can be installed multiple times into the same cluster.</span></span><br><span class="line"><span class="comment"># And each can be independently managed and upgraded.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install with custom value, note myvals.yaml is merged with default!!!!</span></span><br><span class="line">$ helm show values bitnami/mysql</span><br><span class="line">$ helm install --generate-name --values=./myvals.yaml bitnami/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># if only change few values, you can pass it from commandline</span></span><br><span class="line">$ helm install --generate-name --<span class="built_in">set</span> auth.database=<span class="string">&quot;my_db&quot;</span> bitnami/mysql</span><br><span class="line"></span><br><span class="line">OR</span><br><span class="line"><span class="comment"># another way to install a package</span></span><br><span class="line"><span class="comment"># 1. first only download(default path: ~/.cache/helm/repository/mysql.tgz)</span></span><br><span class="line"><span class="comment"># 2. start package from chart file manually</span></span><br><span class="line">$ helm install ~/.cache/helm/repository/mysql.tgz --generate-name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># show installed chart</span></span><br><span class="line">$ helm <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># uninstall a chart</span></span><br><span class="line">$ helm uninstall mysql-1612624192</span><br><span class="line"></span><br><span class="line"><span class="comment"># check chart status</span></span><br><span class="line">$ helm status mysql-1612624192</span><br><span class="line"></span><br><span class="line"><span class="comment"># get yaml for this application</span></span><br><span class="line">$ helm get manifest mysql-1612624192</span><br></pre></td></tr></table></figure>

<h2 id="Build-a-pkg-with-Helm"><a href="#Build-a-pkg-with-Helm" class="headerlink" title="Build a pkg with Helm"></a>Build a pkg with Helm</h2><p><code>A chart is a collection of files that describe a related set of Kubernetes resources</code>. A single chart might be used to deploy something simple, like a memcached pod, or something complex, like a full web app stack with HTTP servers, databases, caches, and so on.</p>
<p><strong>Charts are created as files laid out in a particular directory tree</strong>. They can be packaged into versioned archives to be deployed.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wordpress/</span><br><span class="line">  Chart.yaml          # A YAML file containing information about the chart</span><br><span class="line">  LICENSE             # OPTIONAL: A plain text file containing the license for the chart</span><br><span class="line">  README.md           # OPTIONAL: A human-readable README file</span><br><span class="line">  values.yaml         # The default configuration values for this chart</span><br><span class="line">  values.schema.json  # OPTIONAL: A JSON Schema for imposing a structure on the values.yaml file</span><br><span class="line">  charts/             # A directory containing any charts upon which this chart depends.</span><br><span class="line">  crds/               # Custom Resource Definitions</span><br><span class="line">  templates/          # A directory of templates that, when combined with values,</span><br><span class="line">                      # will generate valid Kubernetes manifest files.</span><br><span class="line">  templates/NOTES.txt # OPTIONAL: A plain text file containing short usage notes</span><br></pre></td></tr></table></figure>

<p>Details about charts, refer to <a href="https://helm.sh/docs/topics/charts/">charts guidline</a></p>
<p><strong>Helm Chart templates are written in the <a href="https://golang.org/pkg/text/template/">Go template language</a></strong>, with the addition of 50 or so add-on template functions from the Sprig library and a few other specialized functions.</p>
<p>All template files are stored in a chart’s templates&#x2F; folder. When Helm renders the charts, it will pass every file in that directory through the template engine</p>
<p><strong>Predefined Values</strong></p>
<p>Values that are supplied via a values.yaml file (or via the –set flag) are accessible from the <code>.Values</code> object in a template. But there are other pre-defined pieces of data you can access in your templates.</p>
<p>The following values are pre-defined, are available to every template, and cannot be overridden. As with all values, the names are case sensitive.</p>
<ul>
<li>Release.Name: The name of the release (not the chart)</li>
<li>Release.Namespace: The namespace the chart was released to.</li>
<li>Release.Service: The service that conducted the release.</li>
<li>Release.IsUpgrade: This is set to true if the current operation is an upgrade or rollback.</li>
<li>Release.IsInstall: This is set to true if the current operation is an install.</li>
<li>Chart: The contents of the Chart.yaml. Thus, the chart version is obtainable as Chart.Version and the maintainers are in Chart.Maintainers.</li>
<li>Files: A map-like object containing all non-special files in the chart. This will not give you access to templates, but will give you access to additional files that are present (unless they are excluded using .helmignore). Files can be accessed using { { index .Files “file.name” } } or using the { {.Files.Get name } } function. You can also access the contents of the file as byte using { { .Files.GetBytes } }</li>
<li>Capabilities: A map-like object that contains information about the versions of Kubernetes ({ { .Capabilities.KubeVersion } }) and the supported Kubernetes API versions ({ { .Capabilities.APIVersions.Has “batch&#x2F;v1” } })</li>
</ul>
<p>NOTE: Any unknown Chart.yaml fields will be dropped. They will not be accessible inside of the Chart object. Thus, Chart.yaml cannot be used to pass arbitrarily structured data into the template. The values file can be used for that, though.</p>
<p><strong>Steps to create your own chart</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm create mychart</span><br><span class="line"></span><br><span class="line"><span class="comment"># modify template and values below</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># syntax check</span></span><br><span class="line">$ helm lint mychart</span><br><span class="line"></span><br><span class="line"><span class="comment"># package it with xx.tgz</span></span><br><span class="line">$ helm package mychart</span><br></pre></td></tr></table></figure>

<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://artifacthub.io/">Helm Hub</a></li>
<li><a href="https://helm.sh/">Helm Website</a></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
        <category>package</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s_schedule_inside</title>
    <url>/2021/06/08/k8s-schedule-inside/</url>
    <content><![CDATA[<p>more more effort</p>
]]></content>
  </entry>
  <entry>
    <title>k8s_service_mesh</title>
    <url>/2021/12/15/k8s-service-mesh/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>libvirt-chardev</title>
    <url>/2022/04/08/libvirt-chardev/</url>
    <content><![CDATA[<h1 id="Serial-x2F-Parallel-x2F-Console"><a href="#Serial-x2F-Parallel-x2F-Console" class="headerlink" title="Serial&#x2F;Parallel&#x2F;Console"></a>Serial&#x2F;Parallel&#x2F;Console</h1><h2 id="Serial-Port-vs-Parallel-Port"><a href="#Serial-Port-vs-Parallel-Port" class="headerlink" title="Serial Port vs Parallel Port"></a>Serial Port vs Parallel Port</h2><p>Serial port is used to <code>connect a serial device to the computer</code> and capable of transmitting one bit at a time.</p>
<p><strong>serial port used for</strong></p>
<ul>
<li>Mouse - One of the most commonly used devices for serial ports, usually used with computers with no PS&#x2F;2 or USB ports and specialty mice.</li>
</ul>
<p>Parallel port is used to <code>connect a parallel device to the computer</code> and capable of transmitting 8 bits at a time.<br><strong>parallel port used for?</strong></p>
<p>Today, the parallel port has widely been replaced by the USB port. However, below is a listing of various hardware components that were used with the parallel port</p>
<ul>
<li><code>Printer - The most common use for the parallel port.</code></li>
<li>Scanner - Another commonly used parallel device is a parallel port scanner. Parallel port scanners are a popular alternative to SCSI scanners because of how easy they are to install.</li>
</ul>
<p>The main difference between a serial port and a parallel port is that <code>a serial port transmits data one bit after another</code>, while <code>a parallel port transmits all 8 bits of a byte in parallel</code>. Thus a parallel port transmits data much faster than a serial port.</p>
<p>The ports COM1 and COM2 on your computer are serial ports and the LPT1 port is a parallel port.</p>
<p><img src="https://www.fixya.com/uploads/images/6a772a7.jpg"></p>
<p>Common serial port(builtin motherboard&#x2F;isa serial) names are <code>/dev/ttyS0</code>, &#x2F;dev&#x2F;ttyS1, etc. Then around the year 2000 came the USB bus with names like <code>/dev/ttyUSB0</code> and &#x2F;dev&#x2F;ttyACM1 (for the ACM modem on the USB bus). <code>Multiport serial card</code> used somewhat differnt names (depending on the brand) such as <code>/dev/ttyE5</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check how many serial ports that a PC has</span></span><br><span class="line">$ <span class="built_in">ls</span> /dev/ttyS*</span><br><span class="line">/dev/ttyS0  /dev/ttyS1  /dev/ttyS2  /dev/ttyS3</span><br><span class="line"></span><br><span class="line"><span class="comment"># if it&#x27;s usb serial port(converted usb port to serial port)</span></span><br><span class="line">$ <span class="built_in">ls</span> /dev/USB*</span><br><span class="line">/dev/ttyUSB0  /dev/USB1 /dev/USB2 /dev/USB3</span><br><span class="line"></span><br><span class="line"><span class="comment"># check perallel ports</span></span><br><span class="line">$ <span class="built_in">ls</span> /dev/lp*</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h2><p>The physical interface of <code>console port is RJ45(but not ethernet port which is also RJ45 like management port)</code>, the other end is always PC serial port. you can’t telnet&#x2F;SSH into a console port. Console port is an “up close and personal” port:  <code>You need to have physical access to the appliance in order to use the console port.</code></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>PARAMETER</td>
<td>CONSOLE PORT</td>
<td>MANAGEMENT PORT</td>
</tr>
<tr>
<td>IP address Assignment</td>
<td>Can’t give IP address to console Port</td>
<td>IP address can be given to a management port</td>
</tr>
<tr>
<td>Communication Type</td>
<td>Asynchronous</td>
<td>Synchronous</td>
</tr>
<tr>
<td>Remote access via Telnet&#x2F;SSH</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr>
<td>Access required</td>
<td>Physical access to device required</td>
<td>IP reachability and TCP port 23 (for  telnet) or  TCP port 443 (for SSH) required or HTTP (80)</td>
</tr>
<tr>
<td>Segregation type</td>
<td>Physically separate connection</td>
<td>Generally a VRF based traffic segregation</td>
</tr>
<tr>
<td>Maximum Speed</td>
<td>0.1 Mbps (115200 bps)</td>
<td>1 Gbps</td>
</tr>
<tr>
<td>Connectivity Type</td>
<td>Serial , DB9 , Rj45</td>
<td>RJ45</td>
</tr>
<tr>
<td>Management type</td>
<td>Out of Band Management</td>
<td>Out of Band Management</td>
</tr>
<tr>
<td>Boot Sequence</td>
<td>Shows Boot sequence</td>
<td>Does not show boot sequence</td>
</tr>
<tr>
<td>SNMP, Logging on interface</td>
<td>No SNMP, syslog configurable on console interface</td>
<td>SNMP, syslog configurable on management interface</td>
</tr>
<tr>
<td>Application required</td>
<td>HyperTerminal Telnet&#x2F;SSH</td>
<td>Web GUI</td>
</tr>
</tbody></table>
<p>Console (Serial) Port: Connect to a PC with a serial adapter cable, so that we can get output from console to PC which connected with serial port.</p>
<p><img src="https://snabaynetworking.com/wp-content/uploads/2019/12/Untitled-3-5-1.png"></p>
<h2 id="console-vs-tty-vs-pty-pts"><a href="#console-vs-tty-vs-pty-pts" class="headerlink" title="console vs tty vs pty(pts)"></a>console vs tty vs pty(pts)</h2><ul>
<li>tty &#x3D; text input&#x2F;output environment(<code>tty is an environment</code>)</li>
<li>console &#x3D; <code>physical terminal</code></li>
</ul>
<p><strong>TTY</strong></p>
<p>In unix terminology, <strong>a tty is a particular kind of device file</strong> which implements a number of additional commands (ioctls) beyond read and write. In its most common meaning, terminal is synonymous with tty. <strong>Some ttys are provided by the kernel on behalf of a hardware device</strong>, for example with the input coming from the keyboard and the output going to a text mode screen, or with the input and output transmitted over a serial line. Other ttys, sometimes called <code>pseudo-ttys(pts)</code>, are provided (through a thin kernel layer) by programs called terminal emulators, such as Ssh (which connects a terminal on one machine with programs on another machine), Expect (for scripting terminal interactions), etc.</p>
<p>The console appears to the operating system as a (kernel-implemented) tty. On some systems, such as Linux and FreeBSD, the console appears as several ttys (special key combinations switch between these ttys); just to confuse matters, the <code>name given to each particular tty can be “console”, ”virtual console”, ”virtual terminal”, and other variations.</code></p>
<p><strong>PTY</strong><br>A <a href="http://www.rkoucha.fr/tech_corner/pty_pdip.html">pty</a> is a pseudo-terminal - it’s a software implementation that appears to the attached program like a terminal, but instead of communicating directly with a “real” terminal, it transfers the input and output to another program. For example, when you ssh in to a machine and run ls, the ls command is sending its output to a pseudo-terminal, the other side of which is attached to the SSH daemon. <code>A pts is the slave part of a pty. A ptmx is the master part of a pty</code></p>
<p><code>/dev/ptmx</code> The idea of ptmx is that your application creates a virtual console for communication with other applications or with the operating system. By opening ptmx, an application gets a filed descriptor (basically a number) which gives your application the possibility to communicate over a virtual terminal with other applications. These other applications can open your terminal by opening &#x2F;dev&#x2F;pts&#x2F;12345 for example.</p>
<p><code>The only function of /dev/ptmx is to provide your application with a file descriptor of a newly created /dev/pts/ device which can be used by echo.</code></p>
<p><strong>PTS</strong></p>
<ul>
<li>Stands for pseudo terminal slave.</li>
<li><code>A pts is the slave part of a pty</code>.</li>
<li>A pty (pseudo terminal device) is a terminal device which is emulated by an other program (example: xterm, screen, or ssh are such programs).</li>
<li>&#x2F;dev&#x2F;pts contains entries corresponding to devices. &#x2F;dev&#x2F;pts is a special directory that is created dynamically by the Linux kernel. The contents of the directory vary with time and reflect the state of the running system.</li>
<li>The entries in &#x2F;dev&#x2F;pts correspond to pseudo-terminals (or pseudo-TTYs, or PTYs).</li>
<li>In laymen terms the primary difference between TTY and PTS is the type of connection to the computer. <strong>TTY ports are direct connections to the computer such as a keyboard&#x2F;mouse or a serial connection to the device</strong>. PTS connections are SSH connections or telnet connections. All of these connections can connect to a shell which will allow you to issue commands to the computer.</li>
</ul>
<h1 id="CharDev"><a href="#CharDev" class="headerlink" title="CharDev"></a>CharDev</h1><p>A character device provides a way to interact with the virtual machine. Paravirtualized consoles, serial ports, parallel ports and channels are all classed as character devices and so represented using the same syntax.</p>
<p>To specify the consols, channel and other devices configuration settings, use a management tool to make the following changes to the domain XML</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">devices</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--serial device --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">serial</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span>&gt;</span>                                                      </span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">path</span>=<span class="string">&#x27;/tmp/serial.log&#x27;</span>/&gt;</span>                                       </span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">type</span>=<span class="string">&#x27;isa-serial&#x27;</span> <span class="attr">port</span>=<span class="string">&#x27;0&#x27;</span>&gt;</span>  <span class="comment">&lt;!--/dev/ttyS0--&gt;</span>                                   </span><br><span class="line">      <span class="tag">&lt;<span class="name">model</span> <span class="attr">name</span>=<span class="string">&#x27;isa-serial&#x27;</span>/&gt;</span>                                            </span><br><span class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span>                                                               </span><br><span class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&#x27;serial0&#x27;</span>/&gt;</span>                                                 </span><br><span class="line">  <span class="tag">&lt;/<span class="name">serial</span>&gt;</span>                                                                 </span><br><span class="line">  <span class="comment">&lt;!--console for early boot message--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">console</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span>&gt;</span>                                                     </span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">path</span>=<span class="string">&#x27;/tmp/serial.log&#x27;</span>/&gt;</span>                                       </span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">type</span>=<span class="string">&#x27;serial&#x27;</span> <span class="attr">port</span>=<span class="string">&#x27;0&#x27;</span>/&gt;</span>   <span class="comment">&lt;!--/dev/ttyS0--&gt;</span>                                 </span><br><span class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&#x27;serial0&#x27;</span>/&gt;</span>                                                 </span><br><span class="line">  <span class="tag">&lt;/<span class="name">console</span>&gt;</span>                                                                </span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--virtio console--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--/dev/hvc0, after system boot and loaded virtio driver--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">console</span> <span class="attr">type</span>=<span class="string">&#x27;pty&#x27;</span>&gt;</span>                                                      </span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">path</span>=<span class="string">&#x27;/dev/pts/5&#x27;</span>/&gt;</span>                                             </span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">type</span>=<span class="string">&#x27;virtio&#x27;</span> <span class="attr">port</span>=<span class="string">&#x27;1&#x27;</span>/&gt;</span>                                        </span><br><span class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&#x27;console1&#x27;</span>/&gt;</span>                                                </span><br><span class="line">  <span class="tag">&lt;/<span class="name">console</span>&gt;</span>                                                                </span><br><span class="line">  <span class="comment">&lt;!--virtio console--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">channel</span> <span class="attr">type</span>=<span class="string">&#x27;unix&#x27;</span>&gt;</span>                                                     </span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">mode</span>=<span class="string">&#x27;bind&#x27;</span> <span class="attr">path</span>=<span class="string">&#x27;/tmp/agent&#x27;</span>/&gt;</span>                                 </span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">type</span>=<span class="string">&#x27;virtio&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;virtio.serial.port0&#x27;</span> <span class="attr">state</span>=<span class="string">&#x27;disconnected&#x27;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&#x27;channel1&#x27;</span>/&gt;</span>                                                </span><br><span class="line">    <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;virtio-serial&#x27;</span> <span class="attr">controller</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">port</span>=<span class="string">&#x27;2&#x27;</span>/&gt;</span>         </span><br><span class="line">  <span class="tag">&lt;/<span class="name">channel</span>&gt;</span>                                                                </span><br><span class="line">  <span class="tag">&lt;<span class="name">channel</span> <span class="attr">type</span>=<span class="string">&#x27;pty&#x27;</span>&gt;</span>                                                      </span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">path</span>=<span class="string">&#x27;/dev/pts/3&#x27;</span>/&gt;</span>                                             </span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">type</span>=<span class="string">&#x27;virtio&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;virtio.serial.port1&#x27;</span> <span class="attr">state</span>=<span class="string">&#x27;disconnected&#x27;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&#x27;channel2&#x27;</span>/&gt;</span>                                                </span><br><span class="line">    <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;virtio-serial&#x27;</span> <span class="attr">controller</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">port</span>=<span class="string">&#x27;3&#x27;</span>/&gt;</span>         </span><br><span class="line">  <span class="tag">&lt;/<span class="name">channel</span>&gt;</span>                                                                </span><br><span class="line"><span class="tag">&lt;/<span class="name">devices</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>In each of these directives, the top-level element <code>name (parallel, serial, console, channel)</code> describes how the device is presented to the guest virtual machine. The <code>guest virtual machine interface is configured by the </code>target<code> element.</code></p>
<p><strong>Console(which is a serial as well)</strong><br>libvirt supports two console types: serial and virtio, you can use one or both at same time, but <code>dynamic adding is not supported for serial console, virsh attach is not allowed for it</code>, Using the serial type for the console, you get the usual <code>/dev/ttyS0</code> console. Using virtio, you get <code>/dev/hvc0</code> as the console device</p>
<ul>
<li>serial console(<code>NOTE: the backend can be pts or file</code>)<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">console</span> <span class="attr">type</span>=<span class="string">&#x27;pty&#x27;</span>&gt;</span> <span class="comment">&lt;!--on host auto select one--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">type</span>=<span class="string">&#x27;serial&#x27;</span> <span class="attr">port</span>=<span class="string">&#x27;0&#x27;</span>/&gt;</span> <span class="comment">&lt;!--insde vm /dev/ttyS0--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&#x27;console0&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>virtio console(<code>NOTE: the backend can be pts or file</code>)<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">console</span> <span class="attr">type</span>=<span class="string">&#x27;pty&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">path</span>=<span class="string">&#x27;/dev/pts/5&#x27;</span>/&gt;</span><span class="comment">&lt;!--specify the pts, not auto selecting--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">type</span>=<span class="string">&#x27;virtio&#x27;</span> <span class="attr">port</span>=<span class="string">&#x27;1&#x27;</span>/&gt;</span><span class="comment">&lt;!--inside vm /dev/hvc0--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&#x27;console1&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">console</span>&gt;</span>      </span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################check console#################################</span></span><br><span class="line"><span class="comment"># on the guest</span></span><br><span class="line">$ <span class="built_in">echo</span> hello &gt; /dev/console</span><br><span class="line"></span><br><span class="line"><span class="comment"># on the host</span></span><br><span class="line">$ <span class="built_in">tail</span> -f /tmp/serial.log</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># on host(quit screen ctrl + a, then press \)</span></span><br><span class="line">$ screen /dev/pts/5</span><br><span class="line"><span class="comment"># on guest</span></span><br><span class="line">$ <span class="built_in">echo</span> hello &gt;/dev/hvc0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####################check serial################################</span></span><br><span class="line"><span class="comment"># on the guest</span></span><br><span class="line">$ <span class="built_in">echo</span> hello &gt;/dev/ttyS0</span><br><span class="line"><span class="comment"># on the host</span></span><br><span class="line">$ <span class="built_in">tail</span> -f /tmp/serial.log</span><br><span class="line">hello</span><br><span class="line"><span class="comment">####################check channel################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check virtio-ports with name set by user(actuall it&#x27;s link to /dev/vport0p2)</span></span><br><span class="line">$ <span class="built_in">ls</span> -al  /dev/virtio-ports/</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x.  2 root root  100 Aug  8 09:10 .</span><br><span class="line">drwxr-xr-x. 19 root root 3220 Aug  8 09:10 ..</span><br><span class="line">lrwxrwxrwx.  1 root root   11 Aug  8 09:10 virtio.serial.port0 -&gt; ../vport0p2</span><br><span class="line">lrwxrwxrwx.  1 root root   11 Aug  8 09:10 virtio.serial.port1 -&gt; ../vport0p3</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> /sys/class/virtio-ports/vport0p3/</span><br><span class="line">dev  device  name  power  subsystem  uevent</span><br><span class="line">$ <span class="built_in">cat</span> /sys/class/virtio-ports/vport0p3/name </span><br><span class="line">virtio.serial.port1</span><br><span class="line"></span><br><span class="line"><span class="comment"># on host</span></span><br><span class="line">$ screen /dev/pts/3</span><br><span class="line"></span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># inside guest</span></span><br><span class="line">$ <span class="built_in">echo</span> hello &gt;/dev/vport0p3</span><br><span class="line"></span><br><span class="line"><span class="comment"># on host</span></span><br><span class="line">$ socat - UNIX-CONNECT:/tmp/agent </span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># inside guest</span></span><br><span class="line">$ <span class="built_in">echo</span> hello &gt;/dev/vport0p2</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>libvirt</category>
        <category>char</category>
      </categories>
      <tags>
        <tag>libvirt</tag>
      </tags>
  </entry>
  <entry>
    <title>libvirt-performance</title>
    <url>/2022/01/04/libvirt-performance/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>For performance issue, like a rpc all takes long time, you want to know which function takes much time without modifying source code and restart libvirt, also you want to collect stats of libvirt, here I will share the way to meet this reqirement, the core tool is <code>systemtap</code>, you can also refer to <a href="https://cyun.tech/linux-performance-systemtapl/">linux systemtap guide</a> which shows how to enable systemtap and write probes. <code>with systemtap, you can insert any code outside application without restarting it or rebuilding it</code></p>
<span id="more"></span>

<h1 id="systemtap"><a href="#systemtap" class="headerlink" title="systemtap"></a>systemtap</h1><p>Systemtap is a scripting language and tool for dynamically probing or tracing in Linux kernel space or user space. libvirt already has built in markers(static probes) and tapset to simple your use, this feature can be enabled when compile libvirt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ../configure --with-dtrace</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure>
<p>The tapset is installed at <code>/usr/share/systemtap/tapset/libvirt_*</code> if enabled.</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>make sure you install systemap, refer to <a href="https://cyun.tech/linux-performance-systemtapl/">linux systemtap guide</a></li>
</ul>
<h2 id="With-dtrace-enabled"><a href="#With-dtrace-enabled" class="headerlink" title="With dtrace enabled"></a>With dtrace enabled</h2><p>when dtrace enabled, you can use the markers registered in source code and probe on marker like this, <code>debuginfo is not a must in this way</code>, this is can used for production env!!!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list all markers</span></span><br><span class="line">$ grep <span class="string">&#x27;probe libvirt.[a-z_0-9.]*&#x27;</span> /usr/share/systemtap/tapset/libvirt_* -o</span><br><span class="line">probe libvirt.event_poll.add_handle</span><br><span class="line">probe libvirt.event_poll.update_handle</span><br><span class="line">probe libvirt.event_poll.remove_handle</span><br><span class="line">probe libvirt.event_poll.dispatch_handle</span><br><span class="line">probe libvirt.event_poll.purge_handle</span><br><span class="line">probe libvirt.event_poll.add_timeout</span><br><span class="line">probe libvirt.event_poll.update_timeout</span><br><span class="line">probe libvirt.event_poll.remove_timeout</span><br><span class="line">probe libvirt.event_poll.dispatch_timeout</span><br><span class="line">probe libvirt.event_poll.purge_timeout</span><br><span class="line">probe libvirt.event_poll.run</span><br><span class="line">probe libvirt.dbus.method_call</span><br><span class="line">probe libvirt.dbus.method_error</span><br><span class="line">probe libvirt.dbus.method_reply</span><br><span class="line">probe libvirt.object.new</span><br><span class="line">probe libvirt.object.ref</span><br><span class="line">probe libvirt.object.unref</span><br><span class="line">probe libvirt.object.dispose</span><br><span class="line">probe libvirt.rpc.socket_new</span><br><span class="line">probe libvirt.rpc.socket_dispose</span><br><span class="line">probe libvirt.rpc.socket_send_fd</span><br><span class="line">probe libvirt.rpc.socket_recv_fd</span><br><span class="line">probe libvirt.rpc.server_client_new</span><br><span class="line">probe libvirt.rpc.server_client_dispose</span><br><span class="line">probe libvirt.rpc.server_client_msg_tx_queue</span><br><span class="line">probe libvirt.rpc.server_client_msg_rx</span><br><span class="line">probe libvirt.rpc.client_new</span><br><span class="line">probe libvirt.rpc.client_dispose</span><br><span class="line">probe libvirt.rpc.client_msg_tx_queue</span><br><span class="line">probe libvirt.rpc.client_msg_rx</span><br><span class="line">probe libvirt.rpc.server_client_auth_allow</span><br><span class="line">probe libvirt.rpc.server_client_auth_deny</span><br><span class="line">probe libvirt.rpc.server_client_auth_fail</span><br><span class="line">probe libvirt.rpc.tls_context_new</span><br><span class="line">probe libvirt.rpc.tls_context_dispose</span><br><span class="line">probe libvirt.rpc.tls_context_session_allow</span><br><span class="line">probe libvirt.rpc.tls_context_session_deny</span><br><span class="line">probe libvirt.rpc.tls_context_session_fail</span><br><span class="line">probe libvirt.rpc.tls_session_new</span><br><span class="line">probe libvirt.rpc.tls_session_dispose</span><br><span class="line">probe libvirt.rpc.tls_session_handshake_pass</span><br><span class="line">probe libvirt.rpc.tls_session_handshake_fail</span><br><span class="line">probe libvirt.rpc.keepalive_new</span><br><span class="line">probe libvirt.rpc.keepalive_dispose</span><br><span class="line">probe libvirt.rpc.keepalive_start</span><br><span class="line">probe libvirt.rpc.keepalive_stop</span><br><span class="line">probe libvirt.rpc.keepalive_send</span><br><span class="line">probe libvirt.rpc.keepalive_received</span><br><span class="line">probe libvirt.rpc.keepalive_timeout</span><br><span class="line">probe libvirt.qemu.monitor_new</span><br><span class="line">probe libvirt.qemu.monitor_ref</span><br><span class="line">probe libvirt.qemu.monitor_unref</span><br><span class="line">probe libvirt.qemu.monitor_close</span><br><span class="line">probe libvirt.qemu.monitor_send_msg</span><br><span class="line">probe libvirt.qemu.monitor_recv_reply</span><br><span class="line">probe libvirt.qemu.monitor_recv_event</span><br><span class="line">probe libvirt.qemu.monitor_io_process</span><br><span class="line">probe libvirt.qemu.monitor_io_read</span><br><span class="line">probe libvirt.qemu.monitor_io_write</span><br><span class="line">probe libvirt.qemu.monitor_io_send_fd</span><br><span class="line"></span><br><span class="line"><span class="comment"># check the args for each marker in order to use that marker</span></span><br><span class="line"><span class="comment"># vi /usr/share/systemtap/tapset/libvirt_qemu_probes.stp</span></span><br><span class="line"><span class="comment"># vi /usr/share/systemtap/tapset/libvirt_probes.stp</span></span><br></pre></td></tr></table></figure>

<p><strong>Write probe on marker</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># stp is a script but similar like C</span></span><br><span class="line">$ <span class="built_in">cat</span> qmp.stp</span><br><span class="line">probe begin</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Start tracing\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># check marker parameters from above</span></span><br><span class="line">probe libvirt.qemu.monitor_send_msg</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s QMPs: %s&quot;</span>, tz_ctime(gettimeofday_s()), msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ stap qmp.stp -x `pidof libvirtd`</span><br><span class="line">Start tracing</span><br><span class="line">Wed Jan  5 09:27:28 2022 CST QMPs: &#123;<span class="string">&quot;execute&quot;</span>:<span class="string">&quot;query-version&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;libvirt-13&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># OR enable probe when starting libvirtd</span></span><br><span class="line">$ stap qmp.stp -c <span class="string">&quot;/usr/sbin/libvirtd&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="without-dtrace-enable"><a href="#without-dtrace-enable" class="headerlink" title="without dtrace enable"></a>without dtrace enable</h2><p>When dtrace is disabled, there is no markder available, you have to <code>write probe by yourself and build with deubg mode or install debuginfo of libvirt and shared library used by libvirt</code>, without dtrace from libvirt itself, you have more freedom and more control, as you can trace on any function, but more complex as well.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># must build libvirt and shared library with debuginfo first</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> qmp.stp</span><br><span class="line">probe begin</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Start tracing\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># check the function parameters</span></span><br><span class="line">probe process(<span class="string">&quot;/usr/lib64/libvirt/connection-driver/libvirt_driver_qemu.so&quot;</span>).<span class="keyword">function</span>(<span class="string">&quot;qemuMonitorSend&quot;</span>) &#123;</span><br><span class="line">  // can access fields like we did <span class="keyword">in</span> C</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s, mon fd: %d, vm: %s, QMPs: %s&quot;</span>, tz_ctime(gettimeofday_s()), <span class="variable">$mon</span>-&gt;fd, user_string(<span class="variable">$mon</span>-&gt;vm-&gt;def-&gt;name), user_string(<span class="variable">$msg</span>-&gt;txBuffer))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ stap qmp.stp -x `pidof libvirtd`</span><br><span class="line">Start tracing</span><br><span class="line">Wed Jan  5 10:38:44 2022 CST, mon fd: 22, vm: centos, QMPs: &#123;<span class="string">&quot;execute&quot;</span>:<span class="string">&quot;query-version&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;libvirt-32&quot;</span>&#125;</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">$ stap qmp.stp -c <span class="string">&quot;/usr/sbin/libvirtd&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="perf"><a href="#perf" class="headerlink" title="perf"></a>perf</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># perf on given process, include all fucntions related(kernel and userspace)</span></span><br><span class="line">$ perf record -p 21692</span><br><span class="line">$ perf report</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>libvirt</category>
        <category>performance</category>
      </categories>
      <tags>
        <tag>libvirt</tag>
        <tag>dtrace</tag>
        <tag>systemtap</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s_tools</title>
    <url>/2021/03/24/k8s-tools/</url>
    <content><![CDATA[<h1 id="Kube-Cluster-Deployment-Tools"><a href="#Kube-Cluster-Deployment-Tools" class="headerlink" title="Kube Cluster Deployment Tools"></a>Kube Cluster Deployment Tools</h1><h2 id="1-Kubespray"><a href="#1-Kubespray" class="headerlink" title="1. Kubespray"></a><strong>1. Kubespray</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/1-Kubespray-small.png" alt="#Kubespray"></p>
<p>Kubespray provides a set of Ansible roles for Kubernetes deployment and configuration. Kubespray can use AWS, GCE, Azure, OpenStack or a bare metal Infrastructure as a Service (IaaS) platform. Kubespray is an open-source project with an open development model. The tool is a good choice for people who already know Ansible as there’s no need to use another tool for provisioning and orchestration. Kubespray uses kubeadm under the hood.</p>
<p>Link: <a href="https://github.com/kubernetes-incubator/kubespray">https://github.com/kubernetes-incubator/kubespray</a></p>
<span id="more"></span>

<h2 id="2-Minikube"><a href="#2-Minikube" class="headerlink" title="2. Minikube"></a><strong>2. Minikube</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/2-Minikube-1024x993.png" alt="#Minikube"></p>
<p>Minikube allows you to install and try out Kubernetes locally. The tool is a good starting point for Kubernetes exploration. Easily launch a single-node Kubernetes cluster inside a virtual machine (VM) on your laptop. Minikube is available on Windows, Linux, and OSX. In just 5 minutes you will be able to explore Kubernetes’ main features. Launch the Minikube dashboard straight-from-the-box with just one command.</p>
<p>Link: <a href="https://github.com/kubernetes/minikube">https://github.com/kubernetes/minikube</a></p>
<h2 id="3-Kubeadm"><a href="#3-Kubeadm" class="headerlink" title="3. Kubeadm"></a><strong>3. Kubeadm</strong></h2><p>Kubeadm is a Kubernetes distribution tool since version 1.4. The tool helps to bootstrap best-practice Kubernetes clusters on existing infrastructure. Kubeadm cannot provision infrastructure for you though. Its main advantage is the ability to launch minimum viable Kubernetes clusters anywhere. Add-ons and networking setup are both out of Kubeadm’s scope though, so you will need to install this manually or using another tool.</p>
<p>Link: <a href="https://github.com/kubernetes/kubeadm">https://github.com/kubernetes/kubeadm</a></p>
<h2 id="4-Kops"><a href="#4-Kops" class="headerlink" title="4. Kops"></a><strong>4. Kops</strong></h2><p>Kops helps you create, destroy, upgrade, and maintain production-grade, highly available Kubernetes clusters from the command line. Amazon Web Services (AWS) is currently officially supported, with GCE in beta support, and VMware vSphere in alpha, and other platform support is planned. Kops allows you to control the full Kubernetes cluster lifecycle; from infrastructure provisioning to cluster deletion.</p>
<p>Link: <a href="https://github.com/kubernetes/kops">https://github.com/kubernetes/kops</a></p>
<h2 id="5-Bootkube"><a href="#5-Bootkube" class="headerlink" title="5. Bootkube"></a><strong>5. Bootkube</strong></h2><p>Bootkube is a great tool for launching self-hosted Kubernetes clusters. It helps you set up a temporary Kubernetes control plane which will operate until the self-hosted control plane is able to handle requests.</p>
<p>Link: <a href="https://github.com/kubernetes-incubator/bootkube">https://github.com/kubernetes-incubator/bootkube</a></p>
<h2 id="6-Kubernetes-on-AWS-Kube-AWS"><a href="#6-Kubernetes-on-AWS-Kube-AWS" class="headerlink" title="6. Kubernetes on AWS (Kube-AWS)"></a><strong>6. Kubernetes on AWS (Kube-AWS)</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/6-Kube-aws-150x150.png" alt="Kubernetes on AWS (#KubeAWS)"></p>
<p>Kube-AWS is a console tool provided by CoreOS which deploys a fully-functional Kubernetes cluster using AWS CloudFormation. Kube-AWS allows you to deploy a traditional Kubernetes cluster and automatically provision every K8s service with native AWS features (e.g., ELB, S3, and Auto Scaling, etc.).</p>
<p>Link: <a href="https://github.com/kubernetes-incubator/kube-aws">https://github.com/kubernetes-incubator/kube-aws</a></p>
<h2 id="7-JAAS"><a href="#7-JAAS" class="headerlink" title="7. JAAS"></a><strong>7. JAAS</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/pubRLhkD_400x400.png" alt="#JAAS"></p>
<p>JAAS, is Juju as a service which simplifies how you configure, scale and operate today’s complex software. Juju deploys everywhere: to public or private clouds. JAAS deploys your workload to your cloud of choice.</p>
<p>Link: <a href="https://jaas.ai/">https://jaas.ai/</a></p>
<h2 id="8-Conjure-up"><a href="#8-Conjure-up" class="headerlink" title="8. Conjure-up"></a><strong>8. Conjure-up</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/conjureup-300x63.jpg" alt="#conjure-up"></p>
<p>Conjure-up is another Canonical product which allows you to deploy “The Canonical Distribution of Kubernetes on Ubuntu” with a few simple commands. It supports AWS, GCE, Azure, Joyent, OpenStack, VMware, bare metal, and localhost deployments. Juju, MAAS, and LXD are the underlying technology for Conjure-up.</p>
<p>Link: <a href="https://conjure-up.io/">https://conjure-up.io/</a></p>
<h2 id="9-Amazon-EKS"><a href="#9-Amazon-EKS" class="headerlink" title="9. Amazon EKS"></a><strong>9. Amazon EKS</strong></h2><p>Amazon Elastic Container Service for Kubernetes (<em>Amazon EKS</em>) is a managed service which makes it simple to deploy, manage, and scale containerized applications using Kubernetes. Amazon EKS manages your Kubernetes infrastructure across multiple AWS Availability Zones, while automatically detecting and replacing unhealthy control plane nodes, and providing on-demand upgrades and patching. You simply provision worker nodes and connect them to the provided Amazon EKS endpoint.</p>
<p>Link: <a href="https://aws.amazon.com/eks/">https://aws.amazon.com/eks/</a></p>
<h1 id="Monitoring-Tools"><a href="#Monitoring-Tools" class="headerlink" title="Monitoring Tools"></a><strong>Monitoring Tools</strong></h1><h2 id="10-Kubebox"><a href="#10-Kubebox" class="headerlink" title="10. Kubebox"></a><strong>10. Kubebox</strong></h2><p>Kubebox is a terminal console for Kubernetes cluster which allows you to manage and monitor your cluster-live status with nice, old-school interface. Kubebox shows your pod resource usage, cluster monitoring, and container logs, etc. Additionally, you can easily navigate to the desired namespace and execute into the desired container for fast troubleshooting&#x2F;recovery.</p>
<p>Link: <a href="https://github.com/astefanutti/kubebox">https://github.com/astefanutti/kubebox</a></p>
<h2 id="11-Kubernetes-Operational-View-Kube-ops-view"><a href="#11-Kubernetes-Operational-View-Kube-ops-view" class="headerlink" title="11. Kubernetes Operational View (Kube-ops-view)"></a><strong>11. Kubernetes Operational View (Kube-ops-view)</strong></h2><p>Kube-ops-view is a read-only system dashboard for multiple K8s clusters. With Kube-ops-view you can easily navigate between your cluster and monitor nodes as well as your pod’s healthiness. Kube-ops-view animates some Kubernetes processes such as pod creation and termination. </p>
<p>Link: <a href="https://github.com/hjacobs/kube-ops-view">https://github.com/hjacobs/kube-ops-view</a></p>
<h2 id="12-Kubetail"><a href="#12-Kubetail" class="headerlink" title="12. Kubetail"></a><strong>12. Kubetail</strong></h2><p>Kubetail is a small bash script which allows you to aggregate logs from multiple pods into one stream. The initial Kubetail version doesn’t have filtering or highlighting features, but there is an additional Kubetail fork on Github. This can form and perform logs coloring using multitail tools.</p>
<p>Link:<br><a href="https://github.com/johanhaleby/kubetail">https://github.com/johanhaleby/kubetail</a><br><a href="https://github.com/aks/kubetail">https://github.com/aks/kubetail</a></p>
<h2 id="13-Kubewatch"><a href="#13-Kubewatch" class="headerlink" title="13. Kubewatch"></a><strong>13. Kubewatch</strong></h2><p>Kubewatch is a Kubernetes watcher which can publish K8s events to the team communication app, Slack. Kubewatch runs as a pod inside Kubernetes clusters and monitors changes that occur in the system. You can specify the notifications you want to receive by editing the configuration file.</p>
<p>Link: <a href="https://github.com/bitnami-labs/kubewatch">https://github.com/bitnami-labs/kubewatch</a></p>
<h2 id="14-Weave-Scope"><a href="#14-Weave-Scope" class="headerlink" title="14. Weave Scope"></a><strong>14. Weave Scope</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/weavescope.png" alt="#weavescope"></p>
<p>Weave Scope is a troubleshooting and monitoring tool for Docker and Kubernetes clusters. It can automatically generate applications and infrastructure topologies which can help you to identify application performance bottlenecks easily. You can deploy Weave Scope as a standalone application on your local server&#x2F;laptop, or you can choose the Weave Scope Software as a Service (SaaS) solution on Weave Cloud. With Weave Scope, you can easily group, filter or search containers using names, labels, and&#x2F;or resource consumption.</p>
<p>Link: <a href="https://www.weave.works/oss/scope/">https://www.weave.works/oss/scope/</a></p>
<h2 id="15-Prometheus"><a href="#15-Prometheus" class="headerlink" title="15. Prometheus"></a>15. Prometheus</h2><p>Prometheus monitoring has fast become the go-to tool for Kubernetes monitoring tool. It offers a multi-dimensional data model and a very user-accessible format and protocols. Exposing Prometheus metrics in Kubernetes is a pretty straightforward task. The data scraped is human readable, in a self-explanatory format, and published using a standard HTTP transport.</p>
<p>Link: <a href="https://prometheus.io/">https://prometheus.io/</a></p>
<h2 id="16-Searchlight"><a href="#16-Searchlight" class="headerlink" title="16. Searchlight"></a><strong>16. Searchlight</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/16-Searchlight.png" alt="#Searchlight"></p>
<p>Searchlight by AppsCode is a Kubernetes operator for Icinga. Searchlight periodically runs various checks on Kubernetes clusters and alerts you via email, SMS or chat if something goes wrong. Searchlight includes a default suite of checks written specifically for Kubernetes. Also, it can enhance Prometheus monitoring with external black-box monitoring and serves as a fallback in case internal systems completely fail.</p>
<p>Link: <a href="https://github.com/appscode/searchlight">https://github.com/appscode/searchlight</a></p>
<h2 id="17-cAdvisor"><a href="#17-cAdvisor" class="headerlink" title="17.cAdvisor"></a><strong>17.cAdvisor</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2017/11/cAdvisor-1024x518.png" alt="cAdvisor"></p>
<p>CAdvisor is installed by default on all cluster nodes to collect metrics for Kubernetes about running containers and nodes. CAdvisor Kubelet exposes these metrics through Kubelet APIs (with a default of one-minute resolution). The Metrics Server identifies all available nodes and calls Kubelet API to get containers and nodes resources usage before exposing the metrics through Kubernetes aggregation API.</p>
<p>Link: <a href="https://github.com/google/cadvisor">https://github.com/google/cadvisor</a></p>
<h2 id="18-Kube-state-metrics"><a href="#18-Kube-state-metrics" class="headerlink" title="18. Kube-state-metrics"></a>18. Kube-state-metrics</h2><p>kube-state-metrics generates metrics from Kubernetes API objects without modification by listening to the Kubernetes API server. It doesn’t examine the health of individual Kubernetes components so much as it focuses on the health of the various objects inside, such as deployments, nodes and pods.</p>
<p>Link: <a href="https://github.com/kubernetes/kube-state-metrics">https://github.com/kubernetes/kube-state-metrics</a></p>
<h2 id="19-Sumo-Logic-App"><a href="#19-Sumo-Logic-App" class="headerlink" title="19. Sumo Logic App"></a>19. Sumo Logic App</h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/sumo.png" alt="#sumologic"></p>
<p>The Sumo Logic Kubernetes App offer complete visibility into the worker nodes within your clusters, as well as for their application logs. The app allows users to monitor and troubleshoot container health, replication, load balancing, pod state and hardware resource allocation. The App utilizes <a href="https://falco.org/docs/">Falco</a> events to monitor and detect anomalous container, application, host, and network activity.</p>
<p>Link: <a href="https://www.sumologic.com/application/kubernetes/">https://www.sumologic.com/application/kubernetes/</a></p>
<h2 id="20-Dynatrace"><a href="#20-Dynatrace" class="headerlink" title="20. Dynatrace"></a>20. Dynatrace</h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/dynatrace.png" alt="#dynatrace"></p>
<p>Dynatrace OneAgent is container-aware and comes with built-in support for out-of-the-box monitoring of Kubernetes. Dynatrace provides <a href="https://www.dynatrace.com/technologies/kubernetes-monitoring/">full-stack monitoring for Kubernetes</a>, i.e. monitoring from the application down to the infrastructure layer. However, if you don’t have access to the infrastructure layer, Dynatrace provides also the option of application-only monitoring.</p>
<p>Link: <a href="https://www.dynatrace.com/support/help/technology-support/cloud-platforms/kubernetes/installation-and-operation/further-integrations/connect-your-kubernetes-clusters-to-dynatrace/#configure-activegate">https://www.dynatrace.com/</a></p>
<h1 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a><strong>Testing</strong></h1><h2 id="21-Kube-monkey"><a href="#21-Kube-monkey" class="headerlink" title="21. Kube-monkey"></a><strong>21. Kube-monkey</strong></h2><p>Kube-monkey is the Kubernetes’ version of Netflix’s Chaos Monkey. Kube-monkey is a tool that follows the principles of chaos engineering. It can delete K8s pods at random, check services are failure-resilient, and contribute to your system’s healthiness. Kube-monkey is also configured by a TOML file where you can specify which app is to be killed and when to practice your recovery strategies.</p>
<p>Link: <a href="https://github.com/asobti/kube-monkey">https://github.com/asobti/kube-monkey</a></p>
<h2 id="22-K8s-testsuite"><a href="#22-K8s-testsuite" class="headerlink" title="22. K8s-testsuite"></a><strong>22. K8s-testsuite</strong></h2><p>K8s-testsuite is made up of 2 Helm charts which work for network bandwidth testing and load testing a single Kubernetes cluster. Load tests emulate simple web-servers with loadbots which run as a Kubernetes microservice based on the Vegeta. Network tests use iperf3 and netperf-2.7.0 internally and run three times. Both sets of tests generate comprehensive log messages with all results and metrics.</p>
<p>Link: <a href="https://github.com/mrahbar/k8s-testsuite">https://github.com/mrahbar/k8s-testsuite</a></p>
<h2 id="23-Test-infra"><a href="#23-Test-infra" class="headerlink" title="23. Test-infra"></a><strong>23. Test-infra</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/20-Test-infra.png" alt="#Testinfra"></p>
<p>Test-infra is a collection of tools for Kubernetes testing and results verification. Test-infra includes a few dashboards for displaying history, aggregating failures, and showing what is currently testing. You can enhance your test-infra suite by creating your own test jobs. Test-infra can perform end-to-end Kubernetes testing with full Kubernetes lifecycle emulation on different providers using the Kubetest tool.</p>
<p>Link: <a href="https://github.com/kubernetes/test-infra">https://github.com/kubernetes/test-infra</a></p>
<h2 id="24-Sonobuoy"><a href="#24-Sonobuoy" class="headerlink" title="24. Sonobuoy"></a><strong>24. Sonobuoy</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/21-Sonobuoy-150x150.png" alt="#Sonobuoy"></p>
<p>Sonobuoy allows you to understand your current Kubernetes cluster state by running a set of tests in an accessible and non-destructive manner. Sonobuoy generates informative reports with detailed information about cluster performance. Sonobuoy supports 3 Kubernetes minor versions: the current release and 2 minor versions before. Sonobuoy Scanner is a browser-based tool which allows you to test Kubernetes clusters in a few clicks, but the CLI version has a bigger set of tests available.</p>
<p>Link: <a href="https://sonobuoy.io/">https://sonobuoy.io/</a></p>
<h2 id="25-PowerfulSeal"><a href="#25-PowerfulSeal" class="headerlink" title="25. PowerfulSeal"></a><strong>25. PowerfulSeal</strong></h2><p>PowerfulSeal is a tool similar to Kube-monkey and follows the Principles of Chaos Engineering. PowerfulSeal can kill pods and remove&#x2F;add VMs from or to your clusters. In contrast to Kube-monkey, PowefulSeal has an interactive mode which allows you to manually break specific cluster components. Also, PowefulSeal doesn’t need external dependencies apart from SSH.</p>
<p>Link: <a href="https://github.com/bloomberg/powerfulseal">https://github.com/bloomberg/powerfulseal</a></p>
<h1 id="Security"><a href="#Security" class="headerlink" title="Security"></a><strong>Security</strong></h1><h2 id="26-Trireme"><a href="#26-Trireme" class="headerlink" title="26. Trireme"></a><strong>26. Trireme</strong></h2><p>Trireme is a flexible and straightforward implementation of the Kubernetes Network Policies. Trireme works in any Kubernetes cluster and allows you to manage traffic between pods from different clusters. The main advantages of Trireme are the lack of a need for any centralized policy management, the ability to easily organize the interaction of the two resources deployed in Kubernetes, and the lack of complexities of SDN, VLAN tags, and subnets (Trireme uses a conventional L3-network).</p>
<p>Link: <a href="https://github.com/aporeto-inc/trireme-kubernetes">https://github.com/aporeto-inc/trireme-kubernetes</a></p>
<h2 id="27-Aporeto"><a href="#27-Aporeto" class="headerlink" title="27. Aporeto"></a><strong>27. Aporeto</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/download-1.png" alt="#aporeto"></p>
<p>Aporeto provides security for containers, microservices, cloud and legacy applications based on workload identity, encryption, and distributed policies. As Aporeto policies function independently of the underlying infrastructure, security policies can be enabled across Kubernetes clusters or over hybrid environments that include Kubernetes and non-Kubernetes deployments.</p>
<p>Link: <a href="https://www.aporeto.com/">https://www.aporeto.com/</a></p>
<h2 id="28-Twistlock"><a href="#28-Twistlock" class="headerlink" title="28. Twistlock"></a><strong>28. Twistlock</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/25-Twistlock-300x76.png" alt="#"></p>
<p>Twistlock continually monitors your applications deployed on K8s for vulnerability and compliance issues, including the underlying host as well as containers and images. In addition, Twistlock Runtime Defense automatically models container behavior, allowing known, good behavior while alerting on or blocking anomalous activity. Finally, Twistlock provides both layer 3 microsegmentation as well as a layer 7 firewall that can protect front end microservices from common attacks.</p>
<p>Link: <a href="https://www.twistlock.com/">https://www.twistlock.com/</a></p>
<h2 id="29-Falco"><a href="#29-Falco" class="headerlink" title="29. Falco"></a><strong>29. Falco</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/falco-logo-1024x408.png" alt="#falco"></p>
<p>Falco is a behavioral activity monitor designed to detect anomalous activity in your applications. Falco is based on the Sysdig Project, an open source tool (and now a commercial service), built for monitoring container performance by way of tracking kernel system calls. Falco lets you continuously monitor and detect container, application, host, and network activity with one set of rules.</p>
<p>Link: <a href="https://sysdig.com/opensource/falco/">https://sysdig.com/opensource/falco/</a></p>
<h2 id="30-Sysdig-Secure"><a href="#30-Sysdig-Secure" class="headerlink" title="30. Sysdig Secure"></a><strong>30. Sysdig Secure</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/27-Sysdig-Secure-300x47.png" alt="#SysdigSecure"></p>
<p>Sysdig Secure, part of the Sysdig Container Intelligence Platform, comes out-of-the-box with unmatched container visibility and deep integrations with container orchestration tools. These include Kubernetes, Docker, AWS ECS, and Apache Mesos. With Sysdig Secure you can Implement service-aware policies, block attacks, analyze your history, and monitor cluster performance. Sysdig Secure is available as cloud and on-premise software offerings.</p>
<p>Link: <a href="https://sysdig.com/product/secure/">https://sysdig.com/product/secure/</a></p>
<h2 id="31-Kubesec-io"><a href="#31-Kubesec-io" class="headerlink" title="31. Kubesec.io"></a><strong>31. Kubesec.io</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/28-Kubesec.png" alt="#Kubesec"></p>
<p>Kubesec.io is a service which allows you to score Kubernetes resources for security feature usage. Kubesec.io verifies resource configuration according to Kubernetes security best-practices. As a result, you will have total control and additional suggestions for how to improve overall system security. The site also contains plenty of external links related to containers and Kubernetes security.</p>
<p>Link: <a href="https://kubesec.io/">https://kubesec.io</a></p>
<h1 id="Helpful-CLI-Tools"><a href="#Helpful-CLI-Tools" class="headerlink" title="Helpful CLI Tools"></a><strong>Helpful CLI Tools</strong></h1><h2 id="32-Cabin"><a href="#32-Cabin" class="headerlink" title="32. Cabin"></a><strong>32. Cabin</strong></h2><p><strong>NOTE: This project is currently not under active development</strong></p>
<p>Cabin functions as a mobile dashboard for the remote management of Kubernetes clusters. With Cabin, users can quickly manage applications, scale deployments, and troubleshoot overall K8s cluster from their Android or iOS device. Cabin is a great tool for operators of K8s clusters as it allows you to perform quick remediation actions in case of incidents.</p>
<p>Link: <a href="https://github.com/bitnami-labs/cabin">https://github.com/bitnami-labs/cabin</a></p>
<h2 id="33-Kubectx-x2F-Kubens"><a href="#33-Kubectx-x2F-Kubens" class="headerlink" title="33. Kubectx&#x2F;Kubens"></a><strong>33. Kubectx&#x2F;Kubens</strong></h2><p>Kubectx is a small open-source utility tool which enhances Kubectl functionality with the possibility to switch context easily and connect to a few Kubernetes clusters at the same time. Kubens allows you to navigate between Kubernetes namespaces. Both tools have an auto-completion feature on bash&#x2F;zsh&#x2F;fish shells.</p>
<p>Link: <a href="https://github.com/ahmetb/kubectx">https://github.com/ahmetb/kubectx</a></p>
<h2 id="34-Kube-shell"><a href="#34-Kube-shell" class="headerlink" title="34. Kube-shell"></a><strong>34. Kube-shell</strong></h2><p>Kube-shell increases your productivity when working with kubectl. Kube-shell enables command auto-completion and auto-suggestion. Also, Kube-shell will provide in-line documentation about executed command. Kube-shell even can search and correct commands when wrongly typed. It’s a great tool to increase your performance and productivity in the K8s console.</p>
<p>Link: <a href="https://github.com/cloudnativelabs/kube-shell">https://github.com/cloudnativelabs/kube-shell</a></p>
<h2 id="35-Kail"><a href="#35-Kail" class="headerlink" title="35. Kail"></a><strong>35. Kail</strong></h2><p>Kail is short for Kubernetes tail and works for Kubernetes clusters. With Kail, you can tail Docker logs for all matched pods. Kail allows you to filter pods by service, deployment, labels, and other features. Pods will be added (or removed) automatically to the log after a launch if it matches the criteria.</p>
<p>Link: <a href="https://github.com/boz/kail">https://github.com/boz/kail</a></p>
<h1 id="Development-Tools"><a href="#Development-Tools" class="headerlink" title="Development Tools"></a><strong>Development Tools</strong></h1><h2 id="36-Telepresence"><a href="#36-Telepresence" class="headerlink" title="36. Telepresence"></a><strong>36. Telepresence</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/images-300x156.png" alt="#Telepresence"></p>
<p>Telepresence provides the possibility to debug Kubernetes clusters locally by proxy data from your Kubernetes environment to the local process. Telepresence is able to provide access to Kubernetes services and AWS&#x2F;GCP resources for your local code as it will be deployed to the cluster. With Telepresence, Kubernetes counts local code as a normal pod within your cluster.</p>
<p>Link: <a href="https://www.telepresence.io/">https://www.telepresence.io/</a></p>
<h2 id="37-Helm"><a href="#37-Helm" class="headerlink" title="37. Helm"></a><strong>37. Helm</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/download.png" alt="#Helm"></p>
<p>Helm is a package manager for Kubernetes. It is like APT&#x2F;Yum&#x2F;Homebrew, but for Kubernetes. Helm operates with Charts which is an archive set of Kubernetes resource manifests that make up a distributed application. You can share your application by creating a Helm chart. Helm allows you to create reproducible builds and manage Kubernetes manifests easily.</p>
<p>Link: <a href="https://github.com/kubernetes/helm">https://github.com/kubernetes/helm</a></p>
<h2 id="38-Jaeger"><a href="#38-Jaeger" class="headerlink" title="38. Jaeger"></a><strong>38. Jaeger</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/jaeger-logo-1024x334.png" alt="#jaeger"></p>
<p>The Jaeger Operator is an implementation of a <a href="https://coreos.com/operators/">Kubernetes Operator</a> and provides another method of packaging, deploying, and managing a Kubernetes application.</p>
<p>Link: <a href="https://www.jaegertracing.io/">https://www.jaegertracing.io/</a> </p>
<h2 id="39-turbonomic"><a href="#39-turbonomic" class="headerlink" title="39. turbonomic"></a><strong>39. turbonomic</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/turbo.png" alt="#turbonomic"></p>
<p>turbonomic’s kubernetes-as-a-service (KaaS) management capabilities include support for Amazon Elastic Container Service for Kubernetes (EKS), Microsoft Azure Kubernetes Service (AKS), Google Kubernetes Engine (GKE), and Pivotal Container Service (PKS). Self-managing Kubernetes optimizes performance, efficiency, and compliance so IT organizations can scale and accelerate cloud native intiatives.</p>
<p>Link: <a href="https://turbonomic.com/product/integrations/kubernetes/">https://turbonomic.com/product/integrations/kubernetes/</a></p>
<h2 id="40-Supergiant"><a href="#40-Supergiant" class="headerlink" title="40. Supergiant"></a><strong>40. Supergiant</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/super.png" alt="#supergiant"></p>
<p>Supergiant  is an open source collection of utilities that simplify installing and managing your Kubernetes clusters. The Supergiant Kubernetes toolkit is three separate applications: Control, Analyze, and Capacity. Essentially, Supergiant acts as a microservices application that allows using these three tools separately. </p>
<p>Link: <a href="https://supergiant.io/toolkit/">https://supergiant.io/toolkit/</a></p>
<h2 id="41-Keel"><a href="#41-Keel" class="headerlink" title="41. Keel"></a><strong>41. Keel</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/35-kell-logo-300x300.png" alt="#Keel"></p>
<p>Keel allows you to automate Kubernetes deployment updates and can be launched as a Kubernetes service in a dedicated namespace. With such organization, Keel introduces a minimal load on your environment and adds significant robustness. Keel helps to deploy Kubernetes service through labels, annotations, and charts. You just need to specify an update policy for each deployment or Helm release. Keel will automatically update your environment as soon as the new application version is available in the repository.</p>
<p>Link: <a href="https://keel.sh/">https://keel.sh/</a></p>
<h2 id="42-Apollo"><a href="#42-Apollo" class="headerlink" title="42. Apollo"></a><strong>42. Apollo</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/36-final-300x85.png" alt="#Apollo"></p>
<p>Apollo is an open source application providing teams with self-service UI for creating and deploying their services to Kubernetes. Apollo allows operators to view logs and revert deployments to any point in time with just one click. Apollo has flexible permission models for deployments. Each user can deploy only what he needs to deploy.</p>
<p>Link: <a href="https://github.com/logzio/apollo">https://github.com/logzio/apollo</a></p>
<h2 id="43-Draft"><a href="#43-Draft" class="headerlink" title="43. Draft"></a><strong>43. Draft</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/37-draft-logo-300x108.png" alt="#Draft"></p>
<p>Draft is a tool provided by the Azure team that streamlines application development and deployment into any Kubernetes cluster. Draft creates “inner loops” between code deployment and code commits which significantly speed up the change verification process. With Draft, developers can prepare application Dockerfiles and Helm charts plus deploy applications to a remote or local Kubernetes cluster with two commands.</p>
<p>Link: <a href="https://github.com/azure/draft">https://github.com/azure/draft</a></p>
<h2 id="44-Deis-Workflow"><a href="#44-Deis-Workflow" class="headerlink" title="44. Deis Workflow"></a><strong>44. Deis Workflow</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/38.jpg" alt="#DeisWorkflow"><br><strong>NOTE: This project is no longer maintained</strong></p>
<p>Deis Workflow is an open source tool. The Platform as a Service (PaaS) creates additional layers of abstraction on top of Kubernetes clusters. These layers allow you to deploy and&#x2F;or update Kubernetes applications without specific domain knowledge from developers. Workflow builds upon Kubernetes concepts to provide simple, developer-friendly app deployment. Delivered as a set of Kubernetes microservices, operators can easily install the platform. Workflow can deploy new versions of your app with zero downtime.</p>
<p>Link: <a href="https://deis.com/workflow/">https://deis.com/workflow/</a></p>
<h2 id="45-Kel"><a href="#45-Kel" class="headerlink" title="45. Kel"></a><strong>45. Kel</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/39-final-300x300.png" alt="#Kel"></p>
<p>Kel is an open source PaaS from Eldarion, Inc. which helps to manage Kubernetes applications through the entire lifecycle. Kel provides two additional layers written in Python and Go on top of Kubernetes. Level 0 allows you to provision Kubernetes resources, and Level 1 helps you to deploy any application on K8s.</p>
<p>Link: <a href="http://www.kelproject.com/">http://www.kelproject.com/</a></p>
<h2 id="46-Kong"><a href="#46-Kong" class="headerlink" title="46. Kong"></a><strong>46. Kong</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/08/Kong.png" alt="#Kong"></p>
<p>Kong, previously known as Kong Community (CE), is an open-source scalable API gateway technology initiated by Kong Inc and has a growing community. Kong allows developers to manage authentication, data  encryption, logging, rate limiting and other standard features with Kubernetes that they would expect from a basic API management system. All of this is powered by a straightforward RESTful API, and the platform itself is built on top of the NGINX proxy server and the <a href="https://cassandra.apache.org/">Apache Cassandra</a> database management system.</p>
<p>Link: <a href="https://konghq.com/">https://konghq.com/</a></p>
<h1 id="Serverless-x2F-Function-Tools"><a href="#Serverless-x2F-Function-Tools" class="headerlink" title="Serverless&#x2F;Function Tools"></a><strong>Serverless&#x2F;Function Tools</strong></h1><h2 id="48-Kubeless"><a href="#48-Kubeless" class="headerlink" title="48. Kubeless"></a><strong>48. Kubeless</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/40-kubeless-logo-300x73.png" alt="#Kubeless"></p>
<p>Kubeless is a Kubernetes-native serverless framework that lets you deploy small bits of code without having to worry about the underlying infrastructure plumbing. Kubeless is aware of Kubernetes resources out-of-the-box and also provides auto-scaling, API routing, monitoring, and troubleshooting. Kubeless fully relies on K8s primitives, so Kubernetes users will also be able to use native K8s API servers and API gateways.</p>
<p>Link: <a href="https://github.com/kubeless/kubeless">https://github.com/kubeless/kubeless</a></p>
<h2 id="49-Fission"><a href="#49-Fission" class="headerlink" title="49. Fission"></a><strong>49. Fission</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/Fission-300x95.png" alt="#Fission"></p>
<p>Fission is a fast serverless framework for Kubernetes with a focus on developer productivity and high performance. Fission works on a Kubernetes cluster anywhere: on your laptop, in any public cloud, or in a private data-center. You can write your function using Python, NodeJS, Go, C# or PHP, and deploy it on K8s clusters with Fission.</p>
<p>Link: <a href="https://fission.io/">https://fission.io/</a></p>
<h2 id="50-Funktion"><a href="#50-Funktion" class="headerlink" title="50. Funktion"></a><strong>50. Funktion</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/42-Funktion-logo-300x291.png" alt="#Funktion"></p>
<p><strong>NOTE: This project is now sandboxed</strong>For a long time, there was only one Function as a Service (FaaS) implementation available for Kubernetes: Funktion. Funktion is an open source event-driven lambda-style programming model designed for Kubernetes. Funktion is tightly coupled with the fabric8 platform. With Funktion, you can create flows to subscribe from over 200 event sources to invoke your function, including most databases, messaging systems, social media, and other middleware and protocols.</p>
<p>Link: <a href="https://github.com/funktionio/funktion">https://github.com/funktionio/funktion</a></p>
<h2 id="51-IronFunction"><a href="#51-IronFunction" class="headerlink" title="51. IronFunction"></a><strong>51. IronFunction</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/43-IronFunction-logo-300x69.png" alt="#IronFunction"></p>
<p>IronFunctions is an open source serverless platform or FaaS platform that you can run anywhere. IronFunction is written on Golang and really supports functions in any language. The main advantage of IronFunction is that it supports the AWS Lambda format. Import functions directly from Lambda and run them wherever you want.</p>
<p>Link: <a href="https://github.com/iron-io/functions">https://github.com/iron-io/functions</a></p>
<h2 id="52-OpenWhisk"><a href="#52-OpenWhisk" class="headerlink" title="52. OpenWhisk"></a><strong>52. OpenWhisk</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/44-final-300x51.png" alt="#ApacheOpenWhisk"></p>
<p>Apache OpenWhisk is a robust open source FaaS platform driven by IBM and Adobe. OpenWhisk can be deployed on a local on-premise device or on the cloud. The design of Apache OpenWhisk means it acts as an asynchronous and loosely-coupled execution environment that can run functions against external triggers. OpenWhisk is available as SaaS solution on Bluemix, or you can deploy a Vagrant-based VM locally.</p>
<p>Link: <a href="https://console.bluemix.net/openwhisk/">https://console.bluemix.net/openwhisk/</a></p>
<h2 id="53-OpenFaaS"><a href="#53-OpenFaaS" class="headerlink" title="53. OpenFaaS"></a><strong>53. OpenFaaS</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/45-openfaas-logo-300x70.png" alt="#OpenFaaS"></p>
<p>The OpenFaaS framework aims to manage serverless functions on Docker Swarm or Kubernetes where it will collect and analyze a wide range of metrics. You can package any process inside your function and use it without repetitive coding or any other routine action. FaaS has Prometheus metrics baked-in, which means it can automatically scale your functions up and down for demand. FaaS natively supports a web-based interface where you can try out your function.</p>
<p>Link: <a href="https://github.com/openfaas/faas">https://github.com/openfaas/faas</a></p>
<h2 id="54-Nuclio"><a href="#54-Nuclio" class="headerlink" title="54. Nuclio"></a><strong>54. Nuclio</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/46-nuclio-logo-300x138.png" alt="#Nuclio"></p>
<p>Nuclio is a serverless project which aims to proceed with high-performance events and large amounts of data. Nuclio can be launched on an on-premise device as a standalone library or inside a VM&#x2F;Docker container. Also, Nuclio supports Kubernetes out of the box. Nuclio provides real-time data processing with maximum parallelism and minimum overheads. You can try out Nuclio on the playground page.</p>
<p>Link: <a href="https://github.com/nuclio/nuclio">https://github.com/nuclio/nuclio</a></p>
<h2 id="55-Virtual-Kubelet"><a href="#55-Virtual-Kubelet" class="headerlink" title="55. Virtual-Kubelet"></a><strong>55. Virtual-Kubelet</strong></h2><p>Virtual Kubelet is an open source Kubernetes Kubelet implementation that masquerades as a kubelet for the purposes of connecting Kubernetes to other APIs. Virtual Kubelet allows the nodes to be backed by other services like ACI, Hyper.sh, and AWS, etc. This connector features a pluggable architecture and direct use of Kubernetes primitives, making it much easier to build on.</p>
<p>Link: <a href="https://virtual-kubelet.io/">https://virtual-kubelet.io/</a></p>
<h2 id="56-Fnproject"><a href="#56-Fnproject" class="headerlink" title="56. Fnproject"></a><strong>56. Fnproject</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/48-fnproject-logo-1.png" alt="#Fnproject"></p>
<p>Fnproject is a container native serverless project which supports practically any language and can run almost everywhere. Fn is written on Go, so it is performance-ready and lightweight. Fnproject supports AWS Lambda format style, so you can easily import your Lambda functions and launch it with Fnproject.</p>
<p>Link: <a href="http://fnproject.io/">http://fnproject.io/</a></p>
<h1 id="Service-Mesh-Tools"><a href="#Service-Mesh-Tools" class="headerlink" title="Service Mesh Tools"></a><strong>Service Mesh Tools</strong></h1><h2 id="57-Istio"><a href="#57-Istio" class="headerlink" title="57. Istio"></a><strong>57. Istio</strong></h2><p><img src="https://caylent.com/wp-content/uploads/2018/08/istio.png"></p>
<p>Istio is an open source service mesh intended to make it easier to connect, manage and secure traffic between, and observe telemetry about microservices running in containers. Istio is a collaboration between IBM, Google and Lyft. </p>
<p>Link: <a href="https://istio.io/">https://istio.io/</a></p>
<h2 id="58-Linkerd-Linkerd2"><a href="#58-Linkerd-Linkerd2" class="headerlink" title="58. Linkerd + Linkerd2"></a>58. Linkerd + Linkerd2</h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/33582867-3e646e02-d90c-11e7-85a2-2e238737e859.png" alt="#Linkerd"></p>
<p>Linkerd (rhymes with “chickadee”) is an open source service mesh tool that makes service-to-service communication reliable, fast and safe. By intercepting network communication within the application, service meshes are able to extract metrics (“telemetry”), apply service-to-service policies and encrypt the exchange. Linkerd2 is an ultralight service mesh from Linkerd that works specifically with Kubernetes.</p>
<p>Links:<br><a href="https://linkerd.io/">https://linkerd.io/</a><br><a href="https://github.com/linkerd/linkerd2">https://github.com/linkerd/linkerd2</a></p>
<h2 id="59-Hashicorp’s-Consul"><a href="#59-Hashicorp’s-Consul" class="headerlink" title="59. Hashicorp’s Consul"></a>59. Hashicorp’s Consul</h2><p><img src="https://caylent.com/wp-content/uploads/2017/11/Consul.png" alt="Consul"></p>
<p>Consul is a service networking solution that connects and secure sservices across any runtime platform and public or private cloud. Like the above service mesh technologies, Istio and Linkerd, HashiCorp’s Consul Connect opts for a proxy that’s deployed as a sidecar. The proxy transparently secures communication among microservices and enables policy definition through a concept known as Intentions.</p>
<p>Link: <a href="https://www.hashicorp.com/products/consul/">https://www.hashicorp.com/products/consul/</a></p>
<h1 id="Native-Service-Discovery"><a href="#Native-Service-Discovery" class="headerlink" title="Native Service Discovery"></a><strong>Native Service Discovery</strong></h1><h2 id="60-CoreDNS"><a href="#60-CoreDNS" class="headerlink" title="60. CoreDNS"></a><strong>60. CoreDNS</strong></h2><p>CoreDNS is a set of plugins written in Go which perform DNS functions. CoreDNS with additional Kubernetes plugins can replace the default Kube-DNS service and implement the specification defined for Kubernetes DNS-based service discovery. CoreDNS can also listen for DNS requests coming in over UDP&#x2F;TCP, TLS, and gRPC.</p>
<p>Link: <a href="https://coredns.io/">https://coredns.io/</a></p>
<h1 id="Native-Visualization-amp-Control"><a href="#Native-Visualization-amp-Control" class="headerlink" title="Native Visualization &amp; Control"></a><strong>Native Visualization &amp; Control</strong></h1><h2 id="61-Kubernetes-Dashboard"><a href="#61-Kubernetes-Dashboard" class="headerlink" title="61. Kubernetes Dashboard"></a><strong>61. Kubernetes Dashboard</strong></h2><p>Kubernetes Dashboard is a general purpose, web-based UI for Kubernetes clusters. It is much easier to troubleshoot and monitor K8s clusters with a native dashboard. You need to create a secure proxy channel between your machine and Kubernetes API server to access the dashboard. The native Kubernetes dashboard relies on the Heapster data collector, so it also needs to be installed in the system.</p>
<p>Link: <a href="https://github.com/kubernetes/dashboard#kubernetes-dashboard">https://github.com/kubernetes/dashboard#kubernetes-dashboard</a></p>
<h1 id="Cost-Management"><a href="#Cost-Management" class="headerlink" title="Cost Management"></a><strong>Cost Management</strong></h1><h2 id="62-Replex"><a href="#62-Replex" class="headerlink" title="62. Replex"></a>62. Replex</h2><p><img src="https://caylent.com/wp-content/uploads/2018/05/replex.jpg" alt="#Replex"></p>
<p>Replex is a namesake governance and cost management platform designed for working in Kubernetes environments. The tool solves the challenges surrounding Kubernetes’ dynamic nature by unifying cost and governance management for deployments in the cloud.</p>
<p>Link: <a href="https://www.replex.io/">https://www.replex.io/</a></p>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://dzone.com/articles/50-useful-kubernetes-tools">k8s useful tools</a></li>
</ul>
]]></content>
      <categories>
        <category>k8s</category>
        <category>deploy</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>libvirt-design</title>
    <url>/2021/08/24/libvirt-design/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Libvirt is collection of software that provides a convenient way to manage virtual machines and other virtualization functionality, such as storage and network interface management. These software pieces include an API library, a daemon (libvirtd), and a command line utility (virsh).</p>
<p>An primary goal of libvirt is to provide a single way to manage multiple different virtualization providers&#x2F;hypervisors.</p>
<p>The libvirt project:</p>
<ul>
<li>is a toolkit to <code>manage virtualization platforms</code></li>
<li>is accessible from <code>C, Python, Perl, Go and more</code></li>
<li>is licensed under open source licenses</li>
<li>supports <code>KVM, QEMU, Xen, Virtuozzo, VMWare ESX, LXC</code>, and more</li>
<li>targets <code>Linux, FreeBSD, Windows and macOS</code></li>
</ul>
<p><img src="https://images4.programmersought.com/922/12/1296db512a81b948b75432a335f6adea.JPEG" alt="libvirt"></p>
<span id="more"></span>

<p><strong>File layout</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">|-- daemon(daemon <span class="keyword">for</span> accepting rpc call and dispatch it, remote dispatcher)</span><br><span class="line">|-- gnulib</span><br><span class="line">|   |-- lib(gnulib copied from gnu <span class="keyword">for</span> stable)</span><br><span class="line">|   `-- tests(<span class="built_in">test</span> cases <span class="keyword">for</span> gnulib)</span><br><span class="line">|-- include</span><br><span class="line">|   `-- libvirt(header files of libvirt)</span><br><span class="line">|-- po(internationalization, zh-CN, US etc)</span><br><span class="line">|-- src(generic virt level API <span class="built_in">who</span> calls driver API)</span><br><span class="line">|   |-- access(---driver <span class="keyword">for</span> access control, write, <span class="built_in">read</span> etc)</span><br><span class="line">|   |-- admin(--admin program)</span><br><span class="line">|   |-- bhyve(BSD hypervisor)</span><br><span class="line">|   |-- conf(---Parse xml cpu, memory, device etc)</span><br><span class="line">|   |-- cpu(---specific vcpu setting arm, x86 etc)</span><br><span class="line">|   |-- esx(VMWare ESX hypervisor)</span><br><span class="line">|   |-- hyperv(MS hypervisor)</span><br><span class="line">|   |-- interface(---driver <span class="keyword">for</span> iface)</span><br><span class="line">|   |-- libxl(Xen hypervisor with libxenlight tool)</span><br><span class="line">|   |-- locking(--lockd daemon: By maintaining the locks <span class="keyword">in</span> a standalone daemon, the main libvirtd daemon can be restarted without risk of losing locks <span class="keyword">for</span> VM disk mutual exclusion)</span><br><span class="line">|   |-- logging(--logd daemon: logging run as a separate daemon(<span class="built_in">log</span> from vm console,  not libvirtd daemon logs), the main libvirtd daemon can be restarted without risk of losing logs)</span><br><span class="line">|   |-- lxc(kind of linux container system)</span><br><span class="line">|   |-- network(---dirver <span class="keyword">for</span> network)</span><br><span class="line">|   |-- node_device(---driver <span class="keyword">for</span> device)</span><br><span class="line">|   |-- nwfilter(---driver <span class="keyword">for</span> network filter, iptables etc)</span><br><span class="line">|   |-- openvz(kind of Linux container system)</span><br><span class="line">|   |-- phyp(IBM Power Hypervisor)</span><br><span class="line">|   |-- qemu(qemu fully emulated, or qemu-kvm hypervisor)</span><br><span class="line">|   |-- remote(---client side remote driver <span class="built_in">who</span> used rpc to libvirtd, make rpc call)</span><br><span class="line">|   |-- rpc(---rpc framework)</span><br><span class="line">|   |-- secret(---driver <span class="keyword">for</span> secrets <span class="keyword">for</span> storing and retrieving secret information)</span><br><span class="line">|   |-- security</span><br><span class="line">|   |-- storage(---driver <span class="keyword">for</span> storage)</span><br><span class="line">|   |-- <span class="built_in">test</span>(---driver <span class="keyword">for</span> testing)</span><br><span class="line">|   |-- uml(user mode linux hypervisor)</span><br><span class="line">|   |-- util</span><br><span class="line">|   |-- vbox(virtual hypervisor)</span><br><span class="line">|   |-- vmware(workstation hypervisor)</span><br><span class="line">|   |-- vmx(VMWare file parser)</span><br><span class="line">|   |-- vz(Parallels Cloud Server Virtualization Solution)</span><br><span class="line">|   |-- xen(xen hypervisor)</span><br><span class="line">|   |-- xenapi(xen api)</span><br><span class="line">|   `-- xenconfig(xen config)</span><br><span class="line">`-- tools(virsh tool)</span><br><span class="line">    |-- nss(connect with nss service)</span><br><span class="line"></span><br><span class="line">nss is tool to configure name services, it lists databases as sources <span class="keyword">for</span> obtaining that information</span><br><span class="line"></span><br><span class="line">nss conf file</span><br><span class="line">passwd:     files ldap</span><br><span class="line">shadow:     files</span><br><span class="line">group:      files ldap</span><br><span class="line"></span><br><span class="line">hosts:      dns nis files</span><br><span class="line"></span><br><span class="line">ethers:     files nis</span><br><span class="line">netmasks:   files nis</span><br><span class="line">networks:   files nis</span><br><span class="line">protocols:  files nis</span><br><span class="line">rpc:        files nis</span><br><span class="line">services:   files nis</span><br><span class="line"></span><br><span class="line">automount:  files</span><br><span class="line">aliases:    files</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The virtlockd daemon is a single purpose binary <span class="built_in">which</span> focuses exclusively on the task of acquiring and holding locks on behalf of running virtual machines. It is designed to offer a low overhead, portable locking scheme can be used out of the box on virtualization hosts with minimal configuration overheads. It makes use of the POSIX fcntl advisory locking capability to hold locks, <span class="built_in">which</span> is supported by the majority of commonly used filesystems.</span><br><span class="line"></span><br><span class="line">virtlockd is a lock manager implementation <span class="keyword">for</span> libvirt. It’s designed to prevent you from starting two virtual machines (eg. on different nodes <span class="keyword">in</span> your cluster) <span class="built_in">which</span> are backed by the same writable disk image, something <span class="built_in">which</span> can cause disk corruption. It uses plain fcntl-based file locking, so it is ideal <span class="keyword">for</span> use when you are using NFS to share your disk images.</span><br></pre></td></tr></table></figure>

<!--more-->

<h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><p>libvirt uses a simple, variable length, packet based RPC protocol. All structured data within packets is <strong>encoded using the XDR standard.</strong>, A program defines a set of procedures that it supports. The procedures can support call+reply method invocation, asynchronous events, and generic data streams. details please refer to <a href="https://libvirt.org/internals/rpc.html">libvirt rpc</a></p>
<p><strong>RPC Frame &#x3D; Len + Data</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|~~~   Packet 1   ~~~|~~~   Packet 2   ~~~|~~~  Packet 3    ~~~|~~~</span><br><span class="line"></span><br><span class="line">+-------+------------+-------+------------+-------+------------+...</span><br><span class="line">| n=U32 | (n-4) * U8 | n=U32 | (n-4) * U8 | n=U32 | (n-4) * U8 |</span><br><span class="line">+-------+------------+-------+------------+-------+------------+...</span><br><span class="line"></span><br><span class="line">|~ Len ~|~   Data   ~|~ Len ~|~   Data   ~|~ Len ~|~   Data   ~|~</span><br></pre></td></tr></table></figure>
<p><strong>Data &#x3D; Header + Payload</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------+-------------+---------------....---+</span><br><span class="line">| n=U32 | 6*U32       | (n-(7*4))*U8         |</span><br><span class="line">+-------+-------------+---------------....---+</span><br><span class="line"></span><br><span class="line">|~ Len ~|~  Header   ~|~  Payload     ....  ~|</span><br></pre></td></tr></table></figure>

<p><strong>Header</strong><br>The header contains 6 fields, encoded as signed&#x2F;unsigned 32-bit integers. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+---------------+</span><br><span class="line">| program=U32   |</span><br><span class="line">+---------------+</span><br><span class="line">| version=U32   |</span><br><span class="line">+---------------+</span><br><span class="line">| procedure=S32 |</span><br><span class="line">+---------------+</span><br><span class="line">| type=S32      |</span><br><span class="line">+---------------+</span><br><span class="line">| serial=U32    |</span><br><span class="line">+---------------+</span><br><span class="line">| status=S32    |</span><br><span class="line">+---------------+</span><br></pre></td></tr></table></figure>


<ul>
<li><p>program<br>  This is an arbitrarily chosen number that will uniquely identify the “service” running over the stream. (like rpc server as ‘remote’ service)</p>
</li>
<li><p>version<br>  This is the version number of the program, by convention starting from ‘1’. When an incompatible change is made to a program, the version number is incremented. Ideally both versions will then be supported on the wire in parallel for backwards compatibility. </p>
</li>
<li><p>procedure<br>  This is an arbitrarily chosen number that will uniquely identify the method call(function provided by server), or event associated with the packet. By convention, procedure numbers start from 1 and are assigned monotonically thereafter. </p>
</li>
<li><p>type<br>  This can be one of the following enumeration values</p>
<ul>
<li>call: invocation of a method call</li>
<li>reply: completion of a method call</li>
<li>event: an asynchronous event</li>
<li>stream: control info or data from a stream</li>
</ul>
</li>
<li><p>serial<br>  This is a number that starts from 1 and increases each time a method call packet is sent. A reply or stream packet will have a serial number matching the original method call packet serial. Events always have the serial number set to 0. </p>
</li>
<li><p>status<br>  This can one of the following enumeration values</p>
<ul>
<li>ok: a normal packet. this is always set for method calls or events. For replies it indicates successful completion of the method. For streams it indicates confirmation of the end of file on the stream.</li>
<li>error: for replies this indicates that the method call failed and error information is being returned. For streams this indicates that not all data was sent and the stream has aborted</li>
<li>continue: for streams this indicates that further data packets will be following</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>libvirt</category>
        <category>kvm</category>
      </categories>
      <tags>
        <tag>libvirt</tag>
      </tags>
  </entry>
  <entry>
    <title>libvirt-vnc-spice</title>
    <url>/2022/08/03/libvirt-vnc-spice/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>SPICE</td>
<td>VNC</td>
<td>RDP</td>
</tr>
<tr>
<td>BIOS screen display</td>
<td>can</td>
<td>can</td>
<td>Can’t</td>
</tr>
<tr>
<td>Full color support</td>
<td>can</td>
<td>can</td>
<td>can</td>
</tr>
<tr>
<td>Change resolution</td>
<td>can</td>
<td>can</td>
<td>can</td>
</tr>
<tr>
<td>Multi-display</td>
<td>Multi-monitor support (up to 4 screens)</td>
<td>Only one screen</td>
<td>Multi-monitor support</td>
</tr>
<tr>
<td>Image transmission</td>
<td>Image and graphics transmission</td>
<td>Image transmission</td>
<td>Image and graphics transmission</td>
</tr>
<tr>
<td>Video playback support</td>
<td>GPU acceleration support</td>
<td>Can’t</td>
<td>GPU acceleration support</td>
</tr>
<tr>
<td>Audio transmission</td>
<td>Two-way voice can be controlled</td>
<td>Can’t</td>
<td>Two-way voice can be controlled</td>
</tr>
<tr>
<td>Mouse control</td>
<td>Both client and server can be controlled</td>
<td>Server-side control</td>
<td>Server-side control</td>
</tr>
<tr>
<td>USB transfer</td>
<td>USB can be transmitted over the network</td>
<td>Can’t</td>
<td>USB can be transmitted over the network</td>
</tr>
</tbody></table>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p>- </p>
<ul>
<li><a href="https://www.spice-space.org/spice-for-newbies.html">spice for newbies</a></li>
<li><a href="https://www.spice-space.org/spice-user-manual.html">spice user manual</a></li>
<li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_deployment_and_administration_guide/sect-spice_agent#doc-wrapper">spice agent</a></li>
<li><a href="https://www.spice-space.org/usbredir.html">usbredir</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>libvirt-debug</title>
    <url>/2021/07/08/libvirt-debug/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>libvirt provides lots of tools to manage VM or virtual disk, let’s take a quick look about them.</p>
<p><strong>VM management</strong></p>
<ul>
<li><code>virt-install</code>: install VM etc</li>
<li><code>virsh</code>: start, stop, destroy VM, monitor and collect stats of VM etc</li>
<li><code>virt-manager</code>: GUI for manage VM</li>
</ul>
<p><strong>Virtual disk management(provided by libguestfs)</strong></p>
<ul>
<li><code>guestfish</code>: interactive shell to manage disk(–verbose for debug)</li>
<li><code>guestmount/guestumount</code>: mount&#x2F;umount disk to host path(–verbose for debug)</li>
<li><code>virt-cat/virt-copy-in/virt-copy-out/virt-format/virt-xxx</code>: commands to manage virtual disk(–berbose for debug)</li>
</ul>
<p><strong>ALL libvirt tools(included libguestfs tools) communicate with <code>libvirt daemon</code> to manage vm or disk by default, but you can direct with qemu if libvirt is not thre</strong></p>
<p><code>export LIBGUESTFS_BACKEND=direct virt-sysprep</code></p>
<span id="more"></span>

<h1 id="Tools-and-frequent-used-command"><a href="#Tools-and-frequent-used-command" class="headerlink" title="Tools and frequent used command"></a>Tools and frequent used command</h1><p><strong>requently used virsh command</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ virsh <span class="built_in">help</span> dominfo</span><br><span class="line"></span><br><span class="line"><span class="comment"># virsh with remote server</span></span><br><span class="line">$ virsh -c qemu+tcp://172.17.0.3/system xxx</span><br><span class="line"><span class="comment"># vda target name in conf</span></span><br><span class="line">$ virsh domblkinfo vm100 vda</span><br><span class="line">Capacity:       8589934592</span><br><span class="line">Allocation:     200015872</span><br><span class="line">Physical:       200015872</span><br><span class="line"></span><br><span class="line">$ virsh domblkstat vm100 vda</span><br><span class="line">vda rd_req 5761</span><br><span class="line">vda rd_bytes 133831680</span><br><span class="line">vda wr_req 86</span><br><span class="line">vda wr_bytes 3244544</span><br><span class="line">vda flush_operations 9</span><br><span class="line">vda rd_total_times 5365449922</span><br><span class="line">vda wr_total_times 599328712</span><br><span class="line">vda flush_total_times 15684892</span><br><span class="line"></span><br><span class="line"><span class="comment"># target name in conf</span></span><br><span class="line">$ virsh domifstat vm100 mynet0</span><br><span class="line">mynet0 rx_bytes 1748</span><br><span class="line">mynet0 rx_packets 29</span><br><span class="line">mynet0 rx_errs 0</span><br><span class="line">mynet0 rx_drop 0</span><br><span class="line">mynet0 tx_bytes 0</span><br><span class="line">mynet0 tx_packets 0</span><br><span class="line">mynet0 tx_errs 0</span><br><span class="line">mynet0 tx_drop 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># get from memballoon driver inside guest</span></span><br><span class="line">$ virsh dommemstat vm100</span><br><span class="line">actual 1310720</span><br><span class="line">swap_in 0</span><br><span class="line">swap_out 0</span><br><span class="line">major_fault 175</span><br><span class="line">minor_fault 142267</span><br><span class="line">unused 1082444</span><br><span class="line">available 1210140</span><br><span class="line">usable 1099536</span><br><span class="line">last_update 1661222057</span><br><span class="line">rss 1526228</span><br><span class="line"></span><br><span class="line">$ virsh domblkerror vm100</span><br><span class="line">No errors found</span><br><span class="line"></span><br><span class="line">$ virsh dominfo vm100</span><br><span class="line">Id:             1</span><br><span class="line">Name:           vm100</span><br><span class="line">UUID:           4a0a3bb3-57cf-4efd-84c7-be9b74b02ccd</span><br><span class="line">OS Type:        hvm</span><br><span class="line">State:          running</span><br><span class="line">CPU(s):         4</span><br><span class="line">CPU time:       94.0s</span><br><span class="line">Max memory:     1572864 KiB</span><br><span class="line">Used memory:    1310720 KiB</span><br><span class="line">Persistent:     <span class="built_in">yes</span></span><br><span class="line">Autostart:      <span class="built_in">disable</span></span><br><span class="line">Managed save:   no</span><br><span class="line">Security model: none</span><br><span class="line">Security DOI:   0</span><br><span class="line"></span><br><span class="line">$ virsh domjobinfo vm100</span><br><span class="line">Job <span class="built_in">type</span>:         None      </span><br><span class="line"></span><br><span class="line">$ virsh domstate vm100 --reason</span><br><span class="line">running (booted)</span><br><span class="line"></span><br><span class="line">$ virsh console vm100(<span class="built_in">exit</span> console `Ctrl+]`)</span><br><span class="line">$ virsh dumpxml vm100</span><br></pre></td></tr></table></figure>

<p><strong>virsh examples</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># this will install libvirt-client(virsh) and libvirt-daemon(libvirtd)</span></span><br><span class="line">$ yum install -y libvirt</span><br><span class="line"></span><br><span class="line"><span class="comment"># install kvm and bios to start vm</span></span><br><span class="line">$ yum install -y kvm</span><br><span class="line">$ yum install -y seabios</span><br><span class="line"></span><br><span class="line">$ libvirtd --version</span><br><span class="line"></span><br><span class="line">$ virsh -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># By default virsh will connect with local libvirt by unix socket</span></span><br><span class="line"><span class="comment"># but can connect with remote libvirtd</span></span><br><span class="line"><span class="comment"># ssh</span></span><br><span class="line">$ virsh --connect qemu+ssh://remote/system</span><br><span class="line"><span class="comment"># plain tcp</span></span><br><span class="line">$ virsh --connect qemu+tcp://remote:port/system</span><br><span class="line"></span><br><span class="line"><span class="comment"># show the connection</span></span><br><span class="line">$ virsh uri</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a vm, for QEMU and LXC, libvirtd stores vm XML to disk and in memory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DO NOT edit the XML directly from disk at in that way, there is no validation!!!</span></span><br><span class="line"><span class="comment"># if you edit the on-disk XML is a VM that simply vanishes the next time libvirtd is restarted after the edit.</span></span><br><span class="line"><span class="comment"># The VM disappears from libvirt because the XML has become invalid, after which libvirt can&#x27;t do anything with it</span></span><br><span class="line"></span><br><span class="line">$ virsh dumpxml <span class="variable">$domain</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># change domain config from xml, restart it to make it work</span></span><br><span class="line">$ virsh shutdown <span class="variable">$domain</span></span><br><span class="line">$ virsh edit <span class="variable">$domain</span></span><br><span class="line">$ virsh start <span class="variable">$domain</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># delete a vm and related files</span></span><br><span class="line">$ virsh destroy  <span class="variable">$domain</span></span><br><span class="line">$ virsh undefine <span class="variable">$domain</span> -remove-all-storage</span><br><span class="line"></span><br><span class="line"><span class="comment"># attach/detach disk to a vm</span></span><br><span class="line"><span class="comment"># --target is the device hit, it&#x27;s a must option</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> vdc may be not used by guest if it&#x27;s not the first available device, say, if vdb is free, even you proivdes vdc, vdb is used</span></span><br><span class="line"><span class="comment"># that means if you check the config, it shows vdc, but actually, vdb is used inside vm, hence --target should be the first available device if expected as set</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check existing device from xml, dev name may be not the name used inside guest</span></span><br><span class="line">$ virsh domblklist centos </span><br><span class="line">Target     Source</span><br><span class="line">------------------------------------------------</span><br><span class="line">vda        /home/data/tmp/vm100.qcow2</span><br><span class="line">vdc        /dev/loop0</span><br><span class="line"></span><br><span class="line"><span class="comment"># check the real dev name used inside guest, vda is used by /dev/loop0 while vdb is used for /home/data/tmp/vm100.qcow2</span></span><br><span class="line">$ virsh qemu-agent-command vm100 <span class="string">&#x27;&#123;&quot;execute&quot;:&quot;guest-exec&quot;,&quot;arguments&quot;:&#123;&quot;path&quot;:&quot;lsblk&quot;,&quot;capture-output&quot;:true&#125;&#125;&#x27;</span></span><br><span class="line">&#123;<span class="string">&quot;return&quot;</span>:&#123;<span class="string">&quot;pid&quot;</span>:980&#125;&#125;</span><br><span class="line"></span><br><span class="line">$ virsh qemu-agent-command vm100 <span class="string">&#x27;&#123;&quot;execute&quot;:&quot;guest-exec-status&quot;,&quot;arguments&quot;:&#123;&quot;pid&quot;:980&#125;&#125;&#x27;</span> </span><br><span class="line">&#123;<span class="string">&quot;return&quot;</span>:&#123;<span class="string">&quot;exitcode&quot;</span>:0,<span class="string">&quot;out-data&quot;</span>:<span class="string">&quot;TkFNRSAgIE1BSjpNSU4gUk0gIFNJWkUgUk8gVFlQRSBNT1VOVFBPSU5UCnZkYSAgICAyNTM6MCAgICAwICAzNTBLICAwIGRpc2sgCnZkYiAgICAyNTM6MTYgICAwICAgIDhHICAwIGRpc2sgCuKUlOKUgHZkYjEgMjUzOjE3ICAgMCAgICA4RyAgMCBwYXJ0IC8KcG1lbTAgIDI1OTowICAgIDAgIDI1Nk0gIDAgZGlzayAK&quot;</span>,<span class="string">&quot;exited&quot;</span>:<span class="literal">true</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;TkFNRSAgIE1BSjpNSU4gUk0gIFNJWkUgUk8gVFlQRSBNT1VOVFBPSU5UCnZkYSAgICAyNTM6MCAgICAwICAzNTBLICAwIGRpc2sgCnZkYiAgICAyNTM6MTYgICAwICAgIDhHICAwIGRpc2sgCuKUlOKUgHZkYjEgMjUzOjE3ICAgMCAgICA4RyAgMCBwYXJ0IC8KcG1lbTAgIDI1OTowICAgIDAgIDI1Nk0gIDAgZGlzayAK&quot;</span> | <span class="built_in">base64</span> -d</span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">vda    253:0    0  350K  0 disk </span><br><span class="line">vdb    253:16   0    8G  0 disk </span><br><span class="line">└─vdb1 253:17   0    8G  0 part /</span><br><span class="line">pmem0  259:0    0  256M  0 disk </span><br><span class="line"></span><br><span class="line"><span class="comment"># attach-disk &lt;domain&gt; &lt;source&gt; &lt;target&gt; [--targetbus &lt;string&gt;] [--driver &lt;string&gt;] [--subdriver &lt;string&gt;] [--iothread &lt;string&gt;] [--cache &lt;string&gt;] [--io &lt;string&gt;] [--type &lt;string&gt;] [--mode &lt;string&gt;] [--sourcetype &lt;string&gt;] [--serial &lt;string&gt;] [--wwn &lt;string&gt;] [--rawio] [--address &lt;string&gt;] [--multifunction] [--print-xml] [--persistent] [--config] [--live] [--current]</span></span><br><span class="line">$ virsh attach-disk --domain centos --<span class="built_in">source</span> /home/data/tmp/disk.raw --persistent --target vdc</span><br><span class="line"><span class="comment"># dd if=/dev/zero of=/tmp/disk.raw bs=2M count=5120 status=progress</span></span><br><span class="line">$ virsh attach-disk centos /tmp/disk.raw vdc --persistent</span><br><span class="line">$ virsh detach-disk --domain centos --config --target vdb</span><br><span class="line">$ virsh detach-disk centos vdb --config</span><br><span class="line"></span><br><span class="line"><span class="comment"># attach/detach interface</span></span><br><span class="line"><span class="comment">#  attach-interface &lt;domain&gt; &lt;type&gt; &lt;source&gt; [--target &lt;string&gt;] [--mac &lt;string&gt;] [--script &lt;string&gt;] [--model &lt;string&gt;] [--inbound &lt;string&gt;] [--outbound &lt;string&gt;] [--persistent] [--config] [--live] [--current] [--print-xml] [--managed]</span></span><br><span class="line"><span class="comment"># virsh domiflist centos</span></span><br><span class="line"><span class="comment"># ovsnet is a network: virsh net-list</span></span><br><span class="line">Interface  Type       Source     Model       MAC</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">vnet1      bridge     ovsnet     virtio      52:54:00:43:85:03</span><br><span class="line"></span><br><span class="line"><span class="comment"># add a new interface to domain</span></span><br><span class="line">$ virsh attach-interface --domain centos --<span class="built_in">type</span> network --<span class="built_in">source</span> ovsnet  --model virtio</span><br><span class="line">$ virsh attach-interface --domain centos --<span class="built_in">type</span> network --<span class="built_in">source</span> ovsnet  --model virtio --persistent</span><br><span class="line"><span class="comment"># virsh domiflist centos</span></span><br><span class="line">Interface  Type       Source     Model       MAC</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">vnet1      bridge     ovsnet     virtio      52:54:00:43:85:03</span><br><span class="line">vnet2      bridge     ovsnet     virtio      52:54:00:a6:45:d6</span><br><span class="line"></span><br><span class="line">$ virsh detach-interface centos bridge --mac 52:54:00:a6:45:d6</span><br><span class="line">$ virsh detach-interface centos bridge --mac 52:54:00:a6:45:d6 --persistent</span><br></pre></td></tr></table></figure>

<h2 id="QMP-from-virsh"><a href="#QMP-from-virsh" class="headerlink" title="QMP from virsh"></a>QMP from virsh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 6095 is domain id, vm100 is domain name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HMP protocol</span></span><br><span class="line">$ virsh qemu-monitor-command –hmp 6095 info block</span><br><span class="line">drive-virtio-disk0: removable=0 file=/export/jvirt/jcs-agent/instances/i-sm6pxr4068/vda backing_file=/export/jvirt/jcs-agent/instances/_base/img-8sdjnj4qbq backing_file_depth=1 ro=0 drv=qcow2 encrypted=0 bps=0 bps_rd=0 bps_wr=0 iops=0 iops_rd=0 iops_wr=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># all supported QMP commands</span></span><br><span class="line">$ virsh qemu-monitor-command  vm100 --pretty <span class="string">&#x27;&#123;&quot;execute&quot;: &quot;query-commands&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># QMP protocol --pretty means format json output</span></span><br><span class="line"><span class="comment"># virsh qemu-monitor-command  vm100 --pretty &#x27;&#123; &quot;execute&quot;: &quot;query-block&quot;&#125;&#x27;</span></span><br><span class="line">$ virsh qemu-monitor-command  6095 --pretty <span class="string">&#x27;&#123; &quot;execute&quot;: &quot;query-block&quot;&#125;&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;return&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;device&quot;</span>: <span class="string">&quot;drive-virtio-disk0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;locked&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;removable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;inserted&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;iops_rd&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;image&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;backing-image&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;virtual-size&quot;</span>: 42949672960,</span><br><span class="line">            <span class="string">&quot;filename&quot;</span>: <span class="string">&quot;/export/jvirt/jcs-agent/instances/_base/img-8sdjnj4qbq&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cluster-size&quot;</span>: 65536,</span><br><span class="line">            <span class="string">&quot;format&quot;</span>: <span class="string">&quot;qcow2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;actual-size&quot;</span>: 24866193408,</span><br><span class="line">            <span class="string">&quot;format-specific&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;type&quot;</span>: <span class="string">&quot;qcow2&quot;</span>,</span><br><span class="line">              <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;compat&quot;</span>: <span class="string">&quot;1.1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;lazy-refcounts&quot;</span>: <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;dirty-flag&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;virtual-size&quot;</span>: 42949672960,</span><br><span class="line">          <span class="string">&quot;filename&quot;</span>: <span class="string">&quot;/export/jvirt/jcs-agent/instances/i-sm6pxr4068/vda&quot;</span>,</span><br><span class="line">          <span class="string">&quot;cluster-size&quot;</span>: 65536,</span><br><span class="line">          <span class="string">&quot;format&quot;</span>: <span class="string">&quot;qcow2&quot;</span>,</span><br><span class="line">          <span class="string">&quot;actual-size&quot;</span>: 21068431360,</span><br><span class="line">          <span class="string">&quot;format-specific&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;qcow2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;compat&quot;</span>: <span class="string">&quot;1.1&quot;</span>,</span><br><span class="line">              <span class="string">&quot;lazy-refcounts&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;backing-filename&quot;</span>: <span class="string">&quot;/export/jvirt/jcs-agent/instances/_base/img-8sdjnj4qbq&quot;</span>,</span><br><span class="line">          <span class="string">&quot;dirty-flag&quot;</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;iops_wr&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;ro&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;backing_file_depth&quot;</span>: 1,</span><br><span class="line">        <span class="string">&quot;drv&quot;</span>: <span class="string">&quot;qcow2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iops&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;bps_wr&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;backing_file&quot;</span>: <span class="string">&quot;/export/jvirt/jcs-agent/instances/_base/img-8sdjnj4qbq&quot;</span>,</span><br><span class="line">        <span class="string">&quot;encrypted&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;bps&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;bps_rd&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;file&quot;</span>: <span class="string">&quot;/export/jvirt/jcs-agent/instances/i-sm6pxr4068/vda&quot;</span>,</span><br><span class="line">        <span class="string">&quot;encryption_key_missing&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;unknown&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="string">&quot;libvirt-8302918&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="QGA"><a href="#QGA" class="headerlink" title="QGA"></a>QGA</h2><p>In order to run command inside guest os, we must have two things prepared.</p>
<ul>
<li>A channel</li>
<li>guest agent runs in guest os to execute the command</li>
</ul>
<p><strong>Enable the channel, by edit xml of libvirtd with $virsh edit $domain</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">devices</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">channel</span> <span class="attr">type</span>=<span class="string">&#x27;unix&#x27;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">source</span> <span class="attr">mode</span>=<span class="string">&#x27;bind&#x27;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">target</span> <span class="attr">type</span>=<span class="string">&#x27;virtio&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;org.qemu.guest_agent.0&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">channel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">devices</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Then after save, libvirt will set extra info, the full meta is like this</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">channel</span> <span class="attr">type</span>=<span class="string">&#x27;unix&#x27;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">source</span> <span class="attr">mode</span>=<span class="string">&#x27;bind&#x27;</span> <span class="attr">path</span>=<span class="string">&#x27;/var/lib/libvirt/qemu/channel/target/domain-3-centos/org.qemu.guest_agent.0&#x27;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">target</span> <span class="attr">type</span>=<span class="string">&#x27;virtio&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;org.qemu.guest_agent.0&#x27;</span> <span class="attr">state</span>=<span class="string">&#x27;connected&#x27;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&#x27;channel0&#x27;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;virtio-serial&#x27;</span> <span class="attr">controller</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">port</span>=<span class="string">&#x27;1&#x27;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">channel</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>After enable this channel, on host a unix socket is created for the VM at <code>/var/lib/libvirt/qemu/channel/target/domain-3-centos/org.qemu.guest_agent.0</code>, you can also set the path of socket with <code>path attribute in source tag</code> like  <code>&lt;source mode=&#39;bind&#39; path=&#39;/var/lib/libvirt/test.agent.0&#39;/&gt;</code><br>Inside the domain, <code>a char device(/dev/virtio-ports/org.qemu.guest_agent.0) is exported to user by virtio</code>, <strong>write&#x2F;read to char dev inside guest OS, data is available at unix socket on host.</strong></p>
<p><strong>Install agent inside guest vm</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install qemu-guest-agent</span><br><span class="line">$ systemctl start qemu-guest-agent</span><br><span class="line">$ systemctl <span class="built_in">enable</span> qemu-guest-agent</span><br></pre></td></tr></table></figure>

<p><strong>QGA commands</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show all supported commands that can run inside domain</span></span><br><span class="line">$ virsh qemu-agent-command <span class="variable">$&#123;DOMAIN&#125;</span> --pretty <span class="string">&#x27;&#123;&quot;execute&quot;:&quot;guest-info&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># guest-exec</span></span><br><span class="line"><span class="comment"># guest-exec-status</span></span><br><span class="line"><span class="comment"># guest-get-host-name</span></span><br><span class="line"><span class="comment"># guest-get-time</span></span><br><span class="line"><span class="comment"># guest-set-user-password</span></span><br><span class="line"><span class="comment"># guest-shutdown</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># guest-get-cpu-usage</span></span><br><span class="line"><span class="comment"># guest-get-mem-usage</span></span><br><span class="line"><span class="comment"># guest-get-time</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># File content is encrypted base64!!!</span></span><br><span class="line"><span class="comment"># guest-file-seek</span></span><br><span class="line"><span class="comment"># guest-file-read</span></span><br><span class="line"><span class="comment"># guest-file-write</span></span><br><span class="line"><span class="comment"># guest-file-flush</span></span><br><span class="line"><span class="comment"># guest-file-close</span></span><br><span class="line"><span class="comment"># guest-file-open</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># open with read only</span></span><br><span class="line">$ virsh qemu-agent-command <span class="variable">$&#123;DOMAIN&#125;</span> <span class="string">&#x27;&#123;&quot;execute&quot;:&quot;guest-file-open&quot;, &quot;arguments&quot;:&#123;&quot;path&quot;:&quot;/tmp/test.txt&quot;,&quot;mode&quot;:&quot;r&quot;&#125;&#125;&#x27;</span></span><br><span class="line">&#123;<span class="string">&quot;return&quot;</span>:1000&#125;</span><br><span class="line"><span class="comment"># guest-file-read, you can call these several times to get the whole file data, then close it</span></span><br><span class="line"><span class="comment"># this is probably used for large file</span></span><br><span class="line">$ virsh qemu-agent-command <span class="variable">$&#123;DOMAIN&#125;</span> <span class="string">&#x27;&#123;&quot;execute&quot;:&quot;guest-file-read&quot;, &quot;arguments&quot;:&#123;&quot;handle&quot;:1000&#125;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># read with large buffer</span></span><br><span class="line">$ virsh qemu-agent-command <span class="variable">$&#123;DOMAIN&#125;</span> <span class="string">&#x27;&#123;&quot;execute&quot;:&quot;guest-file-read&quot;, &quot;arguments&quot;:&#123;&quot;handle&quot;:1000, &quot;count&quot;:1000000&#125;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># guest-file-close</span></span><br><span class="line">$ virsh qemu-agent-command <span class="variable">$&#123;DOMAIN&#125;</span> <span class="string">&#x27;&#123;&quot;execute&quot;:&quot;guest-file-close&quot;, &quot;arguments&quot;:&#123;&quot;handle&quot;:1000&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># run arbitrary command, run `any` command inside guest</span></span><br><span class="line">$ virsh qemu-agent-command <span class="variable">$&#123;DOMAIN&#125;</span> <span class="string">&#x27;&#123;&quot;execute&quot;:&quot;guest-exec&quot;,&quot;arguments&quot;:&#123;&quot;path&quot;:&quot;mkdir&quot;,&quot;arg&quot;:[&quot;-p&quot;,&quot;/root/.ssh&quot;],&quot;capture-output&quot;:true&#125;&#125;&#x27;</span></span><br><span class="line">&#123;<span class="string">&quot;return&quot;</span>:&#123;<span class="string">&quot;pid&quot;</span>:911&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># get the content of a file, it opens the file then close it every time</span></span><br><span class="line"><span class="comment"># if file is large, output is truncated!!!, so that you can only the first part of a larger file!!!! use guest-file-read instead for large file</span></span><br><span class="line">$ virsh qemu-agent-command <span class="variable">$&#123;DOMAIN&#125;</span> <span class="string">&#x27;&#123;&quot;execute&quot;:&quot;guest-exec&quot;,&quot;arguments&quot;:&#123;&quot;path&quot;:&quot;cat&quot;,&quot;arg&quot;:[&quot;/var/log/plugin.log&quot;],&quot;capture-output&quot;:true&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># response is encrypted base64</span></span><br><span class="line">$ virsh qemu-agent-command <span class="variable">$&#123;DOMAIN&#125;</span> <span class="string">&#x27;&#123;&quot;execute&quot;:&quot;guest-exec-status&quot;,&quot;arguments&quot;:&#123;&quot;pid&quot;:911&#125;&#125;&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># base64 decode/encode</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> | <span class="built_in">base64</span></span><br><span class="line">aGVsbG8K</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;aGVsbG8K&quot;</span> | <span class="built_in">base64</span> -d</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># encode/decode from file</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> &gt;test.txt</span><br><span class="line">$ <span class="built_in">base64</span> ./test &gt;encoded.txt</span><br><span class="line">$ <span class="built_in">base64</span> -d ./encoded.txt</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>

<h1 id="Manage-virtual-disk-with-tools"><a href="#Manage-virtual-disk-with-tools" class="headerlink" title="Manage virtual disk with tools"></a>Manage virtual disk with tools</h1><p>libguestfs is a C library tool for <code>creating, accessing and modifying virtual machine disk images</code>. You can look inside the disk images, modify the files they contain, create them from scratch, resize them, and much more.<br><code>yum install libguestfs libguestfs-tool</code><br>libguestfs works with any disk image, including ones created in <code>VMware, KVM, qemu, VirtualBox, Xen, and many other hypervisors</code></p>
<p><img src="https://cyun.tech/images/libvirt/libguestfs.jpg" alt="libguestfs arch"></p>
<p>guestfish is an interactive shell that you can use from the command line or from shell scripts to access guest virtual machine file systems. <strong>All of the functionality of the libguestfs API is available from the shell</strong>, guestfish shell provides lots of built-in commands(600+) you can use to access guest file systems, <code>it&#39;s a super-set of virt-xxx command below(--verbose for debug)</code>.</p>
<ul>
<li>virt-copy-in</li>
<li>virt-copy-out</li>
<li>virt-edit</li>
<li>virt-df</li>
<li>virt-tar-in</li>
<li>virt-tar-out</li>
<li>virt-cat</li>
<li>virt-ls</li>
<li>virt-make-fs</li>
<li>virt-filesystems</li>
<li>virt-sysprep</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#===========================start a new vm permenantly, destroy it when quit the fish shell====</span></span><br><span class="line"><span class="comment"># two ways to run guestfish either by providing a disk image or domain name of libvirt</span></span><br><span class="line"><span class="comment"># -i means inspect the image and mount the file systems(mount requires a vm started by guestfish)</span></span><br><span class="line"><span class="comment"># 1. guestfish will start a new vm by libvirt and mount domain disk </span></span><br><span class="line"><span class="comment"># --verbose to debug issue</span></span><br><span class="line">$ guestfish --ro -d <span class="variable">$domain</span> -i</span><br><span class="line">&gt;&lt;fs&gt; df-h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">tmpfs            96M  112K   96M   1% /run</span><br><span class="line">/dev            237M     0  237M   0% /dev</span><br><span class="line">/dev/sda1       8.0G  1.2G  6.9G  14% /sysroot</span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTE use TAB for command completion!!!</span></span><br><span class="line"></span><br><span class="line">$ virsh list</span><br><span class="line"> Id    Name                           State</span><br><span class="line">----------------------------------------------------</span><br><span class="line"> 4     guestfs-cmurc2zne6ot9rt8       running</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. from a disk image to start a new vm(this will call libvirt to start a new vm as well)</span></span><br><span class="line">$ guestfish -a /path/to/disk/image -i</span><br><span class="line">&gt;&lt;fs&gt; df-h</span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================start a new vm temporarily, destroy it when get the command result===</span></span><br><span class="line">$ virt-filesystems -a CentOS-7-x86_64-GenericCloud-1503.qcow2</span><br><span class="line">/dev/sda1</span><br><span class="line">$ virt-filesystems -d <span class="variable">$domain</span></span><br><span class="line">/dev/sda1</span><br><span class="line"></span><br><span class="line">$ virt-ls -d <span class="variable">$domain</span> /home/centos</span><br><span class="line">$ virt-tar-out -d <span class="variable">$domain</span> /home/centos out.tar.gz</span><br><span class="line">$ virt-copy-in -d <span class="variable">$domain</span> test.txt /home/centos</span><br><span class="line">$ virt-copy-out -d <span class="variable">$domain</span> /home/centos/text.txt .</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">########################the new vm start by guest fish#######################################</span></span><br><span class="line"><span class="comment"># vm100 has its disk /root/jason/vm/test/vm100.qcow2</span></span><br><span class="line">$ guestfish --ro -d vm100 -i</span><br><span class="line">Welcome to guestfish, the guest filesystem shell <span class="keyword">for</span></span><br><span class="line">editing virtual machine filesystems and disk images.</span><br><span class="line"></span><br><span class="line">Type: <span class="string">&#x27;help&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span> on commands</span><br><span class="line">      <span class="string">&#x27;man&#x27;</span> to <span class="built_in">read</span> the manual</span><br><span class="line">      <span class="string">&#x27;quit&#x27;</span> to quit the shell</span><br><span class="line"></span><br><span class="line">Operating system: CentOS Linux release 7.8.2003 (Core)</span><br><span class="line">/dev/sda1 mounted on /</span><br><span class="line"></span><br><span class="line">&gt;&lt;fs&gt; <span class="built_in">df</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ ps -ef | grep kvm</span><br><span class="line">/usr/libexec/qemu-kvm -global virtio-blk-pci.scsi=off -nodefconfig -enable-fips -nodefaults -display none -cpu host -machine accel=kvm:tcg -m 500 -no-reboot -rtc driftfix=slew -no-hpet -global kvm-pit.lost_tick_policy=discard -kernel /var/tmp/.guestfs-0/appliance.d/kernel -initrd /var/tmp/.guestfs-0/appliance.d/initrd -device virtio-scsi-pci,<span class="built_in">id</span>=scsi -drive file=/tmp/libguestfsKuVs4B/overlay1,cache=unsafe,format=qcow2,<span class="built_in">id</span>=hd0,<span class="keyword">if</span>=none -device scsi-hd,drive=hd0 -drive file=/var/tmp/.guestfs-0/appliance.d/root,snapshot=on,<span class="built_in">id</span>=appliance,cache=unsafe,<span class="keyword">if</span>=none -device scsi-hd,drive=appliance -device virtio-serial-pci -serial stdio -device sga -chardev socket,path=/tmp/libguestfsKuVs4B/guestfsd.sock,<span class="built_in">id</span>=channel0 -device virtserialport,chardev=channel0,name=org.libguestfs.channel.0 -append panic=1 console=ttyS0 udevtimeout=6000 udev.event-timeout=6000 no_timer_check acpi=off printk.time=1 cgroup_disable=memory root=/dev/sdb selinux=0 TERM=xterm-256color</span><br><span class="line"></span><br><span class="line"><span class="comment"># kernel: /var/tmp/.guestfs-0/appliance.d/kernel</span></span><br><span class="line"><span class="comment"># initrd: /var/tmp/.guestfs-0/appliance.d/initrd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># disk /tmp/libguestfsKuVs4B/overlay1 whoes backing file is /root/jason/vm/test/vm100.qcow2!!!</span></span><br><span class="line">$ file /tmp/libguestfsKuVs4B/overlay1</span><br><span class="line">/tmp/libguestfsKuVs4B/overlay1: QEMU QCOW Image (v3), has backing file (path /root/jason/vm/test/vm100.qcow2), 8589934592 bytes</span><br></pre></td></tr></table></figure>

<p><strong>NOTE</strong></p>
<ul>
<li>The guest fish vm started by libvirt by default, you can <code>LIBGUESTFS_BACKEND=direct</code> to start it directly</li>
<li>libvirtd is not a must for guestfish, but if you use <code>-d $domain</code> option, you must start libvirtd as guest fish need to get the info(disk info) from libvirtd</li>
</ul>
<h1 id="virsh-command-groups"><a href="#virsh-command-groups" class="headerlink" title="virsh command groups"></a>virsh command groups</h1><h2 id="vm-xml"><a href="#vm-xml" class="headerlink" title="vm xml"></a>vm xml</h2><p>Use virsh to edit VM XML </p>
<ul>
<li>Virtual Networks: net-edit, net-dumpxml</li>
<li>Storage Pools: pool-edit, pool-dumpxml</li>
<li>Storage Volumes: vol-edit, vol-dumpxml</li>
<li>Interfaces: iface-edit, iface-dumpxml</li>
</ul>
<p><strong>Redefining the XML of a running machine will not change anything, the changes will take effect after the next VM start up</strong></p>
<h2 id="Command-groups"><a href="#Command-groups" class="headerlink" title="Command groups"></a>Command groups</h2><h3 id="Domain-management"><a href="#Domain-management" class="headerlink" title="Domain management"></a>Domain management</h3><ul>
<li>virsh console</li>
<li>virsh define (define a guest domain from xml file)</li>
<li>virsh destroy(immediately terminates a running vm)</li>
<li>virsh undefine(remove cfg for an inactive vm)</li>
<li>virsh domjobinfo(return info about jobs running on a domain)</li>
<li>virsh dumpxml(output current vm info <code>/var/run/libvirt/qemu/$domain.xml</code> to stdout)</li>
<li>virsh edit(edit the XML cfg for a vm located at <code>/etc/libvirtd/qemu/$domain.xml</code>, take affect at next <code>virsh start</code>)</li>
<li>virsh migrate(migrate vm to another host)</li>
<li>virsh suspend&#x2F;resume&#x2F;start&#x2F;shutdown&#x2F;reboot&#x2F;reset&#x2F;save&#x2F;restore<ul>
<li>shutdown&#x2F;reboot   <code>gracefully from guest like type command from guest</code></li>
<li>destroy&#x2F;reset     <code>forcely from outside like press power button</code></li>
</ul>
</li>
<li>virsh setmem&#x2F;setvcpus</li>
<li>virsh vcpuinfo&#x2F;vcpucount&#x2F;vcpupin</li>
<li>virsh domiflist</li>
<li>virsh attach-device (attach device from an XML file, device can be interface, disk etc)</li>
</ul>
<h3 id="Domain-monitor"><a href="#Domain-monitor" class="headerlink" title="Domain monitor"></a>Domain monitor</h3><ul>
<li>virsh domblkinfo &#x2F; dominfo</li>
<li>virsh domblkstat &#x2F;domifstat &#x2F;dommemstat</li>
<li>virsh domstate</li>
<li>virsh list –all</li>
</ul>
<h3 id="Domain-Snapshot"><a href="#Domain-Snapshot" class="headerlink" title="Domain Snapshot"></a>Domain Snapshot</h3><ul>
<li>virsh snapshot-create </li>
<li>virsh snapshot-delete </li>
<li>virsh snapshot-list</li>
<li>virsh snapshot-revert</li>
</ul>
<h3 id="Host-and-Hypervisor"><a href="#Host-and-Hypervisor" class="headerlink" title="Host and Hypervisor"></a>Host and Hypervisor</h3><ul>
<li>virsh capabilities</li>
<li>virsh nodeinfo</li>
<li>virsh uri</li>
</ul>
<h3 id="Network-Interface"><a href="#Network-Interface" class="headerlink" title="Network Interface"></a>Network Interface</h3><ul>
<li>virsh iface-dumpxml</li>
<li>virsh iface-list &#x2F; iface-name &#x2F; iface-mac</li>
<li>virsh iface-define &#x2F; iface-undefine</li>
<li>virsh iface-start &#x2F; iface-destroy</li>
<li>virsh iface-edit</li>
</ul>
<h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><ul>
<li>virsh net-create &#x2F; net-destroy</li>
<li>virsh net-edit &#x2F; net-dumpxml</li>
<li>virsh net-define &#x2F; net-undefine</li>
<li>virsh net-start</li>
<li>virsh net-info &#x2F; net-list &#x2F; net-name</li>
</ul>
<h3 id="Node-device"><a href="#Node-device" class="headerlink" title="Node device"></a>Node device</h3><ul>
<li>virsh nodedev-create</li>
<li>virsh nodedev-reattach &#x2F; nodedev-dettach</li>
<li>virsh nodedev-destroy</li>
<li>virsh nodedev-dumpxml</li>
<li>virsh nodedev-list</li>
</ul>
<h3 id="Storage-pool"><a href="#Storage-pool" class="headerlink" title="Storage pool"></a>Storage pool</h3><ul>
<li>virsh pool-create &#x2F; pool-destroy &#x2F; pool-delete</li>
<li>virsh pool-define &#x2F; pool-undefine</li>
<li>virsh pool-start</li>
<li>virsh pool-list &#x2F; pool-dumpxml</li>
<li>virsh pool-edit &#x2F; pool-info</li>
</ul>
<h3 id="Storage-Volume"><a href="#Storage-Volume" class="headerlink" title="Storage Volume"></a>Storage Volume</h3><ul>
<li>virsh vol-create &#x2F; vol-delete</li>
<li>virsh vol-info &#x2F;vol-list</li>
</ul>
<h3 id="event"><a href="#event" class="headerlink" title="event"></a>event</h3><p>libvirt supports several type events can be monitored by client, they are <code>domain event, qemu monitor event, network event, storage pool event, nodedev event</code></p>
<ul>
<li>virsh event(domain event)</li>
<li>virsh qemu-monitor-event</li>
<li>virsh net-event</li>
<li>virsh nodedev-event</li>
<li>virsh pool-event</li>
<li>virsh secret-event</li>
</ul>
<h3 id="blk"><a href="#blk" class="headerlink" title="blk"></a>blk</h3><ul>
<li>virsh domblklist centos10</li>
<li>virsh attach-disk &#x2F;detach-disk</li>
</ul>
<blockquote>
<p>libvirtd supports three modes of attaching a disk to vm, <code>--config, --live, --persistent</code> by default it’s <code>--live</code></p>
<ul>
<li><code>--config</code>, new disk setting only write to <code>/etc/libvirt/qemu/$doman.xml</code>, only take affect after <code>virsh destroy</code> then <code>virsh start</code>. <code>virsh reset</code>, <code>virsh reboot</code> is not sufficient.</li>
<li><code>--live</code>, new disk setting only in memory of running vm, you can see it by <code>virsh dumpxml $domain</code> or <code>/var/run/libvirt/qemu/$domain.xml</code>, take affect immediately, no written to <code>/etc/libvirt/qemu/$doman.xml</code>, <code>virsh reset</code> and <code>virsh reboot</code> you still can see it, but if you <code>virsh destroy</code> and <code>virsh start</code>, the new disk is gone as it’s not written to that file, <code>/var/run/libvirt/qemu/$domain.xml</code> is deleted after <code>virsh destroy</code>, &#96;&#96;&#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;$doman.xml<code>is used for</code>virsh start&#96;.</li>
<li><code>--persistent</code> &#x3D;&#x3D; <code>--config</code> + <code>--live</code>, that means new disk setting is in memory(<code>/var/run/libvirt/qemu/$domain.xml</code>) and disk(<code>/etc/libvirt/qemu/$doman.xml</code>)</li>
</ul>
</blockquote>
<h1 id="trobleshooting"><a href="#trobleshooting" class="headerlink" title="trobleshooting"></a>trobleshooting</h1><h2 id="conf-runtime-files"><a href="#conf-runtime-files" class="headerlink" title="conf runtime files"></a>conf runtime files</h2><p><strong>Related Paths:</strong></p>
<ul>
<li>&#x2F;etc&#x2F;libvirt&#x2F;</li>
<li>&#x2F;etc&#x2F;sysconfig&#x2F;libvirtd(<code>it&#39;s a file</code>)</li>
<li>&#x2F;var&#x2F;run&#x2F;libvirt&#x2F;</li>
<li>&#x2F;var&#x2F;log&#x2F;libvirt&#x2F;</li>
<li>&#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/libvirt/libvirtd.conf: global conf of libvirtd</span></span><br><span class="line"><span class="comment"># /etc/sysconfig/libvirtd: override libvirtd.conf</span></span><br><span class="line"><span class="comment"># /usr/lib/systemd/system/libvirtd.service： systemd service</span></span><br><span class="line"><span class="comment"># /etc/libvirt/qemu/networks/default.xml: default network</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /var/run/libvirt: runtime of daemon, like daemon socket/pid of each vm</span></span><br><span class="line">$ <span class="built_in">ls</span> /var/run/libvirt/</span><br><span class="line">hostdevmgr  libvirt-admin-sock  libvirt-sock  libvirt-sock-ro  lxc  network  qemu  storage  virtlockd-sock  virtlogd-sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># hostdevmgr network storage: setting for device, networking(rules), volume(pool, local disk)</span></span><br><span class="line"><span class="comment"># libvirt-admin-sock libvirt-sock libvirt-sock-ro: sock for admin, readonly etc</span></span><br><span class="line"><span class="comment"># lxc qemu: xml/pid of each instance, will go when boots</span></span><br><span class="line"><span class="comment"># virtlockd-sock  virtlogd-sock: sock of locked and virtlogd</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> /var/run/libvirt/qemu/</span><br><span class="line">centos.pid centos.xml </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># /var/log/libvirt: logs of VM from vm console and part logs from libvirtd</span></span><br><span class="line">$ <span class="built_in">ls</span> /var/log/libvirt/qemu/</span><br><span class="line">centos.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># by default libvirtd writes logs to /var/log/message(centos) /var/log/syslog(ubuntu)</span></span><br><span class="line"><span class="comment"># default: log_outputs=&quot;3:syslog:libvirtd&quot;</span></span><br><span class="line"><span class="comment"># change it to any file by editing /etc/libvirt/libvirtd.conf</span></span><br><span class="line"><span class="comment">#    1: DEBUG                                                                   </span></span><br><span class="line"><span class="comment">#    2: INFO                                                                    </span></span><br><span class="line"><span class="comment">#    3: WARNING                                                                 </span></span><br><span class="line"><span class="comment">#    4: ERROR</span></span><br><span class="line"><span class="comment"># only log of level large or equal to 2 are sent to file</span></span><br><span class="line">log_level = 1</span><br><span class="line">log_outputs=<span class="string">&quot;2:file:/var/log/libvirt/libvirtd.log&quot;</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># /etc/libvirt: daemon conf and persistent XML of VMS located at qemu/</span></span><br><span class="line">$ <span class="built_in">ls</span> /etc/libvirt/</span><br><span class="line">libvirt-admin.conf  libvirtd.conf      nwfilter/  qemu.conf   virtlogd.conf</span><br><span class="line">libvirt.conf        qemu/   virtlockd.conf </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> /var/lib/libvirt</span><br><span class="line">dnsmasq  filesystems/  images/  network/  qemu/</span><br><span class="line"></span><br><span class="line"><span class="comment"># snapshot saves the xml of snapshot, data of snapshot is saved into image by default(internal snapshot)!!</span></span><br><span class="line"><span class="comment"># save/ holds the managed save(cpu/memory)</span></span><br><span class="line">$ <span class="built_in">ls</span> /var/lib/libvirt/qemu/</span><br><span class="line">channel/  domain-1-centos  save/  snapshot/</span><br><span class="line"></span><br><span class="line"><span class="comment"># socket of this Vm like qmp socket etc</span></span><br><span class="line">$ <span class="built_in">ls</span> /var/lib/libvirt/qemu/domain-1-centos</span><br><span class="line">master-key.aes  monitor.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># socket of this vm for QGA channel</span></span><br><span class="line">$ <span class="built_in">ls</span> /var/lib/libvirt/qemu/channel/target/domain-1-centos/</span><br><span class="line">org.qemu.guest_agent.0</span><br></pre></td></tr></table></figure>

<h2 id="libvirt-log"><a href="#libvirt-log" class="headerlink" title="libvirt log"></a>libvirt log</h2><p><img src="https://cyun.tech/images/libvirt/libvirtd_domain_log.svg"></p>
<p><strong>libvirtd.conf</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log_level = 1</span><br><span class="line">log_outputs=&quot;1:file:/var/log/libvirt/libvirtd.log&quot;</span><br><span class="line">keepalive_interval=60</span><br><span class="line">admin_keepalive_interval=60</span><br></pre></td></tr></table></figure>

<p><strong>qemu.conf</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># use virtlogd as backend</span><br><span class="line">stdio_handler = &quot;logd&quot;</span><br></pre></td></tr></table></figure>

<p><strong>virtlogd.conf</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log_level = 1 </span><br><span class="line">log_outputs=&quot;1:file:/var/log/libvirt/virtlogd.log&quot; </span><br></pre></td></tr></table></figure>

<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="Difference-between-qemu-x2F-x2F-x2F-system-and-qemu-x2F-x2F-x2F-session-Which-one-should-I-use"><a href="#Difference-between-qemu-x2F-x2F-x2F-system-and-qemu-x2F-x2F-x2F-session-Which-one-should-I-use" class="headerlink" title="Difference between qemu:&#x2F;&#x2F;&#x2F;system and qemu:&#x2F;&#x2F;&#x2F;session, Which one should I use?"></a>Difference between qemu:&#x2F;&#x2F;&#x2F;system and qemu:&#x2F;&#x2F;&#x2F;session, Which one should I use?</h2><p>All ‘system’ URIs (be it qemu, lxc, uml, …) connect to the libvirtd daemon running as root which is launched at system startup. <code>Virtual machines created and run using &#39;system&#39; are usually launched as root</code></p>
<p>All ‘session’ URIs launch a libvirtd instance as your local user, and all VMs are run with local user permissions.<br>You will definitely want to use qemu:&#x2F;&#x2F;&#x2F;system if your VMs are acting as servers. <code>VM autostart on host boot only works for &#39;system&#39;, and the root libvirtd instance has necessary permissions to use proper networking via bridges or virtual networks</code></p>
<h2 id="Migration"><a href="#Migration" class="headerlink" title="Migration"></a>Migration</h2><p>There are two primary types of migration with QEMU&#x2F;KVM and libvirt:</p>
<ul>
<li><p>Plain migration: <code>The source host VM opens a direct unencrypted TCP connection to the destination host for sending the migration data</code>. Unless a port is manually specified, libvirt will choose a migration port in the range 49152-49215, which will need to be open in the firewall on the remote host.</p>
</li>
<li><p>Tunneled migration: The source host libvirtd opens a direct connection to the destination host libvirtd for sending migration data. This allows the option of <code>encrypting the data stream</code>. This mode doesn’t require any extra firewall configuration, but is only supported with qemu 0.12.0 or later, and libvirt 0.7.2.</p>
</li>
</ul>
<p>For all QEMU&#x2F;KVM migrations, <code>libvirtd must be running on the source and destination host</code>.</p>
<ul>
<li><p>For tunneled migration, no extra configuration should be required, you simply need to pass the –tunnelled flag to virsh migrate.</p>
</li>
<li><p>For plain unencrypted migration, the TCP port range 49152-49215 must be opened in the firewall on the destination host.</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virsh migrate <span class="variable">$domain</span> <span class="variable">$REMOTE_HOST_URI</span> --migrateuri tcp://<span class="variable">$REMOTE_HOST</span></span><br></pre></td></tr></table></figure>

<h2 id="How-to-import-a-vm-from-a-terminal-no-X-display"><a href="#How-to-import-a-vm-from-a-terminal-no-X-display" class="headerlink" title="How to import a vm from a terminal(no X display)"></a>How to import a vm from a terminal(no X display)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ virsh net-list</span><br><span class="line"></span><br><span class="line">$ virt-install --name guest1-rhel7 --memory 2048 --vcpus 2 --disk /home/data/tmp/CentOS-7-x86_64-GenericCloud-1503.qcow2 --import --os-type linux --<span class="built_in">wait</span> 0 --network default</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">$ virt-install --name guest1-rhel7 --memory 2048 --vcpus 2 --disk /home/data/tmp/CentOS-7-x86_64-GenericCloud-1503.qcow2 --import --os-type linux --<span class="built_in">wait</span> 0 --network none</span><br><span class="line"><span class="comment"># must set wait 0, otherwise, it will show &#x27;Domain installation still in progress. Waiting for installation to complete&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="How-to-install-a-VM-from-a-terminal"><a href="#How-to-install-a-VM-from-a-terminal" class="headerlink" title="How to install a VM from a terminal"></a>How to install a VM from a terminal</h2><p>Here we use image from remote by –location parameters</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">-l LOCATION , --location=LOCATION</span><br><span class="line">Distribution tree installtion source. virt-install can recognize certain distribution trees and fetches a bootable kernel/initrd pair to launch the install. </span><br><span class="line"></span><br><span class="line">The &quot;LOCATION&quot; can take one of the following forms:</span><br><span class="line">DIRECTORY</span><br><span class="line">    Path to a local directory containing an installable distribution image </span><br><span class="line">nfs:host:/path or nfs://host/path</span><br><span class="line">    An NFS server location containing an installable distribution image </span><br><span class="line">http://host/path</span><br><span class="line">    An HTTP server location containing an installable distribution image </span><br><span class="line">ftp://host/path</span><br><span class="line">    An FTP server location containing an installable distribution image </span><br><span class="line"></span><br><span class="line">centos 7</span><br><span class="line">--location &#x27;http://mirror.i3d.net/pub/centos/7/os/x86_64/&#x27;</span><br><span class="line"></span><br><span class="line">ubuntu(different versions has different url)</span><br><span class="line">--location &#x27;http://archive.ubuntu.com/ubuntu/dists/trusty/main/installer-amd64/&#x27;</span><br><span class="line">--location &#x27;http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ virt-install --name ubuntu --memory 2048 --vcpus 2 --disk size=8 --location <span class="string">&#x27;http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/&#x27;</span> --os-type linux --graphics none --extra-args <span class="string">&quot;console=tty0 console=ttyS0,115200n8&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="how-to-change-something-of-disk-without-boot-it"><a href="#how-to-change-something-of-disk-without-boot-it" class="headerlink" title="how to change something of disk without boot it"></a>how to change something of disk without boot it</h2><p>virt-sysprep(only support linux!!!) can reset or unconfigure a virtual machine so that clones can be made from it.  Steps in this process include <code>removing SSH host keys, removing persistent network MAC configuration, and removing user accounts</code>.  virt-sysprep can also customize a virtual machine, for instance by adding SSH keys, users or logos.  Each step can be enabled or disabled as required..</p>
<p><strong>Usage</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virt-sysprep [--options] -d domname</span><br><span class="line">virt-sysprep [--options] -a disk.img [-a disk.img ...]</span><br></pre></td></tr></table></figure>

<p><strong>NOTE</strong><br>virt-sysprep <strong>modifies the guest or disk image in place</strong></p>
<ul>
<li>The virtual machine must be shut down before.</li>
<li>disk images must not be edited concurrently.</li>
<li>virt-sysprep depends on libvirt running by default</li>
<li>export LIBGUESTFS_BACKEND&#x3D;direct virt-sysprep ..(start qemu without libvirtd)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># NO wildcards supported for below three </span></span><br><span class="line"><span class="comment"># --copy SOURCE:DEST  inside vm</span></span><br><span class="line"><span class="comment"># --copy-in LOCALPATH:REMOTEDIR   from host to guest</span></span><br><span class="line"><span class="comment"># --move SOURCE:DEST  inside vm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --mkdir DIR </span></span><br><span class="line"><span class="comment"># --delete PATH support wildcards</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --install PKG,PKG.   use guest pkg manager and host network</span></span><br><span class="line"><span class="comment"># --uninstall PKG,PKG  use guest pkg manager</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This will start a temporary vm</span></span><br><span class="line">$ virt-sysprep --root-password password:<span class="variable">$new</span> --uninstall cloud-init --selinux-relabel -a  CentOS-7-x86_64-GenericCloud.qcow2 </span><br></pre></td></tr></table></figure>
<h2 id="How-to-reset-a-user-password-of-domain"><a href="#How-to-reset-a-user-password-of-domain" class="headerlink" title="How to reset a user password of domain"></a>How to reset a user password of domain</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># There are two ways to do this</span></span><br><span class="line"><span class="comment">##################Way 1################################################</span></span><br><span class="line"><span class="comment"># if qemu-ga is running, we can change it runtime, no need to restart vm</span></span><br><span class="line"><span class="comment"># QGA: guest-set-user-password</span></span><br><span class="line"><span class="variable">$virsh</span> set-user-password vm100 root root</span><br><span class="line"></span><br><span class="line"><span class="comment">##################Way 2################################################</span></span><br><span class="line"><span class="comment"># if no qemu-ga or qemu-ga is not working use this way</span></span><br><span class="line"><span class="comment"># shutdown it first</span></span><br><span class="line">$ virsh shutdown <span class="variable">$domain</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate your password</span></span><br><span class="line">$ openssl passwd -1 <span class="variable">$yourpassword</span></span><br><span class="line">$6<span class="variable">$FU5Nl9oxxxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mount the disk with read/write mode(--verbose for debugging)</span></span><br><span class="line">$ guestfish --rw -a /var/lib/libvirt/images/debian9-vm1.qcow2 -i</span><br><span class="line"></span><br><span class="line"><span class="comment"># oneshot mount</span></span><br><span class="line">$ guestmount -a disk.img -i /tmp/disk --verbose</span><br><span class="line"></span><br><span class="line">&gt;&lt;fs&gt; vi /etc/shadow</span><br><span class="line"><span class="comment"># modify password</span></span><br><span class="line">root:$6<span class="variable">$FU5Nl9oxxxx</span>:17572:0:99999:7:::</span><br><span class="line"></span><br><span class="line">&gt;&lt;fs&gt; flush</span><br><span class="line">&gt;&lt;fs&gt; quit</span><br><span class="line"></span><br><span class="line"><span class="comment"># OR you can do it with just one command who does simliar operation for you</span></span><br><span class="line">$ virt-sysprep --root-password password:<span class="variable">$new</span> -a CentOS-7-x86_64-GenericCloud.qcow2</span><br></pre></td></tr></table></figure>

<h2 id="how-to-change-log-level-without-libvirt-restart"><a href="#how-to-change-log-level-without-libvirt-restart" class="headerlink" title="how to change log level without libvirt restart"></a>how to change log level without libvirt restart</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1: DEBUG  </span></span><br><span class="line"><span class="comment"># 2: INFO   </span></span><br><span class="line"><span class="comment"># 3: WARNING     </span></span><br><span class="line"><span class="comment"># 4: ERROR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># each source file register log with a tag</span></span><br><span class="line"><span class="comment"># filter supports wildcard match</span></span><br><span class="line"><span class="comment"># that means libvirt.xxx also matches here!!!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># log_filters=&quot;1:libvirt 1:daemon 1:rpc&quot;</span></span><br><span class="line"><span class="comment"># log_outputs=&quot;1:file:/var/log/libvirt/libvirtd.log 2:syslog:libvirtd&quot;</span></span><br><span class="line"></span><br><span class="line">$ virt-admin daemon-log-filters</span><br><span class="line"></span><br><span class="line">$ virt-admin daemon-log-filters <span class="string">&quot;1:libvirt 1:daemon 1:rpc&quot;</span></span><br><span class="line">$ virt-admin daemon-log-filters</span><br><span class="line">Logging filters: 1:*libvirt* 1:*daemon* 1:*rpc* </span><br><span class="line"></span><br><span class="line">$ virt-admin daemon-log-outputs</span><br><span class="line">Logging outputs: 1:file:/var/log/libvirt/libvirtd.log</span><br><span class="line"></span><br><span class="line">$ virt-admin daemon-log-outputs <span class="string">&quot;2:file:/var/log/libvirt/libvirtd.log&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="how-to-enable-client-library-log"><a href="#how-to-enable-client-library-log" class="headerlink" title="how to enable client library log"></a>how to enable client library log</h2><p>By default the client library doesn’t produce any logs and usually usually it’s not very interesting on its own anyway.<br>The library configuration of logging is through 3 environment variables allowing to control the logging behaviour:</p>
<ul>
<li><code>LIBVIRT_DEBUG</code>: it can take the four following values:<ul>
<li>1 or “debug”: asking the library to log every message emitted, though the filters can be used to avoid filling up the output</li>
<li>2 or “info”: log all non-debugging information</li>
<li>3 or “warn”: log warnings and errors, that’s the default value</li>
<li>4 or “error”: log only error messages</li>
</ul>
</li>
<li><code>LIBVIRT_LOG_FILTERS</code>: defines logging filters</li>
<li><code>LIBVIRT_LOG_OUTPUTS</code>: defines logging outputs</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> LIBVIRT_DEBUG=debug</span><br><span class="line">$ <span class="built_in">export</span> LIBVIRT_LOG_OUTPUTS=<span class="string">&quot;1:file:/tmp/libvirt_client.log&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="how-to-enable-libvirtd-on-tcp-without-tls"><a href="#how-to-enable-libvirtd-on-tcp-without-tls" class="headerlink" title="how to enable libvirtd on tcp without tls"></a>how to enable libvirtd on tcp without tls</h2><p><strong>libvirtd.conf</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listen_tls = 0</span><br><span class="line">listen_tcp = 1</span><br><span class="line">auth_tcp = &quot;none&quot;</span><br></pre></td></tr></table></figure>

<p><strong>&#x2F;etc&#x2F;sysconfig&#x2F;libvirtd</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LIBVIRTD_ARGS=&quot;--listen&quot;</span><br></pre></td></tr></table></figure>

<p><strong>&#x2F;etc&#x2F;libvirt&#x2F;libvirt.conf</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># tell virsh use this uri by default</span><br><span class="line">uri_default = &quot;qemu+tcp://127.0.0.1:16509/system&quot;</span><br></pre></td></tr></table></figure>
<h2 id="Why-doesn’t-‘shutdown’-seem-to-work"><a href="#Why-doesn’t-‘shutdown’-seem-to-work" class="headerlink" title="Why doesn’t ‘shutdown’ seem to work?"></a>Why doesn’t ‘shutdown’ seem to work?</h2><p>If you are using Xen HVM or QEMU&#x2F;KVM, <strong>ACPI must be enabled in the guest for a graceful shutdown to work</strong>. To check if ACPI is enabled, run:</p>
<p><code>virsh dumpxml $your-vm-name | grep acpi</code></p>
<p>If nothing is printed, ACPI is not enabled for your machine. Use ‘virsh edit’ to add the following XML under <domain>:</p>
<p><features><acpi/></features></p>
<p><strong>If your VM is running Linux, the VM additionally needs to be running acpid to receive the ACPI events</strong><br><code>yum install acpid</code></p>
<h2 id="When-lt-input-gt-device-is-used"><a href="#When-lt-input-gt-device-is-used" class="headerlink" title="When &lt;input&gt; device is used"></a>When <code>&lt;input&gt;</code> device is used</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">devices</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;mouse&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;usb&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">devices</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Input devices <strong>allow interaction with the graphical framebuffer in the guest virtual machine virtual machine</strong>. that means.</p>
<ul>
<li>For Desktop, you should configure mouse input, otherwise, you can only use keyboard</li>
<li>For Server without GUI, mouse input can be disable, as it no effect at all.</li>
</ul>
<h2 id="reduce-disk-image-file-not-disk-size"><a href="#reduce-disk-image-file-not-disk-size" class="headerlink" title="reduce disk image file not disk size"></a>reduce disk image file not disk size</h2><p>As most of time, disk is thin-provisioned, disk file grows when needed, <code>but after disk file grew, it can not be resize automatcially even you delete vm inside VM, lots of free space of this disk.</code></p>
<p><strong>NOTE</strong></p>
<ul>
<li><strong>The virtual machine must be shut down</strong></li>
<li><strong>disk images must not be edited concurrently.</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the new image is smaller(No snapshot is lost)</span></span><br><span class="line">$ qemu-img convert -O qcow2 centos7.img out.qcow2</span><br></pre></td></tr></table></figure>

<h2 id="run-kvm-machine-from-another-vm"><a href="#run-kvm-machine-from-another-vm" class="headerlink" title="run kvm machine from another vm"></a>run kvm machine from another vm</h2><p>if you plan to run vm from vm by libvirt, make sure <a href="https://docs.fedoraproject.org/en-US/quick-docs/using-nested-virtualization-in-kvm/index.html">nested virtualization</a> is enabled on host, otherwise, you will meet error from libvirtd.log like this <code>invalid argument: could not find capabilities for arch=x86_64 domaintype=kvm</code>, the pass nested virtualization to vm who will plan to start new vm.</p>
<ul>
<li>enable nested virtualization on host</li>
<li>pass it to vm</li>
<li>from that vm start another kvm machine.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if you can run vm from another vm, check it by that vm</span></span><br><span class="line"><span class="comment"># run this in virtual vm which plans to start another vm.</span></span><br><span class="line">$ virt-host-validate</span><br><span class="line">  QEMU: Checking <span class="keyword">for</span> hardware virtualization                                 : PASS---&gt;nested virtulization is enabled</span><br><span class="line">  QEMU: Checking <span class="keyword">if</span> device /dev/kvm exists                                   : PASS</span><br><span class="line">  QEMU: Checking <span class="keyword">if</span> device /dev/kvm is accessible                            : PASS</span><br><span class="line">  QEMU: Checking <span class="keyword">if</span> device /dev/vhost-net exists                             : PASS</span><br><span class="line">  QEMU: Checking <span class="keyword">if</span> device /dev/net/tun exists                               : PASS</span><br><span class="line">  QEMU: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;memory&#x27;</span> controller support                      : PASS</span><br><span class="line">  QEMU: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;memory&#x27;</span> controller mount-point                  : PASS</span><br><span class="line">  QEMU: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;cpu&#x27;</span> controller support                         : PASS</span><br><span class="line">  QEMU: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;cpu&#x27;</span> controller mount-point                     : PASS</span><br><span class="line">  QEMU: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;cpuacct&#x27;</span> controller support                     : PASS</span><br><span class="line">  QEMU: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;cpuacct&#x27;</span> controller mount-point                 : PASS</span><br><span class="line">  QEMU: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;cpuset&#x27;</span> controller support                      : PASS</span><br><span class="line">  QEMU: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;cpuset&#x27;</span> controller mount-point                  : PASS</span><br><span class="line">  QEMU: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;devices&#x27;</span> controller support                     : PASS</span><br><span class="line">  QEMU: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;devices&#x27;</span> controller mount-point                 : PASS</span><br><span class="line">  QEMU: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;blkio&#x27;</span> controller support                       : PASS</span><br><span class="line">  QEMU: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;blkio&#x27;</span> controller mount-point                   : PASS</span><br><span class="line">  QEMU: Checking <span class="keyword">for</span> device assignment IOMMU support                         : WARN (No ACPI DMAR table found, IOMMU either disabled <span class="keyword">in</span> BIOS or not supported by this hardware platform)</span><br><span class="line">   LXC: Checking <span class="keyword">for</span> Linux &gt;= 2.6.26                                         : PASS</span><br><span class="line">   LXC: Checking <span class="keyword">for</span> namespace ipc                                           : PASS</span><br><span class="line">   LXC: Checking <span class="keyword">for</span> namespace mnt                                           : PASS</span><br><span class="line">   LXC: Checking <span class="keyword">for</span> namespace pid                                           : PASS</span><br><span class="line">   LXC: Checking <span class="keyword">for</span> namespace uts                                           : PASS</span><br><span class="line">   LXC: Checking <span class="keyword">for</span> namespace net                                           : PASS</span><br><span class="line">   LXC: Checking <span class="keyword">for</span> namespace user                                          : PASS</span><br><span class="line">   LXC: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;memory&#x27;</span> controller support                      : PASS</span><br><span class="line">   LXC: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;memory&#x27;</span> controller mount-point                  : PASS</span><br><span class="line">   LXC: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;cpu&#x27;</span> controller support                         : PASS</span><br><span class="line">   LXC: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;cpu&#x27;</span> controller mount-point                     : PASS</span><br><span class="line">   LXC: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;cpuacct&#x27;</span> controller support                     : PASS</span><br><span class="line">   LXC: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;cpuacct&#x27;</span> controller mount-point                 : PASS</span><br><span class="line">   LXC: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;cpuset&#x27;</span> controller support                      : PASS</span><br><span class="line">   LXC: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;cpuset&#x27;</span> controller mount-point                  : PASS</span><br><span class="line">   LXC: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;devices&#x27;</span> controller support                     : PASS</span><br><span class="line">   LXC: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;devices&#x27;</span> controller mount-point                 : PASS</span><br><span class="line">   LXC: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;blkio&#x27;</span> controller support                       : PASS</span><br><span class="line">   LXC: Checking <span class="keyword">for</span> cgroup <span class="string">&#x27;blkio&#x27;</span> controller mount-point                   : PASS</span><br></pre></td></tr></table></figure>

<h2 id="monitor-event-from-command-line"><a href="#monitor-event-from-command-line" class="headerlink" title="monitor event from command line"></a>monitor event from command line</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for event, check help first</span></span><br><span class="line">$ virsh event --<span class="built_in">help</span></span><br><span class="line">  NAME</span><br><span class="line">    event - Domain Events</span><br><span class="line"></span><br><span class="line">  SYNOPSIS</span><br><span class="line">    event [--domain &lt;string&gt;] [--event &lt;string&gt;] [--all] [--loop] [--<span class="built_in">timeout</span> &lt;number&gt;] [--list] [--timestamp]</span><br><span class="line"></span><br><span class="line">  DESCRIPTION</span><br><span class="line">    List event types, or <span class="built_in">wait</span> <span class="keyword">for</span> domain events to occur</span><br><span class="line"></span><br><span class="line">  OPTIONS</span><br><span class="line">    --domain &lt;string&gt;  filter by domain name, <span class="built_in">id</span> or uuid</span><br><span class="line">    --event &lt;string&gt;  <span class="built_in">which</span> event <span class="built_in">type</span> to <span class="built_in">wait</span> <span class="keyword">for</span></span><br><span class="line">    --all            <span class="built_in">wait</span> <span class="keyword">for</span> all events instead of just one <span class="built_in">type</span></span><br><span class="line">    --loop           loop until <span class="built_in">timeout</span> or interrupt, rather than one-shot</span><br><span class="line">    --<span class="built_in">timeout</span> &lt;number&gt;  <span class="built_in">timeout</span> seconds</span><br><span class="line">    --list           list valid event types</span><br><span class="line">    --timestamp      show timestamp <span class="keyword">for</span> each printed event</span><br><span class="line"></span><br><span class="line"><span class="comment"># all events of all domains</span></span><br><span class="line">$ virsh event --all --loop --timestamp</span><br><span class="line"></span><br><span class="line"><span class="comment"># default remote port is 16509</span></span><br><span class="line">$ virsh -c qemu+tcp://172.17.0.3/system  event --event lifecycle --loop</span><br><span class="line"></span><br><span class="line">$ virsh qemu-monitor-event --<span class="built_in">help</span></span><br><span class="line"> NAME</span><br><span class="line">    qemu-monitor-event - QEMU Monitor Events</span><br><span class="line"></span><br><span class="line">  SYNOPSIS</span><br><span class="line">    qemu-monitor-event [--domain &lt;string&gt;] [--event &lt;string&gt;] [--pretty] [--loop] [--<span class="built_in">timeout</span> &lt;number&gt;] [--regex] [--no-case] [--timestamp]</span><br><span class="line"></span><br><span class="line">  DESCRIPTION</span><br><span class="line">    Listen <span class="keyword">for</span> QEMU Monitor Events</span><br><span class="line"></span><br><span class="line">  OPTIONS</span><br><span class="line">    --domain &lt;string&gt;  filter by domain name, <span class="built_in">id</span> or uuid</span><br><span class="line">    --event &lt;string&gt;  filter by event name</span><br><span class="line">    --pretty         pretty-print any JSON output</span><br><span class="line">    --loop           loop until <span class="built_in">timeout</span> or interrupt, rather than one-shot</span><br><span class="line">    --<span class="built_in">timeout</span> &lt;number&gt;  <span class="built_in">timeout</span> seconds</span><br><span class="line">    --regex          treat event as a regex rather than literal filter</span><br><span class="line">    --no-case        treat event case-insensitively</span><br><span class="line">    --timestamp      show timestamp <span class="keyword">for</span> each printed event</span><br><span class="line"></span><br><span class="line"><span class="comment"># all qemu monitor event of all domains</span></span><br><span class="line">$ virsh qemu-monitor-event --loop --timestamp</span><br></pre></td></tr></table></figure>

<h2 id="monitor-performance-of-vm"><a href="#monitor-performance-of-vm" class="headerlink" title="monitor performance of vm"></a>monitor performance of vm</h2><p>Some platforms allow monitoring of performance of the virtual machine and the code executed inside. To enable the performance monitoring events you can either specify them in the perf element or enable them via virDomainSetPerfEvents API. The performance values are then retrieved using the virConnectGetAllDomainStats</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check perf event status of given vm</span></span><br><span class="line">$ virsh perf vm100 </span><br><span class="line">cmt            : disabled</span><br><span class="line">mbmt           : disabled</span><br><span class="line">mbml           : disabled</span><br><span class="line">cpu_cycles     : enabled</span><br><span class="line">instructions   : disabled</span><br><span class="line">cache_references: disabled</span><br><span class="line">cache_misses   : disabled</span><br><span class="line">branch_instructions: disabled</span><br><span class="line">branch_misses  : disabled</span><br><span class="line">bus_cycles     : disabled</span><br><span class="line">stalled_cycles_frontend: disabled</span><br><span class="line">stalled_cycles_backend: disabled</span><br><span class="line">ref_cpu_cycles : disabled</span><br><span class="line">cpu_clock      : disabled</span><br><span class="line">task_clock     : disabled</span><br><span class="line">page_faults    : disabled</span><br><span class="line">context_switches: disabled</span><br><span class="line">cpu_migrations : disabled</span><br><span class="line">page_faults_min: disabled</span><br><span class="line">page_faults_maj: disabled</span><br><span class="line">alignment_faults: disabled</span><br><span class="line">emulation_faults: disabled</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable perf event of given vm</span></span><br><span class="line">$ virsh perf vm100 --<span class="built_in">enable</span> page_faults --live</span><br><span class="line">$ virsh perf vm100 --<span class="built_in">enable</span> cache_misses --live</span><br><span class="line"></span><br><span class="line"><span class="comment"># get event stats</span></span><br><span class="line">$  virsh domstats vm100</span><br><span class="line">Domain: <span class="string">&#x27;vm100&#x27;</span></span><br><span class="line">  state.state=1</span><br><span class="line">  state.reason=1</span><br><span class="line">  cpu.time=544449957934</span><br><span class="line">  cpu.user=11320000000</span><br><span class="line">  cpu.system=95640000000</span><br><span class="line">  balloon.current=2048000</span><br><span class="line">  balloon.maximum=2048000</span><br><span class="line">  balloon.swap_in=0</span><br><span class="line">  balloon.swap_out=0</span><br><span class="line">  balloon.major_fault=179</span><br><span class="line">  balloon.minor_fault=131463</span><br><span class="line">  balloon.unused=1732652</span><br><span class="line">  balloon.available=1832708</span><br><span class="line">  balloon.usable=1673880</span><br><span class="line">  balloon.last-update=1659001628</span><br><span class="line">  balloon.rss=488752</span><br><span class="line">  vcpu.current=2</span><br><span class="line">  vcpu.maximum=2</span><br><span class="line">  vcpu.0.state=1</span><br><span class="line">  vcpu.0.time=159640000000</span><br><span class="line">  vcpu.0.wait=0</span><br><span class="line">  vcpu.1.state=1</span><br><span class="line">  vcpu.1.time=367810000000</span><br><span class="line">  vcpu.1.wait=0</span><br><span class="line">  net.count=0</span><br><span class="line">  block.count=1</span><br><span class="line">  block.0.name=vda</span><br><span class="line">  block.0.path=/tmp/vm100.qcow2</span><br><span class="line">  block.0.rd.reqs=5746</span><br><span class="line">  block.0.rd.bytes=145617408</span><br><span class="line">  block.0.rd.times=10162755968</span><br><span class="line">  block.0.wr.reqs=324</span><br><span class="line">  block.0.wr.bytes=4339200</span><br><span class="line">  block.0.wr.times=1200496823</span><br><span class="line">  block.0.fl.reqs=158</span><br><span class="line">  block.0.fl.times=4497529526</span><br><span class="line">  block.0.allocation=3385786368</span><br><span class="line">  block.0.capacity=8589934592</span><br><span class="line">  block.0.physical=3385360384</span><br><span class="line">  perf.cache_misses=11298</span><br><span class="line">  perf.page_faults=0</span><br></pre></td></tr></table></figure>

<h2 id="add-hotplug-cpu-to-guest-add-cpu-to-guest-without-rebooting-it"><a href="#add-hotplug-cpu-to-guest-add-cpu-to-guest-without-rebooting-it" class="headerlink" title="add hotplug cpu to guest(add cpu to guest without rebooting it)"></a>add hotplug cpu to guest(add cpu to guest without rebooting it)</h2><p><strong>you must set <code>maxcpus</code> for qemu to use hotpluggable cpu</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check hotpluggable cpu</span></span><br><span class="line"><span class="comment"># no qom-path means it&#x27;s plugged out!!!</span></span><br><span class="line">$ virsh qemu-monitor-command  vm100 --pretty <span class="string">&#x27;&#123; &quot;execute&quot;: &quot;query-hotpluggable-cpus&quot;&#125;&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;return&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;props&quot;</span>: &#123; </span><br><span class="line">        <span class="string">&quot;core-id&quot;</span>: 1,</span><br><span class="line">        <span class="string">&quot;thread-id&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;node-id&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;socket-id&quot;</span>: 0</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;vcpus-count&quot;</span>: 1,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;qemu64-x86_64-cpu&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;props&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;core-id&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;thread-id&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;node-id&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;socket-id&quot;</span>: 0</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;vcpus-count&quot;</span>: 1,</span><br><span class="line">      <span class="string">&quot;qom-path&quot;</span>: <span class="string">&quot;/machine/unattached/device[0]&quot;</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;qemu64-x86_64-cpu&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="string">&quot;libvirt-21&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># add a hotpluggable cpu</span></span><br><span class="line">$ virsh qemu-monitor-command  vm100 --pretty <span class="string">&#x27;&#123; &quot;execute&quot;: &quot;device_add&quot;, &quot;arguments&quot;:&#123;&quot;id&quot;:&quot;cpu-2&quot;, &quot;driver&quot;:&quot;qemu64-x86_64-cpu&quot;, &quot;socket-id&quot;:&quot;0&quot;, &quot;core-id&quot;:&quot;1&quot;, &quot;thread-id&quot;:&quot;0&quot;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># query vcpu details</span></span><br><span class="line"><span class="variable">$virsh</span> qemu-monitor-command  vm100 --pretty <span class="string">&#x27;&#123; &quot;execute&quot;: &quot;query-cpus-fast&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pluggable cpu and unpluggable cpu has different qom-paths!!!</span></span><br><span class="line"><span class="comment"># pluggable cpu sits at /machine/peripheral</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;return&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;arch&quot;</span>: <span class="string">&quot;x86&quot;</span>,</span><br><span class="line">      <span class="string">&quot;thread-id&quot;</span>: 17865,</span><br><span class="line">      <span class="string">&quot;props&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;core-id&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;thread-id&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;node-id&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;socket-id&quot;</span>: 0</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;qom-path&quot;</span>: <span class="string">&quot;/machine/unattached/device[0]&quot;</span>,</span><br><span class="line">      <span class="string">&quot;cpu-index&quot;</span>: 0,</span><br><span class="line">      <span class="string">&quot;target&quot;</span>: <span class="string">&quot;x86_64&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;arch&quot;</span>: <span class="string">&quot;x86&quot;</span>,</span><br><span class="line">      <span class="string">&quot;thread-id&quot;</span>: 18887,</span><br><span class="line">      <span class="string">&quot;props&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;core-id&quot;</span>: 1,</span><br><span class="line">        <span class="string">&quot;thread-id&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;node-id&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;socket-id&quot;</span>: 0</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;qom-path&quot;</span>: <span class="string">&quot;/machine/peripheral/cpu-2&quot;</span>,</span><br><span class="line">      <span class="string">&quot;cpu-index&quot;</span>: 1,</span><br><span class="line">      <span class="string">&quot;target&quot;</span>: <span class="string">&quot;x86_64&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="string">&quot;libvirt-28&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># inside the guest, there are two cpu now!!!</span></span><br></pre></td></tr></table></figure>

<h2 id="memory-deivce-and-share-memory"><a href="#memory-deivce-and-share-memory" class="headerlink" title="memory deivce and share memory"></a>memory deivce and share memory</h2><h3 id="without-hotplugable-memory-device"><a href="#without-hotplugable-memory-device" class="headerlink" title="without hotplugable memory device"></a>without hotplugable memory device</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">domain</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maxMemory</span> <span class="attr">slots</span>=<span class="string">&quot;4&quot;</span> <span class="attr">unit</span>=<span class="string">&quot;GiB&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">maxMemory</span>&gt;</span>                                 </span><br><span class="line">  <span class="tag">&lt;<span class="name">cpu</span>&gt;</span>                                                                         </span><br><span class="line">    <span class="tag">&lt;<span class="name">topology</span> <span class="attr">sockets</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cores</span>=<span class="string">&quot;2&quot;</span> <span class="attr">threads</span>=<span class="string">&quot;1&quot;</span>/&gt;</span>                               </span><br><span class="line">    <span class="tag">&lt;<span class="name">numa</span>&gt;</span>                                                                      </span><br><span class="line">      <span class="tag">&lt;<span class="name">cell</span> <span class="attr">id</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cpus</span>=<span class="string">&quot;0-1&quot;</span> <span class="attr">memory</span>=<span class="string">&quot;1024&quot;</span> <span class="attr">unit</span>=<span class="string">&quot;MiB&quot;</span>/&gt;</span>         -----&gt; no need to set <span class="tag">&lt;<span class="name">memory</span>&gt;</span><span class="tag">&lt;/<span class="name">memory</span>&gt;</span>, it&#x27;s auto calcualted from <span class="tag">&lt;<span class="name">numa</span>&gt;</span><span class="tag">&lt;/<span class="name">numa</span>&gt;</span> if no <span class="tag">&lt;<span class="name">numa</span>&gt;</span> must set it!!!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">numa</span>&gt;</span>                                                                     </span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpu</span>&gt;</span></span><br><span class="line"></span><br><span class="line">libvirt auto generate xml /var/run/libvirt/qemu/$domain.xml</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">maxMemory</span> <span class="attr">slots</span>=<span class="string">&#x27;4&#x27;</span> <span class="attr">unit</span>=<span class="string">&#x27;KiB&#x27;</span>&gt;</span>4194304<span class="tag">&lt;/<span class="name">maxMemory</span>&gt;</span>                         </span><br><span class="line">  <span class="tag">&lt;<span class="name">memory</span> <span class="attr">unit</span>=<span class="string">&#x27;KiB&#x27;</span>&gt;</span>1048576<span class="tag">&lt;/<span class="name">memory</span>&gt;</span>                                         </span><br><span class="line">  <span class="tag">&lt;<span class="name">currentMemory</span> <span class="attr">unit</span>=<span class="string">&#x27;KiB&#x27;</span>&gt;</span>1048576<span class="tag">&lt;/<span class="name">currentMemory</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<p><strong>check memory device</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># total memory info</span></span><br><span class="line">$ virsh qemu-monitor-command  vm100 --pretty <span class="string">&#x27;&#123; &quot;execute&quot;: &quot;query-memory-size-summary&quot;&#125;&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;return&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;base-memory&quot;</span>: 1073741824,</span><br><span class="line">    <span class="string">&quot;plugged-memory&quot;</span>: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="string">&quot;libvirt-20&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># details about pluggable memory device</span></span><br><span class="line">$ virsh qemu-monitor-command  vm100 --pretty <span class="string">&#x27;&#123; &quot;execute&quot;: &quot;query-memory-devices&quot;&#125;&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;return&quot;</span>: [</span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="string">&quot;libvirt-21&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Inside guest check memory</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kernel code used is not counted here</span></span><br><span class="line">$ free</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:         948532       77504      785368       12436       85660      750776</span><br><span class="line">Swap:             0           0           0</span><br><span class="line"></span><br><span class="line"><span class="comment"># show result in bytes</span></span><br><span class="line">$ lsmem -a -b</span><br><span class="line">$ lsmem -a</span><br><span class="line">RANGE                                  SIZE  STATE REMOVABLE BLOCK</span><br><span class="line">0x0000000000000000-0x0000000007ffffff  128M online        no     0</span><br><span class="line">0x0000000008000000-0x000000000fffffff  128M online       <span class="built_in">yes</span>     1</span><br><span class="line">0x0000000010000000-0x0000000017ffffff  128M online       <span class="built_in">yes</span>     2</span><br><span class="line">0x0000000018000000-0x000000001fffffff  128M online       <span class="built_in">yes</span>     3</span><br><span class="line">0x0000000020000000-0x0000000027ffffff  128M online       <span class="built_in">yes</span>     4</span><br><span class="line">0x0000000028000000-0x000000002fffffff  128M online        no     5</span><br><span class="line">0x0000000030000000-0x0000000037ffffff  128M online        no     6</span><br><span class="line">0x0000000038000000-0x000000003fffffff  128M online        no     7</span><br><span class="line"></span><br><span class="line">Memory block size:       128M</span><br><span class="line">Total online memory:       1G</span><br><span class="line">Total offline memory:      0B</span><br></pre></td></tr></table></figure>

<h3 id="with-hotplugable-memory-dimm-from-command-line"><a href="#with-hotplugable-memory-dimm-from-command-line" class="headerlink" title="with hotplugable memory(dimm) from command line"></a>with hotplugable memory(dimm) from command line</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">domain</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maxMemory</span> <span class="attr">slots</span>=<span class="string">&quot;4&quot;</span> <span class="attr">unit</span>=<span class="string">&quot;GiB&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">maxMemory</span>&gt;</span>                                 </span><br><span class="line">  <span class="tag">&lt;<span class="name">cpu</span>&gt;</span>                                                                         </span><br><span class="line">    <span class="tag">&lt;<span class="name">topology</span> <span class="attr">sockets</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cores</span>=<span class="string">&quot;2&quot;</span> <span class="attr">threads</span>=<span class="string">&quot;1&quot;</span>/&gt;</span>                               </span><br><span class="line">    <span class="tag">&lt;<span class="name">numa</span>&gt;</span>                                                                      </span><br><span class="line">      <span class="tag">&lt;<span class="name">cell</span> <span class="attr">id</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cpus</span>=<span class="string">&quot;0-1&quot;</span> <span class="attr">memory</span>=<span class="string">&quot;1024&quot;</span> <span class="attr">unit</span>=<span class="string">&quot;MiB&quot;</span>/&gt;</span>         -----&gt; no need to set <span class="tag">&lt;<span class="name">memory</span>&gt;</span><span class="tag">&lt;/<span class="name">memory</span>&gt;</span>, it&#x27;s auto calcualted from <span class="tag">&lt;<span class="name">numa</span>&gt;</span><span class="tag">&lt;/<span class="name">numa</span>&gt;</span> if no <span class="tag">&lt;<span class="name">numa</span>&gt;</span> must set it!!!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">numa</span>&gt;</span>                                                                     </span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpu</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">devices</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">memory</span> <span class="attr">model</span>=<span class="string">&quot;dimm&quot;</span>&gt;</span>                                                       </span><br><span class="line">      <span class="tag">&lt;<span class="name">target</span>&gt;</span>                                                                  </span><br><span class="line">        <span class="tag">&lt;<span class="name">size</span> <span class="attr">unit</span>=<span class="string">&quot;MiB&quot;</span>&gt;</span>256<span class="tag">&lt;/<span class="name">size</span>&gt;</span>                                             </span><br><span class="line">        <span class="tag">&lt;<span class="name">node</span>&gt;</span>0<span class="tag">&lt;/<span class="name">node</span>&gt;</span>                                                          </span><br><span class="line">      <span class="tag">&lt;/<span class="name">target</span>&gt;</span>                                                                 </span><br><span class="line">    <span class="tag">&lt;/<span class="name">memory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">devices</span>&gt;</span></span><br><span class="line"></span><br><span class="line">libvirt auto generate xml /var/run/libvirt/qemu/$domain.xml</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">maxMemory</span> <span class="attr">slots</span>=<span class="string">&#x27;4&#x27;</span> <span class="attr">unit</span>=<span class="string">&#x27;KiB&#x27;</span>&gt;</span>4194304<span class="tag">&lt;/<span class="name">maxMemory</span>&gt;</span>                         </span><br><span class="line">  <span class="tag">&lt;<span class="name">memory</span> <span class="attr">unit</span>=<span class="string">&#x27;KiB&#x27;</span>&gt;</span>1310720<span class="tag">&lt;/<span class="name">memory</span>&gt;</span>              ---&gt; ram(numa) + dimm</span><br><span class="line">  <span class="tag">&lt;<span class="name">currentMemory</span> <span class="attr">unit</span>=<span class="string">&#x27;KiB&#x27;</span>&gt;</span>1310720<span class="tag">&lt;/<span class="name">currentMemory</span>&gt;</span>---&gt; the memory you can see in guest with free = ram(numa + dimm)</span><br></pre></td></tr></table></figure>

<p><strong>check memory device</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># total memory info</span></span><br><span class="line">$ virsh qemu-monitor-command  vm100 --pretty <span class="string">&#x27;&#123; &quot;execute&quot;: &quot;query-memory-size-summary&quot;&#125;&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;return&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;base-memory&quot;</span>: 1073741824,</span><br><span class="line">    <span class="string">&quot;plugged-memory&quot;</span>: 268435456</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="string">&quot;libvirt-19&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># details about pluggable memory device</span></span><br><span class="line">$ virsh qemu-monitor-command  vm100 --pretty <span class="string">&#x27;&#123; &quot;execute&quot;: &quot;query-memory-devices&quot;&#125;&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;return&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;dimm&quot;</span>,</span><br><span class="line">      <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;memdev&quot;</span>: <span class="string">&quot;/objects/memdimm0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hotplugged&quot;</span>: <span class="literal">false</span>, -------&gt;as hotpluggable memory device is from <span class="built_in">command</span> line(xml) not QMP <span class="built_in">command</span>, so it is not hotplugged!!</span><br><span class="line">        <span class="string">&quot;addr&quot;</span>: 4294967296,</span><br><span class="line">        <span class="string">&quot;hotpluggable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 268435456,</span><br><span class="line">        <span class="string">&quot;slot&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;node&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;dimm0&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="string">&quot;libvirt-20&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Inside guest check memory</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kernel code used is not counted here</span></span><br><span class="line">$ free</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        1210676       82836     1042392       12432       85448     1092196</span><br><span class="line">Swap:             0           0           0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># lsmem -a -b</span></span><br><span class="line">$ lsmem</span><br><span class="line">RANGE                                  SIZE  STATE REMOVABLE BLOCK</span><br><span class="line">0x0000000000000000-0x0000000007ffffff  128M online        no     0</span><br><span class="line">0x0000000008000000-0x000000000fffffff  128M online       <span class="built_in">yes</span>     1</span><br><span class="line">0x0000000010000000-0x0000000017ffffff  128M online       <span class="built_in">yes</span>     2</span><br><span class="line">0x0000000018000000-0x000000001fffffff  128M online        no     3</span><br><span class="line">0x0000000020000000-0x0000000027ffffff  128M online        no     4</span><br><span class="line">0x0000000028000000-0x000000002fffffff  128M online        no     5</span><br><span class="line">0x0000000030000000-0x0000000037ffffff  128M online        no     6</span><br><span class="line">0x0000000038000000-0x000000003fffffff  128M online        no     7</span><br><span class="line">0x0000000100000000-0x0000000107ffffff  128M online        no    32</span><br><span class="line">0x0000000108000000-0x000000010fffffff  128M online        no    33</span><br><span class="line"></span><br><span class="line">Memory block size:       128M</span><br><span class="line">Total online memory:     1.3G</span><br><span class="line">Total offline memory:      0B</span><br></pre></td></tr></table></figure>

<h3 id="with-hotplugable-memory-nvdimm-from-command-line"><a href="#with-hotplugable-memory-nvdimm-from-command-line" class="headerlink" title="with hotplugable memory(nvdimm) from command line"></a>with hotplugable memory(nvdimm) from command line</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">domain</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maxMemory</span> <span class="attr">slots</span>=<span class="string">&quot;4&quot;</span> <span class="attr">unit</span>=<span class="string">&quot;GiB&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">maxMemory</span>&gt;</span>                                 </span><br><span class="line">  <span class="tag">&lt;<span class="name">cpu</span>&gt;</span>                                                                         </span><br><span class="line">    <span class="tag">&lt;<span class="name">topology</span> <span class="attr">sockets</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cores</span>=<span class="string">&quot;2&quot;</span> <span class="attr">threads</span>=<span class="string">&quot;1&quot;</span>/&gt;</span>                               </span><br><span class="line">    <span class="tag">&lt;<span class="name">numa</span>&gt;</span>                                                                      </span><br><span class="line">      <span class="tag">&lt;<span class="name">cell</span> <span class="attr">id</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cpus</span>=<span class="string">&quot;0-1&quot;</span> <span class="attr">memory</span>=<span class="string">&quot;1024&quot;</span> <span class="attr">unit</span>=<span class="string">&quot;MiB&quot;</span>/&gt;</span>         -----&gt; no need to set <span class="tag">&lt;<span class="name">memory</span>&gt;</span><span class="tag">&lt;/<span class="name">memory</span>&gt;</span>, it&#x27;s auto calcualted from <span class="tag">&lt;<span class="name">numa</span>&gt;</span><span class="tag">&lt;/<span class="name">numa</span>&gt;</span> if no <span class="tag">&lt;<span class="name">numa</span>&gt;</span> must set it!!!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">numa</span>&gt;</span>                                                                     </span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpu</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">devices</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">memory</span> <span class="attr">model</span>=<span class="string">&quot;dimm&quot;</span>&gt;</span>                                                       </span><br><span class="line">      <span class="tag">&lt;<span class="name">target</span>&gt;</span>                                                                  </span><br><span class="line">        <span class="tag">&lt;<span class="name">size</span> <span class="attr">unit</span>=<span class="string">&quot;MiB&quot;</span>&gt;</span>256<span class="tag">&lt;/<span class="name">size</span>&gt;</span>                                             </span><br><span class="line">        <span class="tag">&lt;<span class="name">node</span>&gt;</span>0<span class="tag">&lt;/<span class="name">node</span>&gt;</span>                                                          </span><br><span class="line">      <span class="tag">&lt;/<span class="name">target</span>&gt;</span>                                                                 </span><br><span class="line">    <span class="tag">&lt;/<span class="name">memory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">memory</span> <span class="attr">model</span>=<span class="string">&quot;nvdimm&quot;</span>&gt;</span>                                                     </span><br><span class="line">      <span class="tag">&lt;<span class="name">source</span>&gt;</span>                                                                  </span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/tmp/nvdimm<span class="tag">&lt;/<span class="name">path</span>&gt;</span>                                                </span><br><span class="line">      <span class="tag">&lt;/<span class="name">source</span>&gt;</span>                                                                 </span><br><span class="line">      <span class="tag">&lt;<span class="name">target</span>&gt;</span>                                                                  </span><br><span class="line">        <span class="tag">&lt;<span class="name">size</span> <span class="attr">unit</span>=<span class="string">&quot;MiB&quot;</span>&gt;</span>256<span class="tag">&lt;/<span class="name">size</span>&gt;</span>                                             </span><br><span class="line">        <span class="tag">&lt;<span class="name">node</span>&gt;</span>0<span class="tag">&lt;/<span class="name">node</span>&gt;</span>                                                          </span><br><span class="line">      <span class="tag">&lt;/<span class="name">target</span>&gt;</span>                                                                 </span><br><span class="line">    <span class="tag">&lt;/<span class="name">memory</span>&gt;</span>            </span><br><span class="line">  <span class="tag">&lt;/<span class="name">devices</span>&gt;</span></span><br><span class="line"></span><br><span class="line">libvirt auto generate xml /var/run/libvirt/qemu/$domain.xml</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">maxMemory</span> <span class="attr">slots</span>=<span class="string">&#x27;4&#x27;</span> <span class="attr">unit</span>=<span class="string">&#x27;KiB&#x27;</span>&gt;</span>4194304<span class="tag">&lt;/<span class="name">maxMemory</span>&gt;</span>                         </span><br><span class="line">  <span class="tag">&lt;<span class="name">memory</span> <span class="attr">unit</span>=<span class="string">&#x27;KiB&#x27;</span>&gt;</span>1572864<span class="tag">&lt;/<span class="name">memory</span>&gt;</span>               ----&gt;memory include ram(numa)+dimm+nvdimm</span><br><span class="line">  <span class="tag">&lt;<span class="name">currentMemory</span> <span class="attr">unit</span>=<span class="string">&#x27;KiB&#x27;</span>&gt;</span>1310720<span class="tag">&lt;/<span class="name">currentMemory</span>&gt;</span> ----&gt;currentMemory not include nvdimm, but include dimm, this is the value you can see with `lsmem -ab`</span><br></pre></td></tr></table></figure>

<p><strong>check memory device</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># total memory info</span></span><br><span class="line">$ virsh qemu-monitor-command  vm100 --pretty <span class="string">&#x27;&#123; &quot;execute&quot;: &quot;query-memory-size-summary&quot;&#125;&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;return&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;base-memory&quot;</span>: 1073741824,</span><br><span class="line">    <span class="string">&quot;plugged-memory&quot;</span>: 536870912 ----&gt;count both dimm and nvdimm</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="string">&quot;libvirt-19&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># details about pluggable memory device(dimm and nvdim)</span></span><br><span class="line">$ virsh qemu-monitor-command  vm100 --pretty <span class="string">&#x27;&#123; &quot;execute&quot;: &quot;query-memory-devices&quot;&#125;&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;return&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;dimm&quot;</span>,</span><br><span class="line">      <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;memdev&quot;</span>: <span class="string">&quot;/objects/memdimm0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hotplugged&quot;</span>: <span class="literal">false</span>, ----&gt;from <span class="built_in">command</span> line</span><br><span class="line">        <span class="string">&quot;addr&quot;</span>: 4294967296,</span><br><span class="line">        <span class="string">&quot;hotpluggable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 268435456,</span><br><span class="line">        <span class="string">&quot;slot&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;node&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;dimm0&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;nvdimm&quot;</span>,</span><br><span class="line">      <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;memdev&quot;</span>: <span class="string">&quot;/objects/memnvdimm1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hotplugged&quot;</span>: <span class="literal">false</span>,----&gt;from <span class="built_in">command</span> line</span><br><span class="line">        <span class="string">&quot;addr&quot;</span>: 4563402752,</span><br><span class="line">        <span class="string">&quot;hotpluggable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 268435456,</span><br><span class="line">        <span class="string">&quot;slot&quot;</span>: 1,</span><br><span class="line">        <span class="string">&quot;node&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;nvdimm1&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="string">&quot;libvirt-20&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Inside guest check memory</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kernel code used is not counted here</span></span><br><span class="line">$ free</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        1210676       82836     1042392       12432       85448     1092196</span><br><span class="line">Swap:             0           0           0</span><br><span class="line"><span class="comment"># total memory is 1.3G as well, nvdimm is not counted</span></span><br><span class="line">$ lsmem -a</span><br><span class="line">RANGE                                  SIZE  STATE REMOVABLE BLOCK</span><br><span class="line">0x0000000000000000-0x0000000007ffffff  128M online        no     0</span><br><span class="line">0x0000000008000000-0x000000000fffffff  128M online       <span class="built_in">yes</span>     1</span><br><span class="line">0x0000000010000000-0x0000000017ffffff  128M online       <span class="built_in">yes</span>     2</span><br><span class="line">0x0000000018000000-0x000000001fffffff  128M online       <span class="built_in">yes</span>     3</span><br><span class="line">0x0000000020000000-0x0000000027ffffff  128M online       <span class="built_in">yes</span>     4</span><br><span class="line">0x0000000028000000-0x000000002fffffff  128M online        no     5</span><br><span class="line">0x0000000030000000-0x0000000037ffffff  128M online        no     6</span><br><span class="line">0x0000000038000000-0x000000003fffffff  128M online        no     7</span><br><span class="line">0x0000000100000000-0x0000000107ffffff  128M online        no    32</span><br><span class="line">0x0000000108000000-0x000000010fffffff  128M online        no    33</span><br><span class="line"></span><br><span class="line">Memory block size:       128M</span><br><span class="line">Total online memory:     1.3G</span><br><span class="line">Total offline memory:      0B</span><br><span class="line"></span><br><span class="line"><span class="comment"># nvdimm is seen as block by guest /dev/pmem0!!!</span></span><br><span class="line"><span class="variable">$fdisk</span> -l</span><br><span class="line"></span><br><span class="line">Disk /dev/pmem0: 268 MB, 268435456 bytes, 524288 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 4096 bytes</span><br><span class="line">I/O size (minimum/optimal): 4096 bytes / 4096 bytes</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="with-hotpluggable-memory-device-from-QMP"><a href="#with-hotpluggable-memory-device-from-QMP" class="headerlink" title="with hotpluggable memory device from QMP"></a>with hotpluggable memory device from QMP</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$virsh</span> qemu-monitor-command  vm100 --pretty <span class="string">&#x27;&#123; &quot;execute&quot;: &quot;object-add&quot;, &quot;arguments&quot;:&#123;&quot;qom-type&quot;:&quot;memory-backend-ram&quot;,&quot;id&quot;:&quot;mem-dimm2&quot;,&quot;props&quot;:&#123;&quot;size&quot;:268435456&#125;&#125;&#125;&#x27;</span></span><br><span class="line"><span class="variable">$virsh</span> qemu-monitor-command  vm100 --pretty <span class="string">&#x27;&#123; &quot;execute&quot;: &quot;device_add&quot;, &quot;arguments&quot;:&#123;&quot;driver&quot;:&quot;pc-dimm&quot;,&quot;id&quot;:&quot;dm2&quot;,&quot;memdev&quot;:&quot;mem-dimm2&quot;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$virsh</span> qemu-monitor-command  vm100 --pretty <span class="string">&#x27;&#123; &quot;execute&quot;: &quot;query-memory-devices&quot;&#125;&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;return&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;dimm&quot;</span>,</span><br><span class="line">      <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;memdev&quot;</span>: <span class="string">&quot;/objects/memdimm0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hotplugged&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;addr&quot;</span>: 4294967296,</span><br><span class="line">        <span class="string">&quot;hotpluggable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 268435456,</span><br><span class="line">        <span class="string">&quot;slot&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;node&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;dimm0&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;nvdimm&quot;</span>,</span><br><span class="line">      <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;memdev&quot;</span>: <span class="string">&quot;/objects/memnvdimm1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hotplugged&quot;</span>: <span class="literal">false</span>,--------&gt;can NOT be removed from QMP as it is added from <span class="built_in">command</span> line</span><br><span class="line">        <span class="string">&quot;addr&quot;</span>: 4563402752,</span><br><span class="line">        <span class="string">&quot;hotpluggable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 268435456,</span><br><span class="line">        <span class="string">&quot;slot&quot;</span>: 1,</span><br><span class="line">        <span class="string">&quot;node&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;nvdimm1&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;dimm&quot;</span>,</span><br><span class="line">      <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;memdev&quot;</span>: <span class="string">&quot;/objects/mem-dimm2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hotplugged&quot;</span>: <span class="literal">true</span>, -----&gt;this can be removed from QMP <span class="built_in">command</span>!!!</span><br><span class="line">        <span class="string">&quot;addr&quot;</span>: 4831838208,</span><br><span class="line">        <span class="string">&quot;hotpluggable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: 268435456,</span><br><span class="line">        <span class="string">&quot;slot&quot;</span>: 2,</span><br><span class="line">        <span class="string">&quot;node&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;dm2&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="string">&quot;libvirt-23&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># insde guest</span></span><br><span class="line">$ free</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        1472816       94176     1292552       12440       86088     1339132</span><br><span class="line">Swap:             0           0           0</span><br><span class="line"></span><br><span class="line"><span class="comment"># total memory is increased after add a memory device</span></span><br><span class="line">$ lsmem -a</span><br><span class="line">RANGE                                  SIZE  STATE REMOVABLE BLOCK</span><br><span class="line">0x0000000000000000-0x0000000007ffffff  128M online        no     0</span><br><span class="line">0x0000000008000000-0x000000000fffffff  128M online       <span class="built_in">yes</span>     1</span><br><span class="line">0x0000000010000000-0x0000000017ffffff  128M online       <span class="built_in">yes</span>     2</span><br><span class="line">0x0000000018000000-0x000000001fffffff  128M online       <span class="built_in">yes</span>     3</span><br><span class="line">0x0000000020000000-0x0000000027ffffff  128M online       <span class="built_in">yes</span>     4</span><br><span class="line">0x0000000028000000-0x000000002fffffff  128M online        no     5</span><br><span class="line">0x0000000030000000-0x0000000037ffffff  128M online        no     6</span><br><span class="line">0x0000000038000000-0x000000003fffffff  128M online        no     7</span><br><span class="line">0x0000000100000000-0x0000000107ffffff  128M online        no    32</span><br><span class="line">0x0000000108000000-0x000000010fffffff  128M online        no    33</span><br><span class="line">0x0000000120000000-0x0000000127ffffff  128M online       <span class="built_in">yes</span>    36</span><br><span class="line">0x0000000128000000-0x000000012fffffff  128M online       <span class="built_in">yes</span>    37</span><br><span class="line"></span><br><span class="line">Memory block size:       128M</span><br><span class="line">Total online memory:     1.5G</span><br><span class="line">Total offline memory:      0B</span><br></pre></td></tr></table></figure>

<h2 id="move-qemu-process-launched-outside-to-libvirtd-control"><a href="#move-qemu-process-launched-outside-to-libvirtd-control" class="headerlink" title="move qemu-process launched outside to libvirtd control"></a>move qemu-process launched outside to libvirtd control</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Attach an externally launched QEMU process to the libvirt QEMU driver. </span></span><br><span class="line"><span class="comment"># The QEMU process must have been created with a monitor connection using the UNIX driver. </span></span><br><span class="line"><span class="comment"># Ideally the process will also have had the &#x27;-name&#x27; argument specified. </span></span><br><span class="line"></span><br><span class="line">$ qemu-kvm -cdrom ~/demo.iso \</span><br><span class="line">    -monitor unix:/tmp/demo,server,nowait \</span><br><span class="line">    -name foo \</span><br><span class="line">    -uuid cece4f9f-dff0-575d-0e8e-01fe380f12ea  &amp;</span><br><span class="line">$ QEMUPID=$!</span><br><span class="line">$ virsh qemu-attach <span class="variable">$QEMUPID</span></span><br></pre></td></tr></table></figure>
<h2 id="limit-IO"><a href="#limit-IO" class="headerlink" title="limit IO"></a>limit IO</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># blkdeviotune - Set or query a block device I/O tuning parameters</span></span><br><span class="line"><span class="comment">#  OPTIONS</span></span><br><span class="line"><span class="comment">#    [--domain] &lt;string&gt;  domain name, id or uuid</span></span><br><span class="line"><span class="comment">#    [--device] &lt;string&gt;  block device</span></span><br><span class="line"><span class="comment">#    --total-bytes-sec &lt;number&gt;  total throughput limit, as scaled integer (default bytes)</span></span><br><span class="line"><span class="comment">#    --read-bytes-sec &lt;number&gt;  read throughput limit, as scaled integer (default bytes)</span></span><br><span class="line"><span class="comment">#    --write-bytes-sec &lt;number&gt;  write throughput limit, as scaled integer (default bytes)</span></span><br><span class="line"><span class="comment">#    --total-iops-sec &lt;number&gt;  total I/O operations limit per second</span></span><br><span class="line"><span class="comment">#    --read-iops-sec &lt;number&gt;  read I/O operations limit per second</span></span><br><span class="line"><span class="comment">#    --write-iops-sec &lt;number&gt;  write I/O operations limit per second</span></span><br><span class="line"><span class="comment">#    --total-bytes-sec-max &lt;number&gt;  total max, as scaled integer (default bytes)</span></span><br><span class="line"><span class="comment">#    --read-bytes-sec-max &lt;number&gt;  read max, as scaled integer (default bytes)</span></span><br><span class="line"><span class="comment">#    --write-bytes-sec-max &lt;number&gt;  write max, as scaled integer (default bytes)</span></span><br><span class="line"><span class="comment">#    --total-iops-sec-max &lt;number&gt;  total I/O operations max</span></span><br><span class="line"><span class="comment">#    --read-iops-sec-max &lt;number&gt;  read I/O operations max</span></span><br><span class="line"><span class="comment">#    --write-iops-sec-max &lt;number&gt;  write I/O operations max</span></span><br><span class="line"><span class="comment">#    --size-iops-sec &lt;number&gt;  I/O size in bytes</span></span><br><span class="line"><span class="comment">#    --group-name &lt;string&gt;  group name to share I/O quota between multiple drives</span></span><br><span class="line"><span class="comment">#    --total-bytes-sec-max-length &lt;number&gt;  duration in seconds to allow total max bytes</span></span><br><span class="line"><span class="comment">#    --read-bytes-sec-max-length &lt;number&gt;  duration in seconds to allow read max bytes</span></span><br><span class="line"><span class="comment">#    --write-bytes-sec-max-length &lt;number&gt;  duration in seconds to allow write max bytes</span></span><br><span class="line"><span class="comment">#    --total-iops-sec-max-length &lt;number&gt;  duration in seconds to allow total I/O operations max</span></span><br><span class="line"><span class="comment">#    --read-iops-sec-max-length &lt;number&gt;  duration in seconds to allow read I/O operations max</span></span><br><span class="line"><span class="comment">#    --write-iops-sec-max-length &lt;number&gt;  duration in seconds to allow write I/O operations max</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    --config         affect next boot</span></span><br><span class="line"><span class="comment">#    --live           affect running domain</span></span><br><span class="line"><span class="comment">#    --current        affect current domain</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get io parameters of given disk</span></span><br><span class="line"><span class="variable">$virsh</span> blkdeviotune vm100 vda</span><br><span class="line">total_bytes_sec: 0</span><br><span class="line">read_bytes_sec : 83886080</span><br><span class="line">write_bytes_sec: 83886080</span><br><span class="line">total_iops_sec : 0</span><br><span class="line">read_iops_sec  : 2000</span><br><span class="line">write_iops_sec : 2000</span><br><span class="line">total_bytes_sec_max: 0</span><br><span class="line">read_bytes_sec_max: 0</span><br><span class="line">write_bytes_sec_max: 0</span><br><span class="line">total_iops_sec_max: 0</span><br><span class="line">read_iops_sec_max: 0</span><br><span class="line">write_iops_sec_max: 0</span><br><span class="line">size_iops_sec  : 0</span><br><span class="line">group_name     : drive-virtio-disk0</span><br><span class="line">total_bytes_sec_max_length: 0</span><br><span class="line">read_bytes_sec_max_length: 0</span><br><span class="line">write_bytes_sec_max_length: 0</span><br><span class="line">total_iops_sec_max_length: 0</span><br><span class="line">read_iops_sec_max_length: 0</span><br><span class="line">write_iops_sec_max_length: 0</span><br><span class="line"></span><br><span class="line"><span class="variable">$virsh</span> blkdeviotune vm100 vda --total-iops-sec 5000</span><br><span class="line"></span><br><span class="line"><span class="comment"># check result</span></span><br><span class="line"><span class="variable">$virsh</span> blkdeviotune vm100 vda</span><br><span class="line">total_bytes_sec: 0</span><br><span class="line">read_bytes_sec : 83886080</span><br><span class="line">write_bytes_sec: 83886080</span><br><span class="line">total_iops_sec : 5000----&gt;changed</span><br><span class="line">read_iops_sec  : 0</span><br><span class="line">write_iops_sec : 0</span><br><span class="line">total_bytes_sec_max: 0</span><br><span class="line">read_bytes_sec_max: 0</span><br><span class="line">write_bytes_sec_max: 0</span><br><span class="line">total_iops_sec_max: 0</span><br><span class="line">read_iops_sec_max: 0</span><br><span class="line">write_iops_sec_max: 0</span><br><span class="line">size_iops_sec  : 0</span><br><span class="line">group_name     : drive-virtio-disk0</span><br><span class="line">total_bytes_sec_max_length: 0</span><br><span class="line">read_bytes_sec_max_length: 0</span><br><span class="line">write_bytes_sec_max_length: 0</span><br><span class="line">total_iops_sec_max_length: 0</span><br><span class="line">read_iops_sec_max_length: 0</span><br><span class="line">write_iops_sec_max_length: 0</span><br></pre></td></tr></table></figure>
<h2 id="get-device-property-value"><a href="#get-device-property-value" class="headerlink" title="get device property value"></a>get device property value</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get property of given device</span></span><br><span class="line"><span class="variable">$virsh</span> qemu-monitor-command --hmp  vm100 info qom-tree</span><br><span class="line"><span class="variable">$virsh</span> qemu-monitor-command vm100 --pretty <span class="string">&#x27;&#123;&quot;execute&quot;: &quot;qom-get&quot;, &quot;arguments&quot;: &#123;&quot;path&quot;: &quot;/machine/peripheral/net1&quot;, &quot;property&quot;: &quot;mq&quot;&#125;&#125;&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;return&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="string">&quot;libvirt-39&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="how-to-login-vm-by-serial-console-for"><a href="#how-to-login-vm-by-serial-console-for" class="headerlink" title="how to login vm by serial console for"></a>how to login vm by serial console for</h2><p>To make <code>virsh console vm100</code> work, you have to do these steps by order</p>
<ul>
<li><p>enable console from boot parameter inside vm <code>vm#grubby --update-kernel=ALL --args=&quot;console=ttyS0&quot; vm#reboot</code></p>
<ul>
<li><strong>NOTE: without this you can still use console but lost early boot message</strong></li>
</ul>
</li>
<li><p>enable getty on ttyS0 inside vm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># touch /etc/systemd/system/serial-getty@ttyS0.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Serial Getty on %I</span><br><span class="line">Documentation=man:agetty(8) man:systemd-getty-generator(8)</span><br><span class="line">Documentation=http://0pointer.de/blog/projects/serial-console.html</span><br><span class="line">BindsTo=dev-%i.device</span><br><span class="line">After=dev-%i.device systemd-user-sessions.service plymouth-quit-wait.service</span><br><span class="line">After=rc-local.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># If additional gettys are spawned during boot then we should make</span></span><br><span class="line"><span class="comment"># sure that this is synchronized before getty.target, even though</span></span><br><span class="line"><span class="comment"># getty.target didn&#x27;t actually pull it in.</span></span><br><span class="line">Before=getty.target</span><br><span class="line">IgnoreOnIsolate=<span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=-/sbin/agetty --keep-baud 115200,38400,9600 %I <span class="variable">$TERM</span></span><br><span class="line">Type=idle</span><br><span class="line">Restart=always</span><br><span class="line">UtmpIdentifier=%I</span><br><span class="line">TTYPath=/dev/%I</span><br><span class="line">TTYReset=<span class="built_in">yes</span></span><br><span class="line">TTYVHangup=<span class="built_in">yes</span></span><br><span class="line">KillMode=process</span><br><span class="line">IgnoreSIGPIPE=no</span><br><span class="line">SendSIGHUP=<span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=getty.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># ln -s /etc/systemd/system/serial-getty@ttyS0.service /etc/systemd/system/getty.target.wants/</span></span><br><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl start serial-getty@ttyS0.service</span></span><br><span class="line"><span class="comment"># systemctl enable serial-getty@ttyS0.service</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>NOTE: without this you can still use console, but no login promt</strong></li>
</ul>
</li>
<li><p>virsh stop vm100</p>
</li>
<li><p>edit <code>/etc/libvirt/qemu/vm100.xml</code> to add console(serial type) device</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">console</span> <span class="attr">type</span>=<span class="string">&#x27;pty&#x27;</span>&gt;</span> <span class="comment">&lt;!--on host auto select one--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">type</span>=<span class="string">&#x27;serial&#x27;</span> <span class="attr">port</span>=<span class="string">&#x27;0&#x27;</span>/&gt;</span> <span class="comment">&lt;!--insde vm /dev/ttyS0--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&#x27;console0&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>service libvirtd restart</p>
</li>
<li><p>virsh start vm100</p>
<ul>
<li>inside vm <code>$ echo hello &gt;/dev/ttyS0</code></li>
</ul>
</li>
<li><p>virsh console vm100</p>
<ul>
<li>without kernel parameter, you can NOT seeing <code>Starting ...when boots</code></li>
<li>without getty, you can NOT seeing login promt <code>centos76 login: </code></li>
<li>got <code>hello</code> here</li>
</ul>
</li>
</ul>
<h2 id="how-to-access-console-x2F-serial-without-virsh-command"><a href="#how-to-access-console-x2F-serial-without-virsh-command" class="headerlink" title="how to access console&#x2F;serial without virsh command"></a>how to access console&#x2F;serial without virsh command</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep redirect  /var/log/libvirt/qemu/vm100.<span class="built_in">log</span></span><br><span class="line">115:2023-03-24T06:28:28.402166Z qemu-kvm: -chardev pty,<span class="built_in">id</span>=charconsole1: char device redirected to /dev/pts/5 (label charconsole1)</span><br><span class="line"></span><br><span class="line">$ screen /dev/pts/5</span><br><span class="line"></span><br><span class="line"><span class="comment"># quit from console(terminate screen session)</span></span><br><span class="line">ctrl + a, <span class="keyword">then</span> press \</span><br></pre></td></tr></table></figure>

<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://libvirt.org/format.html">VM XML format</a></li>
<li><a href="https://libvirt.org/sources/virshcmdref/html-single/">virsh reference</a></li>
<li><a href="https://wiki.libvirt.org/page/Main_Page">libvirt Wiki</a></li>
<li><a href="https://wiki.libvirt.org/page/FAQ">libvirt FAQ</a></li>
<li><a href="https://libvirt.org/api.html">libvirt API concepts</a></li>
<li><a href="https://libvirt.org/html/">libvirt API in C</a></li>
<li><a href="https://libvirt.org/kbase/debuglogs.html">libvirt debug logs</a></li>
<li><a href="https://kashyapc.fedorapeople.org/virt/lc-2012/snapshots-handout.html">libvirt snapshot</a></li>
<li><a href="https://fedoraproject.org/wiki/How_to_debug_Virtualization_problems">virtulization troubleshooting</a></li>
</ul>
]]></content>
      <categories>
        <category>libvirt</category>
      </categories>
      <tags>
        <tag>libvirt</tag>
        <tag>cloud</tag>
        <tag>vm</tag>
      </tags>
  </entry>
  <entry>
    <title>linux_kernel_vxlan</title>
    <url>/2021/06/22/linux-kernel-vxlan/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>linux-ansible-guide</title>
    <url>/2022/09/30/linux-ansible-guide/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Ansible is an open source IT automation engine that automates provisioning, configuration management, application deployment, orchestration, and many other IT processes.</p>
<p><img src="https://docs.ansible.com/ansible/latest/_images/ansible_basic.svg" alt="basic arch"></p>
<p>Ansible works by connecting to your nodes and pushing out small programs—called modules—to these nodes. Modules are used to accomplish automation tasks in Ansible. These programs are written to be resource models of the desired state of the system. Ansible then executes these modules and removes them when finished.</p>
<span id="more"></span>

<p><img src="/../images/linux/ansible_arch.png"></p>
<p><strong>terminology:</strong></p>
<ul>
<li>Control node: the host on which you use Ansible to execute tasks on the managed nodes</li>
<li>Managed node: a host that is configured by the control node</li>
<li>Host inventory: a list of managed nodes</li>
<li>Ad-hoc command: a simple one-off task</li>
<li>Playbook: a set of repeatable tasks for more complex configurations</li>
<li>Module: code that performs a particular common task such as adding a user, installing a package, etc.</li>
</ul>
<h1 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ansible</span> --version</span><br><span class="line">ansible 2.9.27</span><br><span class="line">  config file = /etc/ansible/ansible.cfg ------&gt; the cfg used</span><br><span class="line">  configured module search path = [u<span class="string">&#x27;/root/.ansible/plugins/modules&#x27;</span>, u<span class="string">&#x27;/usr/share/ansible/plugins/modules&#x27;</span>]</span><br><span class="line">  ansible python module location = /usr/lib/python2.7/site-packages/ansible</span><br><span class="line">  executable location = /usr/bin/ansible</span><br><span class="line">  python version = 2.7.5 (default, Jun 28 2022, 15:30:04) [GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># get available modules</span></span><br><span class="line"><span class="variable">$ansible</span>-doc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># list all hosts</span></span><br><span class="line"><span class="variable">$ansible</span> all --list-hosts</span><br><span class="line"><span class="comment"># list hosts in web group</span></span><br><span class="line"><span class="variable">$ansible</span> web --list-hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># get help and example for each module</span></span><br><span class="line"><span class="variable">$ansible</span>-doc copy</span><br><span class="line"><span class="variable">$ansible</span>-doc shell</span><br><span class="line"></span><br><span class="line"><span class="comment"># show inventory graph(higher ansible)</span></span><br><span class="line"><span class="variable">$ansible</span>-inventory -i host --graph</span><br><span class="line">@all:</span><br><span class="line">  |--@ungrouped:</span><br><span class="line">  |  |--172.17.0.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># show in json format</span></span><br><span class="line"><span class="variable">$ansible</span>-inventory -i host --list</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_meta&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;hostvars&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">&quot;all&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;ungrouped&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">&quot;ungrouped&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;hosts&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;172.17.0.3&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="conf"><a href="#conf" class="headerlink" title="conf"></a>conf</h2><p>default configuration file is <code>/etc/ansible/ansible.cfg</code></p>
<p>The <code>order in which a configuration file is located</code> is as follow.</p>
<ul>
<li>ANSIBLE_CONFIG (environment variable)</li>
<li>ansible.cfg (per directory)</li>
<li>~&#x2F;.ansible.cfg (home directory)</li>
<li>&#x2F;etc&#x2F;ansible&#x2F;ansible.cfg (global)</li>
</ul>
<p><a href="https://docs.ansible.com/ansible/latest/reference_appendices/config.html">All parameters of conf</a> and <a href="https://github.com/ansible/ansible/blob/stable-2.9/examples/ansible.cfg">conf example</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dump the current setting</span></span><br><span class="line"><span class="variable">$ansible</span>-config dump</span><br><span class="line"></span><br><span class="line"><span class="comment"># Only show configurations that have changed from the default</span></span><br><span class="line"><span class="variable">$ansible</span>-config dump --only-changed</span><br><span class="line"></span><br><span class="line"><span class="variable">$cat</span> ansible.cfg</span><br><span class="line">[defaults]</span><br><span class="line"><span class="comment"># thirdpart to speed up ansible, see ref below</span></span><br><span class="line">strategy_plugins = /xxx/mitogen-0.3.3/ansible_mitogen/plugins/strategy</span><br><span class="line">strategy = mitogen_linear</span><br><span class="line"></span><br><span class="line"><span class="comment"># the actual number may be less than this(max value) due to cpu and memory used for each fork</span></span><br><span class="line"><span class="comment"># suggest: 30-50 for server and less than total cpu number</span></span><br><span class="line">forks          = 50</span><br><span class="line"><span class="comment"># do not gather by default, must say gather_facts: True</span></span><br><span class="line">gathering      = explicit</span><br><span class="line"><span class="comment"># SSH timeout</span></span><br><span class="line"><span class="built_in">timeout</span> = 60</span><br><span class="line">log_path = ./log/ansible.log</span><br><span class="line"></span><br><span class="line">[ssh_connection]</span><br><span class="line"><span class="comment"># It can result in a very significant performance improvement when enabled. However this conflicts with privilege escalation (become). For example, when using ‘sudo:’ operations you must first disable ‘requiretty’ in /etc/sudoers on all managed hosts, which is why it is disabled by default</span></span><br><span class="line">pipelining = True</span><br></pre></td></tr></table></figure>

<h2 id="inventory"><a href="#inventory" class="headerlink" title="inventory"></a>inventory</h2><p>The inventory file contains the <code>IP address or DNS information</code> about the list of managed hosts we want to work with.</p>
<p>Inventory file has a concept called grouping where you will be grouping your resources and run tasks against that group. You can create the inventory file without using groups. In this case, Ansible will use two <code>default groups &quot;all&quot; and &quot;ungrouped&quot;.</code></p>
<ul>
<li>ALL GROUP - All resources that are available in the inventory file by default will be assigned to all group.</li>
<li>UNGROUPED - Resources that are not part of any user-defined groups will be automatically assigned to the ungrouped group</li>
</ul>
<p><strong>inventory path</strong><br>default: <code>/etc/ansible/hosts</code> can be changed in the <code>ansible.cfg</code> Or  by using the <code>-i option</code> on the ansible command</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cat</span> ansible.cfg</span><br><span class="line">[defaults]</span><br><span class="line">inventory = <span class="variable">$HOME</span>/hosts</span><br><span class="line"></span><br><span class="line"><span class="variable">$ansible</span> -i xxx/hosts</span><br></pre></td></tr></table></figure>

<p><strong>inventory file example</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># must /etc/hosts for vm1, vm2, vm3 and vm4</span></span><br><span class="line">web1</span><br><span class="line">[web]</span><br><span class="line">vm2</span><br><span class="line">vm3</span><br><span class="line"></span><br><span class="line">[db]</span><br><span class="line">192.168.1.2</span><br><span class="line"></span><br><span class="line">[<span class="built_in">log</span>]</span><br><span class="line">192.168.1.100</span><br><span class="line"><span class="comment"># use inventory from default</span></span><br><span class="line"><span class="variable">$ansible</span> web -m ping</span><br><span class="line"></span><br><span class="line"><span class="comment"># use explicit inventory from a host</span></span><br><span class="line"><span class="variable">$ansible</span> web -m ping -i ./hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># use explicit inventory from command line</span></span><br><span class="line"><span class="variable">$ansible</span> all  -i 172.17.0.2,172.17.0.3 -m ping</span><br><span class="line"><span class="comment"># NOTE the , is needed for one host</span></span><br><span class="line"><span class="variable">$ansible</span> all  -i 172.17.0.2, -m ping</span><br></pre></td></tr></table></figure>
<h2 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h2><p>Modules (also referred to as “task plugins” or “library plugins”) are discrete units of code that can be used from the command line or in a playbook task. Ansible executes each module, usually on the remote managed node, and collects return values.</p>
<p>Each module supports taking arguments. <code>Nearly all modules take key=value arguments, space delimited</code>. Some modules take no arguments, and the <code>command/shell modules simply take the string of the command you want to run.</code></p>
<p>Modules should be idempotent, and should avoid making any changes if they detect that the current state matches the desired final state. When used in an Ansible playbook, <code>modules can trigger ‘change events’ in the form of notifying handlers to run additional tasks</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># module from command line</span></span><br><span class="line"><span class="variable">$ansible</span> webservers -m service -a <span class="string">&quot;name=httpd state=started&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fork 100 process to run</span></span><br><span class="line"><span class="variable">$ansible</span> webservers -m ping -f 100</span><br><span class="line"><span class="variable">$ansible</span> webservers -m <span class="built_in">command</span> -a <span class="string">&quot;/sbin/reboot -t now&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># module from playbook</span></span><br><span class="line"><span class="variable">$cat</span> play.yml</span><br><span class="line">- name: restart webserver</span><br><span class="line">  service:  <span class="comment"># module</span></span><br><span class="line">    name: httpd  <span class="comment"># parameter</span></span><br><span class="line">    state: restarted <span class="comment"># parameter</span></span><br></pre></td></tr></table></figure>

<p>Top modules ares <code>file, include, template, command, service, shell, lineinfile, copy, yum, user, systemd, cron</code> etc.</p>
<ul>
<li><p><code>file</code>:  Creating different new files is a common task in the server scripts. In Ansible tools, you will find various methods for creating a new file. You can even set different group permission, assign an owner to the file; create a file with content, and more. It sets attributes of directories, symlinks, and files. Besides, it removes symlinks, directories, and file.</p>
<ul>
<li><code>ansible test-servers -m file -a &#39;path=/tmp/test state=directory mode=0755&#39;</code></li>
</ul>
</li>
<li><p><code>ping</code> is used when we want to check whether the connection with our hosts defined in the inventory file is established or not.</p>
<ul>
<li><code>ansible test-servers -m ping</code></li>
</ul>
</li>
<li><p><code>copy</code>: The copy module is often used in writing playbooks when we want to copy a file(support directory as well) from a remote server to destination nodes.</p>
<ul>
<li><code>ansible test-servers -m copy -a &#39;src=/home/knoldus/Personal/blogs/blog3.txt dest=/tmp&#39;</code></li>
<li><code>ansible test-servers -m copy -a &#39;src=/home/knoldus/Personal/blogs dest=/tmp&#39;</code></li>
</ul>
</li>
<li><p><code>fetch</code>: Ansible’s fetch module transfers files(not support directory) from a remote host to the local host. This is the reverse of the copy module.</p>
<ul>
<li><code>ansible test-servers -m fetch -a &#39;src=/var/log/nginx/access.log dest=fetched&#39;</code></li>
</ul>
</li>
<li><p><code>synchronize</code>: Ansible’s fetch module to push&#x2F;pull directory</p>
<ul>
<li><code>ansible all -m synchronize -a &#39;mode=pull src=/export/Data/xcgroup/persistence dest=fetched&#39;</code> pull src to local fetched&#x2F;</li>
<li><code>ansible all -m synchronize -a &#39;mode=push src=/export/Data/xcgroup/persistence dest=fetched&#39;</code> push src to remote fetched&#x2F;</li>
</ul>
</li>
<li><p><code>yum</code>: We use the Yum module to install a service.</p>
<ul>
<li><code>ansible test-servers -m yum -a &#39;name=httpd,postfix state=present&#39;</code></li>
</ul>
</li>
<li><p><code>shell</code>: When we want to run UNIX commands then we use shell module</p>
<ul>
<li><code>ansible test-servers -m shell -a &#39;ls -la&#39;</code></li>
</ul>
</li>
<li><p><code>script</code>: When we want to run a bunch of commands use script module</p>
<ul>
<li><code>ansible test-servers -m script -a &#39;./test.sh&#39;</code></li>
</ul>
</li>
<li><p><code>service</code>: When we want to ensure the state of a service that is service is running we use the service module</p>
<ul>
<li><code>ansible test-servers -m service -a &#39;name=httpd state=started&#39;</code></li>
</ul>
</li>
<li><p><code>tempalte</code>: The Template module is used to copy a configuration file from the local system to the host server. It is the same as the copy module, but it dynamically binds group variables defined by us.</p>
  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">a</span> <span class="string">play</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">variable_to_be_replaced:</span> <span class="string">&#x27;Hello world&#x27;</span></span><br><span class="line">    <span class="attr">inline_variable:</span> <span class="string">&#x27;hello again.&#x27;</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Ansible</span> <span class="string">Template</span> <span class="string">Example</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">src:</span> <span class="string">hello_world.j2</span> <span class="comment"># in template, we can use var defined here</span></span><br><span class="line">      <span class="attr">dest:</span> <span class="string">/Users/mdtutorials2/Documents/Ansible/hello_world.txt</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>lineinfile</code>: this is generally used to <code>alter or remove the existing line, insert line, and to replace the lines</code>. Let’s know about the process to insert a line. You can set the file’s path to modify using the path&#x2F; dest parameter. You can insert lines through the line parameter. The line enters to the EOF. However, if the line is already there in the system, it won’t be added.</p>
<ul>
<li><code>ansible test-servers -m lineinfile -a &#39;path=/etc/selinux/config regexp=^SELINUX= line=SELINUX=enforcing&#39;</code></li>
</ul>
</li>
<li><p><code>replace</code>: The replace module replaces all instances of a defined string within a file.</p>
  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Ansible</span> <span class="string">replace</span> <span class="string">string</span> <span class="string">example</span></span><br><span class="line">    <span class="attr">replace:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/etc/ansible/sample.txt</span></span><br><span class="line">      <span class="attr">regexp:</span> <span class="string">&#x27;Unix&#x27;</span></span><br><span class="line">      <span class="attr">replace:</span> <span class="string">&quot;Linux&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Ansible</span> <span class="string">replace</span> <span class="string">string</span> <span class="string">example</span></span><br><span class="line">    <span class="attr">replace:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/etc/hosts</span></span><br><span class="line">      <span class="attr">regexp:</span>  <span class="string">&#x27;(\s+)server\.myubuntu\.com(\s+.*)?$&#x27;</span></span><br><span class="line">      <span class="attr">replace:</span> <span class="string">&#x27;\1server.linuxtechi.info\2&#x27;</span> <span class="comment"># use captured tokens</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>include</code>: When we want to include another playbook in our playbook, then we use the Include module</p>
</li>
<li><p><code>user</code>: To add a particular user to our module we can use User module</p>
</li>
</ul>
<h2 id="Ad-Hoc"><a href="#Ad-Hoc" class="headerlink" title="Ad-Hoc"></a>Ad-Hoc</h2><p>You can also use Ansible to run ad-hoc commands. To do this, you will need to run a command or call a module directly from the command line. No playbook is used. This is fine for a one time task.</p>
<p><a href="https://docs.ansible.com/ansible/latest/user_guide/intro_patterns.html#intro-patterns">host pattern</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># command format</span></span><br><span class="line"><span class="comment"># without -m, default module is &#x27;command&#x27; similar like `shell`</span></span><br><span class="line"><span class="variable">$ansible</span> [host-pattern] -m [module] -a “[module options]”</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$ansible</span> all -m copy -a <span class="string">&#x27;src=dvd.repo dest=/etc/yum.repos.d owner=root group=root mode=0644&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Each node reports SUCCESS and &quot;changed&quot; : `true meaning the module execution was successful </span></span><br><span class="line"><span class="comment"># and the file was created/changed`. If we run the command again, </span></span><br><span class="line"><span class="comment"># the output will include &quot;changed&quot; : false meaning the file is already present </span></span><br><span class="line"><span class="comment"># and configured as required. In other words, </span></span><br><span class="line"><span class="comment"># Ansible will only make the required changes if they do not already exist. </span></span><br><span class="line"><span class="comment"># This is what is known as &quot;idempotence&quot;.</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ansible</span> all -m ansible.builtin.service -a <span class="string">&quot;name=libvirtd state=started&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="PlayBook-suggested-way"><a href="#PlayBook-suggested-way" class="headerlink" title="PlayBook(suggested way)"></a>PlayBook(suggested way)</h2><p>A playbook <code>runs in order from top to bottom. Within each play, tasks also run in order from top to bottom</code>. Playbooks with multiple ‘plays’ can orchestrate multi-machine deployments, running one play on your webservers, then another play on your database servers, then a third play on your network infrastructure, and so on.</p>
<p>Plays consist of an <code>ordered set of task</code>s to execute against host selections from your Ansible inventory file. Tasks are the pieces that make up a play and call Ansible modules. <code>In a play, tasks are executed in the order in which they are written</code>.  </p>
<p>Ansible includes a “check mode” which allows you to validate playbooks and ad-hoc commands before making any state changes on a system. This shows you what Ansible would do, without actually making any changes. <code>Handlers</code> in Ansible are used to run a specific task only after a change has been made to the system. <code>They are triggered by tasks and run once, at the end of all of the other plays in the playbook</code></p>
<p><strong>playbook handlers</strong></p>
<p>By default, <code>handlers run after all the tasks in a particular play have been completed</code>. Notified handlers are executed automatically after each of the following sections, in the following order: <code>pre_tasks, roles/tasks and post_tasks</code>. This approach is efficient, because the <code>handler only runs once</code>, regardless of how many tasks notify it. For example, if multiple tasks update a configuration file and notify a handler to restart Apache, Ansible only bounces Apache once to avoid unnecessary restarts.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># basic playbook</span></span><br><span class="line"><span class="variable">$cat</span> play.yml</span><br><span class="line">- name: Variables playbook                                                      </span><br><span class="line">  hosts: all                                                                    </span><br><span class="line"></span><br><span class="line">  tasks:                                                                        </span><br><span class="line">  - name: Install the installed of package <span class="string">&quot;postfix&quot;</span>                          </span><br><span class="line">    yum:                                                                        </span><br><span class="line">      name: <span class="string">&quot;postfix&quot;</span>                                                           </span><br><span class="line">      state: installed</span><br><span class="line"></span><br><span class="line"><span class="comment"># with variable</span></span><br><span class="line"><span class="variable">$cat</span> play.yml</span><br><span class="line">- name: Variables playbook                                                      </span><br><span class="line">  hosts: all                                                                    </span><br><span class="line">  vars:                                                                         </span><br><span class="line">      state: installed                                                          </span><br><span class="line">      user: bob                                                                 </span><br><span class="line">  tasks:                                                                        </span><br><span class="line">  - name: Add the user &#123;&#123; user &#125;&#125;                                               </span><br><span class="line">    ansible.builtin.user:                                                       </span><br><span class="line">      name: <span class="string">&quot;&#123;&#123; user &#125;&#125;&quot;</span>                                                        </span><br><span class="line">  - name: Install the &#123;&#123; state &#125;&#125; of package <span class="string">&quot;postfix&quot;</span>                          </span><br><span class="line">    yum:                                                                        </span><br><span class="line">      name: <span class="string">&quot;postfix&quot;</span>                                                           </span><br><span class="line">      state: <span class="string">&quot;&#123;&#123; state &#125;&#125;&quot;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment"># with handler</span></span><br><span class="line"><span class="variable">$cat</span> play.yml</span><br><span class="line">- name: Verify apache installation</span><br><span class="line">  hosts: webservers</span><br><span class="line">  vars:</span><br><span class="line">    http_port: 80</span><br><span class="line">    max_clients: 200</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Ensure apache is at the latest version</span><br><span class="line">      ansible.builtin.yum:</span><br><span class="line">        name: httpd</span><br><span class="line">        state: latest</span><br><span class="line"></span><br><span class="line">    - name: Write the apache config file</span><br><span class="line">      ansible.builtin.template:</span><br><span class="line">        src: /srv/httpd.j2</span><br><span class="line">        dest: /etc/httpd.conf</span><br><span class="line">      notify:</span><br><span class="line">      - Restart apache <span class="comment"># handler</span></span><br><span class="line"></span><br><span class="line">    - name: Ensure apache is running</span><br><span class="line">      ansible.builtin.service:</span><br><span class="line">        name: httpd</span><br><span class="line">        state: started</span><br><span class="line"></span><br><span class="line">  handlers:</span><br><span class="line">    - name: Restart apache <span class="comment"># defined handler</span></span><br><span class="line">      ansible.builtin.service:</span><br><span class="line">        name: httpd</span><br><span class="line">        state: restarted</span><br><span class="line"></span><br><span class="line"><span class="comment"># -v verbose -vv, -vvv, -vvvv</span></span><br><span class="line"><span class="variable">$ansible</span>-playbook -i host play.yml  -v</span><br><span class="line"></span><br><span class="line"><span class="comment">################### retry for the failed nodes########</span></span><br><span class="line"><span class="comment"># play.retry is auto generated of failed nodes</span></span><br><span class="line"><span class="variable">$ansible</span>-playbook -i host --<span class="built_in">limit</span> @play.retry play.yml</span><br></pre></td></tr></table></figure>

<p><strong>conditional task</strong><br>Run a task only when condition is matched, <code>condition can be custom variable, ansible built-in variable, or result of another task.</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Host</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.101</span> <span class="string">run</span> <span class="string">this</span> <span class="string">task</span></span><br><span class="line">    <span class="attr">debug:</span> <span class="string">&#x27;msg=&quot; <span class="template-variable">&#123;&#123; ansible_default_ipv4.address &#125;&#125;</span>&quot;&#x27;</span></span><br><span class="line">    <span class="attr">when:</span> <span class="string">ansible_default_ipv4.address</span> <span class="string">==</span> <span class="string">&quot;192.168.2.101&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">memtotal</span> <span class="string">&lt;</span> <span class="string">500M</span> <span class="string">and</span> <span class="string">processor_cores</span> <span class="string">==</span> <span class="number">2</span> <span class="string">run</span> <span class="string">this</span> <span class="string">task</span></span><br><span class="line">    <span class="attr">debug:</span> <span class="string">&#x27;msg=&quot;<span class="template-variable">&#123;&#123; ansible_fqdn &#125;&#125;</span>&quot;&#x27;</span></span><br><span class="line">    <span class="attr">when:</span> <span class="string">ansible_memtotal_mb</span> <span class="string">&lt;</span> <span class="number">500</span> <span class="string">and</span> <span class="string">ansible_processor_cores</span> <span class="string">==</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">all</span> <span class="string">host</span> <span class="string">run</span> <span class="string">this</span> <span class="string">task</span></span><br><span class="line">    <span class="attr">shell:</span> <span class="string">hostname</span></span><br><span class="line">    <span class="attr">register:</span> <span class="string">info</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hostname</span> <span class="string">is</span> <span class="string">lamp1</span> <span class="string">Machie</span> <span class="string">run</span> <span class="string">this</span> <span class="string">task</span></span><br><span class="line">    <span class="attr">debug:</span> <span class="string">&#x27;msg=&quot;<span class="template-variable">&#123;&#123; ansible_fqdn &#125;&#125;</span>&quot;&#x27;</span></span><br><span class="line">    <span class="attr">when:</span> <span class="string">info[&#x27;stdout&#x27;]</span> <span class="string">==</span> <span class="string">&quot;lamp1&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hostname</span> <span class="string">is</span> <span class="string">startswith</span> <span class="string">l</span> <span class="string">run</span> <span class="string">this</span> <span class="string">task</span></span><br><span class="line">    <span class="attr">debug:</span> <span class="string">&#x27;msg=&quot;<span class="template-variable">&#123;&#123; ansible_fqdn &#125;&#125;</span>&quot;&#x27;</span></span><br><span class="line">    <span class="attr">when:</span> <span class="string">info[&#x27;stdout&#x27;].startswith(&#x27;l&#x27;)</span></span><br></pre></td></tr></table></figure>

<p>For more keyword that’s available in playbook, refer to <a href="https://docs.ansible.com/ansible/latest/reference_appendices/playbooks_keywords.html">playbook keywords</a></p>
<h3 id="Error-Handling-In-Playbooks"><a href="#Error-Handling-In-Playbooks" class="headerlink" title="Error Handling In Playbooks"></a>Error Handling In Playbooks</h3><p><strong>Ignoring Failed Commands</strong></p>
<p>Generally playbooks will <code>stop executing any more steps on a host that has a task fail</code>. Sometimes, though, you want to continue on. To do so, write a task that looks like this. This feature only works when the task must be able to run and return a value of ‘failed’, ignore_errors still print error output but continue to run next one. but as even fails, it continues to run next task if next task depends on <code>result</code> of the failed task, the <code>result</code> may not be the object descripted in module doc. as the command may be not run on the node at all. but if no ignore error, the result used in next task is always the one expected as otherwise it does not run if the previous one fails.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">this</span> <span class="string">will</span> <span class="string">not</span> <span class="string">be</span> <span class="string">counted</span> <span class="string">as</span> <span class="string">a</span> <span class="string">failure</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">/bin/false</span></span><br><span class="line">  <span class="attr">register:</span> <span class="string">result</span></span><br><span class="line">  <span class="attr">ignore_errors:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># output like this</span></span><br><span class="line">  <span class="attr">fatal:</span> [<span class="number">10.229</span><span class="number">.225</span><span class="number">.6</span>]<span class="string">:</span> <span class="string">FAILED!</span> <span class="string">=&gt;</span> &#123;<span class="attr">&quot;censored&quot;:</span> <span class="string">&quot;the output has been hidden due to the fact that &#x27;no_log: true&#x27; was specified for this result&quot;</span>&#125;</span><br><span class="line"><span class="string">...ignoring</span></span><br></pre></td></tr></table></figure>

<p><strong>Handlers and Failure</strong></p>
<p>When <code>a task fails on a host, handlers which were previously notified will not be run on that host</code>. This can lead to cases where an unrelated failure can leave a host in an unexpected state. For example, a task could update a configuration file and notify a handler to restart some service. If a task later on in the same play fails, the service will not be restarted despite the configuration change.</p>
<p>You can change this behavior with the <code>--force-handlers command-line</code> option, or by including <code>force_handlers</code>: True in a play, or <code>force_handlers = True</code> in <code>ansible.cfg</code>. When handlers are forced, they will run when notified even if a task fails on that host.</p>
<p><strong>Controlling What Defines Failure</strong></p>
<p>Ansible lets you define what “failure” means in each task using the <code>failed_when</code> conditional. As with all conditionals in Ansible, lists of multiple <code>failed_when</code> conditions are joined with an implicit and, meaning the task only fails when all conditions are met. If you want to trigger a failure when any of the conditions is met, you must define the conditions in a string with an explicit or operator.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Fail</span> <span class="string">task</span> <span class="string">when</span> <span class="string">the</span> <span class="string">command</span> <span class="string">error</span> <span class="string">output</span> <span class="string">prints</span> <span class="string">FAILED</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">/usr/bin/example-command</span> <span class="string">-x</span> <span class="string">-y</span> <span class="string">-z</span></span><br><span class="line">  <span class="attr">register:</span> <span class="string">command_result</span></span><br><span class="line">  <span class="attr">no_log:</span> <span class="literal">true</span>       <span class="comment"># never print result of this task.</span></span><br><span class="line">  <span class="attr">failed_when:</span> <span class="literal">false</span> <span class="comment"># never fail this task, but use command_result in another task</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Fail</span> <span class="string">task</span> <span class="string">when</span> <span class="string">the</span> <span class="string">command</span> <span class="string">error</span> <span class="string">output</span> <span class="string">prints</span> <span class="string">FAILED</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">/usr/bin/example-command</span> <span class="string">-x</span> <span class="string">-y</span> <span class="string">-z</span></span><br><span class="line">  <span class="attr">register:</span> <span class="string">command_result</span></span><br><span class="line">  <span class="attr">failed_when:</span> <span class="string">&quot;&#x27;FAILED&#x27; in command_result.stderr&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Fail</span> <span class="string">task</span> <span class="string">when</span> <span class="string">both</span> <span class="string">files</span> <span class="string">are</span> <span class="string">identical</span></span><br><span class="line">  <span class="attr">raw:</span> <span class="string">diff</span> <span class="string">foo/file1</span> <span class="string">bar/file2</span></span><br><span class="line">  <span class="attr">register:</span> <span class="string">diff_cmd</span></span><br><span class="line">  <span class="attr">failed_when:</span> <span class="string">diff_cmd.rc</span> <span class="string">==</span> <span class="number">0</span> <span class="string">or</span> <span class="string">diff_cmd.rc</span> <span class="string">&gt;=</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">if</span> <span class="string">a</span> <span class="string">file</span> <span class="string">exists</span> <span class="string">in</span> <span class="string">temp</span> <span class="string">and</span> <span class="string">fail</span> <span class="string">task</span> <span class="string">if</span> <span class="string">it</span> <span class="string">does</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">ls</span> <span class="string">/tmp/this_should_not_be_here</span></span><br><span class="line">  <span class="attr">register:</span> <span class="string">result</span></span><br><span class="line">  <span class="attr">failed_when:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">result.rc</span> <span class="string">==</span> <span class="number">0</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;&quot;No such&quot; not in result.stdout&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>Overriding The Changed Result</strong></p>
<p>When a shell&#x2F;command or other module runs it will typically report “changed” status based on whether it thinks it affected machine state.</p>
<p>Sometimes you will know, based on the return code or output that it did not make any changes, and wish to override the “changed” result such that it does not appear in report output or does not cause handlers to fire:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">/usr/bin/billybass</span> <span class="string">--mode=&quot;take</span> <span class="string">me</span> <span class="string">to</span> <span class="string">the</span> <span class="string">river&quot;</span></span><br><span class="line">    <span class="attr">register:</span> <span class="string">bass_result</span></span><br><span class="line">    <span class="attr">changed_when:</span> <span class="string">&quot;bass_result.rc != 2&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">command:</span> <span class="string">/bin/fake_command</span></span><br><span class="line">    <span class="attr">register:</span> <span class="string">result</span></span><br><span class="line">    <span class="attr">ignore_errors:</span> <span class="literal">True</span></span><br><span class="line">    <span class="attr">changed_when:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&quot;ERROR&quot; in result.stderr&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">result.rc</span> <span class="string">==</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><strong>debug module</strong><br>This module prints statements during execution and can be useful for debugging variables or expressions without necessarily halting the playbook.</p>
<p><strong>Parameters</strong></p>
<ul>
<li>msg： The customized message that is printed. If omitted, prints a generic message.</li>
<li>var: A variable name to debug. <code>Mutually exclusive with the msg</code> option. Be aware that this option already runs in Jinja2 context and has an implicit <code>&#123;&#123; &#125;&#125;</code> wrapping, so you should not be using Jinja2 delimiters unless you are looking for double interpolation.</li>
<li>verbosity: A number that controls when the debug is run, if you set to <code>3 it will only run debug when -vvv or above</code>. Default: 0</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">uptime</span> <span class="string">information</span></span><br><span class="line">  <span class="attr">ansible.builtin.shell:</span> <span class="string">/usr/bin/uptime</span></span><br><span class="line">  <span class="attr">register:</span> <span class="string">result</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Print</span> <span class="string">return</span> <span class="string">information</span> <span class="string">from</span> <span class="string">the</span> <span class="string">previous</span> <span class="string">task</span></span><br><span class="line">  <span class="attr">ansible.builtin.debug:</span></span><br><span class="line">    <span class="attr">var:</span> <span class="string">result</span></span><br><span class="line">    <span class="attr">verbosity:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="string">name</span></span><br><span class="line">  <span class="attr">stat:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/etc/lt.conf</span></span><br><span class="line">  <span class="attr">register:</span> <span class="string">register_name</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Task</span> <span class="string">name</span></span><br><span class="line">  <span class="attr">debug:</span></span><br><span class="line">    <span class="attr">msg:</span> <span class="string">&quot;The file or directory exists&quot;</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">register_name.stat.exists</span></span><br></pre></td></tr></table></figure>

<h3 id="Asynchronous-Actions-and-Polling-task-level"><a href="#Asynchronous-Actions-and-Polling-task-level" class="headerlink" title="Asynchronous Actions and Polling(task level)"></a>Asynchronous Actions and Polling(task level)</h3><p>Ansible <code>runs tasks synchronously by default, if one task fails, the others does not run anymore</code>. It keeps the connection to the remote node open until the task is completed. This means <code>within a playbook, each task blocks the subsequent tasks until the current task completes</code>. </p>
<p><code>Some of the long-running tasks could be</code></p>
<ul>
<li>Downloading a Big File from URL</li>
<li>Running a Script known to run for a long time</li>
<li>Rebooting the remote server and waiting for it to comeback</li>
</ul>
<p><strong>This may cause issue.</strong> Suppose you have a task in your playbook which takes more than say 10 minutes to execute. This means that the ssh connection between Ansible controller and the target machine should be stable for more than 10 minutes. It may take longer to complete than the SSH session allows for, causing a timeout. One can run the long-running process to execute in the background to perform other tasks concurrently.</p>
<p>To <code>avoid blocking or timeout issues</code>, you can use <code>asynchronous mode</code> to run all of your tasks at once and then poll until they are done.</p>
<p>To enable Asynchronous mode within Ansible playbook we need to use few parameters such as <code>async, poll</code>.</p>
<ul>
<li><p><code>async</code> - async keyword’s value indicates the <code>total time allowed to complete the task</code>.<strong>Once that time is over the task will be marked as completed irrespective of the end result</strong>. Along with this async also sends the task in the background which can be verified later on its final execution status.</p>
</li>
<li><p><code>poll</code> - poll keyword allows us to track the status of the job which was invoked by async and running in the background. Its value decides how frequent it would check if the background task is completed or not.</p>
<ul>
<li><p>The Poll keyword is <code>auto-enabled whenever you use async and it has a default value as 10 seconds</code>.</p>
</li>
<li><p>When you use poll parameter’s value set to <code>positive Ansible will avoid connection timeouts but will still block the next task in your playbook</code>, waiting until the async task either completes, fails or times out.</p>
</li>
</ul>
</li>
</ul>
<p><strong>NOTE</strong></p>
<ul>
<li>async without poll, default poll is 10s, set timeout for the task</li>
<li>async with postive poll, same as above, it just sets timeout for the task</li>
<li>async with poll &#x3D;&#x3D; 0, really async, <code>the task marked finished immediately without waiting for it result!!</code>, <strong>but if second task depends on first one(in a node), NOT use async!!!</strong></li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">##############--- set time out for a task ###########################</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">async</span> <span class="string">and</span> <span class="string">poll</span> <span class="string">example</span> <span class="string">playbook</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">workers</span></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">ansible_user</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">update</span> <span class="string">the</span> <span class="string">system</span> <span class="string">packages</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">yum</span> <span class="string">update</span> <span class="string">-y</span></span><br><span class="line">      <span class="attr">async:</span> <span class="number">180</span> <span class="comment"># the total time allowed to complete the package update task</span></span><br><span class="line">      <span class="attr">poll:</span> <span class="number">10</span> <span class="comment"># Polling Interval in Seconds</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">package_update</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">task-2</span> <span class="string">to</span> <span class="string">create</span> <span class="string">a</span> <span class="string">test</span> <span class="string">user</span> <span class="comment"># will be blocked until first task finished or timedout!!!</span></span><br><span class="line">      <span class="attr">user:</span> <span class="string">name=async_test</span> <span class="string">state=present</span> <span class="string">shell=/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##############--- set time out and async job for a task ###########################</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">async</span> <span class="string">and</span> <span class="string">poll</span> <span class="string">example</span> <span class="string">playbook</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">workers</span></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">ansible_user</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sleep</span> <span class="string">for</span> <span class="number">60</span> <span class="string">seconds</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">60</span></span><br><span class="line">      <span class="attr">async:</span> <span class="number">80</span> <span class="comment"># the total time allowed to complete the sleep task</span></span><br><span class="line">      <span class="attr">poll:</span> <span class="number">0</span> <span class="comment"># No need to poll just fire and forget the sleep command</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">sleeping_node</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">task-2</span> <span class="string">to</span> <span class="string">create</span> <span class="string">a</span> <span class="string">test</span> <span class="string">user</span> <span class="comment"># will run even the first task is in progress</span></span><br><span class="line">      <span class="attr">user:</span> <span class="string">name=async_test-2</span> <span class="string">state=present</span> <span class="string">shell=/bin/bash</span>      </span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">async</span> <span class="string">and</span> <span class="string">poll</span> <span class="string">example</span> <span class="string">playbook</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">workers</span></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">ansible_user</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sleep</span> <span class="string">for</span> <span class="number">20</span> <span class="string">seconds</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/bin/sleep</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">async:</span> <span class="number">30</span> <span class="comment"># the total time allowed to complete the sleep task</span></span><br><span class="line">      <span class="attr">poll:</span> <span class="number">0</span> <span class="comment"># No need to poll just fire and forget the sleep command</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">sleeping_node</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">task-2</span> <span class="string">to</span> <span class="string">create</span> <span class="string">a</span> <span class="string">test</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">user:</span> <span class="string">name=async_test-2</span> <span class="string">state=present</span> <span class="string">shell=/bin/bash</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># check the async job status</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checking</span> <span class="string">the</span> <span class="string">Job</span> <span class="string">Status</span> <span class="string">running</span> <span class="string">in</span> <span class="string">background</span></span><br><span class="line">      <span class="attr">async_status:</span></span><br><span class="line">        <span class="attr">jid:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; sleeping_node.ansible_job_id &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">job_result</span></span><br><span class="line">      <span class="attr">until:</span> <span class="string">job_result.finished</span> <span class="comment"># Retry within limit until the job status changed to &quot;finished&quot;: 1</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">30</span> <span class="comment"># Maximum number of retries to check job status</span></span><br></pre></td></tr></table></figure>
<h3 id="Strategy"><a href="#Strategy" class="headerlink" title="Strategy"></a>Strategy</h3><p>When running Ansible playbooks, you might have noticed that the Ansible runs every task on each node one by one, it will not move to another task until a particular task is completed on each node, which will take a lot of time, in some cases. By default, the strategy is set to “linear”, we can set it to free.</p>
<ul>
<li><code>linear</code>: run the first task of play on all nodes(forks), when the first task finished on all nodes, run the second tasks on all nodes</li>
<li><code>free</code>:   The nodes who finished the first task, can run the second task without waiting for host who is still running first task. <code>a host that is slow or stuck on a specific task won’t hold up the rest of the hosts and tasks</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># play level</span></span><br><span class="line"><span class="variable">$cat</span> play.yml</span><br><span class="line">- name: free strategy demo</span><br><span class="line">  hosts: workers</span><br><span class="line">  strategy: free</span><br><span class="line"></span><br><span class="line"><span class="comment"># global setting</span></span><br><span class="line"><span class="variable">$cat</span> /etc/ansible/ansible.cfg</span><br><span class="line">[defaults]</span><br><span class="line">strategy = free</span><br></pre></td></tr></table></figure>

<p><strong>NOTE</strong></p>
<ul>
<li>if nodes has dependency, use linear, otherwise use free</li>
<li><code>free</code> only speed up process for play with more than on tasks.</li>
</ul>
<h2 id="Python-API-not-frequently-used"><a href="#Python-API-not-frequently-used" class="headerlink" title="Python API(not frequently used)"></a>Python API(not frequently used)</h2><p><a href="https://docs.ansible.com/ansible/latest/dev_guide/developing_api.html#python-api-example">python api</a></p>
<h1 id="FQA"><a href="#FQA" class="headerlink" title="FQA"></a>FQA</h1><h2 id="Ansible-playbook-hangs-during-execution"><a href="#Ansible-playbook-hangs-during-execution" class="headerlink" title="Ansible playbook hangs during execution"></a>Ansible playbook hangs during execution</h2><p>Refer to <a href="https://newbetuts.com/20798774-how-to-detect-why-ansible-playbook-hangs-during-execution">why ansible hangs</a></p>
<ul>
<li>SSH timeout</li>
<li>command hangs in remote node</li>
</ul>
<h2 id="speed-up-playbook"><a href="#speed-up-playbook" class="headerlink" title="speed up playbook"></a>speed up playbook</h2><p><a href="https://www.redhat.com/sysadmin/faster-ansible-playbook-execution">tunning ansible</a></p>
<h2 id="NameError-name-‘temp-path’-is-not-defined"><a href="#NameError-name-‘temp-path’-is-not-defined" class="headerlink" title="NameError: name ‘temp_path’ is not defined"></a>NameError: name ‘temp_path’ is not defined</h2><p>In such case, task does not run at all, this is probably there is no disk space on remote node as ansible need to copy module to remote host at <code>/root/.ansible/tmp</code></p>
<h2 id="change-remote-tmp"><a href="#change-remote-tmp" class="headerlink" title="change remote_tmp"></a>change remote_tmp</h2><p><code>remote_tmp</code> is set by ansible.cfg</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cat</span> /etc/ansible/ansible.cfg</span><br><span class="line">...</span><br><span class="line">remote_tmp     = ~/.ansible/tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># or change it from env</span></span><br><span class="line"><span class="variable">$ANSIBLE_REMOTE_TEMP</span>=/cedar/.tmp ansible-playbook play.yml -i ./hosts</span><br></pre></td></tr></table></figure>
<h2 id="get-verbose-output"><a href="#get-verbose-output" class="headerlink" title="get verbose output"></a>get verbose output</h2><p>Something if gathering is false, it’s hard to see why it fails, in this case, turn it on and run your playbook with <code>-vvv</code> or <code>-vvvv</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cat</span> ansible.cfg</span><br><span class="line">[defaults]</span><br><span class="line">gathering      = True</span><br><span class="line"></span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$cat</span> play.yml</span><br><span class="line">- name: perf check</span><br><span class="line">  hosts: all</span><br><span class="line">  gather_facts: <span class="literal">true</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># rerun</span></span><br><span class="line"><span class="variable">$ansible</span>-playbook -i 10.211.98.106, playbook/check_file.yml -vvv</span><br></pre></td></tr></table></figure>

<h2 id="set-python-interpreter-at-remote-node"><a href="#set-python-interpreter-at-remote-node" class="headerlink" title="set python interpreter at remote node"></a>set python interpreter at remote node</h2><p>As ansible copies <code>python module</code> to remote and runs it at remote node, so that the remote <code>python interpreter</code> should be compatible with the module copied from control node.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check python on control node where you run ansible to see what python script that is for module</span></span><br><span class="line"><span class="variable">$ansible</span> --version</span><br><span class="line">ansible [core 2.13.4]</span><br><span class="line">  config file = /etc/ansible/ansible.cfg</span><br><span class="line">  configured module search path = [<span class="string">&#x27;/root/.ansible/plugins/modules&#x27;</span>, <span class="string">&#x27;/usr/share/ansible/plugins/modules&#x27;</span>]</span><br><span class="line">  ansible python module location = /home/data/Anaconda3/envs/py3.9/lib/python3.9/site-packages/ansible -----&gt;ansible modules</span><br><span class="line">  ansible collection location = /root/.ansible/collections:/usr/share/ansible/collections</span><br><span class="line">  executable location = /home/data/Anaconda3/envs/py3.9/bin/ansible</span><br><span class="line">  python version = 3.9.0 (default, Nov 15 2020, 14:28:56) [GCC 7.3.0] -----&gt;ansbile module version</span><br><span class="line">  jinja version = 3.1.2</span><br><span class="line">  libyaml = True</span><br><span class="line"></span><br><span class="line"><span class="comment"># by default ansible select the remote python interpreter automatically based on its rule</span></span><br><span class="line"><span class="comment"># hence it may select a python which is not compatiable, here we can set remote python interpreter explicitly</span></span><br><span class="line"><span class="variable">$cat</span> ansible.cfg</span><br><span class="line">[defaults]</span><br><span class="line">interpreter_python = /usr/bin/python3</span><br><span class="line"></span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$cat</span> play.yml</span><br><span class="line">- name: a play</span><br><span class="line">  hosts: all</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars:</span><br><span class="line">    ansible_python_interpreter: <span class="string">&#x27;/usr/bin/python3&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Cannot-handle-SSH-host-authenticity-prompts-for-multiple-hosts"><a href="#Cannot-handle-SSH-host-authenticity-prompts-for-multiple-hosts" class="headerlink" title="Cannot handle SSH host authenticity prompts for multiple hosts"></a>Cannot handle SSH host authenticity prompts for multiple hosts</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ansible-playbook -i conf/app/south.host ./playbook/app/check_file.yml</span><br><span class="line">The authenticity of host &#x27;10.0.0.4 (10.0.0.4)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:WkPeJUhNdz/MX3zAy536BHZRC/9INGEQWGhsmAPzkEo.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? The authenticity of host &#x27;10.0.0.5 (10.0.0.5)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:UJCEM05W15HZuzOLRpxNli+Qnwei7j84u2lbpVFBqkI.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? </span><br></pre></td></tr></table></figure>

<p><strong>Solution</strong><br>edit ansible.cfg with <code>host_key_checking = false</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line">[<span class="string">defaults</span>]</span><br><span class="line"><span class="string">host_key_checking</span> <span class="string">=</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="forks-vs-serial-vs-async"><a href="#forks-vs-serial-vs-async" class="headerlink" title="forks vs serial vs async"></a>forks vs serial vs async</h2><ul>
<li>Serial sets a number, a percentage, or a list of numbers of hosts you want to manage at a time.</li>
<li>Async triggers Ansible to run the task in the background which can be checked (or) followed up later, and <code>its value will be the maximum time that Ansible will wait for that particular Job (or) task to complete before it eventually times out or complete.</code></li>
<li>Ansible works by spinning off forks of itself and talking to many remote systems independently. The forks parameter controls how many hosts are configured by Ansible in parallel.</li>
</ul>
<p><strong>Suggestion</strong>  </p>
<ul>
<li><p>SERIAL : Decides the number of nodes process in each tasks in a single run.</p>
<blockquote>
<p>Use: When you need to provide changes as batches&#x2F; rolling changes.</p>
</blockquote>
</li>
<li><p>FORKS : Maximum number of simultaneous connections Ansible made on each Task.</p>
<blockquote>
<p>Use: When you need to manage how many nodes should get affected simultaneously.</p>
</blockquote>
</li>
</ul>
<h3 id="serial-example"><a href="#serial-example" class="headerlink" title="serial example"></a>serial example</h3><p>By default, with serial set, failing all servers(max fail percentage 100%) from one batch(<code>serial value</code>) will stop whole playbook to run even if there are some servers left in inventory, but this can be tunned with <code>max_fail_percentage</code>.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">play</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="comment"># serial: 10% or mix these two format</span></span><br><span class="line">  <span class="comment"># serial:</span></span><br><span class="line">  <span class="comment">#   - 3</span></span><br><span class="line">  <span class="comment">#   - 50%</span></span><br><span class="line">  <span class="attr">serial:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">first</span> <span class="string">task</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">hostname</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">second</span> <span class="string">task</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">hostname</span></span><br></pre></td></tr></table></figure>

<p>In the above example, if we had 6 hosts in the group ‘webservers’, Ansible would execute the play completely (both tasks) on 3 of the hosts before moving on to the next 3 hosts:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PLAY [webservers] ****************************************</span><br><span class="line"></span><br><span class="line">TASK [first task] ****************************************</span><br><span class="line">changed: [web3]</span><br><span class="line">changed: [web2]</span><br><span class="line">changed: [web1]</span><br><span class="line"></span><br><span class="line">TASK [second task] ***************************************</span><br><span class="line">changed: [web1]</span><br><span class="line">changed: [web2]</span><br><span class="line">changed: [web3]</span><br><span class="line"></span><br><span class="line">PLAY [webservers] ****************************************</span><br><span class="line"></span><br><span class="line">TASK [first task] ****************************************</span><br><span class="line">changed: [web4]</span><br><span class="line">changed: [web5]</span><br><span class="line">changed: [web6]</span><br><span class="line"></span><br><span class="line">TASK [second task] ***************************************</span><br><span class="line">changed: [web4]</span><br><span class="line">changed: [web5]</span><br><span class="line">changed: [web6]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ***********************************************</span><br><span class="line">web1      : ok=2    changed=2    unreachable=0    failed=0</span><br><span class="line">web2      : ok=2    changed=2    unreachable=0    failed=0</span><br><span class="line">web3      : ok=2    changed=2    unreachable=0    failed=0</span><br><span class="line">web4      : ok=2    changed=2    unreachable=0    failed=0</span><br><span class="line">web5      : ok=2    changed=2    unreachable=0    failed=0</span><br><span class="line">web6      : ok=2    changed=2    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<h3 id="without-serial"><a href="#without-serial" class="headerlink" title="without serial"></a>without serial</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">play</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">first</span> <span class="string">task</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">hostname</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">second</span> <span class="string">task</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">hostname</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PLAY [webservers] ****************************************</span><br><span class="line"></span><br><span class="line">TASK [first task] ****************************************</span><br><span class="line">changed: [web3]</span><br><span class="line">changed: [web2]</span><br><span class="line">changed: [web1]</span><br><span class="line">changed: [web4]</span><br><span class="line">changed: [web5]</span><br><span class="line">changed: [web6]</span><br><span class="line"></span><br><span class="line">TASK [second task] ***************************************</span><br><span class="line">changed: [web1]</span><br><span class="line">changed: [web2]</span><br><span class="line">changed: [web3]</span><br><span class="line">changed: [web4]</span><br><span class="line">changed: [web5]</span><br><span class="line">changed: [web6]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ***********************************************</span><br><span class="line">web1      : ok=2    changed=2    unreachable=0    failed=0</span><br><span class="line">web2      : ok=2    changed=2    unreachable=0    failed=0</span><br><span class="line">web3      : ok=2    changed=2    unreachable=0    failed=0</span><br><span class="line">web4      : ok=2    changed=2    unreachable=0    failed=0</span><br><span class="line">web5      : ok=2    changed=2    unreachable=0    failed=0</span><br><span class="line">web6      : ok=2    changed=2    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>

<h2 id="with-large-hosts-forks-are-decreasing-after-a-while"><a href="#with-large-hosts-forks-are-decreasing-after-a-while" class="headerlink" title="with large hosts, forks are decreasing after a while"></a>with large hosts, forks are decreasing after a while</h2><p>With large hosts say 10000+, even set forks with larger number say 64, the ansible creates almost that number, but after a while if you check with <code>ps -ef | grep ansible</code>, the number becomes smaller and smaller with time to solve this </p>
<ul>
<li>use <code>serial</code>(in playbook) to split hosts into small batches.</li>
<li>split hosts into several files outside</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">play</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="comment"># serial: 10% or mix these two format</span></span><br><span class="line">  <span class="comment"># serial:</span></span><br><span class="line">  <span class="comment">#   - 3</span></span><br><span class="line">  <span class="comment">#   - 50%</span></span><br><span class="line">  <span class="attr">serial:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">first</span> <span class="string">task</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">hostname</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">second</span> <span class="string">task</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">hostname</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ansible-playbook -i large_host ./playbook/with_serial_enabled.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># split large host into small ones</span></span><br><span class="line"><span class="comment"># 100 lines per small file</span></span><br><span class="line"><span class="comment"># -d use number as suffix</span></span><br><span class="line"><span class="comment"># host. used as prefix</span></span><br><span class="line">$ <span class="built_in">split</span> --lines=100 -d large_host host.</span><br><span class="line">host.00 host.01</span><br><span class="line"></span><br><span class="line">$ ansible-playbook -i host.00 ./playbook/without_serial.yml</span><br><span class="line">$ ansible-playbook -i host.01 ./playbook/without_serial.yml</span><br></pre></td></tr></table></figure>

<h2 id="compare-stdout-with-number"><a href="#compare-stdout-with-number" class="headerlink" title="compare stdout with number"></a>compare stdout with number</h2><p>As stdout is a string, like <code>&quot;45&quot;</code>, you have to convert it to int to compare it with nubmer</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">check</span> <span class="string">process</span> <span class="string">fd</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">get</span> <span class="string">fd</span> <span class="string">count</span> <span class="string">of</span> <span class="string">agent</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">lsof</span> <span class="string">-p</span> <span class="string">$(pidof</span> <span class="string">agent)</span> <span class="string">|</span> <span class="string">wc</span> <span class="string">-l</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">ret</span></span><br><span class="line">      <span class="comment"># | to convert string to int</span></span><br><span class="line">      <span class="attr">failed_when:</span> <span class="string">ret.stdout</span> <span class="string">|</span> <span class="string">int</span> <span class="string">&gt;</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>

<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://spacelift.io/blog/ansible-tutorial">ansible tutorial</a></li>
<li><a href="https://www.redhat.com/en/blog/system-administrators-guide-getting-started-ansible-fast">ansible quick start</a></li>
<li><a href="https://ostechnix.com/ansible-inventory-and-configuration-files/">inventory examples</a></li>
<li><a href="https://docs.ansible.com/ansible/latest/reference_appendices/config.html#ansible-configuration-settings">ansible configuration</a></li>
<li><a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks.html">advanced playbook jinjia template</a></li>
<li><a href="https://docs.ansible.com/ansible/2.9/modules/modules_by_category.html">All Modules Index</a></li>
<li><a href="https://mike42.me/blog/2019-01-the-top-100-ansible-modules">top 100 modules</a></li>
<li><a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_handlers.html">handler examples</a></li>
<li><a href="https://cloudaffaire.com/operators-in-ansible/">operator in ansible</a></li>
<li><a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_conditionals.html#">conditionals</a></li>
<li><a href="https://elatov.github.io/2022/02/improving-ansible-execution-time/">mitogen to speedup ansible</a></li>
<li><a href="https://docs.ansible.com/ansible/latest/reference_appendices/playbooks_keywords.html#playbook-keywords">playbook keywords</a></li>
<li><a href="https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-and-upgrading-ansible">install and upgrade ansible</a></li>
<li><a href="https://mitogen.networkgenomics.com/ansible_detailed.html">mitogen for ansible</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>linux-memory-checker</title>
    <url>/2019/11/29/linux-memory-checker/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>There are two powerful tools for memory check, one is valgrind, the other is address sanitizer, the difference is</p>
<ul>
<li>valgrind, no need to compile your app, have big impact on performance(down 10-50 times), can’t work well with multiple process, but can detect leak in shared library.</li>
<li>address sanitizer, need to compile your app, has less impact for app run(down 2 times)</li>
</ul>
<p><code>Always use address sanitizer if you can recomplie your application!</code></p>
<span id="more"></span>
<h2 id="valgrind"><a href="#valgrind" class="headerlink" title="valgrind"></a>valgrind</h2><p><strong>valgrind error when runs</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--4636:0: aspacem &lt;&lt;&lt; <span class="string">SHOW_SEGMENTS: out_of_memory (19 segments)</span></span><br><span class="line"><span class="string">--4636:0: aspacem 1 segment names in 1 slots</span></span><br><span class="line"><span class="string">--4636:0: aspacem freelist is empty</span></span><br><span class="line"><span class="string">--4636:0: aspacem (0,4,2) /usr/lib/valgrind/memcheck-amd64-linux</span></span><br><span class="line"><span class="string">--4636:0: aspacem   0: RSVN 0000000000-0003ffffff     64m ----- SmFixed</span></span><br><span class="line"><span class="string">--4636:0: aspacem   1:      0004000000-0037ffffff    832m</span></span><br><span class="line"><span class="string">--4636:0: aspacem   2: FILE 0038000000-003821efff 2224128 r-x-- d=0x802 i=404505  o=0       (0,4)</span></span><br><span class="line"><span class="string">--4636:0: aspacem   3:      003821f000-003841efff 2097152</span></span><br><span class="line"><span class="string">--4636:0: aspacem   4: FILE 003841f000-0038421fff   12288 rw--- d=0x802 i=404505  o=2224128 (0,4)</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">==4636==     Valgrind&#x27;s memory management: out of memory:</span></span><br><span class="line"><span class="string">==4636==        newSuperblock&#x27;s request for 4194304 bytes failed.</span></span><br><span class="line"><span class="string">==4636==           42,684,416 bytes have already been mmap-ed ANONYMOUS.</span></span><br><span class="line"><span class="string">==4636==     Valgrind cannot continue.  Sorry.</span></span><br><span class="line"><span class="string">==4636==</span></span><br><span class="line"><span class="string">==4636==     There are several possible reasons for this.</span></span><br><span class="line"><span class="string">==4636==     - You have some kind of memory limit in place.  Look at the</span></span><br><span class="line"><span class="string">==4636==       output of &#x27;ulimit -a&#x27;.  Is there a limit on the size of</span></span><br><span class="line"><span class="string">==4636==       virtual memory or address space?</span></span><br><span class="line"><span class="string">==4636==     - You have run out of swap space.</span></span><br><span class="line"><span class="string">==4636==     - Valgrind has a bug.  If you think this is the case or you are</span></span><br><span class="line"><span class="string">==4636==     not sure, please let us know and we&#x27;ll try to fix it.</span></span><br><span class="line"><span class="string">==4636==     Please note that programs can take substantially more memory than</span></span><br><span class="line"><span class="string">==4636==     normal when running under Valgrind tools, eg. up to twice or</span></span><br><span class="line"><span class="string">==4636==     more, depending on the tool.  On a 64-bit machine, Valgrind</span></span><br><span class="line"><span class="string">==4636==     should be able to make use of up 32GB memory.  On a 32-bit</span></span><br><span class="line"><span class="string">==4636==     machine, Valgrind should be able to use all the memory available</span></span><br><span class="line"><span class="string">==4636==     to a single process, up to 4GB if that&#x27;s how you have your</span></span><br><span class="line"><span class="string">==4636==     kernel configured.  Most 32-bit Linux setups allow a maximum of</span></span><br><span class="line"><span class="string">==4636==     3GB per process.</span></span><br><span class="line"><span class="string">==4636==</span></span><br><span class="line"><span class="string">==4636==     Whatever the reason, Valgrind cannot continue.  Sorry.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ sysctl -w kernel.pax.softmode=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose --log-file=valgrind-out.txt ./test</span></span><br></pre></td></tr></table></figure>

<h2 id="address-sanitizer"><a href="#address-sanitizer" class="headerlink" title="address sanitizer"></a>address sanitizer</h2><p>it comes from google, and gcc supports it from 4.8, so make sure you gcc support it before compiling your program.</p>
<p><strong>how to use it</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">-fsanitize=address    #开启地址越界检查功能</span><br><span class="line">-fno-omit-frame-pointer  #开启后，可以出界更详细的错误信息</span><br><span class="line">-fsanitize=leak   #开启内存泄露检查功能</span><br><span class="line">可选择-O1或者更高的优化级别编译</span><br></pre></td></tr></table></figure>
<p>this will build nginx with static asan, can NOT detect link in shared library.</p>
<p><strong>build it in nginx</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">--with-cc-opt=<span class="string">&quot;-O0 -fsanitize=address -fno-omit-frame-pointer -fPIC -g $CC_OPT&quot;</span></span><br><span class="line">--with-ld-opt=<span class="string">&quot;-fsanitize=address -fno-omit-frame-pointer -Wl,-Bsymbolic-functions -fpic -Wl,-z,relro&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>check result</strong><br>sanitizer only <font color='red'><strong>prints result when program ends normally</strong></font>. (Hint: Do a kill or killall with normal SIGTERM of the daemons at the end).</p>
<ul>
<li>$ killall nginx (if nginx runs as a daemon)</li>
<li>check file set by error_log in nginx.conf</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">==7852==ERROR: LeakSanitizer: detected memory leaks</span><br><span class="line"></span><br><span class="line">Direct leak of 320 byte(s) in 5 object(s) allocated from:</span><br><span class="line">    #0 0x7f92a193b602 in malloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98602)</span><br><span class="line">    #1 0x9f7eef in ngx_http_init_connection src/http/ngx_http_request.c:228</span><br><span class="line">    #2 0x97fdb3 in ngx_event_accept src/event/ngx_event_accept.c:350</span><br><span class="line">    #3 0x9aea6f in ngx_epoll_process_events src/event/modules/ngx_epoll_module.c:937</span><br><span class="line">    #4 0x9773a9 in ngx_process_events_and_timers src/event/ngx_event.c:242</span><br><span class="line">    #5 0x9a6cca in ngx_worker_process_cycle src/os/unix/ngx_process_cycle.c:989</span><br><span class="line">    #6 0x99b93c in ngx_spawn_process src/os/unix/ngx_process.c:213</span><br><span class="line">    #7 0x9a25b9 in ngx_start_worker_processes src/os/unix/ngx_process_cycle.c:425</span><br><span class="line">    #8 0x9a0fb6 in ngx_master_process_cycle src/os/unix/ngx_process_cycle.c:146</span><br><span class="line">    #9 0x8eff1a in main src/core/nginx.c:390</span><br><span class="line">    #10 0x7f929da2a82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)</span><br><span class="line">    ...</span><br><span class="line">    SUMMARY: AddressSanitizer: 576 byte(s) leaked in 11 allocation(s).</span><br></pre></td></tr></table></figure>

<h2 id="option-for-AddressSanitizer"><a href="#option-for-AddressSanitizer" class="headerlink" title="option for AddressSanitizer"></a>option for AddressSanitizer</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check all available options</span></span><br><span class="line"></span><br><span class="line">$ ASAN_OPTIONS=<span class="built_in">help</span>=1 ./test</span><br><span class="line">Available flags <span class="keyword">for</span> AddressSanitizer:</span><br><span class="line">	symbolize</span><br><span class="line">		- If <span class="built_in">set</span>, use the online symbolizer from common sanitizer runtime to turn virtual addresses to file/line locations.</span><br><span class="line">	external_symbolizer_path</span><br><span class="line">		- Path to external symbolizer. If empty, the tool will search <span class="variable">$PATH</span> <span class="keyword">for</span> the symbolizer.</span><br><span class="line">	allow_addr2line</span><br><span class="line">		- If <span class="built_in">set</span>, allows online symbolizer to run addr2line binary to symbolize stack traces (addr2line will only be used <span class="keyword">if</span> llvm-symbolizer binary is unavailable.</span><br><span class="line">	strip_path_prefix</span><br><span class="line">		- Strips this prefix from file paths <span class="keyword">in</span> error reports.</span><br><span class="line">	fast_unwind_on_check</span><br><span class="line">		- If available, use the fast frame-pointer-based unwinder on internal CHECK failures.</span><br><span class="line">	fast_unwind_on_fatal</span><br><span class="line">		- If available, use the fast frame-pointer-based unwinder on fatal errors.</span><br><span class="line">	fast_unwind_on_malloc</span><br><span class="line">		- If available, use the fast frame-pointer-based unwinder on malloc/free.</span><br><span class="line">	handle_ioctl</span><br><span class="line">		- Intercept and handle ioctl requests.</span><br><span class="line">	malloc_context_size</span><br><span class="line">		- Max number of stack frames kept <span class="keyword">for</span> each allocation/deallocation.</span><br><span class="line">	log_path</span><br><span class="line">		- Write logs to <span class="string">&quot;log_path.pid&quot;</span>. The special values are <span class="string">&quot;stdout&quot;</span> and <span class="string">&quot;stderr&quot;</span>. The default is <span class="string">&quot;stderr&quot;</span>.</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p><strong>set log file for AddressSanitizer</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ASAN_OPTIONS=log_path=/tmp/test ./test</span><br><span class="line"></span><br><span class="line"><span class="comment"># it will create a file named test.$pid and print result to that file</span></span><br></pre></td></tr></table></figure>
<h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><ul>
<li><a href="https://www.jianshu.com/p/3a2df9b7c35">address sanitizer</a></li>
<li><a href="https://www.cnblogs.com/hugetong/p/14386531.html">memory leak detector compare</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
        <category>memory-checker</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>memory checker</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-network-performance</title>
    <url>/2022/05/20/linux-network-performance/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><h1 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h1><p>There are two popular tools for <code>inspecting the socket states (netstat and ss)</code></p>
<p><a href="https://docs.oracle.com/cd/E18752_01/html/816-4554/ipconfig-142.html">netstat</a> gets its information from <code>/proc/net</code> directly. It parses the file and prints out information based on it.</p>
<p><code>ss</code> was written more recently to <code>use the netlink API</code> (it will fall back to proc&#x2F;net if netlink is unavailable). The information in both systems is essentially the same, but <code>netlink API</code> exposes more information than <code>procfs</code>. so try to use <code>ss</code> for socket stats if it’s available.</p>
<p>NOTE: netstat provides other info except socket statistics, like routing table etc.</p>
<span id="more"></span>

<h2 id="ss-command"><a href="#ss-command" class="headerlink" title="ss command"></a>ss command</h2><p>The ss command shows socket information, pretty much like netstat does. but use <code>netlink API</code>, with more details, <code>ss</code> always shows socket with <code>Local address</code> and <code>Remote address</code> even for unix socket!!!</p>
<p><strong>options</strong>  </p>
<ul>
<li>–n, –numeric don’t resolve service names</li>
<li>-r, –resolve : resolve host hostnames.</li>
<li>-l, –listening display listening sockets</li>
<li>-o, –options show timer information</li>
<li>-e, –extended show detailed socket information</li>
<li><code>-m, –memory show socket memory usage</code></li>
<li><code>-p, –processes show process using socket</code></li>
<li>–s, –summary show socket usage summary</li>
<li><code>-N, –net switch to the specified network namespace name</code></li>
<li>-t, –tcp display only TCP sockets</li>
<li>-u, –udp display only UDP sockets</li>
<li>-w, –raw display only RAW sockets</li>
<li>-x, –unix display only Unix domain sockets</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show all listing tcp sockets including the corresponding process</span></span><br><span class="line"></span><br><span class="line">$ ss -tlp</span><br><span class="line"></span><br><span class="line"><span class="comment"># check unix socket</span></span><br><span class="line"><span class="comment"># Local Address:Port    /var/lib/openvswitch/port-d3f1ehosfc -565918981</span></span><br><span class="line"><span class="comment"># Peer Address:Port     * -564914601 </span></span><br><span class="line">$ ss -xp | grep port-d3f1ehosfc</span><br><span class="line">Netid  State      Recv-Q Send-Q Local Address:Port                 Peer Address:Port</span><br><span class="line">u_str  ESTAB      0      0      /var/lib/openvswitch/port-d3f1ehosfc -565918981            * -564914601            <span class="built_in">users</span>:((<span class="string">&quot;qemu-kvm&quot;</span>,pid=26495,fd=24))</span><br><span class="line"></span><br><span class="line"><span class="comment"># get its peer</span></span><br><span class="line">$ ss -xp | grep 564914601</span><br><span class="line">u_str  ESTAB      0      0       * -564914601            * -565918981            <span class="built_in">users</span>:((<span class="string">&quot;ovs-vswitchd&quot;</span>,pid=85046,fd=187))</span><br><span class="line">u_str  ESTAB      0      0      /var/lib/openvswitch/port-d3f1ehosfc -565918981            * -564914601            <span class="built_in">users</span>:((<span class="string">&quot;qemu-kvm&quot;</span>,pid=26495,fd=24))</span><br><span class="line"></span><br><span class="line"><span class="comment">##################### Filter #################################</span></span><br><span class="line"><span class="comment"># Show all sockets connecting to 192.168.1.10 on port 443</span></span><br><span class="line"><span class="comment"># ss [option] dst [IP Address]</span></span><br><span class="line">$ ss -t dst 192.168.1.10:443</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show all ssh related connection</span></span><br><span class="line"><span class="comment"># ss [option] [state] [name of the socet state]</span></span><br><span class="line"><span class="comment"># ss [option] dport = :[port number]</span></span><br><span class="line"><span class="comment"># ss [option] sport = :[port number]</span></span><br><span class="line"><span class="comment"># ss [option] &#x27;( dport = :[port number] or sport = :[port number] )&#x27;</span></span><br><span class="line">$ ss -lt sport = :22</span><br><span class="line">$ ss -t state established <span class="string">&#x27;( dport = :ssh or sport = :ssh )&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##################### Filter #################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># memory and backlog size</span></span><br><span class="line">$ ss -ltm</span><br></pre></td></tr></table></figure>

<h2 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h2><p>The <code>lsof</code> utility shows all the currently active file handles(open file) on the system.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># which process(es) open this file</span></span><br><span class="line">$ lsof /some/file</span><br><span class="line"></span><br><span class="line"><span class="comment"># total sockets opened by a process</span></span><br><span class="line">$ lsof -p &lt;PID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># show number ports opened by a process</span></span><br><span class="line"><span class="comment"># -P to show port number instead of its common name</span></span><br><span class="line">$ lsof -p &lt;PID&gt; -P</span><br><span class="line"></span><br><span class="line"><span class="comment"># total sockets opened by a givn user</span></span><br><span class="line">$ lsof -u &lt;USERNAME&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># other useful command like </span></span><br><span class="line"><span class="comment"># who opens port 80</span></span><br><span class="line"><span class="comment"># who opens tcp/udp socket</span></span><br><span class="line">$ lsof -i :80</span><br><span class="line"></span><br><span class="line"><span class="comment"># show host and port with ip not name</span></span><br><span class="line"><span class="comment"># show all open tcp ports or udp ports</span></span><br><span class="line">$ lsof -i tcp -P</span><br><span class="line">$ lsof -i udp -P</span><br></pre></td></tr></table></figure>

<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://github.com/jason-cyun/linux-network-performance-parameters">network parameters</a></li>
<li><a href="https://blog.packagecloud.io/monitoring-tuning-linux-networking-stack-receiving-data/">receiving data from kernel to user</a></li>
<li><a href="https://blog.packagecloud.io/monitoring-tuning-linux-networking-stack-sending-data/">sending data from user to kernel</a></li>
<li><a href="https://blog.cloudflare.com/how-to-achieve-low-latency/">network low latency guide</a></li>
<li><a href="https://www.2daygeek.com/linux-ss-command-monitor-socket-network-connections/">more ss command examples</a></li>
<li><a href="https://computingforgeeks.com/netstat-vs-ss-usage-guide-linux/">netstat and ss usage</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
        <category>network</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>performance</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-kernel-boot</title>
    <url>/2021/11/10/linux-kernel-boot/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p><strong>why need intial ram disk</strong><br>Many Linux distributions ship a single, generic Linux kernel image – one that the distribution’s developers create specifically to boot on a wide variety of hardware. The device drivers for this generic kernel image are included as loadable kernel modules because <code>statically compiling many drivers into one kernel causes the kernel image to be much larger</code>, in some cases to cause boot-time crashes or other problems due to probing for inexistent or conflicting hardware. This <code>static-compiled kernel approach also leaves modules in kernel memory which are no longer used or needed</code>, and raises the <code>problem of detecting and loading the modules necessary to mount the root file system at boot time, or for that matter, deducing where or what the root file system is</code>.</p>
<p>To avoid having to hardcode handling for so many special cases into the kernel, an initial boot stage with a temporary root file-system(ram disk with temporary root fs) is used. This temporary root file-system can contain user-space helpers which do the hardware detection, module loading and device discovery necessary to get the real root file-system mounted</p>
<p>initial ramdisk is for <code>loading a temporary root file system into memory</code>, to be used as part of the Linux startup process. <code>initrd</code> and <code>initramfs</code> refer to <code>two different methods of achieving this</code>. Both are commonly used to make preparations before the real root file system can be mounted, if no real root file system is proivdes, the initial ramdisk is used for root file system which is in memory.</p>
<p>The bootloader will load the kernel and initial root file system image into memory and then start the kernel, passing in the memory address of the image. At the end of its boot sequence, the kernel tries to determine <code>the format of the image from its first few blocks of data</code>, which can lead either to the <code>initrd or initramfs scheme</code>. <span id="more"></span></p>
<!--more-->
<p><strong>initial root file system image format schema</strong>  </p>
<ul>
<li><p><code>initrd scheme</code>: the image may be a file system image (optionally compressed), which is made available in a special block device (&#x2F;dev&#x2F;ram) that is then mounted as the initial root file system during boots, The driver for that file system must be compiled statically into the kernel. Many distributions originally used compressed ext2 file system images. Once the initial root file system is up, the <code>kernel executes /linuxrc as its first process</code>; when it exits, the kernel assumes that the real root file system has been mounted and executes &#x2F;sbin&#x2F;init to begin the normal user-space boot process.</p>
<ul>
<li><code>A ramdev block device is created</code>(default fixed size 16M). It is a ram-based block device, that is a simulated hard disk that uses memory instead of physical disks.</li>
<li>The <code>initrd file is read and unzipped into the device</code>, as if you did zcat initrd | dd of&#x3D;&#x2F;dev&#x2F;ram0 or something similar.</li>
<li>The initrd contains an image of a filesystem, so now you can mount the filesystem as usual: <code>mount /dev/ram0 /root</code>. Naturally, filesystems need a driver, so if you use ext2, the ext2 driver has to be compiled in-kernel.</li>
<li><code>exec /linuxrc</code> as first process which mount real root file system, then call &#x2F;sbin&#x2F;init to begin user-space boot process.</li>
</ul>
</li>
<li><p><code>initramfs scheme</code>: (available since the Linux kernel 2.6.13), the image may be a cpio archive (optionally compressed). The archive is unpacked by the kernel into a special instance of a tmpfs that becomes the initial root file system. This scheme has the advantage of not requiring an intermediate file system or block drivers to be compiled into the kernel. In the initramfs scheme, the <code>kernel executes /init as its first process</code> that is not expected to exit. </p>
<ul>
<li>A tmpfs is mounted: <code>mount -t tmpfs nodev /root</code>. The tmpfs doesn’t need a driver, it is always on-kernel. No device needed, no additional drivers.</li>
<li>The <code>initramfs is uncompressed directly into this new filesystem</code>: zcat initramfs | cpio -i, or similar.</li>
<li><code>exec /init</code> never exit</li>
</ul>
</li>
</ul>
<h2 id="initrd-and-initramfs"><a href="#initrd-and-initramfs" class="headerlink" title="initrd and initramfs"></a>initrd and initramfs</h2><p><strong>initrd schema</strong>  </p>
<ul>
<li>initrd is for Linux kernels 2.4 and lower.</li>
<li>Initrd requires at least one file system driver be compiled into the kernel</li>
<li>A disk created by Initrd has got to have a fixed size</li>
<li>All of the reads&#x2F;writes on Initrd are buffered redundantly (unnecessarily) into main memory</li>
</ul>
<p>So, initrd is deprecated and is replaced by initramfs.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># inspect initrd image(it&#x27;s disk)</span></span><br><span class="line">$ gunzip initrd.gz</span><br><span class="line">$ file -L initrd</span><br><span class="line">initrd: Linux rev 1.0 ext2 filesystem data (mounted or unclean), UUID=6d512aa6-269e-4932-ba2b-83d953559340</span><br><span class="line"></span><br><span class="line">$ mount ‑t ext2 ‑o loop initrd /mnt/initrd</span><br><span class="line">$ <span class="built_in">ls</span> /mnt/initrd</span><br><span class="line">bin  cleanup  dev  drivers.lzm  etc  lib  liblinuxlive  linuxrc  mnt  proc  sbin  sys  tmp  usr  usr.lzm  var</span><br></pre></td></tr></table></figure>

<p><strong>initramfs schema</strong>  </p>
<ul>
<li>initramfs is a Linux 2.6 and above.</li>
<li>This feature is made up from a cpio archive of files that enables an initial root filesystem and init program to reside in kernel memory cache, rather than on a ramdisk, as with initrd filesystems.</li>
<li>with initramfs, you create an archive with the files which the kernel extracts to a tmpfs.</li>
<li>intramfs can increase boot-time flexibility, memory efficiency, and simplicity</li>
<li>dracut is the tool used to create the initramfs image.</li>
<li>initramfs location of init : &#x2F;init</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># inspect initramfs(it&#x27;s just root file system)</span></span><br><span class="line">$ file -L initramfs-3.10.0-1160.el7.x86_64.img</span><br><span class="line">initramfs-3.10.0-1160.el7.x86_64.img: gzip compressed data, from Unix, last modified: Wed Sep 29 18:29:57 2021, max compression</span><br><span class="line"></span><br><span class="line">$ zcat initramfs-3.10.0-1160.el7.x86_64.img | cpio -idmv</span><br></pre></td></tr></table></figure>
<h2 id="create-initramfs"><a href="#create-initramfs" class="headerlink" title="create initramfs"></a>create initramfs</h2><p>Actually, initramfs is created when you build kernel, you can also create initramfs with other tools without build your kernel.<br>When we first boot, we need at least some tools to start working. This includes the init process and some tools like ls, mount, mv, etc. To get those user space tools you can use BusyBox. <code>BusyBox</code> has many useful commands available for just 1.1MB, it’s a binary that support many command</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># use busybox</span></span><br><span class="line">$ busybox <span class="built_in">ls</span></span><br><span class="line">$ busybox <span class="built_in">df</span></span><br></pre></td></tr></table></figure>

<p><strong>create_initramfs.sh</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ARCH=<span class="string">&quot;x86_64&quot;</span></span><br><span class="line">BB_VER=<span class="string">&quot;1.31.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dirs</span></span><br><span class="line"><span class="built_in">mkdir</span> -p root</span><br><span class="line"><span class="built_in">cd</span> root</span><br><span class="line"><span class="built_in">mkdir</span> -p bin dev etc lib mnt proc sbin sys tmp var</span><br><span class="line"><span class="built_in">cd</span> -</span><br><span class="line"></span><br><span class="line"><span class="comment"># Utils</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="string">&quot;root/bin/busybox&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    curl -L <span class="string">&quot;https://www.busybox.net/downloads/binaries/<span class="variable">$&#123;BB_VER&#125;</span>-defconfig-multiarch-musl/busybox-<span class="variable">$&#123;ARCH&#125;</span>&quot;</span> &gt;root/bin/busybox</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">cd</span> root/bin</span><br><span class="line"><span class="built_in">chmod</span> +x busybox</span><br><span class="line"><span class="comment"># as this two may be called before init process, hence link it</span></span><br><span class="line"><span class="built_in">ln</span> -s busybox mount</span><br><span class="line"><span class="built_in">ln</span> -s busybox sh</span><br><span class="line"><span class="built_in">cd</span> -</span><br><span class="line"></span><br><span class="line"><span class="comment"># Init process</span></span><br><span class="line"><span class="comment"># init process create soft link at /bin for all commands that busybox support </span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt;root/init &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">#!/bin/busybox sh</span></span><br><span class="line"><span class="string">/bin/busybox --install -s /bin</span></span><br><span class="line"><span class="string">mount -t devtmpfs  devtmpfs  /dev</span></span><br><span class="line"><span class="string">mount -t proc      proc      /proc</span></span><br><span class="line"><span class="string">mount -t sysfs     sysfs     /sys</span></span><br><span class="line"><span class="string">mount -t tmpfs     tmpfs     /tmp</span></span><br><span class="line"><span class="string">setsid cttyhack sh</span></span><br><span class="line"><span class="string">exec /bin/sh</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="built_in">chmod</span> +x root/init</span><br><span class="line"></span><br><span class="line"><span class="comment"># initramfs creation</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> root</span><br><span class="line">find . | cpio -ov --format=newc | gzip -9 &gt;../initramfs</span><br><span class="line"><span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure>

<h2 id="boot-with-disk-x2F-diskless"><a href="#boot-with-disk-x2F-diskless" class="headerlink" title="boot with disk&#x2F;diskless"></a>boot with disk&#x2F;diskless</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># root filesystem is in an ext2 &quot;hard disk&quot;</span></span><br><span class="line">$ qemu-system-x86_64 -kernel normal/bzImage -drive file=rootfs.ext2</span><br><span class="line"></span><br><span class="line"><span class="comment"># root filesystem is in initramfs</span></span><br><span class="line">$ qemu-system-x86_64 -kernel normal/bzImage -initrd initramfs.img</span><br><span class="line"><span class="comment"># full command to run</span></span><br><span class="line">$ qemu-system-x86_64  -kernel normal/bzImage -initrd initramfs.img -nographic -append <span class="string">&quot;console=ttyS0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># root filesystem is built in kernel</span></span><br><span class="line">$ qemu-system-x86_64 -kernel with_initramfs/bzImage</span><br><span class="line"><span class="comment"># Neither -drive nor -initrd are given.</span></span><br><span class="line"><span class="comment"># with_initramfs/bzImage is a kernel compiled with options identical to normal/bzImage, except for one: CONFIG_INITRAMFS_SOURCE=initramfs.img pointing to the exact same CPIO as from the -initrd example.</span></span><br></pre></td></tr></table></figure>

<h1 id="ramfs-vs-tmpfs"><a href="#ramfs-vs-tmpfs" class="headerlink" title="ramfs vs tmpfs"></a>ramfs vs tmpfs</h1><p><code>A ramdisk</code> is a volatile storage space defined in the RAM memory. all information stored in it will<code> be lost if the device is umounted or  system reboots.</code></p>
<p>In Linux, ramdisks can be <code>created using the command mount and the filesystems tmpfs and ramfs</code></p>
<ul>
<li><p>Tmpfs: Tmpfs is a temporary file system stored <code>in the RAM memory (and/or swap memory)</code>. By specifying this file system with the argument -t of the command mount, you can assign <code>limited memory resources to a temporary file system</code>.</p>
<ul>
<li>stored in ram and swap memory</li>
<li>ensure a limit</li>
<li>adjusted on the fly via ‘mount -o remount …’</li>
<li>Normal users can be allowed write access to tmpfs mounts!</li>
</ul>
</li>
<li><p>Ramfs: Ramfs is similar to Tmpfs, it uses ram memory only and the user <code>can’t ensure a limit</code>, and the allocated resource grows dynamically. If the user doesn’t control the ramfs consumption, ramfs will keep using all the memory until hanging or crashing the system</p>
<ul>
<li>stored in ram only</li>
<li>can not ensure a limit, but traditonal ram disk (&#x2F;dev&#x2F;ramX) has fixed size, default is 16M</li>
<li>cant adjust size on the fly for &#x2F;dev&#x2F;ramX, you need to reboot system or reload kernel module brd.</li>
<li>only root use can access ramfs mounts!</li>
</ul>
</li>
</ul>
<h2 id="ram-disk-ramfs"><a href="#ram-disk-ramfs" class="headerlink" title="ram disk(ramfs)"></a>ram disk(ramfs)</h2><p>As mentioned above, they are two ways to create ram disk, one is using ramfs, the other is using tmpfs.  </p>
<ul>
<li>enable traditional ram disk<br>  <strong>old system</strong> ram disk is built into kernel with these kernel configs, that means after system boots, you will seee <code>/dev/ram0, /dev/ram1, /dev/ramX</code> which has default fixed size configured during kernel compiling. even you have 16 <code>/dev/ramX</code>, <strong>the memory for each block device is not prealloated, memory allocation happens when make fs on that device.</strong>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONFIG_BLK_DEV_RAM=y</span><br><span class="line">CONFIG_BLK_DEV_RAM_COUNT=16</span><br><span class="line">CONFIG_BLK_DEV_RAM_SIZE=16384</span><br></pre></td></tr></table></figure>
  <strong>new system</strong> newer system by default compile it as kernel module <code>brd</code>, you need to load this module when using <code>/dev/ramX</code>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONFIG_BLK_DEV_RAM=m</span><br><span class="line">CONFIG_BLK_DEV_RAM_COUNT=16</span><br><span class="line">CONFIG_BLK_DEV_RAM_SIZE=16384</span><br></pre></td></tr></table></figure></li>
<li>change traditonal ram disk size<br>  <strong>old system</strong> ram disk is built into kernel, there is only one way to change ram disk ize, that’s by appending parmaters to kernel boot line like this.  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kernel /vmlinuz-2.6.32.24 ro root=LABEL=/ rhgb quiet ramdisk_size=10485760</span><br></pre></td></tr></table></figure>
  <strong>new system</strong> ram disk szie can be changed only when <code>brd</code> is loaded  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1G, one ram disk /dev/ram0</span></span><br><span class="line">$ modprobe brd rd_nr=1 rd_size=1048576</span><br></pre></td></tr></table></figure></li>
<li>use traditional ram disk  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkfs /dev/ram0</span><br><span class="line">$ <span class="built_in">mkdir</span> /mnt/randisk</span><br><span class="line">$ mount /dev/ram0 /mnt/ramdisk</span><br><span class="line">$ <span class="built_in">df</span> -h</span><br><span class="line"><span class="built_in">df</span> -h</span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">...</span><br><span class="line">/dev/ram0                 16M  140K   15M   1% /mnt/ramdisk</span><br></pre></td></tr></table></figure></li>
<li>use ramfs not &#x2F;dev&#x2F;ramX(<code>brd</code> is not needed for this)  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mount -t ramfs ramfs /tmp/ramdisk</span><br></pre></td></tr></table></figure>
<h2 id="ram-disk-tmpfs"><a href="#ram-disk-tmpfs" class="headerlink" title="ram disk(tmpfs)"></a>ram disk(tmpfs)</h2>Use tmpfs to create ram disk is easy.<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># memory is allocated only when it&#x27;s used, it&#x27;s not prereserved.</span></span><br><span class="line">$ mount -t tmpfs -o size=10G none /tmp/ramdisk</span><br><span class="line">(base) [root@dev github]<span class="comment"># df -h</span></span><br><span class="line">...</span><br><span class="line">none                      10G     0   10G   0% /tmp/ramdisk</span><br><span class="line"></span><br><span class="line">(base) [root@dev github]<span class="comment"># mount</span></span><br><span class="line">none on /tmp/ramdisk <span class="built_in">type</span> tmpfs (rw,relatime,seclabel,size=10485760k)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>As when umount data on ram disk is gone, hence in order to save data in ram disk when reboot, we need a service that will copy data from ram disk to hard disk also copy it back to ram disk.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vi /lib/systemd/system/ramdisk-sync.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line"># runs before umount service, to make sure, we copy data before umounting</span><br><span class="line"># but if you run umount mannually, data is lost.</span><br><span class="line">Before=umount.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">User=root</span><br><span class="line"></span><br><span class="line"># root below can be change to any user.</span><br><span class="line">ExecStartPre=/bin/chown -Rf root /mnt/ramdisk</span><br><span class="line"># when service starts, copy back when system boots</span><br><span class="line">ExecStart=/usr/bin/rsync -ar /mnt/ramdisk_backup/ /mnt/ramdisk/</span><br><span class="line"># when serivce stops, copy data from ram disk to hard disk</span><br><span class="line">ExecStop=/usr/bin/rsync -ar /mnt/ramdisk/ /mnt/ramdisk_backup/</span><br><span class="line">ExecStopPost=/bin/chown -Rf root /mnt/ramdisk_backup</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">$ vi /etc/fstab</span><br><span class="line"></span><br><span class="line">tmpfs  /mnt/ramdisk  tmpfs  rw,size=110M  0   0</span><br></pre></td></tr></table></figure>

<p>Acutally, there are some ram disk(tmpfs) created by systemd if you check with df, it’s <code>/run/</code> and <code>/dev/shm</code>, <code>sys/fs/cgroup</code> with default size(<font color='red' size=4><strong>half of total physical memory</strong></font>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(base) [root@dev etc]<span class="comment"># df</span></span><br><span class="line">Filesystem              1K-blocks     Used Available Use% Mounted on</span><br><span class="line">devtmpfs                  4074576        0   4074576   0% /dev</span><br><span class="line">tmpfs                     4086484        0   4086484   0% /dev/shm</span><br><span class="line">tmpfs                     4086484     9168   4077316   1% /run</span><br><span class="line">tmpfs                     4086484        0   4086484   0% /sys/fs/cgroup</span><br><span class="line"></span><br><span class="line">(base) [root@dev etc]<span class="comment"># free</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        8172968      979092     4939616        9308     2254260     6880632</span><br><span class="line">Swap:       8257532           0     8257532</span><br><span class="line"></span><br><span class="line">(base) [root@dev etc]<span class="comment"># mount | grep tmpfs</span></span><br><span class="line">devtmpfs on /dev <span class="built_in">type</span> devtmpfs (rw,nosuid,seclabel,size=4074576k,nr_inodes=1018644,mode=755) <span class="comment"># with size</span></span><br><span class="line">tmpfs on /dev/shm <span class="built_in">type</span> tmpfs (rw,nosuid,nodev,seclabel) <span class="comment"># without size half of total memory</span></span><br><span class="line">tmpfs on /run <span class="built_in">type</span> tmpfs (rw,nosuid,nodev,seclabel,mode=755)</span><br><span class="line">tmpfs on /sys/fs/cgroup <span class="built_in">type</span> tmpfs (ro,nosuid,nodev,noexec,seclabel,mode=755)</span><br></pre></td></tr></table></figure>
<p><strong>resize &#x2F;dev&#x2F;shm</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Edit file /etc/fstab (with sudo if needed).</span><br><span class="line">In this file, try to locate a line like this one : none /dev/shm tmpfs defaults,size=4G 0 0.</span><br><span class="line"></span><br><span class="line">Case 1 - This line exists in your /etc/fstab file:</span><br><span class="line"></span><br><span class="line">    Modify the text after size=. For example if you want an 8G size, replace size=4G by size=8G.</span><br><span class="line">    Exit your text editor, then run (with sudo if needed) $ mount -o remount /dev/shm.</span><br><span class="line"></span><br><span class="line">Case 2 - This line does NOT exists in your /etc/fstab file:</span><br><span class="line"></span><br><span class="line">    Append at the end of the file the line none /dev/shm tmpfs defaults,size=4G 0 0, and modify the text after size=. For example if you want an 8G size, replace size=4G by size=8G.</span><br><span class="line">    Exit your text editor, then run (with sudo if needed) $ mount /dev/shm.</span><br></pre></td></tr></table></figure>
<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul>
<li><a href="https://developer.ibm.com/articles/l-linuxboot/">linux boot process</a></li>
<li><a href="https://www.linux.org/threads/specfs-devfs-tmpfs-and-others.9382/">rootfs, initramfs, devfs, tmpfs etc</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
        <category>initramfs</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>initramfs</tag>
        <tag>tmpfs</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-performance-faq</title>
    <url>/2022/10/19/linux-performance-faq/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>linux_iptables_inside</title>
    <url>/2020/11/10/linux-iptables-inside/</url>
    <content><![CDATA[<h1 id="Kernel"><a href="#Kernel" class="headerlink" title="Kernel"></a>Kernel</h1><p><img src="/images/linux/netfilter_table.JPG" alt="framework-table"></p>
<span id="more"></span>

<p>Above lost conntrack table which is important for nat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">                                   netfilter hooks</span><br><span class="line"></span><br><span class="line">                                  +-----------&gt; <span class="built_in">local</span> +-----------+</span><br><span class="line">                                  |             process           |</span><br><span class="line">                                  |                               |</span><br><span class="line">                                  |                               |</span><br><span class="line">                                  |                               |</span><br><span class="line">                                  |                               v</span><br><span class="line">  MANGLE            +-------------+--------+</span><br><span class="line">  FILTER            |                      |               +----------------------+    RAW</span><br><span class="line">  SECURITY          |        input         |               |                      |    conntrack</span><br><span class="line">  SNAT              |                      |               |     output           |    MANGLE</span><br><span class="line">  conntrack         |                      |               |                      |</span><br><span class="line">                    +------+---------------+               |                      |    DNAT</span><br><span class="line">                           ^                               +-------+--------------+    routing</span><br><span class="line">                           |                                       |                   FILTER</span><br><span class="line">                           |                                       |                   SECURITY</span><br><span class="line">                           |            +---------------------+    |         +-------------+</span><br><span class="line">     +-----------+                      |                     |    +-------&gt; |             |</span><br><span class="line">+--&gt; |pre routing+----  route    -----&gt; |      forward        |              |post routing +----&gt;</span><br><span class="line">     |           |      lookup          |                     +------------&gt; |             |</span><br><span class="line">     +-----------+                      +---------------------+              +-------------+</span><br><span class="line"></span><br><span class="line">     RAW                                       MANGLE                         MANGLE</span><br><span class="line">     conntrack                                 FILTER                         SNAT</span><br><span class="line">                                                                              conntrack</span><br><span class="line">     MANGLE                                    SECURITY</span><br><span class="line">     DNAT</span><br><span class="line">     routing</span><br><span class="line"><span class="comment"># Security means selinux rules</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/linux/netfilter_framework.png" alt="framework"><br><font color='red'><strong>从逻辑上来说每个Hook Point, 可以有不同的Table，并且Table是有固定优先级的，在同一个Hook的同一个Table 内，rule 是按照添加的先后顺序执行的，但是实现上iptable的每个表只注册了一个公共entry（callback)在某些链表中，也就是虽然每个iptable table支持在不同的point（input，output etc），但是都是统一的入口函数, 然后在这个统一的函数如找到具体是point的rules。</strong></font></p>
<h1 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h1><p>iptables实现防火墙功能的原理：在数据包经过内核的过程中有五处关键地方，分别是PREROUTING、INPUT、OUTPUT、FORWARD、POSTROUTING(chain)，称为钩子函数，iptables这款用户空间的软件可以在这5处地方写规则，对经过的数据包进行处理，规则一般的定义为“如果数据包头符合这样的条件，就这样处理数据包”, iptables中定义有5条链，说白了就是上面说的5个钩子函数，因为每个钩子函数中可以定义多条规则，每当数据包到达一个钩子函数时，iptables就会从钩子函数中第一条规则开始检查，看该数据包是否满足规则所定义的条件。<font color='red'><strong>如果满足，系统就会根据该条规则所定义的方法处理该数据包；否则iptables将继续检查下一条规则，如果该数据包不符合钩子函数中任一条规则，iptables就会根据该函数预先定义的默认策略来处理数据包</strong></font></p>
<p>iptables中定义的表，分别表示提供的功能，有filter表（实现包过滤， deny, drop etc）、nat表（实现网络地址转换）、mangle表（实现包修改）、raw表（实现数据跟踪），这些表具有一定的优先级, <code>table priority is fixed at each Hook point.</code></p>
<p><strong>raw–&gt;mangle–&gt;nat–&gt;filter</strong></p>
<p><em><strong>Inside each table, rules are executed by order one by one</strong></em></p>
<ul>
<li>insert (head)</li>
<li>append (tail)</li>
</ul>
<h1 id="iptables-command"><a href="#iptables-command" class="headerlink" title="iptables command"></a>iptables command</h1><p><code>iptables [-t 表] [操作命令] [链] [规则匹配器] [-j 目标动作]</code></p>
<p><strong>Table</strong><br><img src="/images/linux/iptables_cmd_table.JPG" alt="table"></p>
<p><strong>Operation</strong><br><img src="/images/linux/iptables_cmd_op.JPG" alt="op"></p>
<p><strong>Condition</strong><br><img src="/images/linux/iptables_cmd_con.JPG" alt="con"></p>
<p><strong>Target:</strong></p>
<p><img src="/images/linux/iptables_cmd_t.JPG" alt="target"></p>
<p>ACCEPT will terminate rule matching in the same table?<br>REJECT, DROP will terminate all, stop here.<br>one more target: 用户自定义的链名：跳转到这条链下，进行匹配</p>
<p>PS：</p>
<ul>
<li>目标地址转换一般在PREROUTING链上操作</li>
<li>源地址转换一般在POSTROUTING链上操作</li>
<li><font color='red'>if without -t, default use filter table </font></li>
</ul>
<h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><h3 id="show-commands"><a href="#show-commands" class="headerlink" title="show commands"></a>show commands</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Please NOTE this may not show all rules!!! as user may create custom chain like docker does</span></span><br><span class="line"><span class="comment"># show all rules at DOCKER chain(can be used as target)</span></span><br><span class="line">$ iptables -nv -L PREROUTING -t  nat</span><br><span class="line">Chain PREROUTING (policy ACCEPT 24 packets, 2840 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    6   272 DOCKER     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL</span><br><span class="line">$ <span class="keyword">for</span> table <span class="keyword">in</span> raw mangle nat filter security; <span class="keyword">do</span> <span class="built_in">printf</span> <span class="string">&#x27;=%.0s&#x27;</span> &#123;1..50&#125;; <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;table&#125;</span>...&quot;</span>;iptables -nvL DOCKER  -t <span class="variable">$table</span>;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show all rules at PREROUTING chain</span></span><br><span class="line">$ <span class="keyword">for</span> table <span class="keyword">in</span> raw mangle nat filter security; <span class="keyword">do</span> <span class="built_in">printf</span> <span class="string">&#x27;=%.0s&#x27;</span> &#123;1..50&#125;; <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;table&#125;</span>...&quot;</span>; iptables -nvL PREROUTING -t <span class="variable">$table</span>;<span class="keyword">done</span></span><br><span class="line"><span class="comment"># show command used by iptable to add the rule</span></span><br><span class="line">$ <span class="keyword">for</span> table <span class="keyword">in</span> raw mangle nat filter security; <span class="keyword">do</span> <span class="built_in">printf</span> <span class="string">&#x27;=%.0s&#x27;</span> &#123;1..50&#125;; <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;table&#125;</span>...&quot;</span>; iptables -S PREROUTING -t <span class="variable">$table</span>;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show all rules at INPUT chain</span></span><br><span class="line">$ <span class="keyword">for</span> table <span class="keyword">in</span> raw mangle nat filter security; <span class="keyword">do</span> <span class="built_in">printf</span> <span class="string">&#x27;=%.0s&#x27;</span> &#123;1..50&#125;; <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;table&#125;</span>...&quot;</span>; iptables -nvL INPUT -t <span class="variable">$table</span>;<span class="keyword">done</span></span><br><span class="line">$ <span class="keyword">for</span> table <span class="keyword">in</span> raw mangle nat filter security; <span class="keyword">do</span> <span class="built_in">printf</span> <span class="string">&#x27;=%.0s&#x27;</span> &#123;1..50&#125;; <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;table&#125;</span>...&quot;</span>; iptables -S INPUT -t <span class="variable">$table</span>;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show all rules at FORWARD chain</span></span><br><span class="line">$ <span class="keyword">for</span> table <span class="keyword">in</span> raw mangle nat filter security; <span class="keyword">do</span> <span class="built_in">printf</span> <span class="string">&#x27;=%.0s&#x27;</span> &#123;1..50&#125;; <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;table&#125;</span>...&quot;</span>; iptables -nvL FORWARD -t <span class="variable">$table</span>;<span class="keyword">done</span></span><br><span class="line">$ <span class="keyword">for</span> table <span class="keyword">in</span> raw mangle nat filter security; <span class="keyword">do</span> <span class="built_in">printf</span> <span class="string">&#x27;=%.0s&#x27;</span> &#123;1..50&#125;; <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;table&#125;</span>...&quot;</span>; iptables -S FORWARD -t <span class="variable">$table</span>;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show all rules at OUTPUT chain</span></span><br><span class="line">$ <span class="keyword">for</span> table <span class="keyword">in</span> raw mangle nat filter security; <span class="keyword">do</span> <span class="built_in">printf</span> <span class="string">&#x27;=%.0s&#x27;</span> &#123;1..50&#125;; <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;table&#125;</span>...&quot;</span>; iptables -nvL OUTPUT -t <span class="variable">$table</span>;<span class="keyword">done</span></span><br><span class="line">$ <span class="keyword">for</span> table <span class="keyword">in</span> raw mangle nat filter security; <span class="keyword">do</span> <span class="built_in">printf</span> <span class="string">&#x27;=%.0s&#x27;</span> &#123;1..50&#125;; <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;table&#125;</span>...&quot;</span>; iptables -S OUTPUT -t <span class="variable">$table</span>;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show all rules at POSTROUTING chain</span></span><br><span class="line">$ <span class="keyword">for</span> table <span class="keyword">in</span> raw mangle nat filter security; <span class="keyword">do</span> <span class="built_in">printf</span> <span class="string">&#x27;=%.0s&#x27;</span> &#123;1..50&#125;; <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;table&#125;</span>...&quot;</span>; iptables -nvL POSTROUTING -t <span class="variable">$table</span>;<span class="keyword">done</span></span><br><span class="line">$ <span class="keyword">for</span> table <span class="keyword">in</span> raw mangle nat filter security; <span class="keyword">do</span> <span class="built_in">printf</span> <span class="string">&#x27;=%.0s&#x27;</span> &#123;1..50&#125;; <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;table&#125;</span>...&quot;</span>; iptables -S POSTROUTING -t <span class="variable">$table</span>;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######################## Another way to show all rules#######################################################################################</span></span><br><span class="line"><span class="comment"># show all nat table at different chains(target or hook point)</span></span><br><span class="line">$ iptables -nvL -t nat</span><br><span class="line"><span class="comment"># show command to replay the rule</span></span><br><span class="line">$ iptables -S  -t nat</span><br><span class="line"></span><br><span class="line">$ iptables -nvL -t filter</span><br><span class="line">$ iptables -nvL -t security</span><br><span class="line">$ iptables -nvL -t raw</span><br><span class="line">$ iptables -nvL -t mangle</span><br><span class="line"></span><br><span class="line"><span class="comment"># show nat table at given chain(target)</span></span><br><span class="line">$ iptables -nvL PREROUTING -t nat</span><br><span class="line"><span class="comment"># show command to replay the rule</span></span><br><span class="line">$ iptables -S  PREROUTING -t nat</span><br><span class="line"><span class="comment">######################## Another way to show all rules#######################################################################################</span></span><br></pre></td></tr></table></figure>

<p><strong>show iptable rules in particular network namespace</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show all rules in mangle under network namespace bb2fdae4-44bf-40a3-8acc-dfb554d79d76</span></span><br><span class="line">$ <span class="built_in">alias</span> nsc=<span class="string">&#x27;ip netns exec&#x27;</span></span><br><span class="line"></span><br><span class="line">root@dev:~/ping<span class="comment"># nsc bb2fdae4-44bf-40a3-8acc-dfb554d79d76 iptables  -nvL -t mangle</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT 111K packets, 5802K bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">1788K  399M DIVERT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            socket</span><br><span class="line"> 8121  268K DIVERT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0            icmptype 0</span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT 1792K packets, 399M bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 2614K packets, 196M bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT 2614K packets, 196M bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain DIVERT (2 references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">1796K  399M MARK       all  --  *      *       0.0.0.0/0            0.0.0.0/0            MARK <span class="built_in">set</span> 0x1</span><br><span class="line">1796K  399M ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Only show PREROUTING rules <span class="keyword">in</span> mangle table</span><br><span class="line"></span><br><span class="line">root@dev:~/ping<span class="comment"># nsc bb2fdae4-44bf-40a3-8acc-dfb554d79d76 iptables  -nv -L PREROUTING -t mangle</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT 111K packets, 5806K bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">1789K  399M DIVERT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            socket</span><br><span class="line"> 8121  268K DIVERT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0            icmptype 0</span><br><span class="line"></span><br><span class="line">DIVERT is self-defined chain like a hook point</span><br><span class="line"></span><br><span class="line">root@dev:~/ping<span class="comment"># nsc bb2fdae4-44bf-40a3-8acc-dfb554d79d76 iptables  -nv -L DIVERT -t mangle</span></span><br><span class="line">Chain DIVERT (2 references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">1797K  400M MARK       all  --  *      *       0.0.0.0/0            0.0.0.0/0            MARK <span class="built_in">set</span> 0x1</span><br><span class="line">1797K  400M ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line"></span><br><span class="line">show rules with number</span><br><span class="line">root@dev:~/ping<span class="comment"># nsc bb2fdae4-44bf-40a3-8acc-dfb554d79d76 iptables  -nv -L DIVERT -t mangle --line-number</span></span><br><span class="line">Chain DIVERT (2 references)</span><br><span class="line">num   pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">1    1798K  400M MARK       all  --  *      *       0.0.0.0/0            0.0.0.0/0            MARK <span class="built_in">set</span> 0x1</span><br><span class="line">2    1798K  400M ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@dev:~/ping<span class="comment">#  nsc bb2fdae4-44bf-40a3-8acc-dfb554d79d76 iptables  -nvL -t mangle --line-number</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT 111K packets, 5811K bytes)</span><br><span class="line">num   pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">1    1791K  400M DIVERT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            socket</span><br><span class="line">2     8121  268K DIVERT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0            icmptype 0</span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT 1795K packets, 399M bytes)</span><br><span class="line">num   pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 2618K packets, 197M bytes)</span><br><span class="line">num   pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT 2618K packets, 197M bytes)</span><br><span class="line">num   pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain DIVERT (2 references)</span><br><span class="line">num   pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">1    1799K  400M MARK       all  --  *      *       0.0.0.0/0            0.0.0.0/0            MARK <span class="built_in">set</span> 0x1</span><br><span class="line">2    1799K  400M ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Delete rule by rule number</span></span><br><span class="line">root@dev:~/ping<span class="comment"># nsc bb2fdae4-44bf-40a3-8acc-dfb554d79d76 iptables -D PREROUTING  1 -t mangle</span></span><br><span class="line"></span><br><span class="line">root@dev:~/ping<span class="comment"># nsc bb2fdae4-44bf-40a3-8acc-dfb554d79d76 iptables  -nvL -t mangle --line-number</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT 93 packets, 5580 bytes)</span><br><span class="line">num   pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">1     8121  268K DIVERT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0            icmptype 0</span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 52 packets, 3120 bytes)</span><br><span class="line">num   pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT 52 packets, 3120 bytes)</span><br><span class="line">num   pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain DIVERT (1 references)</span><br><span class="line">num   pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">1    1799K  400M MARK       all  --  *      *       0.0.0.0/0            0.0.0.0/0            MARK <span class="built_in">set</span> 0x1</span><br><span class="line">2    1799K  400M ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="set-command"><a href="#set-command" class="headerlink" title="set command"></a>set command</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># flush all rules in filter table(default)</span></span><br><span class="line">$ iptables -F</span><br><span class="line"></span><br><span class="line"><span class="comment"># flush all rules in mangle table</span></span><br><span class="line">$ iptables -F -t mangle</span><br><span class="line"></span><br><span class="line"><span class="comment"># set default policy in filter table for INPUT chain</span></span><br><span class="line">$ iptables -P INPUT DROP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阻止来自IP地址x.x.x.x eth0 tcp的包</span></span><br><span class="line">$ iptables -A INPUT -i eth0 -p tcp -s x.x.x.x -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment"># check rule exist or not</span></span><br><span class="line">$ iptables -C OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line"><span class="comment"># if no rule $? == 1, otherwise 0</span></span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许所有来自外部的SSH连接请求，即只允许进入eth0接口，并且目标端口为22的数据包</span></span><br><span class="line">$ iptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line">$ iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>

<h2 id="save-and-restore"><a href="#save-and-restore" class="headerlink" title="save and restore"></a>save and restore</h2><p>使用iptables-save可以保存到特定文件中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables-save &gt;/etc/sysconfig/iptables_save</span><br></pre></td></tr></table></figure>

<p>使用iptables-restore可以恢复规则</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables-restore&lt;/etc/sysconfig/iptables_save</span><br></pre></td></tr></table></figure>
<h2 id="iptables-match-with-module-condition"><a href="#iptables-match-with-module-condition" class="headerlink" title="iptables match with module condition"></a>iptables match with module condition</h2><p>As basic iptables only supports protocol, saddr, sport etc conditions when matching, so some extensions add more conditions when matching packet, these extensions are organized as module like (time, limit, socket, ttl, state, mark etc)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kernel files</span><br><span class="line">net/netfilter/xt_time.c</span><br><span class="line">net/netfilter/xt_socket.c</span><br><span class="line">net/netfilter/xt_state.c</span><br></pre></td></tr></table></figure>
<h3 id="addrtype-地址类型"><a href="#addrtype-地址类型" class="headerlink" title="addrtype 地址类型"></a>addrtype 地址类型</h3><p>Format:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[!] --src-type <span class="built_in">type</span>[,...]      Match <span class="built_in">source</span> address <span class="built_in">type</span></span><br><span class="line">[!] --dst-type <span class="built_in">type</span>[,...]      Match destination address <span class="built_in">type</span></span><br><span class="line">    --limit-iface-in           Match only on the packet<span class="string">&#x27;s incoming device</span></span><br><span class="line"><span class="string">    --limit-iface-out          Match only on the packet&#x27;</span>s outgoing device</span><br><span class="line"></span><br><span class="line">UNSPEC</span><br><span class="line">UNICAST</span><br><span class="line">LOCAL</span><br><span class="line">BROADCAST</span><br><span class="line">ANYCAST</span><br><span class="line">MULTICAST</span><br><span class="line">BLACKHOLE</span><br><span class="line">UNREACHABLE</span><br><span class="line">PROHIBIT</span><br><span class="line">THROW</span><br><span class="line">NAT</span><br><span class="line"></span><br><span class="line">Here are some examples</span><br><span class="line"></span><br><span class="line">$ iptables  -A OUTPUT -m addrtype --src-type LOCAL -j ACCEPT</span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line">ACCEPT     all  --  anywhere             anywhere             ADDRTYPE match src-type LOCAL</span><br><span class="line"></span><br><span class="line">$ iptables  -A INPUT -m addrtype --dst-type LOCAL -j ACCEPT</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line">ACCEPT     all  --  anywhere             anywhere             ADDRTYPE match dst-type LOCAL</span><br></pre></td></tr></table></figure>
<p><mark>LOCAL means the address is one the interface, say host has eth0(10.172.1.32), if address is 10.172.1.32 means LOCAL.</mark></p>
<h3 id="limit限制流量："><a href="#limit限制流量：" class="headerlink" title="limit限制流量："></a>limit限制流量：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -m limit --limit 1000/s               设置最大平均匹配速率</span></span><br><span class="line"><span class="comment"># -m limit --limit-burst 15             设置一开始匹配的最大数据包数量</span></span><br><span class="line"><span class="comment"># -m limit --limit 5/m --limit-burst 15 表示一开始能匹配的数据包数量为15个，每匹配到一个，limit-burst的值减1,所以匹配到15个时，该值为0,以后每过12s，limit-burst的值会加1,表示又能匹配1个数据包</span></span><br><span class="line"></span><br><span class="line">$ iptables -A INPUT -i eth0 -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 5/m --limit-burst 15 -j ACCEPT</span><br><span class="line">$ iptables -A INPUT -i eth0 -j DROP</span><br></pre></td></tr></table></figure>

<p><strong>要点</strong>：</p>
<ul>
<li>–limit-burst的值要比–limit的大</li>
<li>limit本身没有丢弃数据包的功能，因此，需要第二条规则一起才能实现限速的功能</li>
</ul>
<h3 id="time-：在特定时间内匹配"><a href="#time-：在特定时间内匹配" class="headerlink" title="time ：在特定时间内匹配"></a>time ：在特定时间内匹配</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -m time 	说明</span></span><br><span class="line"><span class="comment"># --monthdays day1[,day2] 	在每个月的特定天匹配</span></span><br><span class="line"><span class="comment"># --timestart hh:mm:ss 	    在每天的指定时间开始匹配</span></span><br><span class="line"><span class="comment"># --timestop hh:mm:ss 	    在每天的指定时间停止匹配</span></span><br><span class="line"><span class="comment"># --weekdays day1[,day2] 	    在每个星期的指定工作日匹配，值可以是1-7</span></span><br><span class="line"></span><br><span class="line">$ iptables -A INPUT -i eth0 -m time --weekdays 1,2,3,4 -jACCEPT</span><br><span class="line">$ iptables -A INPUT -i eth0 -j DROP</span><br></pre></td></tr></table></figure>

<h3 id="ttl：匹配符合规则的ttl值的数据包"><a href="#ttl：匹配符合规则的ttl值的数据包" class="headerlink" title="ttl：匹配符合规则的ttl值的数据包"></a>ttl：匹配符合规则的ttl值的数据包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参数 	说明</span></span><br><span class="line"><span class="comment"># --ttl -eq 100 	匹配TTL值为100的数据包</span></span><br><span class="line"><span class="comment"># --ttl -gt 100 	匹配TTL值大于100的数据包</span></span><br><span class="line"><span class="comment"># --ttl -lt 100 	匹配TTL值小于100的数据包</span></span><br><span class="line"></span><br><span class="line">$ iptables -A OUTPUT -m ttl --ttl-eq 100 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h3 id="multiport：匹配离散的多个端口"><a href="#multiport：匹配离散的多个端口" class="headerlink" title="multiport：匹配离散的多个端口"></a>multiport：匹配离散的多个端口</h3><p>iptables –dport and –sport 只支持连续的端口.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参数 	说明</span></span><br><span class="line"><span class="comment"># --sports port1[,port2,port3] 	匹配源端口</span></span><br><span class="line"><span class="comment"># --dports port1[,port2,port3] 	匹配目的端口</span></span><br><span class="line"><span class="comment"># --ports port1[,port2,port3] 	匹配源端口或目的端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连续的端口</span></span><br><span class="line">$ iptables -A INPUT --sports 5000:5050 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 离散的端口</span></span><br><span class="line">$ iptables -A INPUT -m multiport --sports 22，80，8080 -j DROP</span><br></pre></td></tr></table></figure>

<h3 id="state：匹配指定的状态数据包"><a href="#state：匹配指定的状态数据包" class="headerlink" title="state：匹配指定的状态数据包"></a>state：匹配指定的状态数据包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参数 	说明</span></span><br><span class="line"><span class="comment"># --state value 	value可以为NEW、RELATED（有关联的）、ESTABLISHED、INVALID（未知连接）</span></span><br><span class="line"></span><br><span class="line">$ iptables -A INPUT -m state --state NEW，ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>

<h3 id="mark：匹配带有指定mark值的数据包"><a href="#mark：匹配带有指定mark值的数据包" class="headerlink" title="mark：匹配带有指定mark值的数据包"></a>mark：匹配带有指定mark值的数据包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参数 	说明</span></span><br><span class="line">--mark value 	匹配mark标记为value的数据包</span><br><span class="line"></span><br><span class="line">$ iptables -t mangle -A INPUT -m mark --mark 1 -j DROP</span><br></pre></td></tr></table></figure>

<h3 id="mac：匹配特定的mac地址"><a href="#mac：匹配特定的mac地址" class="headerlink" title="mac：匹配特定的mac地址"></a>mac：匹配特定的mac地址</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A FORWARD -m mac --mac-source 00:0C:24:FA:19:80 -j DROP</span><br></pre></td></tr></table></figure>
<h3 id="statistic-负载均衡"><a href="#statistic-负载均衡" class="headerlink" title="statistic: 负载均衡"></a>statistic: 负载均衡</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--mode mode</span><br><span class="line">    Set the matching mode of the matching rule, supported modes are `random and nth`.</span><br><span class="line"></span><br><span class="line">[!] --probability p</span><br><span class="line">    Set the probability <span class="keyword">for</span> a packet to be randomly matched. It only works with the  random  mode.  p</span><br><span class="line">    must be within 0.0 and 1.0. The supported granularity is <span class="keyword">in</span> 1/2147483648th increments.</span><br><span class="line"></span><br><span class="line">[!] --every n</span><br><span class="line">    Match  one  packet  every  nth  packet.  It  works  only with the nth mode (see also the --packet option).</span><br><span class="line"></span><br><span class="line">--packet p</span><br><span class="line">    Set the initial counter value (0 &lt;= p &lt;= n-1, default 0) <span class="keyword">for</span> the nth mode.</span><br><span class="line"></span><br><span class="line"><span class="comment"># RR</span></span><br><span class="line">$ iptables -A PREROUTING -t nat -d 172.17.64.8 -m statistic --mode nth --every 2 --packet 0 -j DNAT --to-destination 192.168.100.160</span><br><span class="line">$ iptables -A PREROUTING -t nat -d 172.17.64.8  -m statistic --mode nth --every 2 --packet 1 -j DNAT --to-destination 192.168.100.161</span><br><span class="line"></span><br><span class="line"><span class="comment"># random</span></span><br><span class="line">$ iptables -A PREROUTING -t nat -d 172.17.64.8 -m statistic --mode random  --probability 0.5 -j DNAT --to-destination 192.168.100.160</span><br><span class="line">$ iptables -A PREROUTING -t nat -d 172.17.64.8  -m statistic --mode random  --probability 0.5 -j DNAT --to-destination 192.168.100.161</span><br></pre></td></tr></table></figure>
<h2 id="iptables-with-extended-target-modules"><a href="#iptables-with-extended-target-modules" class="headerlink" title="iptables with extended target modules"></a>iptables with extended target modules</h2><p>Basically, iptables is very simple, only support ACCEPT, DROP, more targets are provided by modules<br>Here are frequently used target.</p>
<ul>
<li><p>BALANCE<br>This allows you to DNAT connections in a round-robin way over a given range of destination addresses.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A PREROUTING -t nat -j BALANCE --to-destination 192.168.1.1-192.168.1.10</span><br></pre></td></tr></table></figure>
</li>
<li><p>DNAT</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A PREROUTING -t nat -j DNAT --to-destination 192.168.1.1-192.168.1.10</span><br><span class="line">$ iptables -A PREROUTING -t nat -j DNAT --to-destination 192.168.1.1-192.168.1.10:1000-2000</span><br></pre></td></tr></table></figure>
<p>Only valid in nat table at PREROUTING and OUTPUT chains</p>
</li>
<li><p>LOG<br>Turn on kernel logging of matching packets</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A PREROUTING -t nat -j LOG --log-level info</span><br><span class="line">$ iptables -A PREROUTING -t nat -j LOG --log-level info --log-prefix tag1</span><br></pre></td></tr></table></figure></li>
<li><p>MARK<br>This is used to set the netfilter mark value associated with the packet. It is only valid in the mangle table<br>iptables -A PREROUTING -t mangle -j MARK –set-mark 0x10</p>
</li>
<li><p>MASQUERADE<br>This target is only valid in the nat table, in the POSTROUTING chain， like SNAT but use address of out dev as the source ip.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A POSTROUTING -t nat -j MASQUERADE</span><br></pre></td></tr></table></figure></li>
<li><p>REDIRECT(change the receiving ip(port is optional))<br>This target is only valid in the nat table, in the PREROUTING and OUTPUT chains, and user-defined chains which are only called from those chains. It redirects the packet to the machine itself by changing the destination IP to the primary address of the incoming interface, special DNAT without providing dest by admin!!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --to-ports port[-port]</span></span><br><span class="line"><span class="comment"># This specifies a destination port or range of ports to use</span></span><br><span class="line"></span><br><span class="line">$ iptables --table nat --append PREROUTING --protocol tcp --dport 80 --jump REDIRECT --to-ports 8080</span><br></pre></td></tr></table></figure></li>
<li><p>REJECT<br>This is used to send back an error packet in response to the matched packet: otherwise it is equivalent to DROP so it is a terminating TARGET, ending rule traversal. This target is only valid in the INPUT, FORWARD and OUTPUT chains, and user-defined chains which are only called from those chains</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --reject-with type</span></span><br><span class="line"><span class="comment"># The type given can be</span></span><br><span class="line"><span class="comment">#     icmp-net-unreachable</span></span><br><span class="line"><span class="comment">#     icmp-host-unreachable</span></span><br><span class="line"><span class="comment">#     icmp-port-unreachable</span></span><br><span class="line"><span class="comment">#     icmp-proto-unreachable</span></span><br><span class="line"><span class="comment">#     icmp-net-prohibited</span></span><br><span class="line"><span class="comment">#     icmp-host-prohibited or</span></span><br><span class="line"><span class="comment">#     icmp-admin-prohibited (*)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>SNAT<br>This target is only valid in the nat table, in the POSTROUTING chain</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --to-source ipaddr[-ipaddr][:port-port]</span></span><br></pre></td></tr></table></figure></li>
<li><p>comment to a rule<br>For a single rule, you can add 256 characters for it to explain what is used for!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -m comment --comment &quot;comment for this rule&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="negative-one-condition-add-before-it"><a href="#negative-one-condition-add-before-it" class="headerlink" title="negative one condition add ! before it"></a>negative one condition add ! before it</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -t nat -I POSTROUTING  -s 172.17.0.0/16 ! -o  docker0 -j LOG --log-level info</span><br><span class="line">$ iptables -t nat -I POSTROUTING  ! -s 172.17.0.0/16 ! -o  docker0 -j LOG --log-level info</span><br></pre></td></tr></table></figure>

<h3 id="what’s-the-rule-order-in-one-Chain"><a href="#what’s-the-rule-order-in-one-Chain" class="headerlink" title="what’s the rule order in one Chain"></a>what’s the rule order in one Chain</h3><p>Let’s say there are several rules in one Chain, if the first rule doesn’t match, check next one, what about the rule matches, should we go to check next rule depends on the action of the matched rule.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- ACCEPT:           check next one <span class="keyword">in</span> the chain</span><br><span class="line">- REJECT/DROP:      NOT check next one, <span class="built_in">return</span> out of iptables</span><br><span class="line">- SNAT/DANT:        after SNAT or DNAT, check next one <span class="keyword">in</span> the chain</span><br><span class="line">- RETURN:           just jump out the Chain, next one <span class="keyword">in</span> this chain is not checked, check next chain</span><br></pre></td></tr></table></figure>

<h3 id="what’s-conntrack-table"><a href="#what’s-conntrack-table" class="headerlink" title="what’s conntrack table"></a>what’s conntrack table</h3><p>  nat is stateful, that means you should save info after nat, conntrack table is actually flow table, the initial use is for NAT, as when you do SNAT<br>  after post routing, you need to save the 5 tuples to a flow entry<br>  orig: src, dst, src_port, dst_port, protocol<br>  nat change: m_src, dst, m_src_port, dst_port, protocol,<br>  when reply packet comes back, it should match the nat_change port, then do DNAT<br>  then goes routing.</p>
<p>  In order to support this, conntrack table was introduced, it insert some callbacks<br>  at NF_HOOK POINT with different priority.</p>
<p>  let’s explain how conntrack fit the example, when you do SNAT after POSTROUTING, one entry is create<br>  at conntrack table, when reply packet comes back, as conntrack table is examined before nat table, hence<br>  <mark><strong>we found a matched entry in conntrack table, will never check nat table at all at PREROUTING, skip nat table but check other table if insert rule at PREROUTING</strong></mark></p>
<p>  <strong>Note: now conntrack is not only used for nat, but for all connection, even without NAT, you can also delete&#x2F;create&#x2F;update entry in this table by $conntrack command</strong></p>
<h3 id="show-command-used-for-each-rule"><a href="#show-command-used-for-each-rule" class="headerlink" title="show command used for each rule"></a>show command used for each rule</h3><p>dump the command used for all rules with</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables-save</span><br><span class="line">...</span><br><span class="line">-A PREROUTING -j LOG --log-prefix nat-pre-jason --log-level 6</span><br><span class="line">-A PREROUTING -d 172.17.0.1/32 -j LOG --log-prefix nat-pre --log-level 6</span><br><span class="line">-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class="line">-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER</span><br><span class="line">-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE</span><br><span class="line">-A DOCKER -i docker0 -j RETURN</span><br></pre></td></tr></table></figure>
<h3 id="how-custom-chain-is-used"><a href="#how-custom-chain-is-used" class="headerlink" title="how custom chain is used"></a>how custom chain is used</h3><p>custom chain is similar like other chains(INPUT, OUTPUT), belongs to a table(filter, nat etc) you can create rules in it, but it has some difference</p>
<ul>
<li>must create custom chain before creating rule in it, unlike other chains, they are kernel built-in chains</li>
<li>custom chain has no fixed hook point unlike other built-in chains have fixed hook point in kernel, custom chain only works when a rule in other built-in chain refers to it by <code>-j CUSTOM_CHAIN</code>.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create custom chain</span></span><br><span class="line">$ iptables -t filter -N WEB_CHAIN</span><br><span class="line">$ iptables --list</span><br><span class="line">...</span><br><span class="line">Chain WEB_CHAIN (0 references)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a rule in the chain</span></span><br><span class="line">$ iptables -t filter -I WEB_CHAIN -s 1.1.1.1 -j DROP</span><br><span class="line">$ iptables -t filter -nvL WEB_CHAIN</span><br><span class="line">Chain WEB_CHAIN (0 references)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">    0     0 DROP       all  --  *      *       1.1.1.1              0.0.0.0/0</span><br><span class="line"></span><br><span class="line"><span class="comment"># other rule refer to custom chain set target as custom chain</span></span><br><span class="line">$ iptables -t filter -I INPUT -p tcp --dport 80 -j WEB_CHAIN</span><br><span class="line"></span><br><span class="line">$ iptables -t filter -nvL INPUT</span><br><span class="line">Chain INPUT (policy ACCEPT 154 packets, 11509 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">    0     0 WEB_CHAIN  tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80</span><br><span class="line"></span><br><span class="line">$ iptables -t filter -nvL WEB_CHAIN</span><br><span class="line">Chain WEB_CHAIN (1 references)----&gt; one reference</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br><span class="line">    0     0 DROP       all  --  *      *       1.1.1.1              0.0.0.0/0</span><br></pre></td></tr></table></figure>

<h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><ul>
<li><a href="http://blog.51cto.com/13677371/2094355">iptables command</a></li>
<li><a href="https://www.cnblogs.com/bill1015/p/6847841.html">example commands</a></li>
<li><a href="http://blog.chinaunix.net/uid-20786208-id-5132450.html">kernel netfilter</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
        <category>iptables</category>
      </categories>
      <tags>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-numa</title>
    <url>/2022/04/27/linux-numa/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>The NUMA-aware architecture is a hardware design which separates its cores into multiple clusters where each cluster has its own local memory region and still allows cores from one cluster to access all memory in the system. However, if a processor needs to use memory that is not its own memory region, it will take longer to access that (remote) memory. For applications where performance is crucial, preventing the need to access memory from other clusters is critical.</p>
<ul>
<li>A socket refers to the <code>physical location where a processor package plugs into a motherboard</code>. The processor that plugs into the motherboard is also known as a socket.</li>
<li>A core is an individual execution unit within a processor that can independently execute a software execution thread and maintains its execution state separate from the execution state of any other cores within a processor.</li>
<li>A thread refers to a hardware-based thread execution capability. For example, the Intel Xeon 7560 has eight cores, each of which has hardware that can effectively execute two software execution threads simultaneously, yielding 16 threads.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lscpu </span><br><span class="line">Architecture:                    aarch64</span><br><span class="line">CPU op-mode(s):                  32-bit, 64-bit</span><br><span class="line">Byte Order:                      Little Endian</span><br><span class="line">CPU(s):                          128</span><br><span class="line">On-line CPU(s) list:             0-127</span><br><span class="line">Thread(s) per core:              1</span><br><span class="line">Core(s) per socket:              128</span><br><span class="line">Socket(s):                       1</span><br><span class="line">NUMA node(s):                    2</span><br><span class="line">Vendor ID:                       ARM</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><img src="https://www.boost.org/doc/libs/develop/libs/fiber/doc/NUMA.png" alt="Numa topolgy"></p>
<p>From the hardware perspective, a NUMA system is a computer platform that comprises multiple components or assemblies each of which may <code>contain 0 or more CPUs, local memory, and/or IO buses</code>.  we’ll call the components&#x2F;assemblies ‘cells’ as well.</p>
<p>The cells of the NUMA system are connected together with some sort of system interconnect–e.g., a crossbar or point-to-point link are common types of NUMA system interconnects. Both of these types of interconnects can be aggregated to create NUMA platforms with cells at multiple distances from other cells.</p>
<p>Memory access time and effective memory bandwidth varies depending on how far away the cell containing the CPU or IO bus making the memory access is from the cell containing the target memory.</p>
<p>Linux divides the system’s hardware resources into multiple software abstractions called “nodes”. Linux maps the nodes onto the physical cells of the hardware platform, abstracting away some of the details for some architectures. As with physical cells, software nodes may contain 0 or more CPUs, memory and&#x2F;or IO buses. And, again, memory accesses to memory on “closer” nodes–nodes that map to closer cells–will generally experience faster access times and higher effective bandwidth than accesses to more remote cells.</p>
<p>For <code>each node with memory, Linux constructs an independent memory management subsystem</code>, complete with its own free page lists, in-use page lists, usage statistics and locks to mediate access. In addition, Linux <code>constructs for each memory zone [one or more of DMA, DMA32, NORMAL, HIGH_MEMORY, MOVABLE]</code>, an ordered “zonelist”. A zonelist specifies the zones&#x2F;nodes to visit when a selected zone&#x2F;node cannot satisfy the allocation request. This situation, when a zone has no available memory to satisfy a request, is called “overflow” or “fallback”.</p>
<p>By default, <code>Linux will attempt to satisfy memory allocation requests from the node to which the CPU that executes the request is assigned</code>. Specifically, Linux will attempt to allocate from the first node in the appropriate zonelist for the node where the request originates. This is called “local allocation.” <code>If the “local” node cannot satisfy the request, the kernel will examine other nodes’ zones in the selected zonelist looking for the first zone in the list that can satisfy the request.</code></p>
<h1 id="NUma"><a href="#NUma" class="headerlink" title="NUma"></a>NUma</h1><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><p>each CPU is assigned its own local memory and can access memory from other CPUs in the system.<br>each processor contains many cores with a shared on-chip cache and an off-chip memory and has variable memory access costs across different parts of the memory within a server</p>
<h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><p>In Non-Uniform Memory Access (NUMA), <code>system memory is divided into zones (called nodes)</code>, which are allocated to particular CPUs or sockets. <code>Access to memory that is local to a CPU is faster than memory connected to remote CPUs on that system. </code></p>
<p>Memory allocation policies defines for Numa system</p>
<ul>
<li><p>Default(local allocation): This mode specifies that any nondefault thread memory policy be removed, so that the memory policy “falls back” to the system default policy.  The system default policy is “local allocation”—that is, <code>allocate memory on the node of the CPU that triggered the allocation.</code>  nodemask must be specified as NULL.  <code>If the &quot;local node&quot; contains no free memory, the system will attempt to allocate memory from a &quot;near by&quot; node.</code></p>
</li>
<li><p>Bind: This mode defines a strict policy that restricts memory allocation to the nodes specified in nodemask. <code>If nodemask specifies more than one node, page allocations will come from the node with the lowest numeric node ID first, until that node contains no free memory</code>. Allocations will then come from the node with the next highest node ID specified in nodemask and so forth, until none of the specified nodes contain free memory.  Pages will not be allocated from any node not specified in the nodemask.</p>
</li>
<li><p>Interleave: <code>This mode interleaves page allocations across the nodes specified in nodemask in numeric node ID order</code>.  This optimizes for bandwidth instead of latency by spreading out pages and memory accesses to those pages across multiple nodes.  However, accesses to a single page will still be limited to the memory bandwidth of a single node.</p>
</li>
<li><p>Preferred: This mode sets the preferred node for allocation. The kernel will try to allocate pages from this node first and fall back to “near by” nodes if the preferred node is low on free memory. <code>If nodemask specifies more than one node ID, the first node in the mask will be selected as the preferred node.</code>  If the nodemask and maxnode arguments specify the empty set, then the policy specifies “local allocation” (like the system default policy discussed above).</p>
</li>
</ul>
<h1 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h1><h2 id="Taskset"><a href="#Taskset" class="headerlink" title="Taskset"></a>Taskset</h2><p>The taskset command is considered the most portable Linux way of <code>setting or retrieving the CPU affinity (binding)</code> of a running process (thread). it only sets cpu affinity of running process, not touch memory allocation.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start process on given cpu</span></span><br><span class="line">$ taskset -c 0 ./app</span><br><span class="line"></span><br><span class="line"><span class="comment"># change process to run on given cpu</span></span><br><span class="line">$ taskset -p -c 0 <span class="variable">$pid</span></span><br><span class="line">$ taskset -c 0 -p <span class="variable">$pid</span> <span class="comment"># error!!!</span></span><br><span class="line"></span><br><span class="line">$ taskset -p -c 0,2 <span class="variable">$pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get process affinity</span></span><br><span class="line">$ taskset -<span class="built_in">cp</span> <span class="variable">$pid</span></span><br><span class="line">$ taskset -p <span class="variable">$pid</span></span><br></pre></td></tr></table></figure>

<h2 id="numactl"><a href="#numactl" class="headerlink" title="numactl"></a>numactl</h2><p>numactl can be used to <code>control the NUMA policy for processes, shared memory, or both</code>. One key thing about numactl is that, unlike taskset, you <strong><code>can’t use it to change the policy of a running application</code>.</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y numactl</span><br><span class="line"></span><br><span class="line"><span class="comment"># show nodes topology and free/total numa node memory</span></span><br><span class="line">$ numactl -H</span><br><span class="line">available: 2 nodes (0-1)</span><br><span class="line">node 0 cpus: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30</span><br><span class="line">node 0 size: 65442 MB</span><br><span class="line">node 0 free: 1903 MB</span><br><span class="line">node 1 cpus: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31</span><br><span class="line">node 1 size: 65536 MB</span><br><span class="line">node 1 free: 17423 MB</span><br><span class="line">node distances:</span><br><span class="line">node   0   1 </span><br><span class="line">  0:  10  21 </span><br><span class="line">  1:  21  10 </span><br><span class="line"></span><br><span class="line"><span class="comment"># show policy</span></span><br><span class="line">$ numactl --show</span><br><span class="line">policy: default</span><br><span class="line">preferred node: current</span><br><span class="line">physcpubind: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 </span><br><span class="line">cpubind: 0 1 </span><br><span class="line">nodebind: 0 1 </span><br><span class="line">membind: 0 1 </span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>--interleave=&lt;nodes&gt;</code> policy has the application allocate memory in a round-robin fashion on “nodes.” With only two NUMA nodes, this means memory will be allocated first on node 0, followed by node 1, node 0, node 1, and so on. If the memory allocation cannot work on the current interleave target node (node x), it falls back to other nodes, but in the same round-robin fashion. You can control which nodes are used for memory interleaving or use them all</p>
<blockquote>
<p><code>--interleave=0,1 or --interleave=all</code></p>
</blockquote>
</li>
<li><p><code>--membind=&lt;nodes&gt;</code> policy forces memory to be allocated from the list of provided nodes</p>
<blockquote>
<p><code>--membind=0 or --menbind=all</code></p>
</blockquote>
</li>
<li><p><code>--preferred=&lt;node&gt;</code> policy causes memory allocation on the node you specify, but if it can’t, it will fall back to using memory from other nodes.</p>
<blockquote>
<p><code>--preferred=1</code></p>
</blockquote>
</li>
<li><p><code>--localalloc</code> policy forces allocation of memory on the current node</p>
<blockquote>
<p><code>--localalloc</code></p>
</blockquote>
</li>
<li><p><code>--cpunodebind=&lt;nodes&gt;</code> option causes processes to run only on the CPUs of the specified node(s)</p>
<blockquote>
<p><code>--cpunodebind=0</code></p>
</blockquote>
</li>
<li><p><code>--physcpubind=&lt;CPUs&gt;</code> policy executes the process(es) on the list of CPUs provided</p>
<blockquote>
<p><code>--physcpubind=+0-4,8-12</code></p>
</blockquote>
</li>
</ul>
<h2 id="numastat"><a href="#numastat" class="headerlink" title="numastat"></a>numastat</h2><p>The numastat tool is provided by the numactl package, and <strong>displays memory statistics (such as allocation hits and misses) for processes</strong> and the operating system on a per-NUMA-node basis. The default tracking categories for the numastat command are outlined as follows: </p>
<ul>
<li>numa_hit<blockquote>
<p><code>The number of pages</code> that were successfully allocated to this node. </p>
</blockquote>
</li>
<li>numa_miss<blockquote>
<p>The <code>number of pages that were allocated on this node because of low memory on the intended node</code>. Each numa_miss event has a corresponding numa_foreign event on another node. </p>
</blockquote>
</li>
<li>numa_foreign<blockquote>
<p>The <code>number of pages initially intended for this node that were allocated to another node instead</code>. Each numa_foreign event has a corresponding numa_miss event on another node. </p>
</blockquote>
</li>
<li>interleave_hit<blockquote>
<p>The number of interleave policy pages successfully allocated to this node. </p>
</blockquote>
</li>
<li>local_node<blockquote>
<p>The number of pages successfully allocated on this node, <code>by a process on this node.</code></p>
</blockquote>
</li>
<li>other_node<blockquote>
<p>The number of pages allocated on this node, by a process on another node.</p>
</blockquote>
</li>
</ul>
<p><strong>Options</strong></p>
<ul>
<li><code>-m</code> Displays system-wide memory usage information on a per-node basis, similar to the information found in &#x2F;proc&#x2F;meminfo</li>
<li><code>-p pattern</code> Displays per-node memory information for the specified pattern. If the value for pattern is comprised of digits, numastat assumes that it is a numerical process identifier</li>
<li><code>-s</code> Sorts the displayed data in descending order so that the biggest memory consumers (according to the total column) are listed first</li>
<li><code>-v</code> Displays more verbose information. Namely, process information for multiple processes will display detailed information for each process</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># system wide view of each numa node</span></span><br><span class="line">$ numastat -m</span><br><span class="line"><span class="comment"># more info about system wide view</span></span><br><span class="line">$ numastat -<span class="built_in">mv</span></span><br><span class="line"></span><br><span class="line">Per-node system memory usage (<span class="keyword">in</span> MBs):</span><br><span class="line">                          Node 0          Node 1           Total</span><br><span class="line">                 --------------- --------------- ---------------</span><br><span class="line">MemTotal                65442.34        65536.00       130978.34</span><br><span class="line">MemFree                  2073.16        17484.08        19557.24</span><br><span class="line">MemUsed                 63369.18        48051.92       111421.10</span><br><span class="line">Active                  28696.10        29089.88        57785.98</span><br><span class="line">Inactive                31393.39        15842.16        47235.55</span><br><span class="line">Active(anon)             1541.27         1925.21         3466.48</span><br><span class="line">Inactive(anon)           9547.17         1200.94        10748.11</span><br><span class="line">Active(file)            27154.82        27164.67        54319.50</span><br><span class="line">Inactive(file)          21846.21        14641.22        36487.43</span><br><span class="line">Unevictable                 0.00            0.00            0.00</span><br><span class="line">Mlocked                     0.00            0.00            0.00</span><br><span class="line">Dirty                       0.13            0.02            0.15</span><br><span class="line">Writeback                   0.00            0.00            0.00</span><br><span class="line">FilePages               58718.86        43096.30       101815.16</span><br><span class="line">Mapped                    101.45          222.64          324.10</span><br><span class="line">AnonPages                1370.99         1835.88         3206.87</span><br><span class="line">Shmem                    9712.72         1288.01        11000.73</span><br><span class="line">KernelStack                 9.66            8.83           18.48</span><br><span class="line">PageTables                 18.27           18.41           36.68</span><br><span class="line">NFS_Unstable                0.00            0.00            0.00</span><br><span class="line">Bounce                      0.00            0.00            0.00</span><br><span class="line">WritebackTmp                0.00            0.00            0.00</span><br><span class="line">Slab                     1441.85         1498.11         2939.95</span><br><span class="line">SReclaimable             1312.22         1387.39         2699.61</span><br><span class="line">SUnreclaim                129.62          110.72          240.34</span><br><span class="line">AnonHugePages             140.00         1238.00         1378.00</span><br><span class="line">HugePages_Total             0.00            0.00            0.00</span><br><span class="line">HugePages_Free              0.00            0.00            0.00</span><br><span class="line">HugePages_Surp              0.00            0.00            0.00</span><br><span class="line"></span><br><span class="line"><span class="comment"># systemwid view in MB unit</span></span><br><span class="line">$ numastat -c</span><br><span class="line"></span><br><span class="line">Per-node numastat info (<span class="keyword">in</span> MBs):</span><br><span class="line">                    Node 0     Node 1       Total</span><br><span class="line">                ---------- ---------- -----------</span><br><span class="line">Numa_Hit        6889434917 6552564429 13441999346</span><br><span class="line">Numa_Miss         19506824   18047982    37554806</span><br><span class="line">Numa_Foreign      18047982   19506824    37554806</span><br><span class="line">Interleave_Hit         232        230         462</span><br><span class="line">Local_Node      6889391241 6552564755 13441955995</span><br><span class="line">Other_Node        19550500   18047656    37598156</span><br><span class="line"></span><br><span class="line"><span class="comment"># show numa memory used by process who has command qemu-kvm</span></span><br><span class="line">$ numastat -p qemu-kvm</span><br><span class="line">$ numastat -p <span class="variable">$pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sort by total</span></span><br><span class="line">$ numastat -s -p qemu-kvm</span><br><span class="line">Per-node process memory usage (<span class="keyword">in</span> MBs)</span><br><span class="line">PID                         Node 0          Node 1           Total</span><br><span class="line">-----------------  --------------- --------------- ---------------</span><br><span class="line">116345 (qemu-kvm)            73.78           47.09          120.87</span><br><span class="line">37545 (qemu-kvm)              3.90          106.01          109.91</span><br><span class="line">117212 (qemu-kvm)            74.95           16.20           91.15</span><br><span class="line">114870 (qemu-kvm)            74.74            8.19           82.93</span><br><span class="line">20080 (qemu-kvm)              5.45           76.87           82.32</span><br><span class="line">134180 (qemu-kvm)            59.51           22.23           81.73</span><br><span class="line">131889 (qemu-kvm)            76.20            4.18           80.38</span><br><span class="line">50070 (qemu-kvm)             50.39           26.17           76.57</span><br><span class="line">60596 (qemu-kvm)             22.01           50.14           72.14</span><br><span class="line">16097 (qemu-kvm)             68.00            4.11           72.12</span><br><span class="line">131511 (qemu-kvm)            44.75           26.11           70.87</span><br><span class="line">-----------------  --------------- --------------- ---------------</span><br><span class="line">Total                       553.68          387.30          940.98</span><br><span class="line"></span><br><span class="line"><span class="comment"># more detail about of each process</span></span><br><span class="line"><span class="comment"># numastat  -v -p qemu-kvm</span></span><br><span class="line">Per-node process memory usage (<span class="keyword">in</span> MBs) <span class="keyword">for</span> PID 16097 (qemu-kvm)</span><br><span class="line">                           Node 0          Node 1           Total</span><br><span class="line">                  --------------- --------------- ---------------</span><br><span class="line">Huge                         4.00            0.00            4.00</span><br><span class="line">Heap                        45.83            0.00           45.83</span><br><span class="line">Stack                        0.04            0.00            0.04</span><br><span class="line">Private                     18.14            4.11           22.25</span><br><span class="line">----------------  --------------- --------------- ---------------</span><br><span class="line">Total                       68.00            4.11           72.12</span><br><span class="line"></span><br><span class="line">Per-node process memory usage (<span class="keyword">in</span> MBs) <span class="keyword">for</span> PID 20080 (qemu-kvm)</span><br><span class="line">                           Node 0          Node 1           Total</span><br><span class="line">                  --------------- --------------- ---------------</span><br><span class="line">Huge                         0.00            4.00            4.00</span><br><span class="line">Heap                         2.00           54.64           56.64</span><br><span class="line">Stack                        0.00            0.04            0.04</span><br><span class="line">Private                      3.44           18.20           21.64</span><br><span class="line">----------------  --------------- --------------- ---------------</span><br><span class="line">Total                        5.45           76.88           82.32</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="numad"><a href="#numad" class="headerlink" title="numad"></a>numad</h2><p>numad is an <code>automatic NUMA affinity management daemon. It monitors NUMA topology and resource usage within a system in order to dynamically improve NUMA resource allocation and management.</code>, it scans all processes of the system within period of time.</p>
<p>Note that when numad is enabled, <strong>its behavior overrides the default behavior of automatic NUMA balancing(scheduler)</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install numad</span><br><span class="line">$ service nuamd start</span><br><span class="line"></span><br><span class="line"><span class="comment"># log file</span></span><br><span class="line">$ <span class="built_in">ls</span> /var/log/numad.log</span><br><span class="line">/var/log/numad.log</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> /etc/numad.conf </span><br><span class="line"><span class="comment"># Config file for numad</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Default INTERVAL is 15</span></span><br><span class="line"><span class="comment"># modify below to change it</span></span><br><span class="line">INTERVAL=15</span><br></pre></td></tr></table></figure>

<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://www.kernel.org/doc/html/v4.19/vm/numa.html">numa introduction</a></li>
<li><a href="https://www.kernel.org/doc/Documentation/admin-guide/mm/numa_memory_policy.rst">numa memory policy</a></li>
<li><a href="https://www.intel.com/content/www/us/en/developer/articles/training/pmem-learn-more-series-part-2.html">cpu cache hierarchy</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
        <category>numa</category>
      </categories>
      <tags>
        <tag>numa</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-performance-perf</title>
    <url>/2023/02/22/linux-performance-perf/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Perf can do lots of thing, like <code>collect, cache miss, context switch, per-thread, per-cpu etc</code> But it needs kernel supporting, <code>perf is always used for system performace debugging</code>, <strong>gperftools for application performance debugging(perf also can take application performance debugging)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Usage</span><br><span class="line"></span><br><span class="line">    #perf</span><br><span class="line">    usage: perf [--version] [--help] COMMAND [ARGS]</span><br><span class="line"></span><br><span class="line">    The most commonly used perf commands are:</span><br><span class="line">     annotate        Read perf.data (created by perf record) and display annotated code</span><br><span class="line">     diff            Read two perf.data files and display the differential profile</span><br><span class="line">     list            List all symbolic event types</span><br><span class="line">     probe           Define new dynamic tracepoints</span><br><span class="line">     record          Run a command and record its profile into perf.data</span><br><span class="line">     report          Read perf.data (created by perf record) and display the profile</span><br><span class="line">     script          Read perf.data (created by perf record) and display trace output</span><br><span class="line">     stat            Run a command and gather performance counter statistics</span><br><span class="line">     top             System profiling tool.</span><br><span class="line"></span><br><span class="line">    details about each command</span><br><span class="line">    #perf annotate --help</span><br><span class="line"></span><br><span class="line">    Summary: perf has two ACTIONS &#x27;stat&#x27; and &#x27;record&#x27; for profiling</span><br><span class="line">    &#x27;stat&#x27; uses counter while &#x27;record&#x27; uses samples( xx samples/per second)</span><br><span class="line">    which can show call graph(stacks)</span><br><span class="line">    to collect information about the system, cpu, thread, call graph</span><br><span class="line"></span><br><span class="line">    As EVENT is the core part of perf that it can monitor, EVENT includes</span><br><span class="line">        Hardware event like (cach misses, LL2 cache etc)</span><br><span class="line">        Software event like (page fault, context switch etc)</span><br><span class="line">        tracepoint predefined in kernel(requires kernel compiled with debugfs)</span><br><span class="line">        Dynamic event (create by #perf probe --add )</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>event overview</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># run a command under perf stat</span></span><br><span class="line">$ perf <span class="built_in">stat</span> [-e &lt;EVENT&gt; | --event=EVENT] [-a] &lt;<span class="built_in">command</span>&gt;</span><br><span class="line">$ perf <span class="built_in">stat</span> [-e &lt;EVENT&gt; | --event=EVENT] [-a] — &lt;<span class="built_in">command</span>&gt; [&lt;options&gt;]</span><br><span class="line">$ perf <span class="built_in">stat</span> [-e &lt;EVENT&gt; | --event=EVENT] [-a] record [-o file] — &lt;<span class="built_in">command</span>&gt; [&lt;options&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># OR attach to a running process</span></span><br><span class="line">$ perf <span class="built_in">stat</span> [-e &lt;EVENT&gt; | --event=EVENT] [-a] -p <span class="variable">$pid</span></span><br><span class="line"></span><br><span class="line">important options</span><br><span class="line"></span><br><span class="line">-i: by default perf <span class="built_in">stat</span> without -i option count all processes, forked (and threads cloned) from target process after starting of counting. With perf <span class="built_in">stat</span> ./program it will profile all child processes too, and with perf <span class="built_in">stat</span> -p <span class="variable">$PID</span> with attaching to already running <span class="variable">$PID</span> it will profile target process and all child processes started after attaching. use -i to <span class="built_in">disable</span> counting child.</span><br><span class="line"></span><br><span class="line"><span class="comment"># ================= remote cache and remote dram access for multiple numa =======================================</span></span><br><span class="line"><span class="comment">#  offcore_response.all_data_rd.llc_miss.remote_dram </span></span><br><span class="line"><span class="comment">#       [Counts all demand &amp; prefetch data reads that miss the L3 and the data is returned from remote dram]</span></span><br><span class="line"><span class="comment">#  offcore_response.all_data_rd.llc_miss.remote_hit_forward</span></span><br><span class="line"><span class="comment">#       [Counts all demand &amp; prefetch data reads that miss the L3 and clean or shared data is transferred from remote cache]</span></span><br><span class="line"><span class="comment">#  offcore_response.all_data_rd.llc_miss.remote_hitm </span></span><br><span class="line"><span class="comment">#       [Counts all demand &amp; prefetch data reads that miss the L3 and the modified data is transferred from remote cache]</span></span><br><span class="line"><span class="comment">#  offcore_response.all_reads.llc_miss.remote_dram   </span></span><br><span class="line"><span class="comment">#       [Counts all data/code/rfo reads (demand &amp; prefetch) that miss the L3 and the data is returned from remote dram]</span></span><br><span class="line"><span class="comment">#  offcore_response.all_reads.llc_miss.remote_hit_forward</span></span><br><span class="line"><span class="comment">#       [Counts all data/code/rfo reads (demand &amp; prefetch) that miss the L3 and clean or shared data is transferred from remote cache]</span></span><br><span class="line"><span class="comment">#  offcore_response.all_reads.llc_miss.remote_hitm   </span></span><br><span class="line"><span class="comment">#       [Counts all data/code/rfo reads (demand &amp; prefetch) that miss the L3 and the modified data is transferred from remote cache]</span></span><br><span class="line"><span class="comment">#  offcore_response.demand_rfo.llc_miss.remote_hitm  </span></span><br><span class="line"><span class="comment">#       [Counts all demand data writes (RFOs) that miss the L3 and the modified data is transferred from remote cache]</span></span><br><span class="line"><span class="comment"># ================= remote cache and remote dram access for multiple numa =======================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># splitlock</span></span><br><span class="line">$ perf <span class="built_in">stat</span> -e cpu/event=0xf4,<span class="built_in">umask</span>=0x10/ -a -I 1000 </span><br><span class="line">===</span><br><span class="line">$ perf <span class="built_in">stat</span> -e sq_misc.split_lock -a -I 1000</span><br><span class="line"></span><br><span class="line"><span class="comment"># run a application that accesss automic memory cross cache-line, henc generate splitlock</span></span><br><span class="line">$ perf <span class="built_in">stat</span> -e sq_misc.split_lock -a -I 100 ./sp</span><br><span class="line"><span class="comment">#           time             counts unit events</span></span><br><span class="line">     0.108722215             36,456      sq_misc.split_lock                                          </span><br><span class="line">     0.214217317             37,401      sq_misc.split_lock                                          </span><br><span class="line">     0.318182137             37,700      sq_misc.split_lock           </span><br><span class="line"></span><br><span class="line"><span class="comment"># total last level cache</span></span><br><span class="line">$ lscpu | grep <span class="string">&#x27;L3 cache&#x27;</span></span><br><span class="line">L3 cache:              40960K</span><br><span class="line"></span><br><span class="line"><span class="comment"># intel cqm need hardware and kernel support</span></span><br><span class="line">$ <span class="built_in">cat</span> /proc/cpuinfo | grep rdt_a</span><br><span class="line">$ grep  <span class="string">&#x27;RDT_A&#x27;</span> /boot/config-$(<span class="built_in">uname</span> -r)</span><br><span class="line"></span><br><span class="line">$ perf <span class="built_in">stat</span> -a -e intel_cqm/llc_occupancy/ -I 1000 -p <span class="variable">$pid</span></span><br><span class="line">$ perf <span class="built_in">stat</span> -a -e intel_cqm/total_bytes/ -I 1000 -p <span class="variable">$pid</span></span><br><span class="line">$ perf <span class="built_in">stat</span> -a -e intel_cqm/local_bytes/ -I 1000 -p <span class="variable">$pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># last level cache occupancy</span></span><br><span class="line">$ perf <span class="built_in">stat</span> -a -e intel_cqm/llc_occupancy/ -I 1000 <span class="built_in">sleep</span> 100</span><br><span class="line"><span class="comment">#           time             counts  unit events</span></span><br><span class="line">     1.004945555         35,061,760 Bytes intel_cqm/llc_occupancy/                                    </span><br><span class="line">     2.007805514         46,989,312 Bytes intel_cqm/llc_occupancy/                                    </span><br><span class="line">$ perf <span class="built_in">stat</span> -a -e intel_cqm/llc_occupancy/ -I 1000 ./sp</span><br><span class="line"><span class="comment">#           time             counts  unit events</span></span><br><span class="line">     1.011122701         31,391,744 Bytes intel_cqm/llc_occupancy/                                    </span><br><span class="line">     2.018970467         42,401,792 Bytes intel_cqm/llc_occupancy/                                    </span><br><span class="line"></span><br><span class="line">$ perf <span class="built_in">stat</span> -a -e intel_cqm/total_bytes/ -I 1000 <span class="built_in">sleep</span> 30</span><br><span class="line"><span class="comment">#           time             counts unit events</span></span><br><span class="line">     1.007463857               0.00 MB   intel_cqm/total_bytes/                                      </span><br><span class="line">     2.011665924               0.00 MB   intel_cqm/total_bytes/                       </span><br><span class="line"></span><br><span class="line">$ perf <span class="built_in">stat</span> -a -e intel_cqm/local_bytes/ -I 1000 <span class="built_in">sleep</span> 30</span><br><span class="line"><span class="comment">#           time             counts unit events</span></span><br><span class="line">     1.008000842               0.00 MB   intel_cqm/local_bytes/                                      </span><br><span class="line">     2.012502066               0.00 MB   intel_cqm/local_bytes/  </span><br><span class="line"></span><br><span class="line"><span class="comment"># -----For memory bandwith on new kernel(&gt;=4.14), use this way----------</span></span><br><span class="line"><span class="comment"># this need cpu and kernel supports</span></span><br><span class="line">$ <span class="built_in">cat</span> /proc/cpuinfo | grep rdt_a</span><br><span class="line">$ grep  <span class="string">&#x27;RESCTRL&#x27;</span> /boot/config-$(<span class="built_in">uname</span> -r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mount the resctrl filesystem.</span></span><br><span class="line">$ mount -t resctrl resctrl -o mba_MBps /sys/fs/resctrl</span><br><span class="line"><span class="comment"># after mount check</span></span><br><span class="line">$ <span class="built_in">ls</span> -p /sys/fs/resctrl/</span><br><span class="line">cpus  cpus_list  info/  mode  mon_data/  mon_groups/  schemata  size  tasks</span><br><span class="line"><span class="comment"># ======================host level=====================</span></span><br><span class="line"><span class="comment"># Print the number of llc occupancy on the first socket.</span></span><br><span class="line">$ <span class="built_in">cat</span> /sys/fs/resctrl/mon_data/mon_L3_00/llc_occupancy</span><br><span class="line"><span class="comment"># Print the number of local bytes on the first socket.</span></span><br><span class="line">$ <span class="built_in">cat</span> /sys/fs/resctrl/mon_data/mon_L3_00/mbm_local_bytes</span><br><span class="line"><span class="comment"># Print the number of total bytes on the first socket.</span></span><br><span class="line">$ <span class="built_in">cat</span> /sys/fs/resctrl/mon_data/mon_L3_00/mbm_total_bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print the number of llc occupancy on the second socket.</span></span><br><span class="line">$ <span class="built_in">cat</span> /sys/fs/resctrl/mon_data/mon_L3_01/llc_occupancy</span><br><span class="line"><span class="comment"># Print the number of local bytes on the second socket.</span></span><br><span class="line">$ <span class="built_in">cat</span> /sys/fs/resctrl/mon_data/mon_L3_01/mbm_local_bytes</span><br><span class="line"><span class="comment"># Print the number of total bytes on the second socket.</span></span><br><span class="line">$ <span class="built_in">cat</span> /sys/fs/resctrl/mon_data/mon_L3_01/mbm_total_bytes</span><br><span class="line"><span class="comment"># ======================host level=====================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ====================== group level=====================</span></span><br><span class="line"><span class="comment"># group level mean collect mbm data of all task in this group</span></span><br><span class="line">$ <span class="built_in">mkdir</span> /sys/fs/resctrl/mon_groups/test</span><br><span class="line">$ <span class="built_in">ls</span> /sys/fs/resctrl/mon_groups/test</span><br><span class="line">cpus  cpus_list  mon_data/  tasks</span><br><span class="line">$ <span class="built_in">ls</span> /sys/fs/resctrl/mon_groups/test/mon_data/mon_L3_00</span><br><span class="line">llc_occupancy  mbm_local_bytes  mbm_total_bytes</span><br><span class="line"><span class="comment"># mbm data of this group</span></span><br><span class="line">$ <span class="built_in">ls</span> /sys/fs/resctrl/mon_groups/test/mon_data/</span><br><span class="line">mon_L3_00/  mon_L3_01/</span><br><span class="line"></span><br><span class="line"><span class="comment"># then add task(process to this group)</span></span><br><span class="line">$ <span class="built_in">echo</span> 245543 /sys/fs/resctrl/mon_groups/test/tasks</span><br><span class="line"><span class="comment"># ====================== group level=====================</span></span><br><span class="line"><span class="comment"># -----For memory bandwith on new kernel(&gt;=4.14), use this way----------</span></span><br></pre></td></tr></table></figure>

<h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># command help</span></span><br><span class="line"><span class="comment"># List all symbolic event types, event has another format: Raw which is number!!!</span></span><br><span class="line">$ perf list [hw|sw|cache|tracepoint|pmu|event_glob]</span><br><span class="line">- <span class="string">&#x27;hw&#x27;</span> or <span class="string">&#x27;hardware&#x27;</span> to list hardware events such as cache-misses, etc.</span><br><span class="line">- <span class="string">&#x27;sw&#x27;</span> or <span class="string">&#x27;software&#x27;</span> to list software events such as context switches, etc.</span><br><span class="line">- <span class="string">&#x27;cache&#x27;</span> or <span class="string">&#x27;hwcache&#x27;</span> to list hardware cache events such as L1-dcache-loads, etc.</span><br><span class="line">- <span class="string">&#x27;tracepoint&#x27;</span> to list all tracepoint events, alternatively use subsys_glob:event_glob to filter by tracepoint subsystems such as <span class="built_in">sched</span>, block, etc</span><br><span class="line">- <span class="string">&#x27;pmu&#x27;</span> to <span class="built_in">print</span> the kernel supplied PMU events.</span><br><span class="line">- As a last resort, it will <span class="keyword">do</span> a substring search <span class="keyword">in</span> all event names</span><br><span class="line"></span><br><span class="line"><span class="comment"># list the available PMUs</span></span><br><span class="line">$ <span class="built_in">ls</span> /sys/devices/*/events/</span><br><span class="line">/sys/devices/cpu/events/:</span><br><span class="line">branch-instructions  bus-cycles    cache-references  cycles-ct  el-abort     el-commit    el-start      mem-loads   ref-cycles  tx-capacity  tx-conflict</span><br><span class="line">branch-misses        cache-misses  cpu-cycles        cycles-t   el-capacity  el-conflict  instructions  mem-stores  tx-abort    tx-commit    tx-start</span><br><span class="line"></span><br><span class="line">/sys/devices/intel_cqm/events/:</span><br><span class="line">llc_occupancy          llc_occupancy.scale     llc_occupancy.unit  local_bytes.per-pkg  local_bytes.unit  total_bytes.per-pkg  total_bytes.unit</span><br><span class="line">llc_occupancy.per-pkg  llc_occupancy.snapshot  local_bytes         local_bytes.scale    total_bytes       total_bytes.scale</span><br><span class="line"></span><br><span class="line">/sys/devices/power/events/:</span><br><span class="line">energy-cores  energy-cores.scale  energy-cores.unit  energy-gpu  energy-gpu.scale  energy-gpu.unit  energy-pkg  energy-pkg.scale  energy-pkg.unit  energy-ram  energy-ram.scale  energy-ram.unit</span><br><span class="line"></span><br><span class="line">/sys/devices/uncore_imc_0/events/:</span><br><span class="line">cas_count_read  cas_count_read.scale  cas_count_read.unit  cas_count_write  cas_count_write.scale  cas_count_write.unit  clockticks</span><br><span class="line"></span><br><span class="line">/sys/devices/uncore_imc_1/events/:</span><br><span class="line">cas_count_read  cas_count_read.scale  cas_count_read.unit  cas_count_write  cas_count_write.scale  cas_count_write.unit  clockticks</span><br><span class="line"></span><br><span class="line">/sys/devices/uncore_imc_4/events/:</span><br><span class="line">cas_count_read  cas_count_read.scale  cas_count_read.unit  cas_count_write  cas_count_write.scale  cas_count_write.unit  clockticks</span><br><span class="line"></span><br><span class="line">/sys/devices/uncore_imc_5/events/:</span><br><span class="line">cas_count_read  cas_count_read.scale  cas_count_read.unit  cas_count_write  cas_count_write.scale  cas_count_write.unit  clockticks</span><br><span class="line"></span><br><span class="line"><span class="comment"># check Raw of one PMU event</span></span><br><span class="line">$ <span class="built_in">cat</span> /sys/devices/cpu/events/cache-misses </span><br><span class="line">event=0x2e,<span class="built_in">umask</span>=0x41</span><br><span class="line"></span><br><span class="line"><span class="comment"># L1 cache</span></span><br><span class="line">$ perf <span class="built_in">stat</span> -e L1-dcache-loads,L1-dcache-load-misses,L1-dcache-stores <span class="built_in">sleep</span> 1</span><br><span class="line"><span class="comment"># L3 cache</span></span><br><span class="line">$ perf <span class="built_in">stat</span> -e LLC-loads,LLC-load-misses,LLC-stores,LLC-prefetches <span class="built_in">sleep</span> 1</span><br><span class="line"></span><br><span class="line">$ perf <span class="built_in">stat</span> -e cache-misses <span class="built_in">sleep</span> 1</span><br><span class="line">equal to</span><br><span class="line">$ perf <span class="built_in">stat</span> -e cpu/event=0x2e,<span class="built_in">umask</span>=0x41/ <span class="built_in">sleep</span> 1</span><br></pre></td></tr></table></figure>

<h2 id="perf-for-application-performance"><a href="#perf-for-application-performance" class="headerlink" title="perf for application performance"></a>perf for application performance</h2><p>Even perf can check application performance, but it does this from <code>system view</code> for that process, collect event, stats for that process, and for call graph, kernel symbol, kernel function is counted as well, not like gperf which does this with user function only.</p>
<p><strong>Suggestion</strong><br>if you want to debug performance issue of application code, gperf is good choice, if you want to know the whole path user level and kernel level of this application, use perf.</p>
<p><strong>User-level application performance</strong>  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="number">100000</span>) &#123;</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="number">200000</span>) &#123;</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; <span class="number">1000</span>; ++i) &#123;</span><br><span class="line">        func1();</span><br><span class="line">        func2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    func3();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc -o <span class="built_in">test</span> test.c -g -O0</span><br><span class="line"></span><br><span class="line">$ perf record ./test</span><br><span class="line">$ perf report</span><br><span class="line">    <span class="comment"># To display the perf.data header info, please use --header/--header-only options.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Samples: 2K of event &#x27;cpu-clock&#x27;</span></span><br><span class="line">    <span class="comment"># Event count (approx.): 723750000</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Overhead  Command      Shared Object                      Symbol</span></span><br><span class="line">    <span class="comment"># ........  .......  .................  ..........................</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">        66.22%     <span class="built_in">test</span>  <span class="built_in">test</span>               [.] func2</span><br><span class="line">        33.75%     <span class="built_in">test</span>  <span class="built_in">test</span>               [.] func1</span><br><span class="line">         0.03%     <span class="built_in">test</span>  [kernel.kallsyms]  [k] get_page_from_freelist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># (For a higher level overview, try: perf report --sort comm,dso)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">$ perf annotate -s func2</span><br><span class="line">     Percent |      Source code &amp; Disassembly of <span class="built_in">test</span></span><br><span class="line">    --------------------------------------------------</span><br><span class="line">             :</span><br><span class="line">             :</span><br><span class="line">             :</span><br><span class="line">             :      Disassembly of section .text:</span><br><span class="line">             :</span><br><span class="line">             :      0000000000400509 &lt;func2&gt;:</span><br><span class="line">             :          int i = 0;</span><br><span class="line">             :          <span class="keyword">while</span> (i &lt; 100000) &#123;</span><br><span class="line">             :              ++i;</span><br><span class="line">             :          &#125;</span><br><span class="line">             :      &#125;</span><br><span class="line">             :      void <span class="function"><span class="title">func2</span></span>() &#123;</span><br><span class="line">        0.00 :        400509:       push   %rbp</span><br><span class="line">        0.00 :        40050a:       mov    %rsp,%rbp</span><br><span class="line">             :          int i = 0;</span><br><span class="line">        0.00 :        40050d:       movl   <span class="variable">$0x0</span>,-0x4(%rbp)</span><br><span class="line">             :          <span class="keyword">while</span> (i &lt; 200000) &#123;</span><br><span class="line">        0.05 :        400514:       jmp    40051a &lt;func2+0x11&gt;</span><br><span class="line">             :              ++i;</span><br><span class="line">       17.48 :        400516:       addl   <span class="variable">$0x1</span>,-0x4(%rbp)</span><br><span class="line">             :              ++i;</span><br><span class="line">             :          &#125;</span><br><span class="line">             :      &#125;</span><br><span class="line">             :      void <span class="function"><span class="title">func2</span></span>() &#123;</span><br><span class="line">             :          int i = 0;</span><br><span class="line">             :          <span class="keyword">while</span> (i &lt; 200000) &#123;</span><br><span class="line">        1.88 :        40051a:       cmpl   <span class="variable">$0x30d3f</span>,-0x4(%rbp)</span><br><span class="line">       80.59 :        400521:       jle    400516 &lt;func2+0xd&gt;</span><br><span class="line">             :              ++i;</span><br><span class="line">             :          &#125;</span><br><span class="line">             :      &#125;</span><br><span class="line">        0.00 :        400523:       pop    %rbp</span><br><span class="line">        0.00 :        400524:       retq</span><br><span class="line"></span><br><span class="line"><span class="comment"># Except this, you can monitor system information (event) when running your processes see how many cache miss when executing test</span></span><br><span class="line"></span><br><span class="line">$ perf <span class="built_in">stat</span> -e instructions,cycles,branches,branch-misses,cache-misses ./test</span><br><span class="line"></span><br><span class="line"><span class="comment">#===============attach to a running process===================================</span></span><br><span class="line"><span class="comment"># show top cpu usage for a process from system wide view(include kernel symbol)</span></span><br><span class="line">$ sysctl -w kernel.pax.softmode=1</span><br><span class="line">$ sysctl -w kernel.kptr_restrict=1</span><br><span class="line">$ perf top -p <span class="variable">$pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show cpu counter until ctrl+C</span></span><br><span class="line">$ perf <span class="built_in">stat</span> -p <span class="variable">$pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show open event for $PID with 5s</span></span><br><span class="line">$ perf <span class="built_in">stat</span> -e <span class="string">&quot;syscalls:sys_*&quot;</span> -p <span class="variable">$PID</span> <span class="built_in">sleep</span> 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># show open event for $PID until ctrl+C</span></span><br><span class="line">$ perf <span class="built_in">stat</span> -e <span class="string">&quot;syscalls:sys_*&quot;</span>  -p <span class="variable">$PID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># recod cpu-clock event for given pid until control + c</span></span><br><span class="line">$ perf record -p <span class="variable">$pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># record event for context switch of given pid until control + c</span></span><br><span class="line">$ perf record -e <span class="string">&quot;cs&quot;</span> -p <span class="variable">$pid</span></span><br></pre></td></tr></table></figure>

<h2 id="System-wide-performace"><a href="#System-wide-performace" class="headerlink" title="System-wide performace"></a>System-wide performace</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show funtion(from different apps or kernel function) which takes much CPU</span></span><br><span class="line">$ perf top</span><br><span class="line"></span><br><span class="line"><span class="comment"># show all EVNETs supported that can be used by &#x27;stat&#x27; or &#x27;record&#x27;</span></span><br><span class="line">$ perf list</span><br><span class="line"></span><br><span class="line"><span class="comment"># show counters in detail of all cpus within 10s</span></span><br><span class="line">$ perf <span class="built_in">stat</span> -a -d <span class="built_in">sleep</span> 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># show cpu counter when executing &#x27;ls&#x27; command</span></span><br><span class="line">$ perf <span class="built_in">stat</span> <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show open event for all cpu with 5s</span></span><br><span class="line">$ perf <span class="built_in">stat</span> -e <span class="string">&quot;syscalls:sys_*&quot;</span> -a <span class="built_in">sleep</span> 5</span><br><span class="line"></span><br><span class="line"><span class="comment">#record all cpus within 10s</span></span><br><span class="line"><span class="comment"># (-g graph, call graph)</span></span><br><span class="line">$ perf record -a -g -- <span class="built_in">sleep</span> 10</span><br><span class="line">$ perf record -a  -- <span class="built_in">sleep</span> 10</span><br><span class="line"></span><br><span class="line">$ perf record -e <span class="string">&quot;cpu-clock&quot;</span> -a <span class="built_in">sleep</span> 5</span><br><span class="line">$ perf record -e <span class="string">&quot;sched:sched_switch&quot;</span> -a <span class="built_in">sleep</span> 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># record until ctrl+c</span></span><br><span class="line">$ perf record -e block:block_rq_insert -a</span><br><span class="line"></span><br><span class="line">$ perf report -n --stdio -i perf.data</span><br><span class="line"><span class="comment"># (need kernel debug info)</span></span><br><span class="line">$ perf annotate --stdio</span><br><span class="line"></span><br><span class="line"><span class="comment"># add tracepoint at door of tcp_sendmsg</span></span><br><span class="line"></span><br><span class="line">$ perf probe --add tcp_sendmsg</span><br><span class="line">    Failed to find path of kernel module.</span><br><span class="line">    Added new event:</span><br><span class="line">        probe:tcp_sendmsg    (on tcp_sendmsg)</span><br><span class="line"></span><br><span class="line">    You can now use it <span class="keyword">in</span> all perf tools, such as:</span><br><span class="line"></span><br><span class="line">        perf record -e probe:tcp_sendmsg -a <span class="built_in">sleep</span> 10</span><br><span class="line">        perf <span class="built_in">stat</span> -e probe:tcp_sendmsg -a <span class="built_in">sleep</span> 10</span><br><span class="line"></span><br><span class="line">$ perf record -e probe:tcp_sendmsg -aR <span class="built_in">sleep</span> 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># show current probed event</span></span><br><span class="line">$ perf probe -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete dynamic trace point</span></span><br><span class="line">$ perf probe -d tcp_sendmsg</span><br><span class="line"></span><br><span class="line"><span class="comment"># show page faults, cache miss of whole system</span></span><br><span class="line">$ perf <span class="built_in">stat</span> -B -e context-switches,cpu-migrations,cache-references,cache-misses,cycles,instructions,page-faults <span class="built_in">sleep</span> 5</span><br><span class="line">Performance counter stats <span class="keyword">for</span> <span class="string">&#x27;sleep 5&#x27;</span>:</span><br><span class="line"></span><br><span class="line">             1      context-switches                                            </span><br><span class="line">             1      cpu-migrations                                              </span><br><span class="line">        18,143      cache-references                                            </span><br><span class="line">           957      cache-misses              <span class="comment">#    5.275 % of all cache refs    </span></span><br><span class="line">     1,598,875      cycles                                                      </span><br><span class="line">       667,345      instructions              <span class="comment">#    0.42  insn per cycle         </span></span><br><span class="line">           179      page-faults                                                 </span><br><span class="line"></span><br><span class="line">   5.002159188 seconds time elapsed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># default output for perf stat</span></span><br><span class="line">$ perf <span class="built_in">stat</span> -B <span class="built_in">sleep</span> 5</span><br><span class="line">Performance counter stats <span class="keyword">for</span> <span class="string">&#x27;sleep 5&#x27;</span>:</span><br><span class="line"></span><br><span class="line">      1.136437      task-clock (msec)         <span class="comment">#    0.000 CPUs utilized          </span></span><br><span class="line">             1      context-switches          <span class="comment">#    0.880 K/sec                  </span></span><br><span class="line">             0      cpu-migrations            <span class="comment">#    0.000 K/sec                  </span></span><br><span class="line">           179      page-faults               <span class="comment">#    0.158 M/sec                  </span></span><br><span class="line">     1,612,448      cycles                    <span class="comment">#    1.419 GHz                    </span></span><br><span class="line">       671,118      instructions              <span class="comment">#    0.42  insn per cycle         </span></span><br><span class="line">       129,284      branches                  <span class="comment">#  113.763 M/sec                  </span></span><br><span class="line">         8,996      branch-misses             <span class="comment">#    6.96% of all branches        </span></span><br><span class="line"></span><br><span class="line">   5.002229617 seconds time elapsed</span><br><span class="line"></span><br><span class="line"><span class="comment"># check which function triggered cache-miss or page fault event on system</span></span><br><span class="line">$ perf record -e cache-misses <span class="built_in">sleep</span> 5</span><br><span class="line">$ perf record -e page-faults <span class="built_in">sleep</span> 5</span><br><span class="line">$ perf report</span><br><span class="line"></span><br><span class="line"><span class="comment"># check which function triggered cache-miss or page fault event of given process</span></span><br><span class="line">$ perf record -e cache-misses -p  <span class="variable">$pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># perf stat with multiple events</span></span><br><span class="line">$ perf <span class="built_in">stat</span> -e intel_cqm/local_bytes/,intel_cqm/total_bytes/ -a -I 1000</span><br></pre></td></tr></table></figure>

<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="perf-kvm-stat-vs-perf-stat"><a href="#perf-kvm-stat-vs-perf-stat" class="headerlink" title="perf kvm stat vs perf stat"></a>perf kvm stat vs perf stat</h2><p>You can use the <code>perf</code> command with the <code>kvm</code> option to collect guest operating system statistics from the host, </p>
<p>In order to use <code>perf kvm record</code> in the host, you must <code>have access to the /proc/modules and /proc/kallsyms files from the guest</code>, otherwise, <code>perf report</code> can NOT show symbol correctly. but these two files is not needed for <code>perf kvm stat</code> as it does not use symbol table</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># On host</span></span><br><span class="line"><span class="comment">################## perf kvm stat ##########################</span></span><br><span class="line">$ ps -ef | grep 84857</span><br><span class="line">root      84857      1 60 10:07 ?        01:02:09 /usr/libexec/qemu-kvm -daemonize -D /tmp/qemu_vm.log -machine pc,accel=kvm,usb=off,dump-guest-core=off -object memory-backend-file,<span class="built_in">id</span>=ram-node0,prealloc=<span class="built_in">yes</span>,mem-path=/mnt/huge_1GB,share=no,size=34359738368,host-nodes=0,policy=<span class="built_in">bind</span> -numa node,nodeid=0,cpus=0-15,memdev=ram-node0 -m 32G -cpu host,host-cache-info=on,l3-cache=off -smp 16,maxcpus=16,sockets=1,cores=16,threads=1 -realtime mlock=off -no-user-config -drive file=./centos7.qcow2 -qmp unix:/var/run/qmp.sock,server,nowait -nodefaults -no-hpet -vga std -vnc 0.0.0.0:0 -serial pty -netdev tap,<span class="built_in">id</span>=net1,ifname=vnet10,script=./qemu-ifup,downscript=./qemu-ifdown -device virtio-net,netdev=net1,mac=52:54:00:12:34:56 -device qemu-xhci -device usb-tablet</span><br><span class="line"><span class="comment"># check splitlock from qemu-kvm</span></span><br><span class="line">$ perf kvm <span class="built_in">stat</span> -e sq_misc.split_lock -p 84857 -a -I 1000 </span><br><span class="line"><span class="comment">#           time             counts unit events</span></span><br><span class="line">     1.000627884            373,366      sq_misc.split_lock                                            (100.00%)</span><br><span class="line"></span><br><span class="line"><span class="comment">################## perf kvm record ##########################</span></span><br><span class="line">$ scp root@GuestMachine:/tmp/kallsyms guest-kallsyms</span><br><span class="line">$ scp root@GuestMachine:/tmp/modules guest-modules</span><br><span class="line">$ perf kvm --host --guest --guestkallsyms=guest-kallsyms \</span><br><span class="line">--guestmodules=guest-modules record -a -o perf.data</span><br><span class="line">$ perf kvm --host --guest --guestmodules=guest-modules report -i perf.data.kvm \</span><br><span class="line">--force &gt; analyze</span><br></pre></td></tr></table></figure>

<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://lwn.net/Articles/790464/?spm=a2c6h.12873639.article-detail.5.69c46386dumCZU">detect split lock</a></li>
</ul>
]]></content>
      <categories>
        <category>performance</category>
        <category>system</category>
      </categories>
      <tags>
        <tag>perf</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-performance-systemtap</title>
    <url>/2022/01/04/linux-performance-systemtap/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>SystemTap provides the infrastructure to <code>monitor the running Linux kernel and application for detailed analysis</code>. This can assist administrators and developers in identifying the underlying cause of a bug or performance problem. SystemTap is designed to eliminate this and allows users to gather the kernel information by running <code>user-written SystemTap scripts.</code>, <strong>you do NOT need to write kernel module, compile it and load it by yourself, you just write systemtap script, then systemtap framework does all other things for you(which actually use kprobe)</strong></p>
<p>For short， add hooks at point event(function enter, function return etc) for running application or kernel, in hooks print or check something.</p>
<h1 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h1><ol>
<li>First, SystemTap checks the script against the existing tapset library (normally in &#x2F;usr&#x2F;share&#x2F;systemtap&#x2F;tapset&#x2F; for any tapsets used. SystemTap will then substitute any located tapsets with their corresponding definitions in the tapset library.</li>
<li>SystemTap then translates the script to C, running the system C compiler to create a kernel module from it. The tools(<code>stap</code>) that perform this step are contained in the systemtap package</li>
<li>SystemTap loads the module, then enables all the probes (events and handlers) in the script. The <code>staprun</code> in the systemtap-runtime package  provides this functionality.</li>
<li>As the events occur, their corresponding handlers are executed.</li>
<li>Once the SystemTap session is terminated, the probes are disabled, and the kernel module is unloaded.</li>
</ol>
<p><img src="https://taoste.github.io/dirtysalt/html/images/systemtap-prepare-workflow.gif"></p>
<span id="more"></span>
<h1 id="Setup-to-use-systemtap"><a href="#Setup-to-use-systemtap" class="headerlink" title="Setup to use systemtap"></a>Setup to use systemtap</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install systemtap systemtap-runtime</span><br><span class="line"><span class="comment"># install kernel debug info, refer to https://sourceware.org/systemtap/SystemTap_Beginners_Guide/using-systemtap.html</span></span><br><span class="line">$ stap-prep</span><br><span class="line"><span class="comment"># check if systemtap works or not(script from command line)</span></span><br><span class="line">$ stap -v -e <span class="string">&#x27;probe vfs.read &#123;printf(&quot;read performed\n&quot;); exit()&#125;&#x27;</span></span><br><span class="line">Pass 1: parsed user script and 487 library scripts using 299532virt/96108res/3516shr/93332data kb, <span class="keyword">in</span> 940usr/150sys/1278real ms.</span><br><span class="line">Pass 2: analyzed script: 1 probe, 1 <span class="keyword">function</span>, 7 embeds, 0 globals using 468708virt/260648res/4900shr/262508data kb, <span class="keyword">in</span> 2750usr/1330sys/4835real ms.</span><br><span class="line">Pass 3: translated to C into <span class="string">&quot;/tmp/stapYzHqgZ/stap_cde75c591f0c1e1bb6070ad11276b42b_2771_src.c&quot;</span> using 468708virt/260908res/5160shr/262508data kb, <span class="keyword">in</span> 10usr/50sys/69real ms. ----&gt; convert to kernel module(c)</span><br><span class="line">Pass 4: compiled C into <span class="string">&quot;stap_cde75c591f0c1e1bb6070ad11276b42b_2771.ko&quot;</span> <span class="keyword">in</span> 9250usr/2530sys/11991real ms.--------------------compile this custom mode</span><br><span class="line">Pass 5: starting run.----------------------&gt;load this module</span><br><span class="line"></span><br><span class="line"><span class="comment"># command to run systemtap</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># monitor events for any process(script from a file)</span></span><br><span class="line">$ stap -vv -F xx.stp -o output.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># monitor event for this process only </span></span><br><span class="line"><span class="comment"># Sets the SystemTap handler function target() to the specified process ID</span></span><br><span class="line">$ stap -vv -F xx.stp -o output.log -x process_id</span><br></pre></td></tr></table></figure>

<h1 id="Probe"><a href="#Probe" class="headerlink" title="Probe"></a>Probe</h1><p>Probe &#x3D; event + its handler</p>
<p>The essential idea behind a SystemTap script is <strong>to name events, and to give them handlers</strong>. When SystemTap runs the script, SystemTap monitors for the event; once the event occurs, <code>the Linux kernel then runs the handler as a quick sub-routine, then resumes.</code></p>
<p>There are several kind of events: <code>entering/exiting a function, timer expiration, session termination</code>, etc. A handler is a series of script language statements that specify the work to be done whenever the event occurs. This work normally includes extracting data from the event context, storing them into internal variables, and printing results. </p>
<p><strong>FORMAT</strong><br><code>probe PROBEPOINT [, PROBEPOINT] &#123; [STMT ...] &#125;</code></p>
<p><code>PROBEPOINT</code> supports wildcard match</p>
<h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><p>New probe points may be defined using aliases. A probe point alias looks similar to probe definitions, but instead of activating a probe at the given point, it defines a new probe point name as an alias to an existing one. New probe aliases may refer to one or more existing probe aliases. Multiple aliases may share the same underlying probe points</p>
<p><strong>FORMAT</strong><br><code>probe &lt;alias&gt; = &lt;probepoint&gt; &#123; &lt;prologue_stmts&gt; &#125;</code></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">probe socket.sendmsg = kernel.function (&quot;sock_sendmsg&quot;) &#123; ... &#125;</span><br><span class="line">probe socket.sendmsg &#123;...&#125;</span><br><span class="line">probe socket.sendmsg.return &#123;...&#125;</span><br></pre></td></tr></table></figure>
<p>&#x3D;&#x3D;&#x3D;  </p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">probe kernel.function(&quot;sock_sendmsg&quot;) &#123;...&#125;</span><br><span class="line">probe kernel.function(&quot;sock_sendmsg&quot;).return &#123;...&#125;</span><br></pre></td></tr></table></figure>


<h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><p>SystemTap scripts may define subroutines to factor out common work. Functions may take any number of scalar arguments, and <strong>must return a single scalar value</strong>. Scalars in this context are integers or strings. For more information on scalars.</p>
<p><strong>FORMAT</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function &lt;name&gt;[:&lt;type&gt;] ( &lt;arg1&gt;[:&lt;type&gt;], ... ) &#123; &lt;stmts&gt; &#125;</span><br><span class="line"></span><br><span class="line">function thisfn (arg1, arg2) &#123;</span><br><span class="line">    return arg1 + arg2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function thatfn:string(arg1:long, arg2) &#123;</span><br><span class="line">    return sprintf(&quot;%d%s&quot;, arg1, arg2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Kernel-Probe"><a href="#Kernel-Probe" class="headerlink" title="Kernel Probe"></a>Kernel Probe</h2><p><strong>ProbePoint</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># these two are actually alias!!</span><br><span class="line">syscall.system_call</span><br><span class="line">vfs.file_operation</span><br><span class="line"></span><br><span class="line">kernel.function(&quot;foo&quot;)</span><br><span class="line">kernel.statement(&quot;func@file:linenumber&quot;)</span><br><span class="line">kernel.function(&quot;foo&quot;).return</span><br><span class="line">module&#123;&quot;ext3&quot;&#125;.function(&quot;ext3_*&quot;)</span><br><span class="line">module(&quot;modname&quot;).statement(&quot;func@file:linenumber&quot;)</span><br><span class="line">kernel.function(&quot;*@net/socket.c&quot;)</span><br><span class="line">timer.ms(5000)</span><br></pre></td></tr></table></figure>

<p><strong>Probe examples</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">probe kernel.function(&quot;sys_mkdir&quot;).call &#123; log (&quot;enter&quot;) &#125;</span><br><span class="line">probe kernel.function(&quot;sys_mkdir&quot;).return &#123; log (&quot;exit&quot;) &#125;</span><br></pre></td></tr></table></figure>

<p><strong>NOTE</strong><br><code>Kernel has prebuilt probe markers</code> This family of probe points connects to static probe markers inserted into the kernel or a module. These markers are special macro calls in the kernel that make probing faster and more reliable than with DWARF-based probes. DWARF debugging information is not required to use probe markers.</p>
<h2 id="User-Probe"><a href="#User-Probe" class="headerlink" title="User Probe"></a>User Probe</h2><p><strong>ProbePoint</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># PATH can be binary or library!!!</span><br><span class="line">process.begin</span><br><span class="line">process(&quot;PATH&quot;).begin</span><br><span class="line">process.thread.begin</span><br><span class="line">process(&quot;PATH&quot;).thread.begin</span><br><span class="line">process.end</span><br><span class="line">process(&quot;PATH&quot;).end</span><br><span class="line">process.thread.end</span><br><span class="line">process(&quot;PATH&quot;).thread.end</span><br><span class="line"></span><br><span class="line">process.syscall</span><br><span class="line">process(&quot;PATH&quot;).syscall</span><br><span class="line">process.syscall.return</span><br><span class="line">process(&quot;PATH&quot;).syscall.return</span><br><span class="line"></span><br><span class="line">process(&quot;PATH&quot;).mark(&quot;LABEL&quot;)</span><br><span class="line"></span><br><span class="line">process(&quot;PATH&quot;).function(&quot;NAME&quot;)</span><br><span class="line">process(&quot;PATH&quot;).statement(&quot;*@FILE.c:123&quot;)</span><br><span class="line">process(&quot;PATH&quot;).function(&quot;*&quot;).return</span><br></pre></td></tr></table></figure>

<p><strong>Probe examples</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">probe process(&quot;/usr/lib64/libvirt/connection-driver/libvirt_driver_qemu.so&quot;).function(&quot;qemuMonitorSend&quot;) &#123;&#125;</span><br><span class="line">probe process(&quot;/usr/sbin/libvirtd&quot;).function(&quot;main&quot;) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>static probing</strong><br>You can probe symbolic static instrumentation compiled into programs and shared libraries with the following syntax:<br><code>process(&quot;PATH&quot;).mark(&quot;LABEL&quot;)</code></p>
<p>Use STAP_PROBE1 for probes with one argument. Use STAP_PROBE2 for probes with 2 arguments, and so on. The arguments of the probe are available in the context variables $arg1, $arg2, and so on.</p>
<p>As an alternative to the <code>STAP_PROBE </code>macros, you can use the dtrace script to create custom macros. The sdt.h file also provides <code>dtrace compatible markers through DTRACE_PROBE</code> and an associated python dtrace script.</p>
<p><strong>NOTE</strong>: <code>static probing can probe at any point as it&#39;s programed by user, hence you can pass any args to it, like local var etc, but dynamic probling can only probe and enter and exit of a function</code></p>
<h2 id="tapset"><a href="#tapset" class="headerlink" title="tapset"></a>tapset</h2><p><strong>Tapset scripts are libraries of probe aliases and auxiliary functions</strong>, refer to <a href="https://sourceware.org/systemtap/tapsets/">tapset function</a></p>
<p><code>location: /usr/share/systemtap/tapset/</code></p>
<p><strong>Frequently used</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tid()	The id of the current thread.</span><br><span class="line">pid()	The process (task group) id of the current thread.</span><br><span class="line">uid()	The id of the current user.</span><br><span class="line">execname()	The name of the current process.</span><br><span class="line">cpu()	The current cpu number.</span><br><span class="line">gettimeofday_s()	Number of seconds since epoch.</span><br><span class="line">get_cycles()	Snapshot of hardware cycle counter.</span><br><span class="line">pp()	A string describing the probe point being currently handled.</span><br><span class="line">ppfunc()	If known, the the function name in which this probe was placed.</span><br><span class="line">$$vars	If available, a pretty-printed listing of all local variables in scope.</span><br><span class="line">print_backtrace()	If possible, print a kernel backtrace.</span><br><span class="line">print_ubacktrace()	If possible, print a user-space backtrace. </span><br></pre></td></tr></table></figure>


<h1 id="Example-of-User-application-with-systemtap"><a href="#Example-of-User-application-with-systemtap" class="headerlink" title="Example of User application with systemtap"></a>Example of User application with systemtap</h1><p>systemtap script has similarity with C language, refer to <a href="https://sourceware.org/systemtap/langref/langrefse5.html#x7-630005">script syntax</a>, <a href="https://sourceware.org/systemtap/langref/langrefse5.html#x7-630005">flow control</a>, <a href="https://sourceware.org/systemtap/langref/langrefse7.html#x9-1150007">array</a></p>
<p><strong>if you want to use systemtap for user application, make sure application is built with symbol(-g) or install symbol separately when dtrace is not compiled in</strong></p>
<h2 id="dtrace-disable"><a href="#dtrace-disable" class="headerlink" title="dtrace disable"></a>dtrace disable</h2><p>You must have the symbol table to find the function used in stp.</p>
<p><strong>test.c</strong>  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hello</span><span class="params">(<span class="type">char</span> *name)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello %s\n&quot;</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    hello(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// gcc -o test test.c -g</span></span><br></pre></td></tr></table></figure>

<p><strong>test.stp</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">probe process(&quot;./test&quot;).begin &#123;</span><br><span class="line">    printf(&quot;start to probe\n &quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">probe process(&quot;./test&quot;).function(&quot;hello&quot;) &#123;</span><br><span class="line">    printf(&quot;%s\n&quot;, user_string($name))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">probe process(&quot;./test&quot;).end &#123;</span><br><span class="line">    printf(&quot;probe end\n&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ stap test.stp</span><br><span class="line"><span class="comment"># on another terminal</span></span><br><span class="line">$ ./test</span><br></pre></td></tr></table></figure>

<h2 id="dtrace-enabled"><a href="#dtrace-enabled" class="headerlink" title="dtrace enabled"></a>dtrace enabled</h2><p>No need to build with debug info if only use marker as dtrace stores the address of marker when compiling the code, but if you want to use function name, symbol table is required as well.</p>
<p><strong>test.c with markder(dtrace probe)</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sdt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hello</span><span class="params">(<span class="type">char</span> *name)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello %s\n&quot;</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> age = <span class="number">12</span>;</span><br><span class="line">    <span class="type">char</span> *name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line"></span><br><span class="line">    DTRACE_PROBE2(test, hello_marker, age, name);</span><br><span class="line">    hello(name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// gcc -o test test.c</span></span><br></pre></td></tr></table></figure>

<p><strong>test.stp</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">probe process(&quot;./test&quot;).begin &#123;</span><br><span class="line">    printf(&quot;start to probe\n&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">probe process(&quot;./test&quot;).mark(&quot;hello_marker&quot;) &#123;</span><br><span class="line">    // arg1 is int, not pointer, can access it directly</span><br><span class="line">    printf(&quot;age: %d name: %s\n&quot;, $arg1, user_string($arg2))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">probe process(&quot;./test&quot;).end &#123;</span><br><span class="line">    printf(&quot;probe end\n&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ stap test.stp</span><br><span class="line">$ ./test</span><br></pre></td></tr></table></figure>


<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul>
<li><a href="https://sourceware.org/systemtap/documentation.html">systemtap docs</a></li>
<li><a href="https://sourceware.org/systemtap/tutorial/">systemtap tutorial</a></li>
<li><a href="https://sourceware.org/systemtap/SystemTap_Beginners_Guide/">systemtap beginner guide</a></li>
<li><a href="https://sourceware.org/systemtap/tapsets/">systemtap tapset</a></li>
<li><a href="https://sourceware.org/systemtap/documentation.html">systemtap docs</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
        <category>systemtap</category>
      </categories>
      <tags>
        <tag>systemtap</tag>
        <tag>probe</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-selinux</title>
    <url>/2022/08/04/linux-selinux/</url>
    <content><![CDATA[<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://wiki.centos.org/HowTos/SELinux">selinux tool</a></li>
<li><a href="https://wiki.centos.org/HowTos/SELinux">Selinux Overview</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>linux-signal</title>
    <url>/2021/10/08/linux-signal/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Signals are software interrupts sent to a program to indicate that an important event has occurred. The events can vary from user requests to illegal memory access errors. Some signals, such as the interrupt signal, indicate that a user has asked the program to do something that is not in the usual flow of control.</p>
<p>Every signal has a default action associated with it. The default action for a signal is the action that a script or program performs when it receives a signal.<br>Some of the possible default actions are</p>
<ul>
<li>Terminate the process.</li>
<li>Ignore the signal.</li>
<li>Dump core. This creates a file called core containing the memory image of the process when it received the signal.</li>
<li>Stop the process.(can run later on)</li>
<li>Continue a stopped process</li>
</ul>
<span id="more"></span>

<p><strong>sending signal to process</strong><br>There are several methods of delivering signals to a program or script. </p>
<ul>
<li>One of the most common is for a user to type <code>CONTROL-xxx</code> while a script is executing.</li>
<li>The other common method for delivering signals is to use the kill command, the syntax of which is as follows<ul>
<li><code>$kill -sig pid</code></li>
</ul>
</li>
</ul>
<h1 id="signal-table"><a href="#signal-table" class="headerlink" title="signal table"></a>signal table</h1><p><strong>Action</strong></p>
<ul>
<li>Term   Default action is to terminate the process.</li>
<li>Ign    Default action is to ignore the signal.</li>
<li>Core   Default action is to terminate the process and dump core</li>
<li>Stop   Default action is to stop the process.</li>
<li>Cont   Default action is to continue the process if it is currently stopped.</li>
</ul>
<table>
<thead>
<tr>
<th>NO</th>
<th>Short</th>
<th>Keyboard</th>
<th>Action</th>
<th>Comment</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>SIGINT</td>
<td>ctrl + c</td>
<td>Term</td>
<td>The process was “interrupted”.</td>
</tr>
<tr>
<td>3</td>
<td>SIGQUIT</td>
<td>ctrl + \</td>
<td>Core</td>
<td>Quit from keyboard</td>
</tr>
<tr>
<td>20</td>
<td>SIGTSTP</td>
<td>ctrl + z</td>
<td>STOP</td>
<td>Essentially the same as SIGSTOP</td>
</tr>
<tr>
<td></td>
<td></td>
<td>ctrl +d</td>
<td></td>
<td>it is not a signal, it’s EOF (End-Of-File). It closes the stdin pipe.</td>
</tr>
</tbody></table>
<p>After ctrl + Z, current process is stopped, then you can call <code>$fg</code> to run it again</p>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://man7.org/linux/man-pages/man7/signal.7.html">signal man</a></li>
<li><a href="https://www-uxsup.csx.cam.ac.uk/courses/moved.Building/signals.pdf">signal summary</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
        <category>signal</category>
      </categories>
      <tags>
        <tag>singal</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-tproxy</title>
    <url>/2020/11/17/linux-tproxy/</url>
    <content><![CDATA[<h1 id="Transparent-Proxy"><a href="#Transparent-Proxy" class="headerlink" title="Transparent Proxy"></a>Transparent Proxy</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Transparent proxy allows to bind a non-local address(address belong to none interface), so that packet can be sent out with non-local address, meanwhile, <strong>with proper iptables and ip rule, incoming packet for transparent socket(non-local dst) can be received properly.</strong></p>
<span id="more"></span>

<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>In order to support this, <strong>changes needed as below</strong></p>
<ul>
<li>Change kernel to allow bind non-local address.</li>
<li>Add a netfilter plugin to match transparent socket based on five tuples(src, sport, dst, dport, proto), tag the matched packet to make it go local by ip rule.</li>
</ul>
<p><strong>kernel commit for tproxy</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># allow bind non-local address</span></span><br><span class="line">f5715aea: ipv4: Implement IP_TRANSPARENT socket option</span><br><span class="line">b9fb1506: ipv4: Allow binding to non-local addresses <span class="keyword">if</span> IP_TRANSPARENT is <span class="built_in">set</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># with socket match(transparent socket), redirect packet to local with ip rule</span></span><br><span class="line"><span class="comment"># hence packet goes to local, then received by tcp/udp</span></span><br><span class="line">136cdc71: netfilter: iptables socket match</span><br></pre></td></tr></table></figure>

<h2 id="Example-to-use"><a href="#Example-to-use" class="headerlink" title="Example to use"></a>Example to use</h2><p><strong>make sure your kernel is built with such config</strong></p>
<ul>
<li>CONFIG_NETFILTER_XT_MATCH_SOCKET</li>
<li>CONFIG_NF_TPROXY_IPV4</li>
<li>CONFIG_NETFILTER_XT_TARGET_TPROXY</li>
</ul>
<p><strong>output, allow bind non-local</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> value = <span class="number">1</span>;</span><br><span class="line">setsockopt(fd, SOL_IP, IP_TRANSPARENT, &amp;value, <span class="keyword">sizeof</span>(value));</span><br><span class="line"></span><br><span class="line">name.sin_family = AF_INET;</span><br><span class="line">name.sin_port = htons(<span class="number">0xCAFE</span>);</span><br><span class="line">name.sin_addr.s_addr = htonl(<span class="number">0xDEADBEEF</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//bind non-local address after setting IP_TRANSPARENT for this socket</span></span><br><span class="line">bind(fd, &amp;name, <span class="keyword">sizeof</span>(name));</span><br></pre></td></tr></table></figure>

<p><strong>input packet</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create a new chain</span></span><br><span class="line">$ iptables -t mangle -N DIVERT</span><br><span class="line"></span><br><span class="line"><span class="comment"># if packet matches tcp socket(non-local or not) of this host, go to that chain in PREROUTING</span></span><br><span class="line">$ iptables -t mangle -A PREROUTING -p tcp -m socket -j DIVERT <span class="comment"># -j jump to DIVERT chain</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set mark with 1 for the matched packet(non-local or not)</span></span><br><span class="line"><span class="comment"># this mark used for ip rule.</span></span><br><span class="line">$ iptables -t mangle -A DIVERT -j MARK --set-mark 1</span><br><span class="line">$ iptables -t mangle -A DIVERT -j ACCEPT</span><br><span class="line"><span class="comment"># later on packet goes to routing</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># skb with mark 1, lookup route table 100</span></span><br><span class="line">$ ip rule add fwmark 1 lookup 100 <span class="comment"># policy routing</span></span><br><span class="line"><span class="comment"># all skb goes to local, up to Lay4 even it&#x27;s local dst or not.</span></span><br><span class="line"><span class="comment"># add a route at table 100, for all packets(as 0.0.0.0/0 matches all) sent to local(passed to upper layer), skb-&gt;dev with loopback.</span></span><br><span class="line">$ ip route add <span class="built_in">local</span> 0.0.0.0/0 dev lo table 100</span><br></pre></td></tr></table></figure>
<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul>
<li><a href="https://www.kernel.org/doc/html/latest/networking/tproxy.html">Kernel TProxy Doc</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
        <category>tproxy</category>
      </categories>
      <tags>
        <tag>tproxy</tag>
      </tags>
  </entry>
  <entry>
    <title>performance tools</title>
    <url>/2019/09/26/linux-performance-tools/</url>
    <content><![CDATA[<h1 id="Performance-knowledge"><a href="#Performance-knowledge" class="headerlink" title="Performance knowledge"></a>Performance knowledge</h1><h2 id="Memory-Usage-Metric"><a href="#Memory-Usage-Metric" class="headerlink" title="Memory Usage Metric"></a>Memory Usage Metric</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Show process memory usage by top</span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class="line"></span><br><span class="line">    1 root      20   0   38116   6136   3984 S   0.0  0.0   0:05.71 systemd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    VIRT(VSS): The total amount of virtual memory used by the task.</span><br><span class="line">               It includes all code, data and shared libraries plus pages that have been swapped out(it not real physical memory current used)</span><br><span class="line"></span><br><span class="line">    RES(RSS):  The non-swapped physical memory a task has used, CODE+DATA</span><br><span class="line"></span><br><span class="line">    SHR:       The amount of shared memory used by a task.</span><br><span class="line">               It simply reflects memory that could be potentially shared with other processes.</span><br><span class="line"></span><br><span class="line">    %MEM:      Memory usage (RES)</span><br><span class="line"></span><br><span class="line">Show process memory usage by smem (metric used by smem and ps)</span><br><span class="line"></span><br><span class="line">    Swap: Swap size used by each process</span><br><span class="line"></span><br><span class="line">    VSS(virtual set size)</span><br><span class="line">         VSS (reported as VSZ from ps)is the total accessible address space of a process</span><br><span class="line">         (all allocated virtual addresses like malloc, stack, map(shared library))</span><br><span class="line">         This size also includes memory that may not be resident in RAM like mallocs that have been allocated but not written to.</span><br><span class="line">         VSS is of very little use for determining real memory usage of a process.</span><br><span class="line"></span><br><span class="line">    RSS(resident set size)</span><br><span class="line">        RSS is the total memory actually held in RAM for a process. RSS can be misleading,</span><br><span class="line">        because it reports the total all of the shared libraries that the process uses,</span><br><span class="line">        even though a shared library is only loaded into memory once regardless of how many processes use it.</span><br><span class="line">        RSS is not an accurate representation of the memory usage for a single process.</span><br><span class="line"></span><br><span class="line">    PSS(Proportional set size)</span><br><span class="line">        PSS differs from RSS in that it reports the proportional size of its shared libraries,</span><br><span class="line">        i.e.if three processes all use a shared library that has 30 pages,</span><br><span class="line">        that library will only contribute 10 pages to the PSS that is reported for each of the three processes.</span><br><span class="line">        PSS is a very useful number because when the PSS for all processes in the system are summed together,</span><br><span class="line">        that is a good representation for the total memory usage in the system.</span><br><span class="line">        When a process is killed, the shared libraries that contributed to its PSS will be proportionally distributed to</span><br><span class="line">        the PSS totals for the remaining processes still using that library.</span><br><span class="line">        In this way PSS can be slightly misleading, because when a process is killed, PSS does not accurately represent the memory returned to the overall system.</span><br><span class="line"></span><br><span class="line">    USS(unique set size)</span><br><span class="line">        USS is the total private memory for a process, i.e. that memory that is completely unique to that process.</span><br><span class="line">        USS is an extremely useful number because it indicates the true incremental cost of running a particular process.</span><br><span class="line">        When a process is killed, the USS is the total memory that is actually returned to the system.</span><br><span class="line">        USS is the best number to watch when initially suspicious of memory leaks in a process.</span><br><span class="line"></span><br><span class="line">    For example, there are two processes share a library which takes 2M physical memory</span><br><span class="line"></span><br><span class="line">                VSS     RSS     PSS     USS</span><br><span class="line">    process A   20M     18M     17M     16M</span><br><span class="line">    process B   20M     19M     18M     17M</span><br><span class="line">    (RSS=USS+shared_library_memory, PSS=USS+shared_library_memory/shared_process_count)</span><br></pre></td></tr></table></figure>

<h2 id="load-average"><a href="#load-average" class="headerlink" title="load average"></a>load average</h2><p>The load average is the <code>average system load</code> on a Linux server <code>for a defined period of time</code>. In other words, it is the CPU demand of a server that includes sum of the running and the waiting threads. <strong>on linux, it not only tracks running tasks, but also tasks in uninterruptible sleep (usually waiting for IO)</strong></p>
<p>Measuring the load average is critical to understanding how your servers are performing; <code>if overloaded, you need to kill or optimize the processes consuming high amounts of resources, or provide more resources to balance the workload</code>.</p>
<p><code>For simple, let&#39;s assume a server with a single processor, if the load is less than 1, that means on average, every process that needed the CPU could use it immediately without being blocked. Conversely, if the load is greater than 1, that means on average, there were processes ready to run, but could not due to CPUs being unavailable.</code></p>
<p>For a single processor, ideal load average is 1.00, and anything above that is an action call to troubleshoot? Well, although it’s a safe bet, a more proactive approach is leaving some extra headroom to manage unexpected loads, many people <code>tend to aim for a load number of about 0.7 to cater for the spikes</code></p>
<p><strong>overloaded or not depends on how may cpus(not core) you have</strong></p>
<p>You probably have a system with multiple CPUs. The load average numbers work a bit differently on such a system. For example, <code>if you have a load average of 2 on a single-CPU system, this means your system was overloaded by 100 percent</code> — the entire period of time, one process was using the CPU while one other process was waiting. <code>On a system with two CPUs, this would be complete usage — two different processes were using two different CPUs the entire time</code>. On a system with four CPUs, this would be half usage — two processes were using two CPUs, while two CPUs were sitting idle.</p>
<span id="more"></span>

<p><strong>check load average</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(py3.9) [root@dev ~]<span class="comment"># uptime</span></span><br><span class="line"> 14:41:58 up 11 days, 23:10,  3 <span class="built_in">users</span>,  load average: 1.68, 0.55, 5.91</span><br><span class="line"> <span class="comment"># These numbers are the averages of the system load over a period of one, five, and 15 minutes</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>The first value is 1.68. This is the value of CPU load during the last minute. <code>this is a measure of how many programs(process in ready state) were using CPU time during the last minute</code>. So, during the last minute on this machine, <code>there were an average of 1.68 programs either using CPU processing time or waiting for CPU processing time</code>. If this is a single-threaded CPU, that means the computer is overloaded. Users are waiting for their programs to run on the CPU, and experiencing degraded performance. If, instead, this is a dual-core computer or a quad-core, users are able to get CPU time just as quickly as they needed it, during the last minute.</p>
</li>
<li><p>The second value is 0.55. This is the measurement over the last 5 minutes. As we previously discussed, a measurement below 1 means that the CPU spent some of the time in that window completely idle. In this case, the CPU was idle for almost half the time. If we’re optimizing our CPU to be constantly doing something, that’s not a good sign.</p>
</li>
<li><p>The final number, 5.91, is a measurement of the last 15 minutes. If you’re using an eight-core CPU, then this number isn’t particularly shocking. If you’re using a dual-core CPU, then a number like 5.91 means your CPU is very overloaded. Users are regularly waiting for CPU time, and are probably experiencing significantly degraded performance.</p>
</li>
</ul>
<h3 id="troubleshooting-high-load-average"><a href="#troubleshooting-high-load-average" class="headerlink" title="troubleshooting high load average"></a>troubleshooting high load average</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show current load average</span></span><br><span class="line">$ <span class="built_in">uptime</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################## cpu usage per cpu====================================</span></span><br><span class="line"><span class="comment"># show per-cpu usage peridically</span></span><br><span class="line">$ mpstat -P ALL 1</span><br><span class="line"><span class="comment">########################################################## cpu usage per cpu====================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################## cpu usage per process====================================</span></span><br><span class="line"><span class="comment"># show all active process cpu usage(like top)</span></span><br><span class="line"><span class="variable">$pidstat</span> 1</span><br><span class="line"><span class="comment"># show cpu usage of given process peridically(2 second)</span></span><br><span class="line"><span class="comment"># $pidstat -p 823471  2</span></span><br><span class="line"><span class="variable">$pidstat</span> -p 823471  1</span><br><span class="line">Linux 3.10.0-693.21.7.el7.x86_64 (A06-R08-I132-181-815KSRH.JCLOUD.COM)  07/20/2022      _x86_64_        (32 CPU)</span><br><span class="line">04:42:46 PM   UID       PID    %usr %system  %guest    %CPU   CPU  Command</span><br><span class="line">04:42:47 PM     0    823471   33.00    5.00    0.00   38.00    10  node_monitor</span><br><span class="line">04:42:48 PM     0    823471   54.00    7.00    0.00   61.00    10  node_monitor</span><br><span class="line">04:42:49 PM     0    823471   46.00    4.00    0.00   50.00    10  node_monitor</span><br><span class="line">04:42:50 PM     0    823471   31.00    7.00    0.00   38.00    10  node_monitor</span><br><span class="line"><span class="comment"># show cpu usage of given process(thread displayed)peridically</span></span><br><span class="line"><span class="variable">$pidstat</span> -p 823471 -t 1</span><br><span class="line"><span class="comment">########################################################## cpu usage per process====================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################## cpu schedule latency per process=========================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU run queue latency, schedule latency for each process</span></span><br><span class="line"><span class="comment"># monitor 10 seconds</span></span><br><span class="line">$ perf <span class="built_in">sched</span> record -- <span class="built_in">sleep</span> 10</span><br><span class="line">$ perf <span class="built_in">sched</span> latency</span><br><span class="line"> -----------------------------------------------------------------------------------------------------------------</span><br><span class="line">  Task                  |   Runtime ms  | Switches | Average delay ms | Maximum delay ms | Maximum delay at       |</span><br><span class="line"> -----------------------------------------------------------------------------------------------------------------</span><br><span class="line">  :632308:632308        |      0.478 ms |        2 | avg:   47.545 ms | max:   95.088 ms | max at: 1397496.686810 s</span><br><span class="line">  :632316:632316        |     13.820 ms |        8 | avg:   23.729 ms | max:   94.070 ms | max at: 1397496.685531 s</span><br><span class="line">  ovs-vsctl:(3)         |    107.932 ms |       31 | avg:   14.581 ms | max:   95.035 ms | max at: 1397496.485498 s</span><br><span class="line">  sh:(2)                |      6.058 ms |       11 | avg:    8.146 ms | max:   87.049 ms | max at: 1397495.885529 s</span><br><span class="line">  <span class="built_in">sleep</span>:(26)            |     17.129 ms |       75 | avg:    6.211 ms | max:   94.541 ms | max at: 1397496.386032 s</span><br><span class="line">  :632320:632320        |      3.305 ms |       18 | avg:    5.288 ms | max:   94.205 ms | max at: 1397495.785685 s</span><br><span class="line">  node_monitor:(76)     |    342.577 ms |     2342 | avg:    4.063 ms | max:  192.182 ms | max at: 1397496.385540 s</span><br><span class="line">  perf:(183)            |    569.297 ms |     1597 | avg:    3.975 ms | max:  196.652 ms | max at: 1397496.386045 s</span><br><span class="line">  kworker/25:2:461486   |      0.009 ms |        1 | avg:    0.677 ms | max:    0.677 ms | max at: 1397496.187200 s</span><br><span class="line">  kworker/9:1:30855     |      0.012 ms |        1 | avg:    0.379 ms | max:    0.379 ms | max at: 1397496.186873 s</span><br><span class="line">  kworker/1:6:615135    |      0.022 ms |        2 | avg:    0.358 ms | max:    0.711 ms | max at: 1397496.189183 s</span><br><span class="line">  kworker/17:1:715010   |      0.009 ms |        1 | avg:    0.357 ms | max:    0.357 ms | max at: 1397496.186876 s</span><br><span class="line">  kworker/31:1:303204   |      0.011 ms |        1 | avg:    0.314 ms | max:    0.314 ms | max at: 1397496.186854 s</span><br><span class="line">  :632321:632321        |      3.882 ms |        7 | avg:    0.313 ms | max:    1.140 ms | max at: 1397495.887512 s</span><br><span class="line">  :632319:632319        |      0.815 ms |        6 | avg:    0.258 ms | max:    1.277 ms | max at: 1397495.792539 s</span><br><span class="line">  kworker/3:1:86183     |      0.010 ms |        1 | avg:    0.226 ms | max:    0.226 ms | max at: 1397496.186715 s</span><br><span class="line">  :632317:632317        |      0.866 ms |        7 | avg:    0.216 ms | max:    1.099 ms | max at: 1397495.794319 s</span><br><span class="line">  kworker/14:1:197420   |      0.010 ms |        1 | avg:    0.215 ms | max:    0.215 ms | max at: 1397496.186723 s</span><br><span class="line">  :632307:632307        |      0.872 ms |        8 | avg:    0.205 ms | max:    1.420 ms | max at: 1397496.188524 s</span><br><span class="line">  kworker/26:0:308384   |      0.011 ms |        1 | avg:    0.193 ms | max:    0.193 ms | max at: 1397496.186720 s</span><br><span class="line">  :632301:632301        |      0.275 ms |        4 | avg:    0.165 ms | max:    0.658 ms | max at: 1397496.591534 s</span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################## cpu schedule latency per process=========================</span></span><br></pre></td></tr></table></figure>

<h2 id="CPU-usage"><a href="#CPU-usage" class="headerlink" title="CPU usage"></a>CPU usage</h2><p>CPU usage is a measurement, in a percentage, of how much time the CPU spends actively computing something. For instance, if you had a program that required uninterrupted processing power for 54 out of the last 60 seconds, your CPU usage on one core would be 90%. Instead, if the program only required six seconds processing time on one core, the usage would be 10%.</p>
<p><code>Most companies seek to keep the CPU usage of their servers as close to 100% as possible</code>. Most servers are sold by overall computing power, and if your server is only sitting at 30% CPU usage, you’re paying for too much processor power. You could downgrade your processor to a lower tier, save money, and see no reduction in the quality of your server’s performance.</p>
<h2 id="cpu-usage-vs-load-average"><a href="#cpu-usage-vs-load-average" class="headerlink" title="cpu usage vs load average"></a>cpu usage vs load average</h2><p>CPU usage: There ratio (usually expressed as a percentage)of time that the CPU is busy doing stuff. This measure only makes sense if you know over which period the percentage is being calculated.</p>
<p>Load: <code>Average queue length for the CPU - including the process currently executing</code>. For this to make sense, you need to know the period over which this is being measured.</p>
<p><strong>They are related, but one does not necessarily correlate to the other.</strong></p>
<p><code>Imagine this scenario - with slightly contrived numbers:</code> <strong>An ideal world with a single CPU. No scheduling overhead, no I&#x2F;O overhead. Just keeping things simple.</strong></p>
<ul>
<li>You have 100 processes waiting for something.</li>
<li>When that “something” happens, each process will need 0.05 seconds of CPU time to do stuff in response.</li>
<li>When “something” does not happen, you have 0% CPU utilisation, and a queue length of 0. Basically stuff is just waiting. Life is good, and you’re merely wasting electrons and heating up the planet.</li>
<li>“something” happens. All 100 processes wake up. Your queue length jumps to 100, and your CPU is busy.</li>
<li>0.05 seconds later, your queue length is 99 as the first process has finished doing “stuff”. CPU is still busy.</li>
<li>After 0.1 seconds, your queue length is 98 as the 2nd process has finished doing “stuff”. CPU is still busy.</li>
<li>Every 0.05 your queue length drops by 1 as a process finishes. CPU remains busy.</li>
<li>After 5 seconds, all the processes have finished; CPU becomes idle again and your queue length is back to zero.</li>
<li><strong>Your CPU utilisation over the last 60 seconds is now: 5&#x2F;60 &#x3D; 8.33%. But your average queue length (&#x3D;load average) over the last 60 seconds will be about 4.2.</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">len:  100  99     98    97    ... 1      0     ...  0</span><br><span class="line">time: 0    0.05   0.1   0.15      4.95   5          59</span><br><span class="line"></span><br><span class="line">average = (0+0+...+1+2+3...+100)/(59/0.05+1) = 4.27</span><br></pre></td></tr></table></figure></li>
</ul>
<p>Looking at the 1-minute CPU utilisation alone (8.33%), you look good. But the 1-minute load average (4.2) shows that you have a performance bottleneck during that minute. Whether this is “bad” or not depends on whether you want it to be faster - do you need to respond to “something” happening more frequently than every 5 seconds?</p>
<p><strong>NOTE</strong></p>
<ul>
<li><code>Load average is always high for periburst load(many processes are ready to run at a time) which runs shortly while cpu uage is not so high.</code></li>
<li>Too many <code>D process</code> as a process in state D is in uninterruptible, it’ counted by load average as well.</li>
</ul>
<h1 id="useful-commands-and-performance-tools"><a href="#useful-commands-and-performance-tools" class="headerlink" title="useful commands and performance tools"></a>useful commands and performance tools</h1><p>To debug performance issue, there are lots of tools that we can use to help us identify the issue, but some of them are old tools, some of new, so here we only introduce new tools that’s are used today.</p>
<!-- more -->
<p><strong>Old tool</strong></p>
<ul>
<li>grpof</li>
<li>Oprofile</li>
</ul>
<p><strong>new tool</strong></p>
<ul>
<li>gperftools<br>gperftools is newer since 2007 developed by Google, it’s simpler, only from <mark>process view, stack of process</mark></li>
<li>perf<br>perf is already in kernel source tree(upstream) since since 2009, it’s complex, can show<br>more information from <mark>system-wide view</mark> it uses hardware counters to profile the application.<br>The result of this profiler are really precise and because it is not doing instrumentation of the code, it is really fast.</li>
</ul>
<p><strong>perf can check a process(stack from kernel to process stack) or check system(without given process id)</strong></p>
<h2 id="useful-commands"><a href="#useful-commands" class="headerlink" title="useful commands"></a>useful commands</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">show cpu load</span><br><span class="line">    Each running process either using or waiting for CPU resources adds 1 to the load average. So, if your system has a load of 5, five processes are either using or waiting for the CPU, the load number doesn’t mean too much. A computer might have a load of 0 one split-second, and a load of 5 the next split-second as several processes use the CPU. Even if you could see the load at any given time, that number would be basically meaningless. That’s why Unix-like systems don’t display the current load. They display the load average — an average of the computer’s load over several periods of time. This allows you to see how much work your computer has been performing.</span><br><span class="line"></span><br><span class="line">    # uptime</span><br><span class="line">    10:11:01 up 18:57,  4 users,  load average: 0.50, 2.13, 1.85</span><br><span class="line">    From left to right, these numbers show you the average load over the last one minute, the last five minutes, and the last fifteen minutes</span><br><span class="line"></span><br><span class="line">show how much time process runs in sys, user</span><br><span class="line"></span><br><span class="line">    Real time is wall clock time. (what we could measure with a stopwatch)</span><br><span class="line">    User time is the amount of time spend in user-mode within the process</span><br><span class="line">    Sys is the CPU time spend in the kernel within the process.</span><br><span class="line"></span><br><span class="line">    NOTE: real can be less than user if, it&#x27;s app is multi-thread or multi-process!!!</span><br><span class="line"></span><br><span class="line">    The rule of thumb is:</span><br><span class="line">    real &lt; user: The process is CPU bound and takes advantage of parallel execution on multiple cores/CPUs.</span><br><span class="line">    real ≈ user: The process is CPU bound and takes no advantage of parallel exeuction.</span><br><span class="line">    real &gt; user: The process is I/O bound. Execution on multiple cores would be of little to no advantage.</span><br><span class="line"></span><br><span class="line">    #time ls</span><br><span class="line">         share  windows</span><br><span class="line">         real    0m0.002s</span><br><span class="line">         user    0m0.001s</span><br><span class="line">         sys 0m0.001s</span><br><span class="line"></span><br><span class="line">show latency of RT linux kernel</span><br><span class="line"></span><br><span class="line">    #cyclictest</span><br><span class="line">    (git://git.kernel.org/pub/scm/utils/rt-tests/rt-tests.git)</span><br><span class="line"></span><br><span class="line">show slab info</span><br><span class="line"></span><br><span class="line">    #cat /proc/slabinfo</span><br><span class="line">    #slabtop</span><br><span class="line">        Active / Total Objects (% used)    : 133629 / 147300 (90.7%)</span><br><span class="line">        Active / Total Slabs (% used)      : 11492 / 11493 (100.0%)</span><br><span class="line">        Active / Total Caches (% used)     : 77 / 121 (63.6%)</span><br><span class="line">        Active / Total Size (% used)       : 41739.83K / 44081.89K (94.7%)</span><br><span class="line">        Minimum / Average / Maximum Object : 0.01K / 0.30K / 128.00K</span><br><span class="line"></span><br><span class="line">         OBJS ACTIVE  USE OBJ SIZE  SLABS OBJ/SLAB CACHE SIZE NAME</span><br><span class="line">        44814  43159  96%    0.62K   7469        6     29876K ext3_inode_cache</span><br><span class="line">        36900  34614  93%    0.05K    492       75      1968K buffer_head</span><br><span class="line">        35213  33124  94%    0.16K   1531       23      6124K dentry_cache</span><br><span class="line">         7364   6463  87%    0.27K    526       14      2104K radix_tree_node</span><br><span class="line">         1280   1015  79%    0.25K     40       32       320K kmalloc-256  ---&gt; two pages for one slab</span><br><span class="line">    (Note, the management memory is not calculated!!!, but it&#x27;s small)</span><br><span class="line"></span><br><span class="line">    Each cache may have many slabs(empty, partial, full), each slab is one or multiple PAGE SIZE</span><br><span class="line">    (usually 4K for a PAGE SIZE)!</span><br><span class="line"></span><br><span class="line">    USE        = (ACTIVE/OBJS)*100/100</span><br><span class="line">    OBJS       = SLABS*(OBJ/SLAB)</span><br><span class="line">    OBJ/SLAB   = (4K*n)/OBJ_SIZE</span><br><span class="line">    CACHE SIZE = SLABS * (4K*n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show swap size used by each process</span><br><span class="line">    #smem</span><br><span class="line">      (RSS 656 mean 656K?)</span><br><span class="line">      PID User     Command                         Swap      USS      PSS      RSS</span><br><span class="line">     2516 rabbitmq sh -c /usr/lib/rabbitmq/bin        0       96      116      656</span><br><span class="line">     1451 lightdm  /bin/sh /usr/lib/lightdm/li        0      100      121      700</span><br><span class="line">     1130 root     /bin/sh -e /proc/self/fd/9         0      100      122      680</span><br><span class="line">     1157 root     /sbin/getty -8 38400 tty3          0      156      174      964</span><br><span class="line"></span><br><span class="line">    Show basic process information  smem</span><br><span class="line">    Show library-oriented view  smem -m</span><br><span class="line">    Show user-oriented view     smem -u</span><br><span class="line">    Show system view    smem -R 4G -K /path/to/vmlinux -w</span><br><span class="line">    Show totals and percentages     smem -t -p</span><br><span class="line">    Show different columns  smem -c &quot;name user pss&quot;</span><br><span class="line">    Sort by reverse RSS     smem -s rss -r</span><br><span class="line">    Show processes filtered by mapping  smem -M libxml</span><br><span class="line">    Show mappings filtered by process   smem -m -P [e]volution</span><br><span class="line">    Read data from capture tarball  smem --source capture.tar.gz</span><br><span class="line">    Show a bar chart labeled by pid     smem --bar pid -c &quot;pss uss&quot;</span><br><span class="line">    Show a pie chart of RSS labeled by name     smem --pie name -s rss</span><br><span class="line"></span><br><span class="line">Show memory usage by &#x27;free&#x27; command</span><br><span class="line"></span><br><span class="line">    $ free </span><br><span class="line">                  total        used        free      shared  buff/cache   available</span><br><span class="line">    Mem:       24687560    11825536     8579812      258488     4282212    12299492</span><br><span class="line">    Swap:      16774140           0    16774140</span><br><span class="line"></span><br><span class="line">    total== 11825536 + 8579812 + 4282212 == 24687560</span><br><span class="line">    available = 8579812 + part of(buff/cache which is not used by OS)</span><br><span class="line"></span><br><span class="line">    total: Your total (physical) RAM (excluding a small bit that the kernel permanently reserves for itself at startup);</span><br><span class="line">    used: memory in use by the OS(calculate apps, buffers, caches)</span><br><span class="line">    free: memory not in use.</span><br><span class="line"></span><br><span class="line">    total = used + free + buff/cache</span><br><span class="line"></span><br><span class="line">    shared /buff/cache: This shows memory usage for specific purposes</span><br><span class="line">    (write data to disk, buffer is used, which cache is used for storing data read from disk in memory)</span><br><span class="line"></span><br><span class="line">    The last line (Swap:) gives information about swap space usage (i.e. memory contents that have been temporarily moved to disk).</span><br><span class="line"></span><br><span class="line">    To actually understand what the numbers mean, you need a bit of background about the virtual memory (VM) subsystem in Linux.</span><br><span class="line">    Just a short version: Linux (like most modern OS) will always try to use free RAM for caching stuff, so Mem: free will almost always be very low.</span><br><span class="line">    caches will be freed automatically if memory gets scarce, so they do not really matter.</span><br><span class="line"></span><br><span class="line">Inside exec()</span><br><span class="line"></span><br><span class="line">    In computing, exec is a functionality of an operating system that runs an executable file in the context of an already existing process,</span><br><span class="line">    replacing the previous executable. This act is also referred to as an overlay. It is especially important in Unix-like systems, although exists elsewhere.</span><br><span class="line">   As a new process is not created, the process identifier (PID) does not change,</span><br><span class="line">   but the machine code, data, heap, and stack of the process are replaced by those of the new program.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">====================================================SAR===================================================================================</span><br><span class="line">sar(System Activity Report)： Show system activity information, its gives more details about cpu, memory, interrupt, io, power, network etc</span><br><span class="line">But you can also check other commands for specific resource from below section</span><br><span class="line"></span><br><span class="line">    # -B is more general including(swap process memory + disk io)</span><br><span class="line">    # sar -B 5 </span><br><span class="line">    Linux 3.10.0-1160.el7.x86_64 (dev) 	10/12/2022 	_x86_64_	(16 CPU)</span><br><span class="line"></span><br><span class="line">    05:14:19 PM  pgpgin/s pgpgout/s   fault/s  majflt/s  pgfree/s pgscank/s pgscand/s pgsteal/s    %vmeff</span><br><span class="line">    05:14:24 PM      0.00  31948.80     10.00      0.00    136.20      0.00      0.00      0.00      0.00</span><br><span class="line">    05:14:29 PM      0.00 236544.00     10.80      0.00     57.40      0.00      0.00      0.00      0.00</span><br><span class="line"></span><br><span class="line">    # -W is about swap of process memory(swap process page to disk when there is not engouh memory)</span><br><span class="line">    #sar -W 5</span><br><span class="line">    Linux 3.10.0-1160.el7.x86_64 (dev) 	10/12/2022 	_x86_64_	(16 CPU)</span><br><span class="line">    </span><br><span class="line">    05:14:43 PM  pswpin/s pswpout/s</span><br><span class="line">    05:14:48 PM      0.00      0.00</span><br><span class="line">    05:14:53 PM      0.00      0.00</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Report I/O and transfer rate statistics</span><br><span class="line">    # sar -b 5 </span><br><span class="line">    Linux 3.10.0-1160.el7.x86_64 (dev)      10/22/2021      _x86_64_        (8 CPU)</span><br><span class="line"></span><br><span class="line">    05:34:02 PM       tps      rtps      wtps   bread/s   bwrtn/s</span><br><span class="line">    05:34:07 PM      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:34:12 PM      0.00      0.00      0.00      0.00      0.00</span><br><span class="line"></span><br><span class="line">    Report activity for each block device</span><br><span class="line">    # sar -d 5 </span><br><span class="line">    Linux 3.10.0-1160.el7.x86_64 (dev)      10/22/2021      _x86_64_        (8 CPU)</span><br><span class="line"></span><br><span class="line">    05:34:20 PM       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util</span><br><span class="line">    05:34:25 PM    dev8-0      0.20      0.00      6.40     32.00      0.00      1.00      1.00      0.02</span><br><span class="line">    05:34:25 PM  dev253-0      0.20      0.00      6.40     32.00      0.00      1.00      1.00      0.02</span><br><span class="line">    05:34:25 PM  dev253-1      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:34:25 PM  dev253-2      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line"></span><br><span class="line">    show interrupt per 5s</span><br><span class="line">    # sar -I ALL 5</span><br><span class="line">    Linux 3.10.0-1160.el7.x86_64 (dev)      10/22/2021      _x86_64_        (8 CPU)</span><br><span class="line"></span><br><span class="line">    05:37:36 PM      INTR    intr/s</span><br><span class="line">    05:37:41 PM         0      0.00</span><br><span class="line">    05:37:41 PM         1      0.00</span><br><span class="line">    05:37:41 PM         2      0.00</span><br><span class="line">    05:37:41 PM         3      0.00</span><br><span class="line">    05:37:41 PM         4      0.00</span><br><span class="line">    05:37:41 PM         5      0.00</span><br><span class="line">    05:37:41 PM         6      0.00</span><br><span class="line">    05:37:41 PM         7      0.00</span><br><span class="line">    05:37:41 PM         8      0.00</span><br><span class="line">    05:37:41 PM         9      0.00</span><br><span class="line">    05:37:41 PM        10      0.00</span><br><span class="line">    05:37:41 PM        11      0.00</span><br><span class="line">    05:37:41 PM        12      0.00</span><br><span class="line">    05:37:41 PM        13      0.00</span><br><span class="line">    05:37:41 PM        14      0.80</span><br><span class="line">    05:37:41 PM        15      0.00</span><br><span class="line"></span><br><span class="line">    show power management</span><br><span class="line">    $ ar -m ALL 10</span><br><span class="line">    Linux 3.10.0-327.36.4.el7.x86_64 (A04-R08-I138-47-91TYB72.JCLOUD.COM)   10/22/2021      _x86_64_        (32 CPU)</span><br><span class="line"></span><br><span class="line">    05:40:01 PM     CPU       MHz</span><br><span class="line">    05:40:11 PM     all   1258.82</span><br><span class="line"></span><br><span class="line">    05:40:01 PM    TEMP      degC     %temp               DEVICE</span><br><span class="line">    05:40:11 PM       1     43.00     55.84    coretemp-isa-0000</span><br><span class="line">    05:40:11 PM       2     38.00     49.35    coretemp-isa-0000</span><br><span class="line">    05:40:11 PM       3     37.00     48.05    coretemp-isa-0000</span><br><span class="line">    05:40:11 PM       4     34.00     44.16    coretemp-isa-0000</span><br><span class="line">    05:40:11 PM       5     38.00     49.35    coretemp-isa-0000</span><br><span class="line">    05:40:11 PM       6     33.00     42.86    coretemp-isa-0000</span><br><span class="line">    05:40:11 PM       7     34.00     44.16    coretemp-isa-0000</span><br><span class="line">    05:40:11 PM       8     37.00     48.05    coretemp-isa-0000</span><br><span class="line">    05:40:11 PM       9     35.00     45.45    coretemp-isa-0000</span><br><span class="line">    05:40:11 PM      10     44.00     57.14    coretemp-isa-0001</span><br><span class="line">    05:40:11 PM      11     36.00     46.75    coretemp-isa-0001</span><br><span class="line">    05:40:11 PM      12     36.00     46.75    coretemp-isa-0001</span><br><span class="line">    05:40:11 PM      13     37.00     48.05    coretemp-isa-0001</span><br><span class="line">    05:40:11 PM      14     37.00     48.05    coretemp-isa-0001</span><br><span class="line">    05:40:11 PM      15     34.00     44.16    coretemp-isa-0001</span><br><span class="line">    05:40:11 PM      16     36.00     46.75    coretemp-isa-0001</span><br><span class="line">    05:40:11 PM      17     34.00     44.16    coretemp-isa-0001</span><br><span class="line">    05:40:11 PM      18     34.00     44.16    coretemp-isa-0001</span><br><span class="line"></span><br><span class="line">    05:40:01 PM     BUS  idvendor    idprod  maxpower                manufact                                         product</span><br><span class="line">    05:40:11 PM       1      8087      800a         0                                                                        </span><br><span class="line">    05:40:11 PM       2      8087      8002         0                                                                        </span><br><span class="line">    05:40:11 PM       1      413c      a001       200         no manufacturer                                  Gadget USB HUB</span><br><span class="line"></span><br><span class="line">    show network stats, lots of fields, only list some</span><br><span class="line">    # sar -n ALL 10</span><br><span class="line">    Linux 3.10.0-327.36.4.el7.x86_64 (A04-R08-I138-47-91TYB72.JCLOUD.COM)   10/22/2021      _x86_64_        (32 CPU)</span><br><span class="line"></span><br><span class="line">    05:43:15 PM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s</span><br><span class="line">    05:43:25 PM tap_metadata      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM vxlan_sys_4789      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM       br0      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM tap_proxy_ns      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM ovs-system      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM tap_proxy      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM      eth0      2.10      2.00      0.23      0.19      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM        lo      2.00      2.00      0.79      0.79      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM       em2      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM       em4      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM       em3      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM   docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line"></span><br><span class="line">    05:43:15 PM     IFACE   rxerr/s   txerr/s    coll/s  rxdrop/s  txdrop/s  txcarr/s  rxfram/s  rxfifo/s  txfifo/s</span><br><span class="line">    05:43:25 PM tap_metadata      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM vxlan_sys_4789      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM       br0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM tap_proxy_ns      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM ovs-system      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM tap_proxy      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM      eth0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM       em2      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM       em4      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM       em3      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">    05:43:25 PM   docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line"></span><br><span class="line">    Report cpu queue length and load averages</span><br><span class="line">    # sar -P ALL -q 10</span><br><span class="line">    Linux 3.10.0-327.36.4.el7.x86_64 (A04-R08-I138-47-91TYB72.JCLOUD.COM)   10/22/2021      _x86_64_        (32 CPU)</span><br><span class="line"></span><br><span class="line">    05:48:32 PM   runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15   blocked</span><br><span class="line">    05:48:42 PM         0      1069      0.43      0.46      0.49         0</span><br><span class="line">    </span><br><span class="line">    Report memory utilization statistics</span><br><span class="line">    # sar -r 10</span><br><span class="line">    Linux 3.10.0-327.36.4.el7.x86_64 (A04-R08-I138-47-91TYB72.JCLOUD.COM)   10/22/2021      _x86_64_        (32 CPU)</span><br><span class="line"></span><br><span class="line">    05:46:25 PM kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty</span><br><span class="line">    05:46:35 PM 119478308  12269620      9.31      1868   9411160   5926572      3.99   4968572   5430432      1560</span><br><span class="line"></span><br><span class="line">    Report CPU utilization</span><br><span class="line">    # sar -P ALL -u 10</span><br><span class="line">    Linux 3.10.0-327.36.4.el7.x86_64 (A04-R08-I138-47-91TYB72.JCLOUD.COM)   10/22/2021      _x86_64_        (32 CPU)</span><br><span class="line"></span><br><span class="line">    05:47:32 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle</span><br><span class="line">    05:47:42 PM     all      1.39      0.00      0.40      0.00      0.00     98.20</span><br><span class="line">    05:47:42 PM       0     40.49      0.00      0.00      0.00      0.00     59.51</span><br><span class="line">    05:47:42 PM       1      0.00      0.00      0.30      0.00      0.00     99.70</span><br><span class="line">    05:47:42 PM       2      0.41      0.00      1.32      0.00      0.00     98.28</span><br><span class="line">    05:47:42 PM       3      0.10      0.00      0.20      0.00      0.00     99.70</span><br><span class="line">    05:47:42 PM       4      0.30      0.00      0.80      0.00      0.00     98.89</span><br><span class="line">    05:47:42 PM       5      0.20      0.00      0.40      0.00      0.00     99.40</span><br><span class="line">    05:47:42 PM       6      0.20      0.00      0.40      0.00      0.00     99.40</span><br><span class="line">    05:47:42 PM       7      0.00      0.00      0.20      0.00      0.00     99.80</span><br><span class="line">    05:47:42 PM       8      0.70      0.00      0.90      0.00      0.00     98.39</span><br><span class="line"></span><br><span class="line">    Report task creation and system switching activity</span><br><span class="line">    # sar -w 10</span><br><span class="line">    Linux 3.10.0-327.36.4.el7.x86_64 (A04-R08-I138-47-91TYB72.JCLOUD.COM)   10/22/2021      _x86_64_        (32 CPU)</span><br><span class="line"></span><br><span class="line">    05:48:56 PM    proc/s   cswch/s</span><br><span class="line">    05:49:06 PM      2.30  12558.70</span><br><span class="line">====================================================SAR===================================================================================</span><br><span class="line"></span><br><span class="line">Show CPUS stats</span><br><span class="line">    CPU utilization stats runs on user, sys, virtual processor(vm)</span><br><span class="line">    # mpstat -P ALL -u</span><br><span class="line">    04:38:08 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line">    04:38:08 PM  all    7.03    0.06    2.89    0.01    0.00    0.00    0.00    8.28    0.00   81.73</span><br><span class="line">    04:38:08 PM    0    0.88    0.08    3.26    0.01    0.00    0.19    0.00   10.02    0.00   85.56</span><br><span class="line">    04:38:08 PM    1    0.89    0.04    3.30    0.01    0.00    0.02    0.00    9.47    0.00   86.28</span><br><span class="line">    04:38:08 PM    2    0.83    0.08    3.15    0.01    0.00    0.01    0.00   10.15    0.00   85.78</span><br><span class="line">    04:38:08 PM    3    0.82    0.04    3.15    0.01    0.00    0.00    0.00    9.61    0.00   86.39</span><br><span class="line">    04:38:08 PM    4    1.03    0.07    4.59    0.01    0.00    0.01    0.00   12.51    0.00   81.78</span><br><span class="line">    04:38:08 PM    5    0.92    0.04    3.22    0.01    0.00    0.00    0.00    9.58    0.00   86.23</span><br><span class="line">    04:38:08 PM    6    1.10    0.07    4.63    0.01    0.00    0.00    0.00   12.52    0.00   81.66</span><br><span class="line">    04:38:08 PM    7    0.83    0.05    3.42    0.01    0.00    0.00    0.00   10.44    0.00   85.25</span><br><span class="line">    04:38:08 PM    8   99.75    0.00    0.25    0.00    0.00    0.00    0.00    0.00    0.00    0.00</span><br><span class="line"></span><br><span class="line">    CPU soft irq</span><br><span class="line">    # mpstat -I SCPU</span><br><span class="line">    Linux 3.10.0-693.21.4.el7.x86_64 (A01-R15-I124-40-CCK4HP2.JCLOUD.COM)   10/22/2021      _x86_64_        (64 CPU)</span><br><span class="line"></span><br><span class="line">    04:39:57 PM  CPU       HI/s    TIMER/s   NET_TX/s   NET_RX/s    BLOCK/s BLOCK_IOPOLL/s  TASKLET/s    SCHED/s  HRTIMER/s      RCU/s</span><br><span class="line">    04:39:57 PM    0       0.00      54.90       0.20       2.42       0.00       0.00       0.05      12.35       0.00      10.65</span><br><span class="line">    04:39:57 PM    1       0.00      41.11       0.00       0.48       0.04       0.00       7.10      43.85       0.00       7.03</span><br><span class="line">    04:39:57 PM    2       0.00      60.01       0.01      14.90       0.00       0.00       0.57      59.44       0.00      10.80</span><br><span class="line">    04:39:57 PM    3       0.00      33.81       0.00       0.50       0.04       0.00       0.00      52.79       0.00       3.72</span><br><span class="line">    04:39:57 PM    4       0.00      40.35       0.01      17.83       0.00       0.00       0.75       6.86       0.00      23.19</span><br><span class="line">    04:39:57 PM    5       0.00      44.60       0.00       0.51       0.04       0.00       0.00      53.62       0.00       7.76</span><br><span class="line">    04:39:57 PM    6       0.00      44.92       0.01      12.48       0.00       0.00       0.51       7.00       0.00      24.59</span><br><span class="line">    04:39:57 PM    7       0.00      58.52       0.00       0.46       0.04       0.00       0.00      57.85       0.00      12.73</span><br><span class="line">    04:39:57 PM    8       0.00      33.03       0.00       0.00       0.00       0.00       0.00       0.00       0.00      58.50</span><br><span class="line"></span><br><span class="line">Show CPU live stats</span><br><span class="line">    # top</span><br><span class="line">    top - 16:45:28 up 771 days,  3:16,  1 user,  load average: 6.66, 7.24, 6.54</span><br><span class="line">    Tasks: 670 total,   9 running, 661 sleeping,   0 stopped,   0 zombie</span><br><span class="line">    %Cpu(s):  9.7 us,  1.6 sy,  0.1 ni, 88.6 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">    KiB Mem : 26379142+total,  3811248 free, 23686681+used, 23113348 buff/cache</span><br><span class="line">    KiB Swap: 16777212 total, 16691312 free,    85900 used. 25565136 avail Mem</span><br><span class="line"></span><br><span class="line">    PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class="line">    127796 root      10 -10  0.105t 573032  20444 S 403.6  0.2  42365,18 vswitchd</span><br><span class="line">    131315 root      20   0 9188560  87436   5940 S 108.6  0.0 668887:05 qemu-kvm</span><br><span class="line">    113257 root      20   0 9220320  77628   5916 S  78.8  0.0 300804:39 qemu-kvm</span><br><span class="line">    69578 root      20   0 9043128  66088   3640 S  18.2  0.0   2199:03 qemu-system-x86</span><br><span class="line">    123753 root      20   0 9039996  63892   3604 S  15.9  0.0 764:21.77 qemu-system-x86</span><br><span class="line">    113084 root      20   0 9074688  68036   1916 S  12.3  0.0 170215:57 qemu-system-x86</span><br><span class="line">    99040 root      20   0 16.647g  65140   1900 S   9.6  0.0 158111:53 qemu-system-x86</span><br><span class="line">    133933 root      20   0 4836392  64328   3648 S   8.6  0.0 381:15.29 qemu-system-x86</span><br><span class="line">    92403 root      20   0 4825240  62916   3308 S   7.3  0.0  21040:53 qemu-system-x86</span><br><span class="line">    100018 root      20   0 3471696   5216   2616 S   7.0  0.0   8384:57 logd</span><br><span class="line"></span><br><span class="line">    # htop</span><br><span class="line"></span><br><span class="line">show live virtual memory usage</span><br><span class="line">    show stats per 2s, actuall, it also shows io, system, cpu as well</span><br><span class="line">    $ vmstat  -n 2</span><br><span class="line">    procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line">    r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line">    5  4  85900 4185664   4396 22772168    0    0     1    91    0    0 15  3 82  0  0</span><br><span class="line">    6  0  85900 4181612   4396 22772580    0    0    64   479 55060 82145  8  1 91  0  0</span><br><span class="line">    8  0  85900 4184968   4396 22772636    0    0    96    98 56364 87759  8  1 91  0  0</span><br><span class="line">    8  0  85900 4183828   4396 22772936    0    0    96   152 58835 88482  9  1 90  0  0</span><br><span class="line">    6  0  85900 4180524   4396 22772920    0    0     0   320 58749 94072  9  1 90  0  0</span><br><span class="line">    5  0  85900 4184580   4396 22773588    0    0     0   234 67631 111630  9  2 89  0  0</span><br><span class="line"></span><br><span class="line">show io statistics, most used for which disk has high io await.</span><br><span class="line">    the io wait of the whole system(96.0%wa)</span><br><span class="line">    # top</span><br><span class="line">    top - 14:31:20 up 35 min, 4 users, load average: 2.25, 1.74, 1.68</span><br><span class="line">    Tasks: 71 total, 1 running, 70 sleeping, 0 stopped, 0 zombie</span><br><span class="line">    Cpu(s): 2.3%us, 1.7%sy, 0.0%ni, 0.0%id, 96.0%wa, 0.0%hi, 0.0%si, 0.0%st</span><br><span class="line">    Mem: 245440k total, 241004k used, 4436k free, 496k buffers</span><br><span class="line">    Swap: 409596k total, 5436k used, 404160k free, 182812k cached</span><br><span class="line"></span><br><span class="line">    show iostat per 10s of each block device(check which block device has high io wait)</span><br><span class="line">    # sar -d 5</span><br><span class="line">    # iostat -txz 10</span><br><span class="line">    Linux 3.10.0-693.21.4.el7.x86_64 (A01-R15-I124-40-CCK4HP2.JCLOUD.COM)   10/22/2021      _x86_64_        (64 CPU)</span><br><span class="line"></span><br><span class="line">    10/22/2021 05:14:10 PM</span><br><span class="line">    avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">            15.31    0.06    2.89    0.01    0.00   81.73</span><br><span class="line"></span><br><span class="line">    Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">    nvme0n1           0.00     0.06    1.06   47.46    43.69  4897.74   203.70     0.01    0.25    0.26    0.25   0.06   0.29</span><br><span class="line">    sda               0.00     0.03    0.00    0.73     0.07     7.51    20.56     0.01   19.20    6.80   19.27   3.83   0.28</span><br><span class="line">    nb100             0.00     0.01    0.29    7.33    36.40   545.36   152.62     0.02    3.25    9.77    2.99   1.07   0.82</span><br><span class="line">    nb101             0.00     0.00    0.00    1.76     0.03    14.69    16.69     0.00    0.94    1.29    0.94   0.29   0.05</span><br><span class="line">    nb102             0.00     0.00    0.00    6.72     0.01   132.59    39.46     0.01    1.18    0.70    1.18   0.28   0.19</span><br><span class="line">    nb103             0.00     0.00    0.00    0.55     0.02     7.14    25.97     0.00    0.86    0.54    0.86   0.46   0.03</span><br><span class="line">    nb104             0.00     0.00    0.00    0.31     0.01    10.68    68.74     0.00    1.45    0.50    1.45   0.43   0.01</span><br><span class="line">    nb105             0.00     0.00    0.00    1.29     0.02    78.13   121.00     0.00    3.56    0.62    3.56   0.50   0.06</span><br><span class="line">    nb106             0.00     0.00    0.01    0.71     0.83    40.81   116.51     0.00    1.19    0.57    1.19   0.69   0.05</span><br><span class="line">    nb107             0.00     0.00    0.00    0.17     0.01     1.37    16.55     0.00    1.21    8.04    1.20   0.39   0.01</span><br><span class="line">    nb108             0.00     0.00    0.00    0.17     0.00     1.29    15.10     0.00    0.90    0.53    0.90   0.44   0.01</span><br><span class="line">    nb109             0.00     0.00    0.00    0.00     0.00     0.04    60.20     0.00   42.15    0.42   43.57   0.46   0.00</span><br><span class="line"></span><br><span class="line">    show io per process, which process is writing high io</span><br><span class="line">    #iotop</span><br><span class="line">    Total DISK READ :       0.00 B/s | Total DISK WRITE :       0.00 B/s</span><br><span class="line">    Actual DISK READ:       0.00 B/s | Actual DISK WRITE:       0.00 B/s</span><br><span class="line">    TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO&gt;    COMMAND                                                                                                                                          </span><br><span class="line">    17391 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.02 % [kworker/6:0]</span><br><span class="line">    16896 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % python -m ipykernel_launcher -f /root/.local/share/jupyter/runtime/kernel-0fe83e4c-ccd4-49f4-ae7e-4b07fabb2dc3.json</span><br><span class="line">        1 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % systemd --switched-root --system --deserialize 22</span><br><span class="line">        2 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [kthreadd]</span><br><span class="line">        4 be/0 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [kworker/0:0H]</span><br><span class="line">        6 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [ksoftirqd/0]</span><br><span class="line">        7 rt/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [migration/0]</span><br><span class="line">        8 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [rcu_bh]</span><br><span class="line">        9 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [rcu_sched]</span><br><span class="line"></span><br><span class="line">show interface statistics</span><br><span class="line">    show stats of ifaces</span><br><span class="line">    # ifstat</span><br><span class="line">    #kernel</span><br><span class="line">    Interface        RX Pkts/Rate    TX Pkts/Rate    RX Data/Rate    TX Data/Rate  </span><br><span class="line">                    RX Errs/Drop    TX Errs/Drop    RX Over/Rate    TX Coll/Rate  </span><br><span class="line">    lo                     0 0             0 0             0 0             0 0      </span><br><span class="line">                        0 0             0 0             0 0             0 0      </span><br><span class="line">    enp0s3                 8 0             6 0           560 0          1424 0      </span><br><span class="line">                        0 0             0 0             0 0             0 0      </span><br><span class="line">    docker0                0 0             0 0             0 0             0 0      </span><br><span class="line">                        0 0             0 0             0 0             0 0      </span><br><span class="line">    vethbedf2bf            0 0             0 0             0 0             0 0      </span><br><span class="line">                        0 0             0 0             0 0             0 0    </span><br><span class="line"></span><br><span class="line">    # live stats on each interface                    </span><br><span class="line">    #iftop</span><br><span class="line"></span><br><span class="line">    # live stats on each process which has network io</span><br><span class="line">    # nethogs</span><br><span class="line">    NetHogs version 0.8.5</span><br><span class="line"></span><br><span class="line">        PID USER     PROGRAM             DEV        SENT      RECEIVED       </span><br><span class="line">    13337 root     sshd: root@pts/2    enp0s3      0.218       0.186 KB/sec      </span><br><span class="line">    ?     root     unknown TCP                     0.000       0.000 KB/sec</span><br><span class="line">    TOTAL                                          0.218       0.186 KB/sec</span><br><span class="line"></span><br><span class="line">    show details about interface like config, stats etc</span><br><span class="line">    # ethtool -h</span><br><span class="line">    ethtool -g|--show-ring DEVNAME	Query RX/TX ring parameters</span><br><span class="line">    ethtool -k|--show-features|--show-offload DEVNAME	Get state of protocol offload and other features</span><br><span class="line">    ethtool -i|--driver DEVNAME	Show driver information</span><br><span class="line">    ethtool -S|--statistics DEVNAME	Show adapter statistics</span><br><span class="line">    ethtool -n|-u|--show-nfc|--show-ntuple DEVNAME	Show Rx network flow classification options or rules</span><br><span class="line">    ethtool -x|--show-rxfh-indir|--show-rxfh DEVNAME	Show Rx flow hash indirection and/or hash key</span><br><span class="line"></span><br><span class="line">show power management</span><br><span class="line">    show power used by each process live</span><br><span class="line">    # powertop</span><br><span class="line">    PowerTOP v2.9     Overview   Idle stats   Frequency stats   Device stats   Tunables                                     </span><br><span class="line">    Summary: 72.3 wakeups/second,  0.0 GPU ops/seconds, 0.0 VFS ops/sec and 0.3% CPU use</span><br><span class="line"></span><br><span class="line">                    Usage       Events/s    Category       Description</span><br><span class="line">                122.3 µs/s      20.0        Process        [PID 460] [xfsaild/dm-0]</span><br><span class="line">                72.8 µs/s       9.5        Timer          tick_sched_timer</span><br><span class="line">                116.2 µs/s       6.7        Timer          hrtimer_wakeup</span><br><span class="line">                93.0 µs/s       5.7        Process        [PID 1084] /usr/bin/containerd</span><br><span class="line">                63.7 µs/s       5.7        Process        [PID 9] [rcu_sched]</span><br><span class="line">                632.7 µs/s       4.8        Process        [PID 1049] /home/data/Anaconda3/bin/python /home/data/Anaconda3/bin/jupyter-notebook -y --no-browser --allow-root --ip=10.0.2.1</span><br><span class="line">                61.6 µs/s       4.8        Process        [PID 1082] /usr/bin/containerd</span><br><span class="line">                34.9 µs/s       2.9        Interrupt      [3] net_rx(softirq)</span><br><span class="line">                183.8 µs/s       1.9        Interrupt      [7] sched(softirq)</span><br><span class="line">                239.2 µs/s       1.0        kWork          e1000_watchdog</span><br><span class="line"></span><br><span class="line">Benchmark tools</span><br><span class="line"></span><br><span class="line">    for operation function</span><br><span class="line">    #apt-get install lmbench</span><br><span class="line"></span><br><span class="line">    Layer 4 Throughput using NetPerf and iPerf, two open source network performance benchmark tools that support both UDP and TCP protocols. Each tool provides in addition other information:</span><br><span class="line">    NetPerf for example provides tests for end-to-end latency (round-trip times or RTT) and is a good replacement for Ping</span><br><span class="line"></span><br><span class="line">    iPerf provides packet loss and delay jitter, useful to troubleshoot network performance.</span><br><span class="line"></span><br><span class="line">    for network, test the network between client(netperf) and server(netserver)</span><br><span class="line"></span><br><span class="line">    server side</span><br><span class="line">    #netserver</span><br><span class="line"></span><br><span class="line">    client side with testing 300s, or never stop(-l 0)</span><br><span class="line">    #netperf -H $server -l 300 -t TCP_STREAM</span><br><span class="line"></span><br><span class="line">    server side</span><br><span class="line">    #iperf3 --server --interval 30</span><br><span class="line">    client side</span><br><span class="line">    #iperf3 --client $server --time 300 --interval 30</span><br></pre></td></tr></table></figure>

<h2 id="check-bottleneck-call-graph"><a href="#check-bottleneck-call-graph" class="headerlink" title="check bottleneck, call graph"></a>check bottleneck, call graph</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line"></span><br><span class="line">Don&#x27;t use gprof which is old since 198x</span><br><span class="line"></span><br><span class="line">Oprofile is old still release one version each year since 2002 and it uses the same backend</span><br><span class="line">as &#x27;perf&#x27; does, so can give almost the same output with &#x27;perf&#x27; but the Community recommend</span><br><span class="line">&#x27;perf&#x27; and intend to replace it</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gperftools is newer since 2007 developed by Google, it&#x27;s simpler, only from process view</span><br><span class="line"></span><br><span class="line">perf is already in kernel source tree(upstream) since since 2009, it&#x27;s complex, can show</span><br><span class="line">more information from system-wide view!!!!!!!!!!!!!!! it uses hardware counters to profile the application.</span><br><span class="line">The result of this profiler are really precise and</span><br><span class="line">because it is not doing instrumentation of the code, it is really fast.</span><br><span class="line"></span><br><span class="line">gperftools and perf are two good choices nowadays!!!!!!!!!!!</span><br><span class="line"></span><br><span class="line">++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br></pre></td></tr></table></figure>

<h3 id="gperftools-great-perf-tools-originally-from-google-performance-tool-is-package-name"><a href="#gperftools-great-perf-tools-originally-from-google-performance-tool-is-package-name" class="headerlink" title="gperftools(great perf tools, originally from google performance tool, is package name)"></a>gperftools(great perf tools, originally from google performance tool, is package name)</h3><p><a href="https://github.com/gperftools/gperftools">gperftools</a> is a collection of a high-performance multi-threaded malloc() implementation, plus some pretty nifty performance analysis tools.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Ubuntu18</span><br><span class="line">#apt-get install google-perftools graphviz libgoogle-perftools-dev</span><br><span class="line">Centos7</span><br><span class="line">$ yum install -y pprof gperftools-devel</span><br><span class="line"></span><br><span class="line">Usage</span><br><span class="line">    CPUPROFILE:(check which function or line take much time) NO track forked child!!!</span><br><span class="line"></span><br><span class="line">        As gperftools provides tcmalloc, heap checker, heap profiler and cpu profiler</span><br><span class="line">        (heap checker, heap profiler are in &#x27;-ltcmalloc&#x27;</span><br><span class="line">         cpu profiler &#x27;-lprofiler&#x27;</span><br><span class="line">         google-pprof is used to analysis the profile file)</span><br><span class="line"></span><br><span class="line">        There are two ways to use gperftools, one is to compile it within your program</span><br><span class="line">        the other is to used PRELOAD and set env(use the first way always!)</span><br><span class="line"></span><br><span class="line">        Generate profile file</span><br><span class="line">            a. Compile it within your program</span><br><span class="line"></span><br><span class="line">                #include &lt;gperftools/profiler.h&gt;</span><br><span class="line">                #include &lt;stdio.h&gt;</span><br><span class="line">                #include &lt;stdlib.h&gt;</span><br><span class="line">                void func1() &#123;</span><br><span class="line">                    int i = 0;</span><br><span class="line">                    while (i &lt; 100000) &#123;</span><br><span class="line">                        ++i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                void func2() &#123;</span><br><span class="line">                    int i = 0;</span><br><span class="line">                    while (i &lt; 200000) &#123;</span><br><span class="line">                        ++i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                void func3() &#123;</span><br><span class="line">                    int i = 0;</span><br><span class="line">                    for (i = 0; i &lt; 1000; ++i) &#123;</span><br><span class="line">                        func1();</span><br><span class="line">                        func2();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                int main()&#123;</span><br><span class="line">                    ProfilerStart(&quot;my.prof&quot;);</span><br><span class="line">                    func3();</span><br><span class="line">                    ProfilerStop();</span><br><span class="line">                    return 0;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">               # gcc -o test  test.c -g -Wall -lprofiler</span><br><span class="line"></span><br><span class="line">               This way(set CPUPROFILE) will do CPU profile definitely!!!, no switch</span><br><span class="line">               #CPUPROFILE_FREQUENCY=100 ./test</span><br><span class="line">               (100 samples per second, default value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            b. Use PRELOAD (not recommended!!!!) without recompiling!!!!!</span><br><span class="line">                #export LD_PRELOAD=/usr/lib64/libprofiler.so</span><br><span class="line"></span><br><span class="line">                /*turn on cpu profile during whole life*/</span><br><span class="line">                #env CPUPROFILE=my.prof ./test</span><br><span class="line">    </span><br><span class="line">            -------------------------------------------------------------------------</span><br><span class="line">            | For a daemon process, run it forground!!! not a daemon for profiling. |</span><br><span class="line">            -------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">        ---------------------------------------------------------------------------</span><br><span class="line">        Analyze the profile file( take care of the first three columns)</span><br><span class="line">        to see which function or lines consume more CPU time!!!!!!!!!!</span><br><span class="line">        ---------------------------------------------------------------------------</span><br><span class="line">            See which function takes much time</span><br><span class="line">            root@ubuntu:~# google-pprof --text ./test my.prof</span><br><span class="line">            OR</span><br><span class="line">            root@centos:~# pprof --text ./test my.prof</span><br><span class="line"></span><br><span class="line">            Using local file ./test. (test is the program)</span><br><span class="line">            Using local file my.prof.(my.prof is the data collected before)</span><br><span class="line">            Removing killpg from all stack traces.</span><br><span class="line">            Total: 71 samples</span><br><span class="line">                  53                74.6%            74.6%          53  74.6% func2</span><br><span class="line">                  18                25.4%           100.0%          18  25.4% func1</span><br><span class="line">                   0                 0.0%           100.0%          71 100.0% __libc_start_main</span><br><span class="line">                   0                 0.0%           100.0%          71 100.0% _start</span><br><span class="line">                   0                 0.0%           100.0%          71 100.0% func3</span><br><span class="line">                   0                 0.0%           100.0%          71 100.0% main</span><br><span class="line"></span><br><span class="line">            column meanings</span><br><span class="line">            1. Number of profiling samples in this function</span><br><span class="line">            2. Percentage of profiling samples in this function</span><br><span class="line">            3. Percentage of profiling samples in the functions printed so far</span><br><span class="line">            4. Number of profiling samples in this function and its callees</span><br><span class="line">            5. Percentage of profiling samples in this function and its callees</span><br><span class="line">            6. Function name </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            if you perf to run, from system view, you will get</span><br><span class="line"></span><br><span class="line">            $perf record ./test</span><br><span class="line">            $perf report</span><br><span class="line">            65.73%  test     test              [.] func2</span><br><span class="line">            33.68%  test     test              [.] func1</span><br><span class="line">            0.16%  test     [kernel.vmlinux]  [k] native_write_msr_safe</span><br><span class="line">            0.06%  test     [kernel.vmlinux]  [k] x86_pmu_enable</span><br><span class="line">            0.05%  test     [kernel.vmlinux]  [k] __intel_pmu_disable_all</span><br><span class="line">            0.05%  test     libc-2.17.so      [.] __GI___dl_iterate_phdr</span><br><span class="line">            0.00%  test     [kernel.vmlinux]  [k] __do_page_fault</span><br><span class="line">            0.00%  test     libc-2.17.so      [.] __memset_sse2</span><br><span class="line">            0.00%  test     [kernel.vmlinux]  [k] lapic_next_deadline</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            See which line takes much time, you have to build test with -g</span><br><span class="line">            root@ubuntu:~#google-pprof --lines --text ./test my.prof</span><br><span class="line">            OR</span><br><span class="line">            root@centos:~#pprof --lines --text ./test my.prof</span><br><span class="line"></span><br><span class="line">            Using local file ./test.</span><br><span class="line">            Using local file my.prof.</span><br><span class="line">            Removing killpg from all stack traces.</span><br><span class="line">            Total: 71 samples</span><br><span class="line">                  37  52.1%  52.1%       37  52.1% func2 /root/test.c:12 (discriminator 1)</span><br><span class="line">                  22  31.0%  83.1%       22  31.0% func1 /root/test.c:6 (discriminator 1)</span><br><span class="line">                  11  15.5%  98.6%       13  18.3% func2 /root/test.c:13</span><br><span class="line">                   1   1.4% 100.0%        1   1.4% func1 /root/test.c:7</span><br><span class="line">                   0   0.0% 100.0%       71 100.0% __libc_start_main /build/eglibc-3GlaMS/eglibc-2.19/csu/libc-start.c:287</span><br><span class="line">                   0   0.0% 100.0%       71 100.0% _start ??:?</span><br><span class="line">                   0   0.0% 100.0%        1   1.4% func1 /root/test.c:6</span><br><span class="line">                   0   0.0% 100.0%       11  15.5% func2 /root/test.c:12</span><br><span class="line">                   0   0.0% 100.0%       23  32.4% func3 /root/test.c:19 (discriminator 2)</span><br><span class="line">                   0   0.0% 100.0%       48  67.6% func3 /root/test.c:20 (discriminator 2)</span><br><span class="line">                   0   0.0% 100.0%       71 100.0% main /root/test.c:25</span><br><span class="line">            (--text, --pdf, --web, --dot, --gif, --gv etc )</span><br><span class="line">            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line"></span><br><span class="line">    Below seems not working for nginx don&#x27;t know why</span><br><span class="line"></span><br><span class="line">        TCMALLOC(thread cache malloc), you don&#x27;t need to memory management for your own</span><br><span class="line">        tcmalloc does it for you, so that you don&#x27;t need to care memory managment!!!!</span><br><span class="line"></span><br><span class="line">            tcmalloc actually implements a cache or pool, so that you can get memory from cache or pool</span><br><span class="line">            fast, but as the presure grows, tcmalloc takes more memory from system, while when presure decrease</span><br><span class="line">            tcmalloc should return the memory back to system TCMALLOC_RELEASE_RATE</span><br><span class="line">            Usage</span><br><span class="line">            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">                #gcc -o test test.c -ltcmalloc_minimal</span><br><span class="line">                (in your program, use malloc, free as you did before)</span><br><span class="line">            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line"></span><br><span class="line">        HEAP CHECKER(check memory leak, not working well, don&#x27;t know why)</span><br><span class="line">            #gcc -o test test.c -ltcmalloc</span><br><span class="line">            #HEAPCHECK=normal  ./test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        HEAP Profile(check where/who alloc memory)</span><br><span class="line"></span><br><span class="line">            #gcc -o test test.c -ltcmalloc</span><br><span class="line"></span><br><span class="line">            dump heap profile when allocate 1M memory (only through malloc method)</span><br><span class="line">            #HEAPPROFILE=heap.prof HEAP_PROFILE_ALLOCATION_INTERVAL=1024*1024 ./test</span><br><span class="line"></span><br><span class="line">            also dump sbrk, mmap method as well</span><br><span class="line">            #HEAPPROFILE=heap.prof  HEAP_PROFILE_MMAP=true HEAP_PROFILE_ALLOCATION_INTERVAL=1024*1024 ./test</span><br><span class="line"></span><br><span class="line">            root@ubuntu:~#google-pprof --gv test test.0004.heap</span><br><span class="line">            root@centos:~#pprof --gv test test.0004.heap</span><br></pre></td></tr></table></figure>

<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://www.brendangregg.com/blog/2017-08-08/linux-load-averages.html">official load average</a></li>
<li><a href="https://scoutapm.com/blog/understanding-load-averages">load average</a></li>
<li><a href="https://www.quora.com/What-is-the-difference-between-load-and-CPU-usage-in-Unix-Linux">cpu load vs cpu usage</a></li>
<li><a href="https://github.com/gperftools/gperftools">gperftools</a></li>
</ul>
]]></content>
      <categories>
        <category>performance</category>
        <category>application</category>
      </categories>
      <tags>
        <tag>performance</tag>
        <tag>perf</tag>
        <tag>gperftools</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx_advanced_structure</title>
    <url>/2020/11/26/nginx-advanced-structure/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>nginx provides advanced data structure like array, list, queue, rb tree which are specific to nginx, like array, it can grow dynamically, but not support free element back to array, list actually is list of several arrays.</p>
<span id="more"></span>
<h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><p>array will increase dynamically if no more space for use. but it’s better to allocate enough element at initialization.<br>as when increase array size, move original data from old array to new array, so that new array has whole data, can iterate it to get all elements. but the new address may be not equal old(a-&gt;elts), <strong>the original array is not freed at all, because user still points to old part and access the element that get from old array as user has that pointer, new element is created from the new array</strong>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----+     +------+               +--------+    +---------+</span><br><span class="line">|     |     |      |               |        |    |         |</span><br><span class="line">|  e1 |     | e2   |               |  e3    |    |  e4     |</span><br><span class="line">+--+--+     +--+---+               +--------++   +------+--+</span><br><span class="line">   |           |                             |          |</span><br><span class="line">   |           |   +------+        +-------+ |          |</span><br><span class="line">   |           |   |      |        |       | |          |</span><br><span class="line">   |           +--&gt;+  12  |        |  12   | |          |</span><br><span class="line">   |               |      |        |       | |          |</span><br><span class="line">   |               +------+        +-------+ |          |</span><br><span class="line">   |               |      |        |       | |          |</span><br><span class="line">   +-------------&gt; |  13  |        |  13   | |          |</span><br><span class="line">                   +------+        |       | |          |</span><br><span class="line">                                   +-------+ |          |</span><br><span class="line">                                   |       | |          |</span><br><span class="line">                                   |  14   +&lt;+          |</span><br><span class="line">                                   |       |            |</span><br><span class="line">                                   +-------+            |</span><br><span class="line">                                   |       |            |</span><br><span class="line">                                   |  15   +&lt;-----------+</span><br><span class="line">                                   |       |</span><br><span class="line">                                   +-------+</span><br><span class="line"></span><br><span class="line">e1 and e2 still point to old array after double array</span><br><span class="line">e3 and e4 point to new array, but the first two elements still have the same info with old array</span><br></pre></td></tr></table></figure>

<p><strong>limitation</strong></p>
<ul>
<li>NOT support decrease array size</li>
<li><strong>NOT support free element back to array</strong></li>
<li><strong>Only support free the whole array</strong></li>
</ul>
<p><strong>data structure</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">void</span>        *elts;      <span class="comment">/* address of nalloc * size */</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>   nelts;     <span class="comment">/* in use counter */</span></span><br><span class="line">    <span class="type">size_t</span>       size;      <span class="comment">/* size of the element */</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>   nalloc;    <span class="comment">/* total elements can be used */</span></span><br><span class="line">    <span class="type">ngx_pool_t</span>  *pool;</span><br><span class="line">&#125; <span class="type">ngx_array_t</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>API</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* example to use: */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">ngx_int_t</span> id;</span><br><span class="line">&#125; <span class="type">my_element_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* initialization size: 4 my_element_t */</span></span><br><span class="line"><span class="type">ngx_array_t</span> *my_array = ngx_array_create(pool, <span class="number">4</span>, <span class="keyword">sizeof</span>(<span class="type">my_element_t</span>));</span><br><span class="line">my_node = ngx_array_push(my_array);</span><br><span class="line">my_node-&gt;id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>nginx list is a list of array(fixed size, nalloc * size) each list part is an array(fixed size), list stores the header part and last part.</p>
<p>when request an element from the list, it checks if the last array is used up or not, if not, gets it, otherwise creates a new array, get one element from it.</p>
<p><strong>Note</strong></p>
<ul>
<li>list is good for dynamic element size, but not good for free ops</li>
<li>The array in the list is used once only when it’s last<br>  later on even you free elements back to the array, if it’s not last anymore, never use it anymore.</li>
<li><strong>Never delete element of list as it’s dangerous as it related data movement</strong></li>
</ul>
<p><strong>data structure</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_list_part_s</span> &#123;</span></span><br><span class="line">    <span class="type">void</span>             *elts;     <span class="comment">/* header of the continuos memory */</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>        nelts;    <span class="comment">/* used counter of this part */</span></span><br><span class="line">    <span class="type">ngx_list_part_t</span>  *next;     <span class="comment">/* next part of the list */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">ngx_list_part_t</span>  *last;     <span class="comment">/* the last part */</span></span><br><span class="line">    <span class="type">ngx_list_part_t</span>   part;     <span class="comment">/* the first part */</span></span><br><span class="line">    <span class="type">size_t</span>            size;     <span class="comment">/* size of each element */</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>        nalloc;   <span class="comment">/* a list can have several parts, each part can take nalloc continuous memory */</span></span><br><span class="line">    <span class="type">ngx_pool_t</span>       *pool;</span><br><span class="line">&#125; <span class="type">ngx_list_t</span>;</span><br></pre></td></tr></table></figure>

<p><strong>API</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">ngx_int_t</span> id;</span><br><span class="line">&#125; <span class="type">my_element_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4 elements for each array in the list */</span></span><br><span class="line"><span class="type">ngx_list_t</span> *mylist = ngx_list_create(pool, <span class="number">4</span>, <span class="keyword">sizeof</span>(<span class="type">my_element_t</span>));</span><br><span class="line"><span class="type">my_element_t</span> *node = ngx_list_push(mylist);</span><br><span class="line">node-&gt;id = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* the iteration through the list: */</span></span><br><span class="line">part = &amp;mylist.part;</span><br><span class="line">data = part-&gt;elts;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span> ;; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= part-&gt;nelts) &#123;</span><br><span class="line">        <span class="keyword">if</span> (part-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        part = part-&gt;next;</span><br><span class="line">        data = part-&gt;elts;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...data[i] ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p>ngx_queue_t is just for linking, data area must be allocated &#x2F;freed by user, ngx_queue is <strong>bidirectional list</strong>.</p>
<p><strong>it supports:</strong></p>
<ul>
<li>insert node at head&#x2F;tail</li>
<li>get head&#x2F;tail node</li>
<li>empty check</li>
<li>remove a node</li>
<li>get prev&#x2F;next node of the given one</li>
<li>sort</li>
<li>join&#x2F;split list</li>
</ul>
<p><strong>data structure</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_queue_s</span> &#123;</span></span><br><span class="line">    <span class="type">ngx_queue_t</span>  *prev;</span><br><span class="line">    <span class="type">ngx_queue_t</span>  *next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>API</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* example to use: */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_node</span> &#123;</span></span><br><span class="line">    <span class="type">ngx_queue_t</span> q_node;</span><br><span class="line">    xxx;</span><br><span class="line">    yyy;</span><br><span class="line">&#125; <span class="type">my_node_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">ngx_queue_t</span> head;</span><br><span class="line"><span class="type">my_node_t</span> node;</span><br><span class="line"></span><br><span class="line">ngx_queue_init(&amp;head)</span><br><span class="line">ngx_queue_insert_head(&amp;head, &amp;node.q_node)</span><br><span class="line"></span><br><span class="line">ngx_queue_empty(&amp;head);</span><br><span class="line">ngx_queue_head(&amp;head);</span><br><span class="line">ngx_queue_last(&amp;head);</span><br><span class="line">ngx_queue_remove(&amp;node);</span><br></pre></td></tr></table></figure>

<h2 id="rb-tree"><a href="#rb-tree" class="headerlink" title="rb tree"></a>rb tree</h2><p>red&#x2F;back tree is <strong>balanced binary search tree</strong>.</p>
<p><img src="https://cyun.tech/images/nginx/nginx_rb_tree.png" alt="nginx rb tree"></p>
<p><strong>balance:</strong></p>
<ul>
<li>when delete&#x2F;insert a node, the tree may be rotated to make the depth small,hence quick search</li>
</ul>
<p><strong>binary:</strong></p>
<ul>
<li>each node have at most two child left&#x2F;right</li>
</ul>
<p><strong>search:</strong></p>
<ul>
<li>the left node is smaller than its parent</li>
<li>the right node is large than it’s parent</li>
<li>as it’s sorted, so each node must have a key(integer)</li>
</ul>
<p><strong>Note</strong><br>By default, key must be unique, if insert a node with same key the previous one will be replaced, BUT you can define custom ‘insert’ method to overwrite the default, hence allow two nodes can have the same key in the tree.</p>
<p><strong>data structure</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_rbtree_s</span> &#123;</span></span><br><span class="line">    <span class="comment">/* root can be change after insert or delete as it may rotate</span></span><br><span class="line"><span class="comment">    ngx_rbtree_node_t     *root;</span></span><br><span class="line"><span class="comment">    /* sentinel is a node with black color, if node has no left/right child, set</span></span><br><span class="line"><span class="comment">     * its left/right child with sentinel to meet rb tree required</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ngx_rbtree_node_t</span>     *sentinel;</span><br><span class="line">    <span class="comment">/* &#x27;insert&#x27; method, how to insert a node in the tree</span></span><br><span class="line"><span class="comment">     * you can define your own to allow same key</span></span><br><span class="line"><span class="comment">     * actually nginx provides such way to us</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ngx_rbtree_insert_pt   insert;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">ngx_uint_t</span>  <span class="type">ngx_rbtree_key_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">ngx_int_t</span>   <span class="type">ngx_rbtree_key_int_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_rbtree_node_s</span> &#123;</span></span><br><span class="line">    <span class="type">ngx_rbtree_key_t</span>       key;</span><br><span class="line">    <span class="type">ngx_rbtree_node_t</span>     *left;</span><br><span class="line">    <span class="type">ngx_rbtree_node_t</span>     *right;</span><br><span class="line">    <span class="type">ngx_rbtree_node_t</span>     *parent;</span><br><span class="line">    u_char                 color;</span><br><span class="line">    u_char                 data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>API</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* example to use */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_node</span> &#123;</span></span><br><span class="line">  xxx</span><br><span class="line">  <span class="type">ngx_rbtree_node_t</span> rb_node;</span><br><span class="line">&#125; <span class="type">my_node_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">my_node_t</span> node;</span><br><span class="line"><span class="type">ngx_rbtree_t</span> rbtree;</span><br><span class="line"><span class="type">ngx_rbtree_node_t</span> sentinel;</span><br><span class="line"></span><br><span class="line">ngx_rbtree_init(&amp;rbtree, &amp;sentinel, ngx_rbtree_insert_value);</span><br><span class="line"></span><br><span class="line">node.rb_node.key = <span class="number">1</span>;</span><br><span class="line">ngx_rbtree_insert(&amp;rbtree, &amp;node.rb_node);</span><br></pre></td></tr></table></figure>
<h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p>Hash is for quick searching, elements are distributed at different buckets based on <code>hash_value % bucket_count</code>, inside each bucket, it’s an array, compared one by one, so for hash, the important are hash function and bucket counter to distribute element evenly to reduce conflict. nginx has built-in hash function and bucket count calculated by nginx itself.</p>
<p><img src="https://cyun.tech/images/nginx/ngx_hash_layout.png" alt="hash layout"></p>
<p><strong>data structure</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/* each element is &lt;key, value&gt; pair</span></span><br><span class="line"><span class="comment">     * key: name</span></span><br><span class="line"><span class="comment">     * value: any value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">void</span>             *value;</span><br><span class="line">    <span class="comment">/* as you can see each element is not fixed!!</span></span><br><span class="line"><span class="comment">     * each element size = sizeof(void*) + sizeof(u_short) + 1 + len</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    u_short           len;</span><br><span class="line">    u_char            name[<span class="number">1</span>];</span><br><span class="line">&#125; <span class="type">ngx_hash_elt_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/* bucket address */</span></span><br><span class="line">    <span class="type">ngx_hash_elt_t</span>  **buckets;</span><br><span class="line">    <span class="comment">/* the bucket counts */</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>        size;</span><br><span class="line">&#125; <span class="type">ngx_hash_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/* passed in parameter --&gt;converted to ngx_hash_elt_t */</span></span><br><span class="line">    <span class="type">ngx_str_t</span>         key;</span><br><span class="line">    <span class="type">ngx_uint_t</span>        key_hash;</span><br><span class="line">    <span class="type">void</span>             *value;</span><br><span class="line">&#125; <span class="type">ngx_hash_key_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Above are three must structures for hash */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">ngx_hash_t</span>        hash;</span><br><span class="line">    <span class="type">void</span>             *value;</span><br><span class="line">&#125; <span class="type">ngx_hash_wildcard_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ngx_hash_combined_t is not a must for hash, but a helper for nginx to use for some case</span></span><br><span class="line"><span class="comment"> * to create different hashes for different types, like this</span></span><br><span class="line"><span class="comment"> * server_name abc.com *.example.com test.com.*;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">ngx_hash_t</span>            hash;    <span class="comment">/* abc.com */</span></span><br><span class="line">    <span class="type">ngx_hash_wildcard_t</span>  *wc_head; <span class="comment">/* *.example.com */</span></span><br><span class="line">    <span class="type">ngx_hash_wildcard_t</span>  *wc_tail; <span class="comment">/* test.com.* */</span></span><br><span class="line">&#125; <span class="type">ngx_hash_combined_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">ngx_hash_t</span>       *hash;     <span class="comment">/* passed in if NULL, created inside init function */</span></span><br><span class="line">    ngx_hash_key_pt   key;</span><br><span class="line">    <span class="type">ngx_uint_t</span>        max_size; <span class="comment">/* max bucket count, how many buckets */</span></span><br><span class="line">                                <span class="comment">/* the real bucket count is calculated based on hash keys */</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>        bucket_size; <span class="comment">/* how many bytes used by each bucket */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>             *name;</span><br><span class="line">    <span class="type">ngx_pool_t</span>       *pool;</span><br><span class="line">    <span class="type">ngx_pool_t</span>       *temp_pool; <span class="comment">/* used for wildcard hash_init to allocate memory for checking conflict */</span></span><br><span class="line">&#125; <span class="type">ngx_hash_init_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* helper structure to add keys to the keys_arrays</span></span><br><span class="line"><span class="comment"> * it supports key conflict checking</span></span><br><span class="line"><span class="comment"> * then pass each key array to hash_init</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>        hsize; <span class="comment">/* bucket number */</span></span><br><span class="line">    <span class="type">ngx_pool_t</span>       *pool;</span><br><span class="line">    <span class="type">ngx_pool_t</span>       *temp_pool;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* key array of exact match like abc.com*/</span></span><br><span class="line">    <span class="type">ngx_array_t</span>       keys; <span class="comment">/* key array, each of ngx_hash_key_t */</span></span><br><span class="line">    <span class="type">ngx_array_t</span>      *keys_hash; <span class="comment">/* bucket array, each bucket is array of ngx_str_t temporary used for checking conflict when creating ngx_hash_key_t */</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">/* key array of wc_head like *.test.com */</span></span><br><span class="line">    <span class="type">ngx_array_t</span>       dns_wc_head;</span><br><span class="line">    <span class="type">ngx_array_t</span>      *dns_wc_head_hash;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* key array of wc_tail like abc.test.* */</span></span><br><span class="line">    <span class="type">ngx_array_t</span>       dns_wc_tail;</span><br><span class="line">    <span class="type">ngx_array_t</span>      *dns_wc_tail_hash;</span><br><span class="line">&#125; <span class="type">ngx_hash_keys_arrays_t</span>;</span><br></pre></td></tr></table></figure>

<p><strong>API</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* without helper function for hash keys */</span></span><br><span class="line"><span class="type">ngx_hash_init_t</span>  hash;</span><br><span class="line"><span class="type">ngx_array_t</span>      keys_array;</span><br><span class="line"><span class="type">ngx_hash_key_t</span>  *hk;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* add temporary hash key, no key conflicting check */</span></span><br><span class="line">ngx_array_init(&amp;keys_array, cf-&gt;temp_pool, <span class="number">32</span>, <span class="keyword">sizeof</span>(<span class="type">ngx_hash_key_t</span>));</span><br><span class="line">hk = ngx_array_push(&amp;keys_array);</span><br><span class="line">hk-&gt;key = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">hk-&gt;key_hash = ngx_hash_key_lc(<span class="string">&quot;test&quot;</span>, <span class="number">4</span>);</span><br><span class="line">hk-&gt;value = XX; <span class="comment">//anything you want</span></span><br><span class="line"></span><br><span class="line">hash.hash = <span class="literal">NULL</span>;</span><br><span class="line">hash.key = ngx_hash_key_lc;</span><br><span class="line">hash.max_size = <span class="number">2048</span>;</span><br><span class="line">hash.bucket_size = <span class="number">64</span>;</span><br><span class="line">hash.name = <span class="string">&quot;test_hash&quot;</span>;</span><br><span class="line">hash.pool = cf-&gt;pool;</span><br><span class="line">hash.temp_pool = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* add hash keys to hash buckets */</span></span><br><span class="line">ngx_hash_init(&amp;hash, keys_array.elts, keys_array.nelts);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* finding */</span></span><br><span class="line"><span class="type">ngx_uint_t</span> hash_value;</span><br><span class="line">hash_value = ngx_hash_key_lc(<span class="string">&quot;test&quot;</span>, <span class="number">4</span>);</span><br><span class="line">ngx_hash_find(hash.hash, hash_value, <span class="string">&quot;test&quot;</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// with helper function</span></span><br><span class="line"><span class="type">ngx_hash_init_t</span>  hash;</span><br><span class="line"><span class="type">ngx_hash_keys_arrays_t</span> keys_array;</span><br><span class="line"><span class="comment">// few keys</span></span><br><span class="line">ngx_hash_keys_array_init(&amp;keys_array, NGX_HASH_SMALL);</span><br><span class="line"></span><br><span class="line"><span class="comment">//add keys to helper array(wildard support and conflict checking!!!)</span></span><br><span class="line">ngx_hash_add_key(&amp;keys_array, <span class="string">&quot;test&quot;</span>, XXX, NGX_HASH_WILDCARD_KEY);</span><br><span class="line">ngx_hash_add_key(&amp;keys_array, <span class="string">&quot;*.test&quot;</span>, YYY, NGX_HASH_WILDCARD_KEY);</span><br><span class="line">ngx_hash_add_key(&amp;keys_array, <span class="string">&quot;test.*&quot;</span>, ZZZ, NGX_HASH_WILDCARD_KEY);</span><br><span class="line"></span><br><span class="line">hash.hash = <span class="literal">NULL</span>;</span><br><span class="line">hash.key = ngx_hash_key_lc;</span><br><span class="line">hash.max_size = <span class="number">2048</span>;</span><br><span class="line">hash.bucket_size = <span class="number">64</span>;</span><br><span class="line">hash.name = <span class="string">&quot;test_hash_helper&quot;</span>;</span><br><span class="line">hash.pool = cf-&gt;pool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (keys_array.keys.nelts) &#123;</span><br><span class="line">    ngx_hash_init(&amp;hash, keys_array.keys.elts, keys_array.keys.nelts);</span><br><span class="line">    hash.temp_pool = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">ngx_hash_t</span> *hash_normal = hash.hash; <span class="comment">// save hash</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (keys_array.dns_wc_head.nelts) &#123;</span><br><span class="line">    ngx_qsort(keys_array.dns_wc_head.elts,</span><br><span class="line">              (<span class="type">size_t</span>) keys_array.dns_wc_head.nelts,</span><br><span class="line">              <span class="keyword">sizeof</span>(<span class="type">ngx_hash_key_t</span>), xx_compare_helper);</span><br><span class="line"></span><br><span class="line">    hash.temp_pool = XXX; <span class="comment">//must set</span></span><br><span class="line">    ngx_hash_wildcard_init(&amp;hash, keys_array.dns_wc_head.elts, keys_array.dns_wc_head.nelts);</span><br><span class="line">    <span class="type">ngx_hash_t</span> *hash_head = hash.hash; <span class="comment">//save</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (keys_array.dns_wc_tail.nelts) &#123;</span><br><span class="line">    ngx_qsort(keys_array.dns_wc_tail.elts,</span><br><span class="line">              (<span class="type">size_t</span>) keys_array.dns_wc_tail.nelts,</span><br><span class="line">              <span class="keyword">sizeof</span>(<span class="type">ngx_hash_key_t</span>), xx_compare_helper);</span><br><span class="line"></span><br><span class="line">    hash.temp_pool = XXX; <span class="comment">// must set</span></span><br><span class="line">    ngx_hash_wildcard_init(&amp;hash, keys_array.dns_wc_tail.elts, keys_array.dns_wc_tail.nelts);</span><br><span class="line">    <span class="type">ngx_hash_t</span> *hash_tail = hash.hash; <span class="comment">//save</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nginx</category>
        <category>data structure</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>load-balancer-markert-solution</title>
    <url>/2021/04/13/load-balancer-markert-solution/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>The load balancer can be splitted into different part based on different types<br><strong>By Component</strong></p>
<ul>
<li>Hardware</li>
<li>Software</li>
</ul>
<p><strong>By Type</strong></p>
<ul>
<li>Local Load Balancers</li>
<li>Global Load Balancers</li>
</ul>
<p><strong>By Deployment</strong></p>
<ul>
<li>On-premise</li>
<li>Cloud</li>
</ul>
<p><strong>Key Market Players</strong></p>
<ul>
<li>A1o Networks, Inc.</li>
<li>Amazon Web Services, Inc.</li>
<li>Citrix Systems, Inc.</li>
<li>F5 Networks, Inc.</li>
<li>Google LLC</li>
<li>IBM Corporation</li>
<li>Microsoft Corporation<span id="more"></span>
<img src="/images/nginx/LB_vendor.jpg" alt="LB vendor"></li>
</ul>
<p>Top vendor of load balancer, please refer to <a href="https://www.datanyze.com/market-share/load-balancers--20">top lb vendor</a>.</p>
]]></content>
      <categories>
        <category>load balancer</category>
        <category>market</category>
      </categories>
      <tags>
        <tag>load balancer</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx-balancer-algorithm</title>
    <url>/2021/04/12/nginx-balancer-algorithm/</url>
    <content><![CDATA[<h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>Nginx now supports following load-balancing disciplines</p>
<ul>
<li>Round-robin and weighted round-robin</li>
<li>Least-connected and weighted least-connected</li>
<li>Source-ip hash-based, and a weighted one</li>
<li>Generic hash</li>
<li>Consistent hash<span id="more"></span></li>
</ul>
<p>Rule to choose a algorithm for your website, we’ll consider pros and cons of each method to help you narrow the range of choices to consider.</p>
<ul>
<li>Running Tests to Compare Methods<blockquote>
<p>Whichever subset of load‑balancing methods you consider, we encourage you to test them to see which works best for your traffic. “Best” usually means shortest time to deliver responses to clients, but you might have different criteria. <code>Testing is most straightforward if all servers have the same capacity. If not, you need to set server weights so that machines with more capacity receive more requests</code></p>
</blockquote>
</li>
</ul>
<p><strong>Some metrics to check during testing are:</strong>  </p>
<ul>
<li><p>CPU and memory load – Look at the percentage of total capacity used, for both CPU and memory. If all servers aren’t equally loaded, traffic is not being distributed efficiently.</p>
</li>
<li><p>Server response time – If the time is consistently higher for some servers than others, somehow “heavier” requests (requiring more computation or calls to a database or other services) are getting directed to them in an unbalanced way. Try adjusting the weights, because the imbalance might be caused by incorrect weights rather than by a problem with the load‑balancing technique.</p>
</li>
<li><p>Total time to respond to the client – Again, consistently higher times for some servers suggest they’re getting a disproportionate share of time‑consuming requests. And again, you can try adjusting weights to see if that eliminates the issue.</p>
</li>
<li><p>Errors and failed requests – You need to make sure that the number of failed requests and other errors during the tests is not larger than is usual for your site. Otherwise you’re basing your decision on error conditions instead of realistic traffic. For some errors, the server can send its response more quickly than when the request succeeds. For HTTP response code 404 (File Not Found), for example, the server probably returns the error much more quickly than it could deliver the actual file if it existed. With the Least Connections and Least Time load‑balancing algorithms, this can lead the load balancer to favor a server that is actually not working well.</p>
</li>
</ul>
<h2 id="Pros-Cons-and-Use-Cases"><a href="#Pros-Cons-and-Use-Cases" class="headerlink" title="Pros, Cons, and Use Cases"></a>Pros, Cons, and Use Cases</h2><p><strong>Hash and IP Hash</strong><br>The Hash and IP Hash load‑balancing techniques create a fixed association between a given type of client request (captured in the hash value) and a certain server. You might recognize this as session persistence  – <code>all requests with a given hash value always go to the same server</code>.</p>
<p>The biggest drawback of these methods is that <code>they are not guaranteed to distribute requests in equal numbers across servers</code>, let alone balance load evenly. The hashing algorithm evenly divides the set of all possible hash values into “buckets”, one for each server in the upstream group, but there’s no way to predict whether the requests that actually occur will have hashes that are evenly distributed. </p>
<p>So it makes sense to <code>use Hash or IP Hash when the benefit of maintaining sessions outweighs the possibly bad effects of unbalanced load</code>. They are the only form of session persistence available in NGINX.</p>
<p>There are a couple cases where <code>IP Hash – and Hash when the client IP address is in the key – don’t work</code>:</p>
<ul>
<li>When the client’s IP address can change during the session, for example when a mobile client switches from a WiFi network to a cellular one.</li>
<li>When the requests from a large number of clients are passing through a forward proxy, because the proxy’s IP address is used for all of them.</li>
</ul>
<p><code>Changing the set of upstream servers usually forces recalculation of at least some of the mappings</code>, breaking session persistence. You can reduce the number of recalculated mappings somewhat:</p>
<ul>
<li>For the Hash method, include the consistent parameter to the hash directive</li>
<li>For the IP Hash method, before removing a server from the upstream group temporarily, add the down parameter to its server directive, as for web2 in the following example. The mappings are not recalculated, on the assumption that the server will soon return to service  <figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server</span> web1;</span><br><span class="line">    <span class="attribute">server</span> web2 down;</span><br><span class="line">    <span class="attribute">server</span> web3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>Round Robin</strong><br>The general consensus is that Round Robin works best when the characteristics of the servers and requests are unlikely to cause some servers to become overloaded relative to others. Some of the conditions are:</p>
<ul>
<li><code>All the servers have about the same capacity.</code> This requirement is less important if differences between servers are accurately represented by server weights.</li>
<li>All the servers host the same content.</li>
<li>Requests are pretty similar in the amount of time or processing power they require. If there’s a wide variation in request weight, a server can become overloaded because the load balancer happens to send it a lot of heavyweight requests in quick succession.</li>
<li>Traffic volume is not heavy enough to push servers to near full capacity very often. If servers are already heavily loaded, it’s more likely that Round Robin’s rote distribution of requests will push some servers “over the edge” into overload as described in the previous bullet.</li>
</ul>
<p><strong>Least Connections</strong><br>Least Connections is the most suitable load‑balancing technique for the widest range of use cases, and particularly for production traffic.</p>
<p><code>Least Connections also effectively distributes workload across servers according to their capacity</code>. A more powerful server fulfills requests more quickly, so at any given moment it’s likely to have a smaller number of connections still being processed (or even waiting for processing to start) than a server with less capacity. Least Connections sends each request to the server with the smallest number of current connections, and so is more likely to send requests to powerful servers.</p>
<h2 id="weighted-Least-Connection"><a href="#weighted-Least-Connection" class="headerlink" title="(weighted)Least Connection"></a>(weighted)Least Connection</h2><p>It is designed to distribute the load evenly among upstream servers, by selecting the one with the fewest number of active connections. If the upstream servers do not all have the same processing power, this can be indicated using the weight parameter to the server directive. The algorithm will take into account the different weighted servers when calculating the number of least connections.</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> bakend &#123; </span><br><span class="line">    least_conn;   </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.1:8080</span> weight=<span class="number">1</span>;    </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.2:8080</span> weight=<span class="number">2</span>;    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="Weighted-Round-Robin"><a href="#Weighted-Round-Robin" class="headerlink" title="(Weighted)Round Robin"></a>(Weighted)Round Robin</h2><p>The load balancer runs through the list of upstream servers in sequence, assigning the next connection request to each one in turn. while weight is used to configure the weight. The default value is 1. The higher the weight, the more requests will be allocated to this server.<code>The weight should be set according to the actual processing capacity of the server</code>.</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> bakend &#123;    </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.1:8080</span> weight=<span class="number">1</span>;    </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.2:8080</span> weight=<span class="number">2</span>;    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="weighted-Generic-Hash"><a href="#weighted-Generic-Hash" class="headerlink" title="(weighted)Generic Hash"></a>(weighted)Generic Hash</h2><p>With the Hash method, for each request the load balancer <code>calculates a hash that is based on the combination of text and NGINX variables you specify</code>, and associates the hash with one of the servers. It sends all requests with that hash to that server, so this method establishes a basic kind of session persistence.</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> bakend &#123; </span><br><span class="line">    <span class="attribute">hash</span> <span class="variable">$scheme</span><span class="variable">$request_uri</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.1:8080</span> weight=<span class="number">1</span>;    </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.2:8080</span> weight=<span class="number">2</span>;    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="weighted-IP-Hash"><a href="#weighted-IP-Hash" class="headerlink" title="(weighted)IP Hash"></a>(weighted)IP Hash</h2><p>The certain IP addresses should always be mapped to the same upstream server. Nginx does this by using the first three octets of an IPv4 address or the entire IPv6 address, as a hashing key. The same pool of IP addresses are therefore always mapped to the same upstream server. So, this mechanism isn’t designed to ensure a fair distribution, but rather a consistent mapping between the client and upstream server. It is very useful for sessions, such as php store sessions on files which located on every web servers, in which case, it will be difficult to synchronize.</p>
<p>Why use first three octets of an IPV4, it is designed to <code>optimize for ISP clients that are assigned IP addresses dynamically from a subnetwork (/24) range. In case of reboot or reconnection, the client’s address often changes to a different one in the /24 network range, but the connection still represents the same client, so there’s no reason to change the mapping to the server</code>.</p>
<p>If, however, the majority of the traffic to your site is coming from <code>clients on the same /24 network, IP Hash doesn’t make sense</code> because it maps all clients to the same server. In that case (or if you want to hash on all four octets for another reason), instead use the Hash method with the <code>$remote_addr</code> variable.<br><code>hash $remote_addr;</code></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> bakend &#123;</span><br><span class="line">    ip_hash;    </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.1:8080</span> weight=<span class="number">1</span>;    </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.2:8080</span> weight=<span class="number">2</span>;    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="weighted-Consistent-Hash"><a href="#weighted-Consistent-Hash" class="headerlink" title="(weighted)Consistent Hash"></a>(weighted)Consistent Hash</h2><p>Consistent hash algorithm: consistent_ <code>Key is dynamically specified.</code></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> bakend &#123; </span><br><span class="line">    <span class="attribute">hash</span> <span class="variable">$consistent_key</span> consistent;   </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.1:8080</span> weight=<span class="number">1</span>;    </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.2:8080</span> weight=<span class="number">2</span>;    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nginx</category>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx_event_framework</title>
    <url>/2020/12/01/nginx-event-framework/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Each connection(<strong>preallocated for fast</strong>) has two events, one for read, the other for write, after nginx adds connection(fd) EPOLLIN and EPOLLOUT to epoll instance(each worker has its own), when event is ready, call handler saved at proper event in epoll directly, or adds the event in post queue, after epoll quits, at last step call event-&gt;handler.</p>
<span id="more"></span>
<h1 id="Event-framework"><a href="#Event-framework" class="headerlink" title="Event framework"></a>Event framework</h1><p><img src="https://cyun.tech/images/nginx/nginx_event_framework.png" alt="event framework"></p>
<p><strong>Data Structure</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_event_s</span> &#123;</span></span><br><span class="line">    <span class="comment">/* points to ngx_connection_s */</span></span><br><span class="line">    <span class="type">void</span>            *data;</span><br><span class="line">    <span class="type">unsigned</span>         write:<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* listen connection&#x27;s read event set it */</span></span><br><span class="line">    <span class="type">unsigned</span>         accept:<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* active means add to epoll */</span></span><br><span class="line">    <span class="type">unsigned</span>         active:<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* data is ready to read or has buffer to write */</span></span><br><span class="line">    <span class="type">unsigned</span>         ready:<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* handler for event */</span></span><br><span class="line">    ngx_event_handler_pt  handler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_connection_s</span> &#123;</span></span><br><span class="line">    <span class="comment">/* next connection if in free connection list */</span></span><br><span class="line">    <span class="type">void</span>               *data;</span><br><span class="line">    <span class="type">ngx_event_t</span>        *read;</span><br><span class="line">    <span class="type">ngx_event_t</span>        *write;</span><br><span class="line">    <span class="type">ngx_socket_t</span>        fd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Timer-event"><a href="#Timer-event" class="headerlink" title="Timer event"></a>Timer event</h2><p>when <code>struct ngx_event_s</code> is used as timer event, most of its fields are not used, only few are useful for timer event. when user adds a timer event, nginx adds the event to timer RB tree, the key is absolute time(expire time), each epoll_wait() call, use the minimal value of timer tree as timeout parameter, after epoll_wait() returns, it could be data ready or timeout, then check the timer event in RB tree, to see if some of them expire or not.</p>
<p>if there is no timer, epoll_wait will block for ever, wake up only when there is event on socket like data ready, EOF, error, interrupt etc.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_event_t</span> &#123;</span></span><br><span class="line">  <span class="type">unsigned</span>         timedout:<span class="number">1</span>;         <span class="comment">/* timer expires or not */</span></span><br><span class="line">  <span class="type">unsigned</span>         timer_set:<span class="number">1</span>;        <span class="comment">/* timer in rb tree or not */</span></span><br><span class="line">  ngx_event_handler_pt  handler;       <span class="comment">/* handler for this timer event */</span></span><br><span class="line">  <span class="type">ngx_rbtree_node_t</span>   timer;           <span class="comment">/* timer event key(absolute time) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nginx</category>
        <category>event</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx_conf_layout</title>
    <url>/2020/12/01/nginx-conf-layout/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        location /sdf &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>each block has a context, child block may share part of context with its parent, like server block shares main_conf with its parent http block, location block shares main_conf and srv_conf with its parent server block, except the sharing part, each context preserve a slot for all HTTP modules, each HTTP module has it own create_main&#x2F;create_srv&#x2F;create_loc if it wants to save parameters from cmd at different scopes(MAIN_CONF&#x2F;SER_CONF&#x2F;LOC_CONF), let’s say an example to explain it.</p>
<ul>
<li>if a HTTP module has a command can be used only at MAIN_CONF scope, it only needs to provide create_main function which only called at http block {}</li>
<li>if a HTTP module has a command can be used <code>only at SRV_CONF scope</code>,  it has to provide <code>create_srv function called both by http block &#123;&#125; and server block &#123;&#125;</code>, but http block {} created part is not used actually because command is not allowed to use at http block, <code>no merge needed</code>.</li>
<li>if a module has a command can be used at<code> MAIN_CONF/SRV_CONF scope</code>, it has to provide <code>create_srv function called both by http block &#123;&#125; and server block &#123;&#125;</code>, then <code>merge</code> the value set at http block to server block {} at last.</li>
</ul>
<h1 id="conf-layout"><a href="#conf-layout" class="headerlink" title="conf layout"></a>conf layout</h1><p><img src="https://cyun.tech/images/nginx/ngx_conf_layout.png" alt="conf ctx layout"></p>
<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p><img src="https://cyun.tech/images/nginx/ngx_conf_layout_detail_http.png" alt="http ctx layout"></p>
<p>For each HTTP module that provides create_srv, it’s called once at http level, then for each server {}, it’s called once at server level as well, that means <strong>we merge http {} same srv_conf with different srv_conf at server {}.</strong></p>
<h2 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h2><p><img src="https://cyun.tech/images/nginx/ngx_conf_layout_detail_stream.png" alt="stream ctx layout"></p>
]]></content>
      <categories>
        <category>nginx</category>
        <category>conf</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx_filter_framework</title>
    <url>/2020/12/01/nginx-filter-framework/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>nginx supports two kinds of filter when sending response to client, one is header filter, the other is body filter, header filter is called before sending response header to client, body filter is called before sending body to client, you can create your own filter module to do anything(mostly related to header manipulation or body manipulation) without break any nginx source code.</p>
<span id="more"></span>

<h1 id="filter-framework"><a href="#filter-framework" class="headerlink" title="filter framework"></a>filter framework</h1><p><img src="https://cyun.tech/images/nginx/ngx_filter_framework.png" alt="filter framework"></p>
<p>As you can see, filter is like chain, <code>the last configured one is called first</code>, because the last one is the one who sets <code>ngx_http_top_body_filter</code> and <code>ngx_http_top_header_filter</code> which are called by <code>ngx_http_output_filter()</code> and <code>ngx_http_send_header()</code>.</p>
]]></content>
      <categories>
        <category>nginx</category>
        <category>filter</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx_http_core_phase_event_handler</title>
    <url>/2020/12/01/nginx-http-core-phase-event-handler/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>nginx provides several phases for developer, developer can register its own handler to some phases, do its own work without breaking nginx source code, it’s flexible, here are phases with order(runs from top to bottom).</p>
<ul>
<li>NGX_HTTP_SERVER_REWRITE_PHASE</li>
<li><font color='red'>NGX_HTTP_FIND_CONFIG_PHASE</font></li>
<li><font color='red'>NGX_HTTP_REWRITE_PHASE</font></li>
<li>NGX_HTTP_POST_REWRITE_PHASE</li>
<li>NGX_HTTP_PREACCESS_PHASE</li>
<li><font color='red'>NGX_HTTP_ACCESS_PHASE</font></li>
<li>NGX_HTTP_POST_ACCESS_PHASE</li>
<li>NGX_HTTP_PRECONTENT_PHASE</li>
<li><font color='red'>NGX_HTTP_CONTENT_PHASE</font></li>
<li><font color='red'>NGX_HTTP_LOG_PHASE</font></li>
</ul>
<p>each phase has a checker, nginx phase engine runs the checker with fixed order, inside each checker there could be several handlers, each checker runs handlers of that phase.</p>
<p><strong><code>Note: phase is for client request(filter is for response), engine runs after parsing all request headers.</code></strong></p>
<span id="more"></span>
<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="phase"><a href="#phase" class="headerlink" title="phase"></a>phase</h2><p><img src="https://cyun.tech/images/nginx/ngx_http_core_phases.png" alt="http phases"></p>
<p><strong>Data Structure</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ngx_http_phase_handler_s</span>  <span class="title">ngx_http_phase_handler_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">ngx_int_t</span> <span class="params">(*ngx_http_phase_handler_pt)</span><span class="params">(<span class="type">ngx_http_request_t</span> *r, <span class="type">ngx_http_phase_handler_t</span> *ph)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">ngx_int_t</span> <span class="params">(*ngx_http_handler_pt)</span><span class="params">(<span class="type">ngx_http_request_t</span> *r)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* each handler has such instance */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_http_phase_handler_s</span> &#123;</span></span><br><span class="line">    <span class="comment">/* each phase has a checker which calls handler</span></span><br><span class="line"><span class="comment">     * and does extra work after handler returns</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ngx_http_phase_handler_pt  checker;</span><br><span class="line">    ngx_http_handler_pt        handler;</span><br><span class="line">    <span class="comment">/* next phase to run, if handler does not run sequently, quick jump in some case,</span></span><br><span class="line"><span class="comment">     * next is not always used, but used in some rare case</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * most phase handler</span></span><br><span class="line"><span class="comment">     * next: point to the subsequent phase</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * post rewrite phase handler</span></span><br><span class="line"><span class="comment">     * next: points to find_conf_phase, used when uri change(rewrite change uri)</span></span><br><span class="line"><span class="comment">     * in some phase, next is not used actually</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>                 next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/* all ordered handlers from all phases used for runtime */</span></span><br><span class="line">    <span class="type">ngx_http_phase_handler_t</span>  *handlers;</span><br><span class="line">    <span class="comment">/* server_rewrite_index:   NGX_HTTP_SERVER_REWRITE_PHASE(first handler index)</span></span><br><span class="line"><span class="comment">     * location_rewrite_index: NGX_HTTP_REWRITE_PHASE(first handler index)</span></span><br><span class="line"><span class="comment">     * for quick jump in some case</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>                 server_rewrite_index;</span><br><span class="line">    <span class="type">ngx_uint_t</span>                 location_rewrite_index;</span><br><span class="line">&#125; <span class="type">ngx_http_phase_engine_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/* phase_engine is used runtime which copies handlers from each phase</span></span><br><span class="line"><span class="comment">     * and save them in a large array phase_engine-&gt;handlers</span></span><br><span class="line"><span class="comment">     * each element is ngx_http_phase_handler_s which has the copied handler</span></span><br><span class="line"><span class="comment">     * and other info like phase checker and next phase to run</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ngx_http_phase_engine_t</span>    phase_engine;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* stores all handlers for each phase, after initialized each module</span></span><br><span class="line"><span class="comment">     * as a module can register handler at different phases</span></span><br><span class="line"><span class="comment">     * we save that handler to the given phase</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * each phase is an array which stores all handlers</span></span><br><span class="line"><span class="comment">     * for that phase, each handler takes one slot</span></span><br><span class="line"><span class="comment">     * ngx_http_handler_pt</span></span><br><span class="line"><span class="comment">     *----------------------------------------------------</span></span><br><span class="line"><span class="comment">     * it&#x27;s temporary use, NOT used runtime</span></span><br><span class="line"><span class="comment">     *----------------------------------------------------</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ngx_http_phase_t</span>           phases[NGX_HTTP_LOG_PHASE + <span class="number">1</span>];</span><br><span class="line">&#125; <span class="type">ngx_http_core_main_conf_t</span>;</span><br></pre></td></tr></table></figure>
<p><strong>API</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// construct runtime phase engine</span></span><br><span class="line"><span class="type">static</span> <span class="type">ngx_int_t</span> <span class="title function_">ngx_http_init_phase_handlers</span><span class="params">(<span class="type">ngx_conf_t</span> *cf, <span class="type">ngx_http_core_main_conf_t</span> *cmcf)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ngx_http_core_run_phases</span><span class="params">(<span class="type">ngx_http_request_t</span> *r)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">ngx_int_t</span>                   rc;</span><br><span class="line">    <span class="type">ngx_http_phase_handler_t</span>   *ph;</span><br><span class="line">    <span class="type">ngx_http_core_main_conf_t</span>  *cmcf;</span><br><span class="line"></span><br><span class="line">    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* all handlers */</span></span><br><span class="line">    ph = cmcf-&gt;phase_engine.handlers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* checker converts handler return value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * handler return      checker return</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * NGX_DECLINE         NGX_AGAIN: next handler</span></span><br><span class="line"><span class="comment">     * NGX_DONE            NGX_OK:    run phase done</span></span><br><span class="line"><span class="comment">     * NGX_OK              different based on checker</span></span><br><span class="line"><span class="comment">     * NGX_XX(error)       finalize_request, NGX_OK, run phase done</span></span><br><span class="line"><span class="comment">     * NGX_YYY(not error)  based on checker</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * more detail refer to each checker definition</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">while</span> (ph[r-&gt;phase_handler].checker) &#123;</span><br><span class="line"></span><br><span class="line">        rc = ph[r-&gt;phase_handler].checker(r, &amp;ph[r-&gt;phase_handler]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rc == NGX_OK) &#123;</span><br><span class="line">            <span class="comment">/* return only when checker returns NGX_OK */</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="event-handler"><a href="#event-handler" class="headerlink" title="event handler"></a>event handler</h2><p>For http request, the event handler changes during what it’s processing, process header or process body, here is diagram shows how they are changing during processing request.</p>
<p><img src="https://cyun.tech/images/nginx/ngx_http_event_handler.png" alt="http event handler"></p>
]]></content>
      <categories>
        <category>nginx</category>
        <category>phase</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx_http_request_upstream_close</title>
    <url>/2020/12/01/nginx-http-request-upstream-close/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>After a request is served, we need to free resource used by that request, nginx provides two main API(high level) to free downstream and upstream side.</p>
<ul>
<li>ngx_http_finalize_request: free request and client connection etc</li>
<li>ngx_http_upstream_finalize_request: free upstream peer resource etc</li>
</ul>
<p>Note: <strong>not always both APIs called for each request, it depends on config and phase it’s in,  call proper API(some time lower level API) to free resource.</strong></p>
<span id="more"></span>
<h1 id="How-request-is-finalized"><a href="#How-request-is-finalized" class="headerlink" title="How request is finalized"></a>How request is finalized</h1><p><img src="https://cyun.tech/images/nginx/ngx_http_close_upstream_or_request.png" alt="finalize request"></p>
<p>Most normal case: Step1—&gt;Step2—&gt;Step3—&gt;Step4<br><strong>case1</strong><br>no upstream is configured(<code>no proxy_pass</code>): only ngx_http_finalize_request() is needed if request is created</p>
<p><strong>case2</strong><br>upstream is configured, but <code>error happens before connect with upstream</code>, only ngx_http_finalize_request() is needed.</p>
<p><strong>case3</strong><br><strong><code>upstream is configured, connected with upstream,  everything is ok, after send body to client, ngx_http_upstream_finalize_request ()is called(OK) firstly which invokes ngx_http_finalize_request() as well. this is the most normal case</code></strong></p>
<p><strong>case4</strong><br>upstream is configured, connected with upstream,<code>error happens at upstream side before request is served</code>, ngx_http_upstream_finalize_request() is called(ERROR) which invokes ngx_http_finalize_request() as well.</p>
<p><strong>case5</strong><br>upstream is configured, connected with upstream, error happens at downside side before request is served, ngx_http_finalize_request() is called firstly which invokes ngx_http_upstream_finalize_request() as it’s cleanup chain.</p>
<p><code>In a short word, we should free both side if created, no matter error or ok</code>, <strong>if no error, ngx_http_upstream_finalize_request is called firstly, otherwise, error side calls firstly</strong></p>
<p><strong>Note: some times low level API are called depends on what phase it’s in and what resource is created</strong></p>
]]></content>
      <categories>
        <category>nginx</category>
        <category>request_close</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx_http_upstream_conf</title>
    <url>/2020/12/01/nginx-http-upstream-conf/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>upstream holds the backend information, how to select backend and free the peer connection based on balance algorithm.</p>
<p><strong>explicit upstream defined in this way.</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> up_1 &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">1.1.1.1:443</span> weight=<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">1.1.1.1:443</span> weight=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">location</span> /abc &#123;</span><br><span class="line">    proxy_pass: https://up_1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>There is also another way to define an upstream called <strong>implicit upstream</strong>, for implicit upstream, there is no way to define balance algorithm(round robin is used) and set parameters for it.</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> /abc &#123;</span><br><span class="line">    proxy_pass: https://www.google.com/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h1 id="Http-upstream"><a href="#Http-upstream" class="headerlink" title="Http upstream"></a>Http upstream</h1><p>location may refer to an upstream by <code>proxy_pass</code> directive, that means <strong>at conf phase, we link the location to the upstream</strong>, later on when request matches that location, we select a server from the linked upstream, create a connection for the selected server, send request to it.</p>
<p><img src="https://cyun.tech/images/nginx/http_upstream_conf.png" alt="upstream conf"></p>
<h2 id="how-server-is-selected"><a href="#how-server-is-selected" class="headerlink" title="how server is selected"></a>how server is selected</h2><p>server selection depends on balance algorithm, nginx supports several algorithms</p>
<ul>
<li>round robin</li>
<li>least connection</li>
<li>ip hash</li>
</ul>
<p>each algorithm must provide <code>peer.get</code> and <code>peer.free</code></p>
<ul>
<li>peer.get(): select a server, update counter, its return value:<ul>
<li>NGX_DONE: get a connected connection</li>
<li>NGX_OK: get a server, need to create new connection</li>
<li>NGX_BUSY: no server is available</li>
</ul>
</li>
<li>peer.free(): free resource(free counter etc) used by peer.get.</li>
</ul>
<h2 id="what-port-is-used-when-connecting-upstream-server"><a href="#what-port-is-used-when-connecting-upstream-server" class="headerlink" title="what port is used when connecting upstream server"></a>what port is used when connecting upstream server</h2><p>it depends how upstream is defined and used.</p>
<p><strong>explicit upstream</strong><br>we use port defined by server in upstream itself, if server has no port configured, for <code>proxy_pass http://</code> use 80, for <code>proxy_pass https://</code> use 443, <strong>never use port from url itself</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">upstream</span> ups &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">1.1.1.1</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">2.2.2.2:8000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">10.10.10.10</span>;</span><br><span class="line">        <span class="section">location</span> /a &#123;</span><br><span class="line">            <span class="comment"># 8080 is ignored</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://ups:8080;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">10.10.10.10</span> ssl;</span><br><span class="line">        <span class="section">location</span> /b &#123;</span><br><span class="line">            <span class="comment"># 8080 is ignored</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> https://ups:8080;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>implicit upstream</strong><br>we always use port from url itself, if no port in url, use 80 for http, 443 for https when connection with backend.</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">10.10.10.10</span> ssl;</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="comment"># proxy_pass https://www.google.com;</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> https://www.google.com:8443;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="uri-sent-to-upstream-server"><a href="#uri-sent-to-upstream-server" class="headerlink" title="uri sent to upstream server"></a>uri sent to upstream server</h2><p>uri sent to upstream server depends on how proxy_pass is used.</p>
<p><strong>case: proxy_pass without uri</strong>  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the request URI is passed to the server in the same form as by a client when the original request is processed</span></span><br><span class="line"></span><br><span class="line"><span class="section">location</span> /abc &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$<span class="attribute">curl</span> http://test.com/abcd/cool</span><br><span class="line"><span class="comment"># uri sent to upstream: /abcd/cool</span></span><br></pre></td></tr></table></figure>

<p><strong>case: proxy_pass has uri which uses variable</strong>  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># we use uri from variable directly to replace original uri</span></span><br><span class="line"><span class="attribute">proxy_pass</span> http://127.0.0.1<span class="variable">$request_uri</span>;</span><br></pre></td></tr></table></figure>

<p><strong>case: proxy_pass with uri which is not variable</strong>  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the part of a normalized request URI matching the location is replaced by a URI specified in the directive</span></span><br><span class="line"></span><br><span class="line"><span class="section">location</span> /abc &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1/hot;</span><br><span class="line">&#125;</span><br><span class="line">$<span class="attribute">curl</span> http://test.com/abcd/cool</span><br><span class="line"><span class="comment"># uri sent to upstream: /hot/d/cool</span></span><br></pre></td></tr></table></figure>
<p>details refer to <code>ngx_http_proxy_create_request()</code>.</p>
]]></content>
      <categories>
        <category>nginx</category>
        <category>upstream conf</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx_http_log</title>
    <url>/2020/12/09/nginx-http-log/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>nginx supports two kinds of log, one is error log, the other is access log, error log can happen at any time when process request, but access log only happens when a request is finalized, <code>once a time</code>.</p>
<span id="more"></span>
<h1 id="log-type"><a href="#log-type" class="headerlink" title="log type"></a>log type</h1><h2 id="error-log"><a href="#error-log" class="headerlink" title="error log"></a>error log</h2><p>To write an error log, you need to enable it firstly by logging to a file or to syslog</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># write error log to a particular file</span></span><br><span class="line"><span class="attribute">error_log</span> /var/log/<span class="literal">error</span>.log <span class="literal">info</span>;</span><br></pre></td></tr></table></figure>
<p>later on in your source code, call ngx_log_error() with info that you want to write, more details <a href="https://cyun.tech/nginx-log/">LOG API</a></p>
<p><strong>add connection and http meta when writing error log</strong><br>In most case, we’re processing http request, we want to add request metadata when writing log, nginx provides log handler for this, when log instance is used, handler is called automatically to add extra info, save your time to write that repeated info.</p>
<p><strong><code>such handler is called only for non DEBUG log, most used when error happens(ngx_log_error())</code></strong></p>
<p>client connection</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// when call ngx_log_error(log_level, c-&gt;log, ...); ngx_http_log_error is called by ngx_log_error_core if log_level is NOT DEBUG</span></span><br><span class="line">c-&gt;<span class="built_in">log</span>-&gt;handler = ngx_http_log_error;</span><br><span class="line">r-&gt;log_handler = ngx_http_log_error_handler;</span><br><span class="line"><span class="comment">/* ngx_http_log_error: add client and server info</span></span><br><span class="line"><span class="comment"> * ngx_http_log_error_handler: add request_line, Host header, upstream info</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h2 id="access-log"><a href="#access-log" class="headerlink" title="access log"></a>access log</h2><p>For each request, there is only <code>one access log</code> which is written at last when request is finalized, by default access_log is enabled with specific format, but you can change to any format you want.</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span>  &#123;</span><br><span class="line">    <span class="comment"># default access log format</span></span><br><span class="line">    <span class="comment"># &quot;$remote_addr - $remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span> access_log_format <span class="string">&#x27;Client.Ip: &quot;<span class="variable">$remote_addr</span>&quot;, Client.Port: &quot;<span class="variable">$remote_port</span>&quot;&#x27;</span>;</span><br><span class="line">    <span class="comment"># use predefined format access_log_format from above</span></span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx-access.log access_log_format;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>inside</strong><br>access log is an NGX_HTTP_LOG_PHASE handler, which is called when request is freed <code>ngx_http_free_request()-&gt;ngx_http_log_request()</code>, <code>ngx_http_log_request()</code> calls handlers of NGX_HTTP_LOG_PHASE, access log handler <code>ngx_http_log_handler()</code> is one which writes access log to file.</p>
]]></content>
      <categories>
        <category>nginx</category>
        <category>http log</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx-log</title>
    <url>/2021/01/07/nginx-log/</url>
    <content><![CDATA[<h1 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h1><p>nginx provides two kinds of logs, ‘error’ log and debug log, you can use several APIs(macro) to log info to console or file, let’s explain how to use these APIs in detail.</p>
<p><strong>support formats</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* src/core/ngx_string.c</span></span><br><span class="line"><span class="comment"> * supported formats:</span></span><br><span class="line"><span class="comment"> *    %[0][width][x][X]O        off_t</span></span><br><span class="line"><span class="comment"> *    %[0][width]T              time_t</span></span><br><span class="line"><span class="comment"> *    %[0][width][u][x|X]z      ssize_t/size_t</span></span><br><span class="line"><span class="comment"> *    %[0][width][u][x|X]d      int/u_int</span></span><br><span class="line"><span class="comment"> *    %[0][width][u][x|X]l      long</span></span><br><span class="line"><span class="comment"> *    %[0][width|m][u][x|X]i    ngx_int_t/ngx_uint_t</span></span><br><span class="line"><span class="comment"> *    %[0][width][u][x|X]D      int32_t/uint32_t</span></span><br><span class="line"><span class="comment"> *    %[0][width][u][x|X]L      int64_t/uint64_t</span></span><br><span class="line"><span class="comment"> *    %[0][width|m][u][x|X]A    ngx_atomic_int_t/ngx_atomic_uint_t</span></span><br><span class="line"><span class="comment"> *    %[0][width][.width]f      double, max valid number fits to %18.15f</span></span><br><span class="line"><span class="comment"> *    %P                        ngx_pid_t</span></span><br><span class="line"><span class="comment"> *    %M                        ngx_msec_t</span></span><br><span class="line"><span class="comment"> *    %r                        rlim_t</span></span><br><span class="line"><span class="comment"> *    %p                        void *</span></span><br><span class="line"><span class="comment"> *    %V                        ngx_str_t *</span></span><br><span class="line"><span class="comment"> *    %v                        ngx_variable_value_t *</span></span><br><span class="line"><span class="comment"> *    %s                        null-terminated string</span></span><br><span class="line"><span class="comment"> *    %*s                       length and string</span></span><br><span class="line"><span class="comment"> *    %Z                        &#x27;\0&#x27;</span></span><br><span class="line"><span class="comment"> *    %N                        &#x27;\n&#x27;</span></span><br><span class="line"><span class="comment"> *    %c                        char</span></span><br><span class="line"><span class="comment"> *    %%                        %</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  reserved:</span></span><br><span class="line"><span class="comment"> *    %t                        ptrdiff_t</span></span><br><span class="line"><span class="comment"> *    %S                        null-terminated wchar string</span></span><br><span class="line"><span class="comment"> *    %C                        wchar</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h2><p>user can configure log level like this</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">error</span> /tmp/log <span class="literal">debug</span>;</span><br></pre></td></tr></table></figure>

<p><strong>level can be:</strong></p>
<ul>
<li>emerg</li>
<li>alert</li>
<li>crit</li>
<li>error</li>
<li>warn</li>
<li>notice</li>
<li>info</li>
<li>debug     -&gt; debug all</li>
</ul>
<p><strong>specific debug component</strong>  </p>
<ul>
<li>debug_core</li>
<li>debug_alloc</li>
<li>debug_mutex</li>
<li>debug_event</li>
<li>debug_http</li>
<li>debug_mail</li>
<li>debug_stream</li>
</ul>
<h2 id="error-log"><a href="#error-log" class="headerlink" title="error log"></a>error log</h2><p>there are only <strong>two high level APIs user should use</strong></p>
<ul>
<li>ngx_conf_log_error(level, ): log error during conf</li>
<li>ngx_log_error(level,): log error during runtime</li>
</ul>
<p>level can be</p>
<ul>
<li>#define NGX_LOG_EMERG             1</li>
<li>#define NGX_LOG_ALERT             2</li>
<li>#define NGX_LOG_CRIT              3</li>
<li>#define NGX_LOG_ERR               4</li>
<li>#define NGX_LOG_WARN              5</li>
<li>#define NGX_LOG_NOTICE            6</li>
<li>#define NGX_LOG_INFO              7</li>
<li>#define NGX_LOG_DEBUG             8</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</span><br><span class="line">                   <span class="string">&quot;directive \&quot;%s\&quot; is not terminated by \&quot;;\&quot;&quot;</span>,</span><br><span class="line">                   name-&gt;data);</span><br><span class="line"></span><br><span class="line">ngx_log_error(NGX_LOG_CRIT, cycle-&gt;<span class="built_in">log</span>, ngx_socket_errno,</span><br><span class="line">              <span class="string">&quot;the inherited socket #%d has &quot;</span></span><br><span class="line">              <span class="string">&quot;an unsupported protocol family&quot;</span>, ls[i].fd);</span><br></pre></td></tr></table></figure>

<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">error_log</span> /tmp/log <span class="literal">info</span>;</span><br></pre></td></tr></table></figure>
<p><strong>Note: ngx_log_error is always complied into source code, logging or not depends on what level user configured</strong></p>
<h3 id="debug-log"><a href="#debug-log" class="headerlink" title="debug log"></a>debug log</h3><p>there are several high level APIs(macros) user can use</p>
<ul>
<li>ngx_log_debug0</li>
<li>ngx_log_debug1</li>
<li>ngx_log_debug2</li>
<li>ngx_log_debug3</li>
<li>ngx_log_debug4</li>
<li>ngx_log_debug5</li>
<li>ngx_log_debug6</li>
<li>ngx_log_debug7</li>
<li>ngx_log_debug8</li>
</ul>
<p><strong>level only limited to these below, any others like above will not be printed(like NGX_LOG_DEBUG, not printed if use ngx_log_debugx API)</strong></p>
<ul>
<li>#define NGX_LOG_DEBUG_CORE        0x010</li>
<li>#define NGX_LOG_DEBUG_ALLOC       0x020</li>
<li>#define NGX_LOG_DEBUG_MUTEX       0x040</li>
<li>#define NGX_LOG_DEBUG_EVENT       0x080</li>
<li>#define NGX_LOG_DEBUG_HTTP        0x100</li>
<li>#define NGX_LOG_DEBUG_MAIL        0x200</li>
<li>#define NGX_LOG_DEBUG_STREAM      0x400</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ngx_log_debug1(NGX_LOG_DEBUG_CORE, cycle-&gt;<span class="built_in">log</span>,...);</span><br><span class="line"></span><br><span class="line"><span class="comment">// wrong use!!! never print it out</span></span><br><span class="line"><span class="comment">// #define NGX_LOG_DEBUG             8</span></span><br><span class="line"><span class="comment">// error_log set debug log-&gt;log_level = NGX_LOG_DEBUG_ALL(0x7ffffff0)</span></span><br><span class="line"><span class="comment">// (log)-&gt;log_level &amp; level == 0, so never print it out</span></span><br><span class="line">ngx_log_debug1(NGX_LOG_DEBUG, cycle-&gt;<span class="built_in">log</span>,...);</span><br></pre></td></tr></table></figure>
<p>Note:</p>
<ul>
<li><strong>when call ngx_log_debugxxx, should never pass non-debug level to these APIs</strong>, even it’s permitted.</li>
<li>ngx_log_debugxxx is complied into source code, only when <code>--with-debug</code> is configured</li>
<li>logging or not depends on what level user configured</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">error_log</span> /tmp/log <span class="literal">debug</span>;</span><br></pre></td></tr></table></figure>

<h2 id="inside-these-logging-APIS"><a href="#inside-these-logging-APIS" class="headerlink" title="inside these logging APIS"></a>inside these logging APIS</h2><p>high level APIS call low level APIs with some checks, but user should never call these low level APIs</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// log_level is user setting</span></span><br><span class="line"><span class="comment">// log_error check &gt;=</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ngx_log_error(level, log, ...)                                        \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> ((log)-&gt;log_level &gt;= level) ngx_log_error_core(level, log, __VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// log_debug check &amp;, ngx_log_debugx calls ngx_log_debug</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ngx_log_debug(level, log, ...)                                        \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> ((log)-&gt;log_level &amp; level)                                             \</span></span><br><span class="line"><span class="meta">        ngx_log_error_core(NGX_LOG_DEBUG, log, __VA_ARGS__)</span></span><br></pre></td></tr></table></figure>

<p>For debug log(NGX_LOG_DEBUG_HTTP), it’s logged only when</p>
<ul>
<li>–with-debug is configured by user</li>
<li>user set log level(log-&gt;log_level) which has that bit</li>
</ul>
<p><strong>Note: when error_log set debug log-&gt;log_level &#x3D; NGX_LOG_DEBUG_ALL(0x7ffffff0)</strong></p>
]]></content>
      <categories>
        <category>nginx</category>
        <category>logging</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx_process_request_and_response_body</title>
    <url>/2020/12/17/nginx-process-request-and-response-body/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>nginx provides flexible way when processing header and body to meet different network env to achieve better performance, say nginx can send the request immediately after get the whole request headers, or send the request to upstream after get the entire body, when <strong>cache request body</strong>, we can cache it in memory if memory is large enough or cache it to a file.<br>Also we can <strong>cache the response body</strong> to a file or send it immediately to client, all are configurable!!!</p>
<span id="more"></span>
<h1 id="Body-processing"><a href="#Body-processing" class="headerlink" title="Body processing"></a>Body processing</h1><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><p><strong>request header buffer</strong></p>
<p>Before talking about request body, let’s say process header buffer first, here are directives related to request header</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">Syntax:	<span class="attribute">client_header_buffer_size</span> size;</span><br><span class="line">Default: <span class="attribute">client_header_buffer_size</span> <span class="number">1k</span>;</span><br><span class="line">Context: http, server</span><br></pre></td></tr></table></figure>
<p>Sets buffer size for reading client request header. For most requests, a buffer of 1K bytes is enough. However, if a request includes long cookies, or comes from a WAP client, it may not fit into 1K. If a request line or a request header field does not fit into this buffer then larger buffers, configured by the large_client_header_buffers directive, are allocated.</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">Syntax:	<span class="attribute">large_client_header_buffers</span> number size;</span><br><span class="line">Default: <span class="attribute">large_client_header_buffers</span> <span class="number">4</span> <span class="number">8k</span>;</span><br><span class="line">Context: http, server</span><br></pre></td></tr></table></figure>
<p>Sets the maximum number and size of buffers used for reading large client request header. <code>A request line cannot exceed the size of one buffer</code>, or the 414 (Request-URI Too Large) error is returned to the client. <strong><code>A request header field(one header) cannot exceed the size of one buffer as well</code></strong>, or the 400 (Bad Request) error is returned to the client. <strong><code>Buffers are allocated only on demand that means it&#39;s allocated only when 1K is not enough to hold request headers or request line</code></strong>.</p>
<p><strong>request body</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># It&#x27;s clear to call client_request_buffering_on to align with others.</span></span><br><span class="line">Syntax:	<span class="attribute">proxy_request_buffering</span> <span class="literal">on</span> | <span class="literal">off</span>;</span><br><span class="line">Default: <span class="attribute">proxy_request_buffering</span> <span class="literal">on</span>;</span><br><span class="line">Context: http, server, <span class="section">location</span></span><br></pre></td></tr></table></figure>
<p>When buffering is enabled, the<code> entire request body is read from the client before sending the request to a proxied server</code>, send request(headers, then body) happens only when we receive the entire request body.</p>
<p>When buffering is disabled, the request body is sent to the proxied server immediately as it is received(request headers). <code>In this case, the request cannot be passed to the next server if nginx already started sending the request body</code>.</p>
<p>As mentioned above when buffering is enabled, in some case request body is large, how can we cache it?  nginx first uses memory, then disk for body caching, <strong>but if CPS is high and with large request body, it’s not a good way to buffer them all as it could use up disk or memory</strong>.</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">Syntax:	<span class="attribute">client_body_buffer_size</span> size;</span><br><span class="line">Default: <span class="attribute">client_body_buffer_size</span> <span class="number">8k</span>|<span class="number">16k</span>;</span><br><span class="line">Context: http, server, <span class="section">location</span></span><br></pre></td></tr></table></figure>
<p>Sets buffer size for reading client request body. <code>In case the request body is larger than the buffer(part of unused header buffer + this buffer), the whole body or only its part is written to a temporary file(each request has only one temporary file)</code>, By default, buffer size is equal to two memory pages. This is 8K on x86, other 32-bit platforms, and x86-64. It is usually 16K on other 64-bit platforms.</p>
<p><code>Note: temporary file is unlink() after nginx open it, that means you CAN NOT see it even worker is writing data to it</code>, <strong>temporary file is deleted after get response header from upstream that means we send out entire request body</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show fd of temporary file</span></span><br><span class="line"><span class="variable">$lsof</span> -p worker_pid | grep <span class="string">&#x27;deleted&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from error.log file</span></span><br><span class="line">2020/12/17 15:06:40 [warn] 3856<span class="comment">#0: *1 a client request body is buffered to a temporary file /usr/local/nginx/client_body_temp/0000000001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># temporary is removed automatically from disk get response header from upstream.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">Syntax:	<span class="attribute">client_body_temp_path</span> path [level1 [level2 [level3]]];</span><br><span class="line">Default: <span class="attribute">client_body_temp_path</span> client_body_temp;</span><br><span class="line">Context: http, server, <span class="section">location</span></span><br></pre></td></tr></table></figure>
<p>Defines a directory for storing temporary files holding client request bodies. Up to three-level subdirectory hierarchy can be used under the specified directory. For example, in the following configuration</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">client_body_temp_path</span> /spool/nginx/client_temp <span class="number">1</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>a path to a temporary file might look like this:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">/spool/nginx/client_temp/7/45/00000123457</span><br></pre></td></tr></table></figure>

<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">Syntax:	<span class="attribute">client_body_in_file_only</span> <span class="literal">on</span> | clean | <span class="literal">off</span>;</span><br><span class="line">Default: <span class="attribute">client_body_in_file_only</span> <span class="literal">off</span>;</span><br><span class="line">Context: http, server, <span class="section">location</span></span><br></pre></td></tr></table></figure>
<p>Determines whether nginx should save the entire client request body(<code>no matter what size it is</code>) into a file, <code>it&#39;s same file with proxy_request_buffering</code> directive. This directive can be used during debugging, or when using the $request_body_file variable.</p>
<p><code>When set to the value on, temporary files are not removed after request processing.</code></p>
<p><code>The value clean will cause the temporary files left after request processing to be removed.</code></p>
<p><strong>no buffering request body conf</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_request_buffering</span> <span class="literal">off</span>;</span><br><span class="line"><span class="attribute">proxy_pass_request_body</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>; <span class="comment"># reason for this http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_request_buffering</span></span><br></pre></td></tr></table></figure>

<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">Syntax:	<span class="attribute">client_max_body_size</span> size;</span><br><span class="line">Default: <span class="attribute">client_max_body_size</span> <span class="number">1m</span>;</span><br><span class="line">Context: http, server, <span class="section">location</span></span><br></pre></td></tr></table></figure>
<p>Sets the maximum allowed size of the client request body, specified in the “Content-Length” request header field. If the size in a request exceeds the configured value, the 413 (Request Entity Too Large) error is returned to the client. Please be aware that browsers cannot correctly display this error. <code>Setting size to 0 disables checking of client request body size</code>.</p>
<h2 id="response"><a href="#response" class="headerlink" title="response"></a>response</h2><p>There are several directives used for control response, should we buffer it when necessary.</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># write to temporary file only when client is slow than upstream</span></span><br><span class="line">Syntax:	<span class="attribute">proxy_buffering</span> <span class="literal">on</span> | <span class="literal">off</span>;</span><br><span class="line">Default: <span class="attribute">proxy_buffering</span> <span class="literal">on</span>;</span><br><span class="line">Context: http, server, <span class="section">location</span></span><br></pre></td></tr></table></figure>
<p>When buffering is enabled, nginx receives a response from the proxied server as soon as possible, saving it into the buffers set by the <code>proxy_buffer_size and proxy_buffers directives</code>. If the whole response does not fit into memory, <code>a part of it can be saved to a temporary file on the disk</code>.  <strong><code>when buffering is enabled, nginx tries to receive enough body as much as possible, but if client is ready to write, we still send body to it during receiving, that means temporary file may be not used if client is faster than upstream</code></strong>.  buffering NOT mean sending to client only when receive entire response, it’s different with buffering for request.</p>
<p>When buffering is disabled, the response is passed to a client synchronously, immediately as it is received. nginx will not try to read the whole response from the proxied server.<code>The maximum size of the data that nginx can receive from the server at a time </code>is set by the <code>proxy_buffer_size</code> directive.</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">Syntax:	<span class="attribute">proxy_buffers</span> number size;</span><br><span class="line">Default: <span class="attribute">proxy_buffers</span> <span class="number">8</span> <span class="number">4k</span>|<span class="number">8k</span>;</span><br><span class="line">Context: http, server, <span class="section">location</span></span><br></pre></td></tr></table></figure>
<p>Sets the number and size of the buffers used for reading a response from the proxied server, for a single connection. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">Syntax:	<span class="attribute">proxy_max_temp_file_size</span> size;</span><br><span class="line">Default: <span class="attribute">proxy_max_temp_file_size</span> <span class="number">1024m</span>;</span><br><span class="line">Context: http, server, <span class="section">location</span></span><br></pre></td></tr></table></figure>
<p>When buffering of responses from the proxied server is enabled, and the whole response does not fit into the buffers set by the proxy_buffer_size and proxy_buffers directives, a part of the response can be saved to a temporary file. <code>This directive sets the maximum size of the temporary file</code>. <strong>the temporary file is deleted automatically when request is finalize in <code>ngx_http_upstream_finalize_request()</code></strong>.</p>
<p><code>The zero value disables buffering of responses to temporary files.</code></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">Syntax:	<span class="attribute">proxy_temp_path</span> path [level1 [level2 [level3]]];</span><br><span class="line">Default: <span class="attribute">proxy_temp_path</span> proxy_temp;</span><br><span class="line">Context: http, server, <span class="section">location</span></span><br></pre></td></tr></table></figure>
<p>Defines a directory for storing temporary files with data received from proxied servers. Up to three-level subdirectory hierarchy can be used underneath the specified directory. For example, in the following configuration</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_temp_path</span> /spool/nginx/proxy_temp <span class="number">1</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>a temporary file might look like this:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">/spool/nginx/proxy_temp/7/45/00000123457</span><br></pre></td></tr></table></figure>

<p><strong>non buffering response</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_buffering</span> <span class="literal">off</span></span><br><span class="line"><span class="comment"># receive buffer used for header and body at a time recv(fd, size)</span></span><br><span class="line">proxy_buffer_size size;</span><br></pre></td></tr></table></figure>

<p><strong>buffering response</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_buffering</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># below two used for saving response in memory</span></span><br><span class="line"><span class="attribute">proxy_buffer_size</span> size;</span><br><span class="line"><span class="attribute">proxy_buffers</span> number size;</span><br><span class="line"></span><br><span class="line"><span class="comment"># if memory is used up, save it to disk</span></span><br><span class="line"><span class="attribute">proxy_temp_path</span> path;</span><br><span class="line"><span class="attribute">proxy_max_temp_file_size</span> size;</span><br></pre></td></tr></table></figure>

<h2 id="API-related"><a href="#API-related" class="headerlink" title="API related"></a>API related</h2><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p><strong>request header</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// build r-&gt;headers_in from request header</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ngx_http_process_request_headers</span><span class="params">(<span class="type">ngx_event_t</span> *rev)</span>;</span><br><span class="line"><span class="comment">//build header sent to upstream(backend), create a temp buffer to hold all header copied from r-&gt;headers_in</span></span><br><span class="line"><span class="type">static</span> <span class="type">ngx_int_t</span> <span class="title function_">ngx_http_proxy_create_request</span><span class="params">(<span class="type">ngx_http_request_t</span> *r)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>response header</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// build header sent to client(set r-&gt;header_out) when parsed all response headers</span></span><br><span class="line"><span class="type">static</span> <span class="type">ngx_int_t</span> <span class="title function_">ngx_http_upstream_process_headers</span><span class="params">(<span class="type">ngx_http_request_t</span> *r, <span class="type">ngx_http_upstream_t</span> *u)</span>;</span><br><span class="line"><span class="comment">// send response header to client and cleanup request body temp file(it will call header filter later on)</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ngx_http_upstream_send_response</span><span class="params">(<span class="type">ngx_http_request_t</span> *r, <span class="type">ngx_http_upstream_t</span> *u)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// header filter to add/update/remove(manipulate r-&gt;header_out) response header</span></span><br><span class="line"><span class="type">static</span> <span class="type">ngx_int_t</span> <span class="title function_">ngx_http_headers_filter</span><span class="params">(<span class="type">ngx_http_request_t</span> *r)</span>;</span><br><span class="line"><span class="comment">// last header filter based on r-&gt;header_out create a temp buffer to hold all header copied from r-&gt;header_out, then send it out</span></span><br><span class="line"><span class="type">static</span> <span class="type">ngx_int_t</span> <span class="title function_">ngx_http_header_filter</span><span class="params">(<span class="type">ngx_http_request_t</span> *r)</span></span><br></pre></td></tr></table></figure>
<h3 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h3><p><strong>request body</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// client is ready to read, read request and send it to upstream</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ngx_http_read_client_request_body_handler</span><span class="params">(<span class="type">ngx_http_request_t</span> *r)</span>;</span><br><span class="line"><span class="comment">// upstream is ready to write, read request body and send it to upstream</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ngx_http_upstream_send_request_handler</span><span class="params">(<span class="type">ngx_http_request_t</span> *r, <span class="type">ngx_http_upstream_t</span> *u)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>response Body</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// downstream is ready to write</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ngx_http_upstream_process_downstream</span><span class="params">(<span class="type">ngx_http_request_t</span> *r)</span>;</span><br><span class="line"><span class="comment">// upstream is ready to read</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ngx_http_upstream_process_upstream</span><span class="params">(<span class="type">ngx_http_request_t</span> *r, <span class="type">ngx_http_upstream_t</span> *u)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sending response(non buffered mode)</span></span><br><span class="line"><span class="comment">// downstream is ready to write(read response and send it to client)</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ngx_http_upstream_process_non_buffered_downstream</span><span class="params">(<span class="type">ngx_http_request_t</span> *r)</span>;</span><br><span class="line"><span class="comment">// upstream is ready to read(read response and send it to client)</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ngx_http_upstream_process_non_buffered_upstream</span><span class="params">(<span class="type">ngx_http_request_t</span> *r, <span class="type">ngx_http_upstream_t</span> *u)</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nginx</category>
        <category>body</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx_shared_memory_layout</title>
    <url>/2020/11/24/nginx-shared-memory-layout/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Shared memory is memory that can be accessed by different processes, as each process’s page table maps to the same physical page, nginx tracks all used shared memory as a list in each cycle. for each shared memory, mmap() is called by master processed after parse conf if <strong>same shared memory(same name, name is the key)</strong> can’t be reused, otherwise, just copy shared memory address from old cycle to new cycle, save that shared memory address, <strong>reused shared memory is not freed during reconfigure</strong>, later on fork worker process.</p>
<span id="more"></span>
<h1 id="Shared-memory"><a href="#Shared-memory" class="headerlink" title="Shared memory"></a>Shared memory</h1><h2 id="Data-structure-and-API"><a href="#Data-structure-and-API" class="headerlink" title="Data structure and API"></a>Data structure and API</h2><p><strong>structure</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_shm_zone_s</span> &#123;</span></span><br><span class="line">    <span class="type">void</span>                     *data; <span class="comment">/* data context of the share memory</span></span><br><span class="line"><span class="comment">                                     * most are conf related that will use</span></span><br><span class="line"><span class="comment">                                     * the shared memory to save something</span></span><br><span class="line"><span class="comment">                                     */</span></span><br><span class="line">    <span class="type">ngx_shm_t</span>                 shm;  <span class="comment">/* meta of the shared memory, like name, size, addr etc*/</span></span><br><span class="line">    ngx_shm_zone_init_pt      init; <span class="comment">/* init callback after memory mapped */</span></span><br><span class="line">    <span class="type">void</span>                     *tag;  <span class="comment">/* module address used as part of key(name, tag) */</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>                noreuse;  <span class="comment">/* unsigned  noreuse:1; */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    u_char      *addr; <span class="comment">/* mmapped address, it&#x27;s managed as slab pool, each worker only shares this part */</span></span><br><span class="line">    <span class="type">size_t</span>       size; <span class="comment">/* size of shared memory, user should make it as pages units */</span></span><br><span class="line">    <span class="type">ngx_str_t</span>    name; <span class="comment">/* key for shared memory */</span></span><br><span class="line">&#125; <span class="type">ngx_shm_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_cycle_s</span> &#123;</span></span><br><span class="line">    <span class="comment">/* each cycle has its shared memory list</span></span><br><span class="line"><span class="comment">     * each element is ngx_shm_zone_t which is created during reconfigure based on nginx.conf</span></span><br><span class="line"><span class="comment">     * the address of ngx_shm_zone_t is different for cycles</span></span><br><span class="line"><span class="comment">     * but if old cycle and new cycle reuse same shared memory</span></span><br><span class="line"><span class="comment">     * the shared memory address is copied from old cycle to new cycle</span></span><br><span class="line"><span class="comment">     * saved at: ngx_shm_zone_t.shm.addr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ngx_list_t</span>                shared_memory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>API</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* add a ngx_shm_zone_t to the cycle shared_memory list, shared memory is not mapped now */</span></span><br><span class="line"><span class="type">ngx_shm_zone_t</span> * <span class="title function_">ngx_shared_memory_add</span><span class="params">(<span class="type">ngx_conf_t</span> *cf, <span class="type">ngx_str_t</span> *name, <span class="type">size_t</span> size, <span class="type">void</span> *tag)</span>;</span><br><span class="line"><span class="comment">/* call mmap() to allocate shared memory */</span></span><br><span class="line"><span class="type">ngx_int_t</span> <span class="title function_">ngx_shm_alloc</span><span class="params">(<span class="type">ngx_shm_t</span> *shm)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="organize-all-shared-memory"><a href="#organize-all-shared-memory" class="headerlink" title="organize all shared memory"></a>organize all shared memory</h2><p><img src="https://cyun.tech/images/nginx/nginx_shared_memory_management.png" alt="shared memory tracking"></p>
<p>This picture shows how shared memory is tracked by each cycle, reused old one(same name, size, tag) or create new one if cant’ be reused.</p>
]]></content>
      <categories>
        <category>nginx</category>
        <category>shared memory</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>shared memory</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx_process_headers</title>
    <url>/2020/12/07/nginx-process-headers/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>nginx provides flexible way to manipulate headers, you can do this by <code>directive or by lua</code>, here we only say directive, headers can be request header or response header, that means <strong>nginx gives you the way to manipulate request header before sending to upstream and response header before sending to client</strong>.<br><strong>nginx supports</strong></p>
<ul>
<li>add a header</li>
<li>update existing header</li>
<li>delete a header</li>
</ul>
<p><strong>request header related directive before sending to upstream</strong></p>
<ul>
<li>proxy_set_header</li>
</ul>
<p><strong>response header related directives before sending to client</strong></p>
<ul>
<li>add_header</li>
<li>proxy_ignore_headers</li>
<li>proxy_hide_header</li>
<li>proxy_pass_header</li>
</ul>
<span id="more"></span>
<h1 id="Header-building"><a href="#Header-building" class="headerlink" title="Header building"></a>Header building</h1><p>For proxy header sent to upstream, it depends on three parts.</p>
<ul>
<li>request sent(header in request itself) lowest priority</li>
<li>default behavior for some proxy headers</li>
<li>user setting by directive(proxy_set_header) highest priority</li>
</ul>
<p>First check user setting, if has, use that value, otherwise, use default behavior for some proxy headers, if not header has no default behavior, just pass it to upstream.</p>
<p>For response header sent to client, it depends on two parts.</p>
<ul>
<li>ignore&#x2F;hide</li>
<li>user setting by directive(add_header) highest priority</li>
</ul>
<p>First check user setting, if has, use that value, otherwise not send to client if ignored or hidden.</p>
<h2 id="Data-Structure"><a href="#Data-Structure" class="headerlink" title="Data Structure"></a>Data Structure</h2><p><strong>proxy header(most headers from client) sent to upstream</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/* as proxy headers value can have variable, so need to compile it, then saved at values(handler)</span></span><br><span class="line"><span class="comment">     * hash is the hash table for proxy header name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ngx_array_t</span>                   *flushes;</span><br><span class="line">    <span class="type">ngx_array_t</span>                   *lengths;</span><br><span class="line">    <span class="type">ngx_array_t</span>                   *values;</span><br><span class="line">    <span class="type">ngx_hash_t</span>                     hash;</span><br><span class="line">&#125; <span class="type">ngx_http_proxy_headers_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">ngx_str_t</span>   key;</span><br><span class="line">    <span class="type">ngx_str_t</span>   value;</span><br><span class="line">&#125; <span class="type">ngx_keyval_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">ngx_http_upstream_conf_t</span>       upstream;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* headers(used runtime sent to backend) are merged result from two parts</span></span><br><span class="line"><span class="comment">     * default proxy header                         : ngx_http_proxy_headers</span></span><br><span class="line"><span class="comment">     * header set by proxy_set_header directive     : headers_source(high priority)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ngx_http_proxy_headers_t</span>       headers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* headers set by proxy_set_header directive, user defines</span></span><br><span class="line"><span class="comment">     * proxy_set_header supports using variable as value like this:</span></span><br><span class="line"><span class="comment">     * proxy_set_header Host       $http_host;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ngx_array_t</span>                   *headers_source; <span class="comment">// ngx_keyval_t array</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * default proxy headers(overwrite such header if client sends it as well)</span></span><br><span class="line"><span class="comment"> * these headers will be sent/removed when sending request to backend</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * like &#123; ngx_string(&quot;TE&quot;), ngx_string(&quot;&quot;)&#125; means remove such header</span></span><br><span class="line"><span class="comment"> * when sending request to backend, even client sends it.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * these can be overwritten by proxy_set_header</span></span><br><span class="line"><span class="comment"> * because we merge these two parts during conf</span></span><br><span class="line"><span class="comment"> * but proxy_set_header has higher priority</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">ngx_keyval_t</span>  ngx_http_proxy_headers[] = &#123;</span><br><span class="line">    &#123; ngx_string(<span class="string">&quot;Host&quot;</span>), ngx_string(<span class="string">&quot;$proxy_host&quot;</span>) &#125;,</span><br><span class="line">    <span class="comment">/* if no set default Connection header is set with Connection: close when send request to upstream */</span></span><br><span class="line">    &#123; ngx_string(<span class="string">&quot;Connection&quot;</span>), ngx_string(<span class="string">&quot;close&quot;</span>) &#125;,</span><br><span class="line">    &#123; ngx_string(<span class="string">&quot;Content-Length&quot;</span>), ngx_string(<span class="string">&quot;$proxy_internal_body_length&quot;</span>) &#125;,</span><br><span class="line">    &#123; ngx_string(<span class="string">&quot;Transfer-Encoding&quot;</span>), ngx_string(<span class="string">&quot;$proxy_internal_chunked&quot;</span>) &#125;,</span><br><span class="line">    &#123; ngx_string(<span class="string">&quot;TE&quot;</span>), ngx_string(<span class="string">&quot;&quot;</span>) &#125;,</span><br><span class="line">    &#123; ngx_string(<span class="string">&quot;Keep-Alive&quot;</span>), ngx_string(<span class="string">&quot;&quot;</span>) &#125;,</span><br><span class="line">    &#123; ngx_string(<span class="string">&quot;Expect&quot;</span>), ngx_string(<span class="string">&quot;&quot;</span>) &#125;,</span><br><span class="line">    &#123; ngx_string(<span class="string">&quot;Upgrade&quot;</span>), ngx_string(<span class="string">&quot;&quot;</span>) &#125;,</span><br><span class="line">    &#123; ngx_null_string, ngx_null_string &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>response header sent to client(hide or ignore some headers)</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// response header sent to client(hide or ignore some headers)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/* ignore header bit for supported ignore header, user can only ignore these headers</span></span><br><span class="line"><span class="comment">     * you can ignore processing these response headers(limit scope) from backend</span></span><br><span class="line"><span class="comment">     * no set var etc</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * ngx_conf_bitmask_t  ngx_http_upstream_ignore_headers_masks[] = &#123;</span></span><br><span class="line"><span class="comment">     *     &#123; ngx_string(&quot;X-Accel-Redirect&quot;), NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT &#125;,</span></span><br><span class="line"><span class="comment">     *     &#123; ngx_string(&quot;X-Accel-Expires&quot;), NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES &#125;,</span></span><br><span class="line"><span class="comment">     *     &#123; ngx_string(&quot;X-Accel-Limit-Rate&quot;), NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE &#125;,</span></span><br><span class="line"><span class="comment">     *     &#123; ngx_string(&quot;X-Accel-Buffering&quot;), NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING &#125;,</span></span><br><span class="line"><span class="comment">     *     &#123; ngx_string(&quot;X-Accel-Charset&quot;), NGX_HTTP_UPSTREAM_IGN_XA_CHARSET &#125;,</span></span><br><span class="line"><span class="comment">     *     &#123; ngx_string(&quot;Expires&quot;), NGX_HTTP_UPSTREAM_IGN_EXPIRES &#125;,</span></span><br><span class="line"><span class="comment">     *     &#123; ngx_string(&quot;Cache-Control&quot;), NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL &#125;,</span></span><br><span class="line"><span class="comment">     *     &#123; ngx_string(&quot;Set-Cookie&quot;), NGX_HTTP_UPSTREAM_IGN_SET_COOKIE &#125;,</span></span><br><span class="line"><span class="comment">     *     &#123; ngx_string(&quot;Vary&quot;), NGX_HTTP_UPSTREAM_IGN_VARY &#125;,</span></span><br><span class="line"><span class="comment">     *     &#123; ngx_null_string, 0 &#125;</span></span><br><span class="line"><span class="comment">     * &#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * by default, no header is ignored</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>                       ignore_headers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* hide_headers for quick searching */</span></span><br><span class="line">    <span class="type">ngx_hash_t</span>                       hide_headers_hash;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* by default nginx will hide some headers when send response to client</span></span><br><span class="line"><span class="comment">     * these headers like Server, you can also add more hide header by proxy_hide_header</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * if you don&#x27;t hide some default headers you can use</span></span><br><span class="line"><span class="comment">     * proxy_pass_header to exclude them from hide_headers</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* both ignore and hiding headers are not processed, so you can&#x27;t get that header value by ngx.header.xx</span></span><br><span class="line"><span class="comment">     * but ignore header has limit group, only support some headers</span></span><br><span class="line"><span class="comment">     * hide header can hide any header, that&#x27;s the difference</span></span><br><span class="line"><span class="comment">     /</span></span><br><span class="line"><span class="comment">    ngx_array_t                     *hide_headers;</span></span><br><span class="line"><span class="comment">    ngx_array_t                     *pass_headers;</span></span><br><span class="line"><span class="comment">&#125; ngx_http_upstream_conf_t;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">static ngx_str_t  ngx_http_proxy_hide_headers[] = &#123;</span></span><br><span class="line"><span class="comment">    /* by default, we did NOT send these to client, but you can use proxy_pass_header to exclude a header</span></span><br><span class="line"><span class="comment">     * let nginx sends it to client</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ngx_string(<span class="string">&quot;Date&quot;</span>), <span class="comment">// exception: Date means NOT use Date header from backend, but use nginx cache time, still send Date to client!!!</span></span><br><span class="line">    ngx_string(<span class="string">&quot;Server&quot;</span>),</span><br><span class="line">    ngx_string(<span class="string">&quot;X-Pad&quot;</span>),</span><br><span class="line">    ngx_string(<span class="string">&quot;X-Accel-Expires&quot;</span>),</span><br><span class="line">    ngx_string(<span class="string">&quot;X-Accel-Redirect&quot;</span>),</span><br><span class="line">    ngx_string(<span class="string">&quot;X-Accel-Limit-Rate&quot;</span>),</span><br><span class="line">    ngx_string(<span class="string">&quot;X-Accel-Buffering&quot;</span>),</span><br><span class="line">    ngx_string(<span class="string">&quot;X-Accel-Charset&quot;</span>),</span><br><span class="line">    ngx_null_string</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">// set by add_header directive(user setting response header)</span></span><br><span class="line">    <span class="type">ngx_array_t</span>               *headers;</span><br><span class="line">&#125; <span class="type">ngx_http_headers_conf_t</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// each request has such instance</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_http_upstream_s</span> &#123;</span></span><br><span class="line">    <span class="comment">/* all parsed headers from backend */</span></span><br><span class="line">    <span class="type">ngx_http_upstream_headers_in_t</span>   headers_in;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_http_request_s</span> &#123;</span></span><br><span class="line">    <span class="type">ngx_http_upstream_t</span>        *upstream;</span><br><span class="line"></span><br><span class="line">    <span class="type">ngx_http_headers_in_t</span>             headers_in; <span class="comment">// request headers from client</span></span><br><span class="line">    <span class="type">ngx_http_headers_out_t</span>            headers_out; <span class="comment">// response header sent to client</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">ngx_list_t</span>                        headers;</span><br><span class="line">    <span class="type">ngx_list_t</span>                        trailers;</span><br><span class="line"></span><br><span class="line">    <span class="type">ngx_uint_t</span>                        status;</span><br><span class="line">    <span class="type">ngx_str_t</span>                         status_line;</span><br><span class="line"></span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *server;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *date;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *content_length;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *content_encoding;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *location;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *refresh;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *last_modified;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *content_range;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *accept_ranges;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *www_authenticate;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *expires;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *etag;</span><br><span class="line"></span><br><span class="line">    <span class="type">ngx_str_t</span>                        *override_charset;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>                            content_type_len;</span><br><span class="line">    <span class="type">ngx_str_t</span>                         content_type;</span><br><span class="line">    <span class="type">ngx_str_t</span>                         charset;</span><br><span class="line">    u_char                           *content_type_lowcase;</span><br><span class="line">    <span class="type">ngx_uint_t</span>                        content_type_hash;</span><br><span class="line"></span><br><span class="line">    <span class="type">ngx_array_t</span>                       cache_control;</span><br><span class="line">    <span class="type">ngx_array_t</span>                       link;</span><br><span class="line"></span><br><span class="line">    <span class="type">off_t</span>                             content_length_n;</span><br><span class="line">    <span class="type">off_t</span>                             content_offset;</span><br><span class="line">    <span class="type">time_t</span>                            date_time;</span><br><span class="line">    <span class="type">time_t</span>                            last_modified_time;</span><br><span class="line">&#125; <span class="type">ngx_http_headers_out_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/* all headers parsed, each is a ngx_table_elt_t</span></span><br><span class="line"><span class="comment">     * below header pointer points to the element in</span></span><br><span class="line"><span class="comment">     * the list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ngx_list_t</span>                        headers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* shortcut for HOST header in headers array</span></span><br><span class="line"><span class="comment">     * the ngx_table_elt_t-&gt;value points to r-&gt;buf</span></span><br><span class="line"><span class="comment">     * NOT copy from r-&gt;buf!!!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *host;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *connection;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *if_modified_since;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *if_unmodified_since;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *if_match;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *if_none_match;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *user_agent;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *referer;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *content_length;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *content_range;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *content_type;</span><br><span class="line"></span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *range;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *if_range;</span><br><span class="line"></span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *transfer_encoding;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *te;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *expect;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *upgrade;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (NGX_HTTP_GZIP || NGX_HTTP_HEADERS)</span></span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *accept_encoding;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *via;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *authorization;</span><br><span class="line"></span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *keep_alive;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (NGX_HTTP_X_FORWARDED_FOR)</span></span><br><span class="line">    <span class="type">ngx_array_t</span>                       x_forwarded_for;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (NGX_HTTP_REALIP)</span></span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *x_real_ip;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (NGX_HTTP_HEADERS)</span></span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *accept;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *accept_language;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (NGX_HTTP_DAV)</span></span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *depth;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *destination;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *overwrite;</span><br><span class="line">    <span class="type">ngx_table_elt_t</span>                  *date;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125; <span class="type">ngx_http_headers_in_t</span>;</span><br></pre></td></tr></table></figure>

<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// build r-&gt;headers_in from request header</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ngx_http_process_request_headers</span><span class="params">(<span class="type">ngx_event_t</span> *rev)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//build header sent to upstream(backend), create a temp buffer to hold all header copied from r-&gt;headers_in</span></span><br><span class="line"><span class="type">static</span> <span class="type">ngx_int_t</span> <span class="title function_">ngx_http_proxy_create_request</span><span class="params">(<span class="type">ngx_http_request_t</span> *r)</span>;</span><br><span class="line"><span class="comment">// build header sent to client(set r-&gt;headers_out) when parsed all response headers</span></span><br><span class="line"><span class="type">static</span> <span class="type">ngx_int_t</span> <span class="title function_">ngx_http_upstream_process_headers</span><span class="params">(<span class="type">ngx_http_request_t</span> *r, <span class="type">ngx_http_upstream_t</span> *u)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// header filter to add/update/remove(manipulate r-&gt;headers_out) response header</span></span><br><span class="line"><span class="type">static</span> <span class="type">ngx_int_t</span> <span class="title function_">ngx_http_headers_filter</span><span class="params">(<span class="type">ngx_http_request_t</span> *r)</span>;</span><br><span class="line"><span class="comment">// last header filter based on r-&gt;headers_out create a temp buffer to hold all header copied from r-&gt;headers_out, then send it out</span></span><br><span class="line"><span class="type">static</span> <span class="type">ngx_int_t</span> <span class="title function_">ngx_http_header_filter</span><span class="params">(<span class="type">ngx_http_request_t</span> *r)</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>linux-tips-daily</title>
    <url>/2019/11/25/linux-tips-daily/</url>
    <content><![CDATA[<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>Here are some tips that are useful in our daily life.</p>
<span id="more"></span>

<h2 id="remove-‘du-du’-sound-when-tap-keyboard"><a href="#remove-‘du-du’-sound-when-tap-keyboard" class="headerlink" title="remove ‘du du’ sound when tap keyboard"></a>remove ‘du du’ sound when tap keyboard</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo rmmod pcspkr</span><br></pre></td></tr></table></figure>

<h2 id="linux-mount-file"><a href="#linux-mount-file" class="headerlink" title="linux mount file"></a>linux mount file</h2><p><strong>mount files from windows</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Centos7</span></span><br><span class="line">$ yum install -y cifs-utils</span><br><span class="line">$ sudo mount -t cifs //serverip/share /media/share -o user,<span class="built_in">sync</span>,user=xxx,password=pxx,uid=1000,gid=1000,file_mode=0600,dir_mode=0700,noperm</span><br><span class="line"></span><br><span class="line"><span class="comment"># error cases</span></span><br><span class="line">    <span class="comment"># case: wrong password (special characters that can not pass through command line)</span></span><br><span class="line">    <span class="comment"># case: wrong source directory(caused by wrong spell or format is not correct)</span></span><br><span class="line">    <span class="comment"># case: access control issue.</span></span><br><span class="line">    <span class="comment"># case: ubuntu iptables</span></span><br><span class="line">    <span class="comment"># case:  proxy(router)firewall</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># case: china character show incorrectly. export LC_ALL=zh_CN.utf8</span></span><br><span class="line">    <span class="comment">#       before you set, make sure to run $ locale -a to see all language supported.</span></span><br></pre></td></tr></table></figure>
<p><strong>mount iso file</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mount -o loop diskiso  /mnt</span><br></pre></td></tr></table></figure>

<h2 id="lsattr-and-chattr"><a href="#lsattr-and-chattr" class="headerlink" title="lsattr and chattr"></a>lsattr and chattr</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a: append only; 系统只允许在这个文件之后追加数据，不允许任何进程覆盖或截断这个文件。如果目录具有这个属性，系统将只允许在这个目录下建立和修改文件，而不允许删除任何文件。</span><br><span class="line">c: compressed; 系统以透明的方式压缩这个文件。从这个文件读取时，返回的是解压之后的数据；而向这个文件中写入数据时，数据首先被压缩之后才写入磁盘。</span><br><span class="line">d: no dump; 在进行文件系统备份时，dump程序将忽略这个文件。</span><br><span class="line">i: immutable; 系统不允许对这个文件进行任何的修改。如果目录具有这个属性，那么任何的进程只能修改目录之下的文件，不允许建立和删除文件。</span><br><span class="line">j: data journalizing; 如果一个文件设置了该属性，那么它所有的数据在写入文件本身之前，写入到ext3文件系统日志中，如果该文件系统挂载的时候使用了”data=ordered” 或”data=writeback”选项。当文件系统采用”data=journal”选项挂载时，所有文件数据已经记录日志，因此这个属性不起作用。仅仅超级用户或者拥有CAP_SYS_RESOURCE能力的进程可以设置和删除该属性。</span><br><span class="line">s: secure deletion; 让系统在删除这个文件时，使用0填充文件所在的区域。</span><br><span class="line">t: no tail-merging; 和其他文件合并时，该文件的末尾不会有部分块碎片(为支持尾部合并的文件系统使用)。</span><br><span class="line">u: undeletable; 当一个应用程序请求删除这个文件，系统会保留其数据块以便以后能够恢复删除这个文件。</span><br><span class="line">A: no atime updates; 告诉系统不要修改对这个文件的最后访问时间</span><br><span class="line">D: synchronous directory updates; 任何改变将同步到磁盘；这等价于mount命令中的dirsync选项：</span><br><span class="line">S: synchronous updates; 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘。</span><br><span class="line">T: top of directory hierarchy; 如果一个目录设置了该属性，它将被视为目录结构的顶极目录</span><br></pre></td></tr></table></figure>

<h2 id="config-nameserver"><a href="#config-nameserver" class="headerlink" title="config nameserver"></a>config nameserver</h2><p>There are two ways to configure it, one shot or permanently</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># one shot</span></span><br><span class="line">edit  /etc/resolv.conf directly</span><br><span class="line"><span class="comment"># Note: this file is dynamically created, if networking service restart or host reboots, its content will be overwritten</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># you can also change the file &#x27;attr&#x27; make it readonly to prevent rewriting</span></span><br><span class="line">$ chattr +i /etc/resolve.conf</span><br><span class="line">$ lsattr /etc/resolve.conf</span><br></pre></td></tr></table></figure>

<h2 id="config-static-address"><a href="#config-static-address" class="headerlink" title="config static address"></a>config static address</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Centos7</span></span><br><span class="line"><span class="comment"># edit /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line">HWADDR=52:54:00:12:34:56</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">IPADDR=172.17.0.2</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=172.17.0.1</span><br><span class="line">DNS1=172.17.0.1</span><br><span class="line">DNS2=8.8.8.8</span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6INIT=no</span><br><span class="line">NAME=eth0</span><br><span class="line">DEVICE=eth0</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">UUID=fd2fe799-fd63-4de9-b8db-773eecf9f8e0</span><br></pre></td></tr></table></figure>

<h2 id="grep-x2F-egrep-x2F-rgrep-x2F-zgrep-options"><a href="#grep-x2F-egrep-x2F-rgrep-x2F-zgrep-options" class="headerlink" title="grep&#x2F;egrep&#x2F;rgrep&#x2F;zgrep options"></a>grep&#x2F;egrep&#x2F;rgrep&#x2F;zgrep options</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># egrep: support basic regular pattern and extended pattern like + etc</span></span><br><span class="line"><span class="comment"># grep : grep -E to use extended pattern and grep -v to search recursively</span></span><br><span class="line"><span class="comment"># rgrep: recursively search</span></span><br><span class="line"><span class="comment"># zgrep: like grep but support search .gz without extract content</span></span><br><span class="line"></span><br><span class="line">-a             treat binary as text</span><br><span class="line">-C | A | B num show NUM lines before/after/center the matching line</span><br><span class="line">-n             show line number</span><br><span class="line">-l             list file name that contains the content</span><br><span class="line">-H             list file name and line number <span class="keyword">for</span> matching</span><br><span class="line">-v             list lines tht NOT matches</span><br><span class="line">-r             recursively search subdir as well without follow symbolic links</span><br><span class="line">-R             recursively search subdir as well with following symbolic links</span><br><span class="line">-o             Print only the matched (non-empty) parts of a matching line, with each such part on a separate output line, <span class="built_in">print</span> matched part not the whole line!</span><br><span class="line"></span><br><span class="line">-E             extended pattern</span><br><span class="line"></span><br><span class="line"><span class="comment"># better to add alias to your bashrc</span></span><br><span class="line"><span class="comment"># alias grep=&#x27;grep -anH&#x27;</span></span><br><span class="line"></span><br><span class="line">$ grep -anH -C <span class="string">&quot;home&quot;</span> text.txt</span><br><span class="line">$ grep -anH -C <span class="string">&quot;home&quot;</span> *.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># use pattern, must quote &#x27;ho+&#x27; to prevent the shell from erroneously replacing that</span></span><br><span class="line"><span class="comment"># pattern with a list of filenames that match the pattern</span></span><br><span class="line">$ grep -anHE -C <span class="string">&quot;ho*&quot;</span> *.txt</span><br><span class="line"></span><br><span class="line">$ grep <span class="string">&quot;home&quot;</span> *.txt <span class="comment"># only *.txt file at current level</span></span><br><span class="line">$ grep -r <span class="string">&quot;home&quot;</span> *.txt <span class="comment"># all .txt files and subdir</span></span><br><span class="line">$ grep -v <span class="string">&quot;Home&quot;</span> text.txt <span class="comment"># list unmatched lines!!!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># grep chinese character</span></span><br><span class="line">$ grep -P <span class="string">&#x27;[\p&#123;Han&#125;]&#x27;</span> *.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># show lines with ipv4 address</span></span><br><span class="line">$ grep -E <span class="string">&#x27;[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;&#x27;</span> ip.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># show matched ipv4 address only</span></span><br><span class="line">$ grep -o -E <span class="string">&#x27;[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;&#x27;</span> ip.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># grep for multiple patterns</span></span><br><span class="line">$ grep -E <span class="string">&#x27;pattern1|pattern2&#x27;</span> *.py</span><br><span class="line">$ egrep <span class="string">&#x27;pattern1|pattern2&#x27;</span> *.py</span><br></pre></td></tr></table></figure>

<h2 id="show-current-runlevel"><a href="#show-current-runlevel" class="headerlink" title="show current runlevel"></a>show current runlevel</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show current runlevel</span></span><br><span class="line">$ runlevel</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h2 id="manage-service"><a href="#manage-service" class="headerlink" title="manage service"></a>manage service</h2><p><strong>service management</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lists the state of services controlled by System V and upstart</span></span><br><span class="line">$ service --status-all</span><br><span class="line">output format:</span><br><span class="line">+   running</span><br><span class="line">-   stopped</span><br><span class="line">?   unknown(managed by upstart)</span><br></pre></td></tr></table></figure>

<h3 id="write-a-system-V-service"><a href="#write-a-system-V-service" class="headerlink" title="write a system V service"></a>write a system V service</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/dhcp</span><br><span class="line">----service name ==dhcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># run it at init by create symbol link to it on each runlevel</span></span><br><span class="line"><span class="comment"># like /etc/rc3.d/S20dhcp (will boot dhcp when starts on runlevel 3)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># dhcp file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="comment"># dhcp</span></span><br><span class="line"><span class="comment">#   Start/Stop dhcp</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"><span class="comment"># Provides:          dhcp</span></span><br><span class="line"><span class="comment"># Required-Start:    $network $local_fs</span></span><br><span class="line"><span class="comment"># Required-Stop:     $network $local_fs</span></span><br><span class="line"><span class="comment"># Default-Start:     2 3 4 5</span></span><br><span class="line"><span class="comment"># Default-Stop:      0 1 6</span></span><br><span class="line"><span class="comment"># Short-Description: dhcp Server</span></span><br><span class="line"><span class="comment">### END INIT INFO</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># main</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">  stop)</span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">  status)</span><br><span class="line">        <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="subst">$(pidof -xs <span class="string">&quot;<span class="variable">$&#123;PROG&#125;</span>&quot;</span>)</span>&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;PROG_TAG&#125;</span> is running&quot;</span></span><br><span class="line">            <span class="built_in">exit</span> 0</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;PROG_TAG&#125;</span> is not running&quot;</span></span><br><span class="line">            <span class="comment"># Returning 3 like everyone else.</span></span><br><span class="line">            <span class="built_in">exit</span> 3</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        ;;</span><br><span class="line">  restart)</span><br><span class="line">        stop</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">  clear)</span><br><span class="line">        stop</span><br><span class="line">        clear</span><br><span class="line">        ;;</span><br><span class="line">  *)</span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">&quot;Usage: <span class="variable">$0</span> &#123;start|stop|restart|status&#125;&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 3</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<h3 id="write-a-upstart-service-ubuntu18"><a href="#write-a-upstart-service-ubuntu18" class="headerlink" title="write a upstart service(ubuntu18)"></a>write a upstart service(ubuntu18)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/etc/init/dhcp.conf</span><br><span class="line">---service name==dhcp</span><br><span class="line"><span class="comment"># !!!plain txt, but with upstart format!!!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dhcp.conf file</span></span><br><span class="line"><span class="comment"># UpStart service config</span></span><br><span class="line"><span class="comment"># details in http://upstart.ubuntu.com/cookbook/</span></span><br><span class="line">description <span class="string">&quot;dhcp server&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Runlevel</span></span><br><span class="line">start on runlevel [345]</span><br><span class="line">stop on runlevel [!345]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Umask</span></span><br><span class="line"><span class="built_in">umask</span> 0007</span><br><span class="line"></span><br><span class="line"><span class="comment"># Core limit</span></span><br><span class="line"><span class="built_in">limit</span> core unlimited unlimited</span><br><span class="line"></span><br><span class="line"><span class="comment"># Expect the process executed to call fork</span></span><br><span class="line"><span class="comment"># fork: exactly once.</span></span><br><span class="line"><span class="comment"># daemon: exactly twice.</span></span><br><span class="line">expect fork</span><br><span class="line"></span><br><span class="line"><span class="comment"># Respawn the job up to 3 times within a 5 second period.</span></span><br><span class="line"><span class="comment"># If the job exceeds these values, it will be stopped and</span></span><br><span class="line"><span class="comment"># marked as failed.</span></span><br><span class="line">respawn</span><br><span class="line">respawn <span class="built_in">limit</span> 3 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redirect console to /var/log/upstart/*.log</span></span><br><span class="line">console <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hooks</span></span><br><span class="line">pre-start script</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;# Starting at <span class="subst">$(date -u +&#x27;%Y-%m-%dT%H:%M:%S.%NZ&#x27;)</span>&quot;</span></span><br><span class="line">    <span class="comment"># Create run time file directory</span></span><br><span class="line">    <span class="built_in">mkdir</span> -m 0755 -p /var/run/dhcp</span><br><span class="line">end script</span><br><span class="line"></span><br><span class="line">post-start script</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;# Started at <span class="subst">$(date -u +&#x27;%Y-%m-%dT%H:%M:%S.%NZ&#x27;)</span>&quot;</span></span><br><span class="line">end script</span><br><span class="line"></span><br><span class="line">pre-stop script</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;# Pre-Stopping at <span class="subst">$(date -u +&#x27;%Y-%m-%dT%H:%M:%S.%NZ&#x27;)</span>&quot;</span></span><br><span class="line">end script</span><br><span class="line"></span><br><span class="line">post-stop script</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;# Stopped at <span class="subst">$(date -u +&#x27;%Y-%m-%dT%H:%M:%S.%NZ&#x27;)</span>&quot;</span></span><br><span class="line">end script</span><br><span class="line"></span><br><span class="line"><span class="comment"># Start the process</span></span><br><span class="line"><span class="built_in">exec</span> start-stop-daemon --start --oknodo --chuid dhcp --group dhcp --<span class="built_in">umask</span> 0007 --<span class="built_in">exec</span> /opt/bin/dhcp-s -f /config/dhcp.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># comment the above line, then run it from shell, run it in foreground!!!</span></span><br><span class="line">$/opt/bin/dhcp-s -f /config/dhcp.cfg</span><br></pre></td></tr></table></figure>

<h3 id="write-systemd-service"><a href="#write-systemd-service" class="headerlink" title="write systemd service"></a>write systemd service</h3><p>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system is the path for service from rpm, pkg etc, so it’s common, if you want to add proxy due to your company, you should put specific conf for that service at &#x2F;etc&#x2F;systemd&#x2F;system.</p>
<ul>
<li>systemd service from pkg: &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system</li>
<li>systemd service conf and local service not from pkg: &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;</li>
</ul>
<p><strong>keywords</strong></p>
<ul>
<li>After&#x3D;: only checks if the unit is activated already, and does not explicitly activate the specified units.</li>
<li>Requires&#x3D;: The units listed in Requires are activated together with the unit. If any of the required units fail to start, the unit is not activated.</li>
<li>Wants&#x3D;: This directive is similar to Requires&#x3D; , but less strict. Systemd will attempt to start any units listed here when this unit is activated. If these units are not found or fail to start, the current unit will continue to function. This is the recommended way to configure most dependency relationships.</li>
</ul>
<p><strong>service daemon mode or not</strong><br>As systemd must get the exit code to determine if the service starts or not, hence if service can NOT run in daemon mode, it must runs in background!!!, otherwise systemd can NOT know if it starts or not and always restart it again and again.</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Test</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line"># runs in background</span><br><span class="line">ExecStart=web.py &amp;</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=default.target</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Test</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line"># run in daemon mode</span><br><span class="line">ExecStart=app.py -S</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=default.target</span><br></pre></td></tr></table></figure>
<p><a href="https://www.freedesktop.org/software/systemd/man/systemd.service.html">systemd parameters detail</a></p>
<p><em>simple systemd service named: onedrive.service</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=OneDrive Free Client</span><br><span class="line">Documentation=https://github.com/abraunegg/onedrive</span><br><span class="line"># After multiple service</span><br><span class="line"># </span><br><span class="line">After=network-online.target abc.service</span><br><span class="line">Requires=xyz.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Environment=BAR=default_bar_value</span><br><span class="line">EnvironmentFile=/etc/conf.d/fooservice</span><br><span class="line">Environment=&quot;HTTPS_PROXY=http://ip.address:port&quot;</span><br><span class="line">ExecStart=/usr/local/bin/onedrive --monitor</span><br><span class="line"># restart on failure</span><br><span class="line">Restart=on-failure</span><br><span class="line"># sleep time before restart</span><br><span class="line"># RestartSec=3</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=default.target</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show all active systemd service</span></span><br><span class="line">$ systemctl --<span class="built_in">type</span>=service</span><br><span class="line"></span><br><span class="line"><span class="comment"># show all active/inactive systemd service</span></span><br><span class="line">$ systemctl --<span class="built_in">type</span>=service --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reload the service files to include the new service.</span></span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start your service</span></span><br><span class="line">$ systemctl start your-service.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># To check the status of your service</span></span><br><span class="line">$ systemctl status example.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># To enable your service on every reboot</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> example.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># To disable your service on every reboot</span></span><br><span class="line">$ systemctl <span class="built_in">disable</span> example.service</span><br></pre></td></tr></table></figure>

<p><strong>Set ENV for systemd service by two ways, inline or from file</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=FOO=default_foo_value</span><br><span class="line">Environment=BAR=default_bar_value</span><br><span class="line">EnvironmentFile=/etc/conf.d/fooservice</span><br><span class="line">ExecStart=/usr/bin/fooservice</span><br></pre></td></tr></table></figure>
<p>later on to check the env of a given process by <code>/proc/19571/environ</code></p>
<p><strong>systemd restart</strong><br>systemd services have <code>start rate limiting enabled by default</code>. If service is started more than <code>StartLimitBurst</code> times in <code>StartLimitIntervalSec</code> seconds is it <code>not permitted to start any more</code>. This parameters are inherited from <code>DefaultStartLimitIntervalSec(default 10s)</code> and <code>DefaultStartLimitBurst(default 5)</code> in <code>/etc/systemd/system.conf</code>, but you can disable <code>start rate</code> like this.</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Restart=always</span><br><span class="line"># time to sleep before restarting a service</span><br><span class="line">RestartSec=1</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line"># StartLimitIntervalSec in recent systemd versions</span><br><span class="line">StartLimitInterval=0</span><br><span class="line"># StartLimitIntervalSec=0</span><br></pre></td></tr></table></figure>
<p><strong>systemd service parameter</strong><br>In some case, service file can use varaible that’s defined outside, like this<br><code>/usr/lib/systemd/system/crond.service</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Command Scheduler</span><br><span class="line">After=auditd.service systemd-user-sessions.service time-sync.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/etc/sysconfig/crond</span><br><span class="line">ExecStart=/usr/sbin/crond -n $CRONDARGS</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=30s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>like <code>$CRONDARGS</code> and <code>$MAINPID</code> where are they defined, actually, they defined at<br><code>/etc/sysconfig/crond</code> must has the same name(crond) without service as suffix, systemd daemon will read this file and pass variable to service.</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Settings for the CRON daemon.</span><br><span class="line"># CRONDARGS= :  any extra command-line startup arguments for crond</span><br><span class="line">CRONDARGS=</span><br></pre></td></tr></table></figure>

<h4 id="debug-systemd-service"><a href="#debug-systemd-service" class="headerlink" title="debug systemd service"></a>debug systemd service</h4><p><strong>check stdout stderr log for systemd service</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo journalctl --no-pager -b -u docker.service</span><br></pre></td></tr></table></figure>

<p><strong>change systemd log level to debug</strong><br>&#x2F;etc&#x2F;systemd&#x2F;system.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Manager]</span><br><span class="line">LogLevel=debug</span><br></pre></td></tr></table></figure>

<p><strong>check boot order of all systemd services</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemd-analyze plot &gt; something.svg</span><br></pre></td></tr></table></figure>

<h2 id="auto-mount"><a href="#auto-mount" class="headerlink" title="auto mount"></a>auto mount</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Centos7</span></span><br><span class="line">$ sudo yum install -y autofs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># edit  /etc/auto.master, make sure, create /nfs</span></span><br><span class="line">/nfs  /etc/auto.nfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># create /etc/auto.nfs with below content for linux server</span></span><br><span class="line">shared -fstype=nfs4,rw   serverIP:/home/shared</span><br><span class="line"><span class="comment">#no password, default root user</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for windows server</span></span><br><span class="line">shared -fstype=cifs,rw,uid=jason,gid=jason,username=xxx,password=xxx ://<span class="variable">$server</span>/shared</span><br><span class="line"></span><br><span class="line"><span class="comment"># mounted by jason:jason with user/password</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># restart the service</span></span><br><span class="line">$ sudo service autofs restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug autofs</span></span><br><span class="line">$ service autofs stop</span><br><span class="line">$ automount -d -f -v</span><br></pre></td></tr></table></figure>

<h2 id="configure-samba-server"><a href="#configure-samba-server" class="headerlink" title="configure samba server"></a>configure samba server</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Linux export dir(run samba server), then Windows connects it with samba client.</span><br><span class="line"></span><br><span class="line">Centos7</span><br><span class="line">$ yum install samba samba-client</span><br><span class="line">$ systemctl start smb.service</span><br><span class="line">$ systemctl start nmb.service</span><br><span class="line">$ systemctl enable smb.service</span><br><span class="line">$ systemctl enable nmb.service</span><br><span class="line"></span><br><span class="line">add samba user</span><br><span class="line">$ sudo smbpasswd -a user1 (user1 must be a system user as well!!!)</span><br><span class="line">edit /etc/samba/smb.conf with below content</span><br><span class="line"></span><br><span class="line"># A publicly accessible directory, but read only, except for people in</span><br><span class="line"># the &quot;staff&quot; group</span><br><span class="line">[global]</span><br><span class="line">log level = 5</span><br><span class="line"></span><br><span class="line">[share]</span><br><span class="line">comment = public share</span><br><span class="line">path = /home/share</span><br><span class="line">public = yes</span><br><span class="line">writable = no</span><br><span class="line">printable = no</span><br><span class="line">valid users = user1 user2</span><br><span class="line"></span><br><span class="line">sudo service smb restart</span><br><span class="line"></span><br><span class="line"># check exported dir by samba server</span><br><span class="line">smbclient -L 192.168.56.101</span><br><span class="line"></span><br><span class="line">Enter SAMBA\root&#x27;s password: </span><br><span class="line"></span><br><span class="line">        Sharename       Type      Comment</span><br><span class="line">        ---------       ----      -------</span><br><span class="line">        onedrive        Disk      one drive</span><br><span class="line">        IPC$            IPC       IPC Service (Samba 4.10.16)</span><br><span class="line">Reconnecting with SMB1 for workgroup listing.</span><br><span class="line"></span><br><span class="line">        Server               Comment</span><br><span class="line">        ---------            -------</span><br><span class="line"></span><br><span class="line">        Workgroup            Master</span><br><span class="line">        ---------            -------</span><br><span class="line">        SAMBA                DEV</span><br><span class="line"></span><br><span class="line"># dump the samba config</span><br><span class="line">testparm  -v</span><br><span class="line"></span><br><span class="line"># run in forground with level 3</span><br><span class="line">smbd -i -d3</span><br><span class="line"></span><br><span class="line"># check samba log:   /var/log/samba</span><br><span class="line"># check db cache at: /var/lib/samba/</span><br></pre></td></tr></table></figure>
<h2 id="share-file-between-linux-and-linux"><a href="#share-file-between-linux-and-linux" class="headerlink" title="share file between linux and linux"></a>share file between linux and linux</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">through mount command,you can mount remote directory(linux) to the local machine over network. make sure the kernel supports nfs(server) before you use &#x27;mount&#x27; command. by default Ubuntu disables nfs.</span><br><span class="line"></span><br><span class="line">On server side</span><br><span class="line"></span><br><span class="line">steps 1: install nfs if it is not installed</span><br><span class="line">         Ubuntu18</span><br><span class="line">         $sudo apt-get install nfs-kernel-server</span><br><span class="line">         Centos7</span><br><span class="line">         $yum install -y nfs-utils</span><br><span class="line"></span><br><span class="line">steps 2: server exports a directory, edit /etc/exports file with something like this:</span><br><span class="line">        /home/share/  192.168.1.20(rw,insecure,sync,all_squash)</span><br><span class="line">        /home/share/  192.168.1.20(rw,insecure,sync,all_squash,anonuid=100,anongid=101)</span><br><span class="line">        /home/share/  192.168.1.20(rw,insecure,sync,no_root_squash)</span><br><span class="line">        /home/share/  192.168.1.20(rw,insecure,sync,no_root_squash,anonuid=100,anongid=101)</span><br><span class="line">        (override the attributes for clinet&lt;--&gt;192.168.1.20 )</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">   nfsd bases its access control to files on the server machine on the uid and gid provided in each NFS RPC request. The normal behavior a user would expect is that she can access her files on the server just as she would on a</span><br><span class="line">   normal file system. This requires that the same uids and gids are used on the client and the server machine. This is not always true, nor is it always desirable.</span><br><span class="line"></span><br><span class="line">   Very often, it is not desirable that the root user on a client machine is also treated as root when accessing files on the NFS server. To this end, uid 0 is normally mapped to a different  id:  the  so-called  anonymous  or</span><br><span class="line">   nobody uid. This mode of operation (called `root squashing&#x27;) is the default, and can be turned off with no_root_squash.</span><br><span class="line"></span><br><span class="line">   By default, exportfs chooses a uid and gid of 65534 for squashed access. These values can also be overridden by the anonuid and anongid options.  Finally, you can map all user requests to the anonymous uid by specifying the</span><br><span class="line">   all_squash option.</span><br><span class="line"></span><br><span class="line">   Here&#x27;s the complete list of mapping options:</span><br><span class="line"></span><br><span class="line">   root_squash</span><br><span class="line">          Map requests from uid/gid 0 to the anonymous uid/gid. Note that this does not apply to any other uids or gids that might be equally sensitive, such as user bin or group staff.</span><br><span class="line"></span><br><span class="line">   no_root_squash</span><br><span class="line">          Turn off root squashing. This option is mainly useful for diskless clients.</span><br><span class="line"></span><br><span class="line">   all_squash</span><br><span class="line">          Map all uids and gids to the anonymous user. Useful for NFS-exported public FTP directories, news spool directories, etc. The opposite option is no_all_squash, which is the default setting.</span><br><span class="line"></span><br><span class="line">   anonuid and anongid</span><br><span class="line">          These options explicitly set the uid and gid of the anonymous account.  This option is primarily useful for PC/NFS clients, where you might want all requests appear to be from one user. As an  example,  consider  the</span><br><span class="line">          export entry for /home/joe in the example section below, which maps all requests to uid 150 (which is supposedly that of user joe).</span><br><span class="line"></span><br><span class="line">steps 3: export  the list</span><br><span class="line">         #sudo exportfs -a</span><br><span class="line"></span><br><span class="line">steps 4: restart service</span><br><span class="line">         Ubuntu18</span><br><span class="line">         #sudo /etc/init.d/portmap restart</span><br><span class="line">         #sudo /etc/init.d/nfs-kernel-server restart</span><br><span class="line"></span><br><span class="line">         Centos7</span><br><span class="line">         $ systemctl start nfs-server</span><br><span class="line">         $ systemctl enable nfs-server</span><br><span class="line"></span><br><span class="line">On client side</span><br><span class="line">check the export list</span><br><span class="line">         #showmount -e $server_ip</span><br><span class="line"></span><br><span class="line">steps 5: client mounts the dieretory</span><br><span class="line">         #sudo mount -t nfs serverip:/home/share /media/share</span><br><span class="line"></span><br><span class="line">(don&#x27;t support user and password, create a user belongs to other group,so the permission of this user is determined</span><br><span class="line">by the configuration of /etc/exports )</span><br><span class="line"></span><br><span class="line"> 首先mount后查看mount后的用户和组,然后登陆到export机器上查看该文件对该用户的权限,并作相应的更改</span><br><span class="line"> 保证mount后的文件具有写权限</span><br><span class="line"> </span><br><span class="line"> 1.export中允许挂载后可以写【必须】</span><br><span class="line"> 2.该文件对other 用户本身具有写权限【必须】</span><br><span class="line"> 3.设置挂载点的权限，保证执行挂载的用户可以对该目录具有执行权限.</span><br><span class="line"> 4.在mount 命令中加入 -o rw 参数【如果需要】</span><br><span class="line"></span><br><span class="line"> Permission denied when write on nfs dir, even export with RW</span><br><span class="line"> 1. check the mount user at client, if it&#x27;s root, make sure export with no_root_squash set.</span><br><span class="line"> 2. check /etc/exports to see RW is set.</span><br><span class="line"> </span><br><span class="line"> if you have anything wrong, please restart the service</span><br><span class="line"></span><br><span class="line">B: show what nfs server exports to client!!!</span><br><span class="line">    #showmount -e remote_nfs_server</span><br><span class="line">    #showmount -e</span><br><span class="line">    show what my self exported by nfs</span><br><span class="line"></span><br><span class="line">C: FAQ</span><br><span class="line">   &quot;mount.nfs: access denied by server while mounting&quot;</span><br><span class="line">   1 illegal port (client uses port larger than 1024)</span><br><span class="line">   cat /var/log/messages | grep mount</span><br><span class="line">   Jan 2 12:49:04 localhost mountd[1644]: refused mount request from 192.168.0.100 for /home/nfsshare/ (/home/nfsshare): illegal port 1689</span><br><span class="line"></span><br><span class="line">   FIX: add &#x27;insecure&#x27; at server and restart nfs server</span><br><span class="line"></span><br><span class="line">   2 client and server use different nfs version</span><br><span class="line">   Try use other version to connect with server  -o &quot;vers=3&quot;</span><br><span class="line"></span><br><span class="line">   mount -v -o &quot;vers=3&quot; -t nfs 10.117.7.201:/root/jason /media</span><br><span class="line"></span><br><span class="line">   3 client must have the right to local mount point like /media</span><br></pre></td></tr></table></figure>

<h2 id="run-your-task-daily-weekly-etc"><a href="#run-your-task-daily-weekly-etc" class="headerlink" title="run your task daily, weekly etc"></a>run your task daily, weekly etc</h2><p>use cron daemon to execute schedule job, there are two ways you can choose to run your task<br>one is user predefined period like daily, weakly, minutes etc, the other is defined own schedule whenever you want.</p>
<p><a href="https://crontab.guru/">cron online tester</a></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">crontab filename [-u user]    用指定的文件替代(用户)目前的crontab。</span><br><span class="line">crontab -1[-u user]        列出(用户)目前的crontab.</span><br><span class="line">crontab -e[-u user]        编辑(用户)目前的crontab.</span><br><span class="line">crontab-ri[-u user]        删除(用户)目前的crontab.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">文件格式基本格式 :</span><br><span class="line">*　　*　　*　　*　　*　[username] command</span><br><span class="line">分　 时　 日　 月　 周　 命令</span><br><span class="line"></span><br><span class="line"># ┌───────────── minute (0 - 59)</span><br><span class="line"># │ ┌───────────── hour (0 - 23)</span><br><span class="line"># │ │ ┌───────────── day of the month (1 - 31)</span><br><span class="line"># │ │ │ ┌───────────── month (1 - 12)</span><br><span class="line"># │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday;</span><br><span class="line"># │ │ │ │ │                                   7 is also Sunday on some systems)</span><br><span class="line"># │ │ │ │ │</span><br><span class="line"># │ │ │ │ │</span><br><span class="line"># * * * * *</span><br><span class="line"></span><br><span class="line">*	any value</span><br><span class="line">,	value list separator</span><br><span class="line">-	range of values</span><br><span class="line">/	step values</span><br><span class="line"></span><br><span class="line">第1列表示分钟1～59 每分钟用*或者 */1表示</span><br><span class="line">第2列表示小时1～23（0表示0点）</span><br><span class="line">第3列表示日期1～31</span><br><span class="line">第4列表示月份1～12</span><br><span class="line">第5列标识号星期0～6（0表示星期天）</span><br><span class="line">第6列要运行的命令</span><br><span class="line"></span><br><span class="line">crontab文件的一些例子：</span><br><span class="line">/*脚本的地址必须是绝对地址*/</span><br><span class="line">30 21 * * * /usr/local/etc/rc.d/lighttpd restart   &gt;&gt; /var/log/root_crontab.log 2&gt;&amp;1</span><br><span class="line">上面的例子表示每晚的21:30重启apache。</span><br><span class="line"></span><br><span class="line">45 4 3,8,13,18,23,28 * * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">上面的例子表示每月1、10、22日的4 : 45重启apache。</span><br><span class="line"></span><br><span class="line">10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">上面的例子表示每周六、周日的1 : 10重启apache。</span><br><span class="line"></span><br><span class="line">0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">上面的例子表示在每天18 : 00至23 : 00之间每隔30分钟重启apache。</span><br><span class="line"></span><br><span class="line">0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">上面的例子表示每星期六的11 : 00 pm重启apache。</span><br><span class="line"></span><br><span class="line">* */1 * * * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">每一小时重启apache</span><br><span class="line"></span><br><span class="line">* 23-7/1 * * * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">晚上11点到早上7点之间，每隔一小时重启apache</span><br><span class="line"></span><br><span class="line">0 11 4 * mon-wed /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">每月的4号与每周一到周三的11点重启apache</span><br><span class="line"></span><br><span class="line">0 4 1 jan * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">一月一号的4点重启apache</span><br><span class="line">Note:路径必须是绝对路径！！</span><br><span class="line"></span><br><span class="line">Another way is use cron daemon cron is a daemon, which execute jobs under /etc hourly/weekly/monthly etc</span><br><span class="line"></span><br><span class="line"># ps -ef | grep cron (run as root)</span><br><span class="line"></span><br><span class="line">#ls /etc/cron*</span><br><span class="line">cron.d/       cron.daily/   cron.hourly/  cron.monthly/ crontab       cron.weekly/</span><br><span class="line"></span><br><span class="line">write cron file under one of them, restart cron service to reload it</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">1. file under cron.d/ and crontab must use the above format and [username] is a must</span><br><span class="line">2. file under cron.xx just write with command, no time as xx means the time</span><br><span class="line"></span><br><span class="line">#service cron restart</span><br><span class="line"></span><br><span class="line">debug cron</span><br><span class="line">1  1.1 username is needed for jobs in cron.d and /etc/crontab are system jobs.</span><br><span class="line">   1.2 script in /etc/cron.d/ is owned by root:root</span><br><span class="line">   1.3 when username is used, should load user env from profile and set PATH for python, otherwise, cron has nothing with env(like $PATH set by profile not seen by cron)</span><br><span class="line">       30 21 * * *  user1 $HOME/.profile; /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line"></span><br><span class="line">2. redirect console log, it&#x27;s usually for error!!!</span><br><span class="line">   30 21 * * * /usr/local/etc/rc.d/lighttpd restart   &gt;&gt; /var/log/root_crontab.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">2. check log                 $grep CRON /var/log/syslog</span><br><span class="line">3. make suer cron is running $ps -ef | grep cron</span><br><span class="line">4. Check that the filename should NOT have an extension!!!</span><br><span class="line">5. Ensure the file has execute permissions</span><br><span class="line">6. Tell the system what to use when executing your script (eg. put #!/bin/sh at top)</span><br><span class="line">7. PATH is restricted to /bin:/usr/bin, if cmd not there, use absolute path</span><br></pre></td></tr></table></figure>

<h2 id="configure-your-own-dns-server-by-bind-application"><a href="#configure-your-own-dns-server-by-bind-application" class="headerlink" title="configure your own dns server by bind application"></a>configure your own dns server by bind application</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 steps of configuring bind9</span><br><span class="line">    1.1 edit /etc/bind/name.conf.local with the content below</span><br><span class="line">                zone <span class="string">&quot;example.com&quot;</span> &#123;</span><br><span class="line">                        <span class="built_in">type</span> master;</span><br><span class="line">                        file <span class="string">&quot;/var/cache/bind/db.example.com&quot;</span>;</span><br><span class="line">                        allow-update &#123;any;&#125;;</span><br><span class="line">                        allow-transfer &#123;any;&#125;;</span><br><span class="line">                        allow-query &#123;any;&#125;;</span><br><span class="line"></span><br><span class="line">                &#125;;</span><br><span class="line">                zone <span class="string">&quot;0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.ip6.arpa&quot;</span> &#123;</span><br><span class="line">                        <span class="built_in">type</span> master;</span><br><span class="line">                        file <span class="string">&quot;/var/cache/bind/db.rev.2000&quot;</span>;</span><br><span class="line">                        allow-update &#123;any;&#125;;</span><br><span class="line">                        allow-transfer &#123;any;&#125;;</span><br><span class="line">                        allow-query &#123;any;&#125;;</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">    1.2 <span class="comment">#sudo mkdir /var/cache/bind</span></span><br><span class="line">        <span class="comment">#sudo chown bind:bind /var/cache/bind</span></span><br><span class="line">        <span class="comment">#edit /var/cache/bind/db.example.com with content below</span></span><br><span class="line">            <span class="variable">$ORIGIN</span> .</span><br><span class="line">            <span class="variable">$TTL</span> 604800     ; 1 week</span><br><span class="line">            example.com             IN SOA  ns1.example.com. root.example.com. (</span><br><span class="line">                                            2006020222 ; serial</span><br><span class="line">                                            604800     ; refresh (1 week)</span><br><span class="line">                                            86400      ; retry (1 day)</span><br><span class="line">                                            2419200    ; expire (4 weeks)</span><br><span class="line">                                            604800     ; minimum (1 week)</span><br><span class="line">                                            )</span><br><span class="line">                                    NS      ns1.example.com.</span><br><span class="line">            <span class="variable">$ORIGIN</span> example.com.</span><br><span class="line">            ns1                     AAAA    2000::1</span><br><span class="line"></span><br><span class="line">        <span class="comment">#edit /var/cache/bind/db.rev.2000 with content below</span></span><br><span class="line">            <span class="variable">$ORIGIN</span> .</span><br><span class="line">            <span class="variable">$TTL</span> 10800      ; 3 hours</span><br><span class="line">            0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.ip6.arpa IN SOA ns1.example.com.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.ip6.arpa. root.example.com. (</span><br><span class="line">                                            2002111312 ; serial</span><br><span class="line">                                            28800      ; refresh (8 hours)</span><br><span class="line">                                            14400      ; retry (4 hours)</span><br><span class="line">                                            3600000    ; expire (5 weeks 6 days 16 hours)</span><br><span class="line">                                            86400      ; minimum (1 day)</span><br><span class="line">                                            )</span><br><span class="line">                                    NS      ns1.example.com.</span><br><span class="line">            <span class="variable">$ORIGIN</span> 0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.ip6.arpa.</span><br><span class="line"></span><br><span class="line">2 update AAAA using nsupdate</span><br><span class="line">    <span class="comment">#nsupdate</span></span><br><span class="line">    &gt;server 2000::1(specify the dns server)</span><br><span class="line">    &gt;update add worf.example.com 7200 IN AAAA 2000::58(zone example.com must be configured at dns server)</span><br><span class="line">    &gt;send (send the update)</span><br><span class="line">3 query AAAA record</span><br><span class="line">    <span class="comment">#dig @2000::1(dns server) worf.example.com AAAA</span></span><br></pre></td></tr></table></figure>

<h2 id="put-file-in-memory"><a href="#put-file-in-memory" class="headerlink" title="put file in memory"></a>put file in memory</h2><p>For faster run, you can put files in memory, create a mount point with tmpfs, then put files there, but files are lost when it’s umounted or system boots, actually, you do not need to create this ram disk by yourself, system already creates somes for you, it’s &#x2F;run, &#x2F;dev&#x2F;shm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(base) [root@dev]<span class="comment"># df -h</span></span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs                 3.9G     0  3.9G   0% /dev</span><br><span class="line">tmpfs                    3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs                    3.9G  9.0M  3.9G   1% /run</span><br></pre></td></tr></table></figure>

<h2 id="run-script-at-current-shell-not-subshell"><a href="#run-script-at-current-shell-not-subshell" class="headerlink" title="run script at current shell not subshell"></a>run script at current shell not subshell</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@dev:/tmp<span class="comment"># cat test.sh</span></span><br><span class="line"><span class="comment">#! /usr/bin/env bash</span></span><br><span class="line"><span class="built_in">export</span>  http=1.0</span><br><span class="line"></span><br><span class="line">root@dev:/tmp<span class="comment"># source test.sh</span></span><br><span class="line">root@dev:/tmp<span class="comment"># echo $http</span></span><br><span class="line">1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># likes you type export http=1.0 from the terminal!</span></span><br></pre></td></tr></table></figure>

<h2 id="dos-and-unix-format"><a href="#dos-and-unix-format" class="headerlink" title="dos and unix format"></a>dos and unix format</h2><p>when you work both on windows and unix(linux), move files between them, be careful! as the file content may be changed due to os</p>
<p>linux和windows，Mac的行结束符是不同的，因此有些编辑器会无法正确的显示换行，这是编辑器 没有正确的处理行结束符导致的，但是有些强大的编辑器就能正确的显示不同文件类型， 无论是windows文件 还是unix，mac文件，当遇到编辑器无法正确显示的时候.</p>
<ul>
<li>首先确定文件的类型，在linux下运行file命令</li>
<li>看编辑器是否支持该类型</li>
<li>根据需要通过editplus–&gt;document—&gt;file format选项转化为能正确显示的文件类型。</li>
</ul>
<p>• Window (CR&#x2F;LF)<br>• Unix (LF)<br>• Mac (CR)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dos2unix dos_format_file</span><br></pre></td></tr></table></figure>

<h2 id="中文乱码的原因分析"><a href="#中文乱码的原因分析" class="headerlink" title="中文乱码的原因分析"></a>中文乱码的原因分析</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">因此解决乱码的关键分三步</span><br><span class="line">1.明确文件的编码格式</span><br><span class="line">2.系统支持(安装）了这种编码格式</span><br><span class="line">3.为应用程序设置此编码格式</span><br><span class="line"></span><br><span class="line">乱码的原因就是编码格式的选择不对或者不兼容，使得解析错误！因此解决办法就是选择正确的编码格式，</span><br><span class="line">任何应用程序都是调用系统默认或者本程序设定的编码格式，最终的都是调用系统安装的编码格式,去解析文件,</span><br><span class="line"></span><br><span class="line">中文乱码的解决</span><br><span class="line">1 显示系统支持的所有编码格式</span><br><span class="line">    $ locale -a</span><br><span class="line">    $ sudo apt-get install language-pack-zh-hant language-pack-zh-hans</span><br><span class="line">    (如果没有zh_CN 下载安装)</span><br><span class="line">2 如果不支持中文编码格式，修改</span><br><span class="line">    sudo vi /var/lib/locales/supported.d/local</span><br><span class="line">    加入</span><br><span class="line">    zh_CN.GB18030 GB18030</span><br><span class="line">    zh_CN.GBK GBK</span><br><span class="line">    zh_CN.GB2312 GB2312</span><br><span class="line">    zh_HK.BIG5 BIG5</span><br><span class="line">    zh_TW.BIG5 BIG5</span><br><span class="line">    然后执行</span><br><span class="line">    #sudo locale-gen</span><br><span class="line"></span><br><span class="line">    check all encodings system support:</span><br><span class="line">    $ locale -a</span><br><span class="line">    zh_CN.gb18030</span><br><span class="line">    zh_CN.gb2312</span><br><span class="line">    zh_CN.gbk</span><br><span class="line">    zh_CN.utf8</span><br><span class="line">    zh_HK.big5</span><br><span class="line">    zh_HK.utf8</span><br><span class="line">    zh_SG.utf8</span><br><span class="line">    zh_TW.big5</span><br><span class="line">    zh_TW.utf8</span><br><span class="line"></span><br><span class="line">3 为各种应用设置其编码格式gbk，或者gb2312</span><br><span class="line">    ****step 1 and step 2 are a must for 中文乱码***</span><br><span class="line"></span><br><span class="line">    3.1 但是通过远程终端登录后，打开文件还是显示乱码</span><br><span class="line">    这是由于终端也有其编码格式，因此需要设置终端的编码格式为gbk或者gb2312，或者其他的编码格式，使其与文件内容的编码格式对应起来，具体设置方法参考终端的设置选项。</span><br><span class="line">    以上是常见的中文乱码的情况。</span><br><span class="line"></span><br><span class="line">    3.2 当远程登录后，英文乱码，出现？？等情况，这是由于终端的编码格式和系统的编码格式不兼容导致的</span><br><span class="line">    因此通过locale查看系统的当前编码格式，然后设置终端的编码格式与其兼容就可以解决问题了。</span><br><span class="line"></span><br><span class="line">    3.3 mount(from windows)的中文文件名字显示 ?? 设置mount的iocharset 为utf-8</span><br><span class="line">    set iocharset to utf8 for mount option</span><br><span class="line"></span><br><span class="line">    -fstype=cifs,rw,iocharset=utf8,uid=ubuntu,gid=ubuntu,</span><br></pre></td></tr></table></figure>

<h2 id="vncserver"><a href="#vncserver" class="headerlink" title="vncserver"></a>vncserver</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">设置vncserver的分辨率，一种是修改配置文件，一种是启动vncserver的时候 通过参数传递，现在第二种方式更灵活，因此这里只介绍第二种方法：</span><br><span class="line"></span><br><span class="line">#vncserver -geometry 1680x1050 -alwaysshared :1</span><br><span class="line"></span><br><span class="line">这个命令包含了3个参数，第一个参数geometry表示分辨率，你可以指定适合自己桌面的分辨率；</span><br><span class="line">第二个参数alwaysshared表示运行多个人同时连接到同一个桌面；</span><br><span class="line">第三个参数:1表示开启一个1号远程桌面(如果该编号已经被占用，请选择其他的标号）</span><br><span class="line">此时你可以使用ip:1来连接这个远程桌面。(注意：上面1280与800之间的连接符为英文字母x(xyz的x)，而不是中英文的乘号!)</span><br><span class="line"></span><br><span class="line">关闭一个远程桌面，可以使用如下命令：</span><br><span class="line">$ vncserver -kill :1 其中，&quot;:1&quot;表示的创建远程桌面时的桌面号</span><br></pre></td></tr></table></figure>
<h2 id="ssh-related"><a href="#ssh-related" class="headerlink" title="ssh related"></a>ssh related</h2><p><strong>install sshd</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Centos7</span><br><span class="line">$ yum install -y openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh client timeout after sometime</span></span><br><span class="line"><span class="comment"># edit sshd config and restart sshd service</span></span><br><span class="line"><span class="comment"># edit /etc/ssh/sshd_config</span></span><br><span class="line">ClientAliveInterval 60</span><br><span class="line"></span><br><span class="line">$ service sshd restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh terminal timeout due to “timed out waiting for input: auto-logout”</span></span><br><span class="line"><span class="comment"># edit ~/.bashrc</span></span><br><span class="line"><span class="built_in">unset</span> TMOUT</span><br></pre></td></tr></table></figure>


<p><strong>Reset by peer even iptable and firewall is disabled</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep sshd /var/log/syslog</span><br><span class="line">Oct 16 08:59:45 openstack sshd[1214]: error: Could not load host key: /etc/ssh/ssh_host_rsa_key</span><br><span class="line">Oct 16 08:59:45 openstack sshd[1214]: error: Could not load host key: /etc/ssh/ssh_host_dsa_key</span><br><span class="line">Oct 16 08:59:45 openstack sshd[1214]: error: Could not load host key: /etc/ssh/ssh_host_ecdsa_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># fix it(Ubuntu18)</span></span><br><span class="line">$ sudo <span class="built_in">rm</span> -r /etc/ssh/ssh*key</span><br><span class="line">$ sudo dpkg-reconfigure openssh-server</span><br></pre></td></tr></table></figure>

<p><strong>only allow specific user to login</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Edit /etc/ssh/sshd_config</span><br><span class="line">add the statement</span><br><span class="line"></span><br><span class="line">AllowUsers lzq</span><br></pre></td></tr></table></figure>

<p><strong>long delay when login with ssh</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">ssh -o GSSAPIAuthentication=no user@yourserver</span><br><span class="line">update /etc/ssh/sshd_config</span><br><span class="line">UseDNS no</span><br></pre></td></tr></table></figure>

<p><strong>allow root user login with password by ssh</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">open /etc/ssh/ssd_config</span><br><span class="line">Change</span><br><span class="line">    PermitRootLogin prohibit-password</span><br><span class="line">    PasswordAuthentication no</span><br><span class="line">To</span><br><span class="line">    PermitRootLogin yes</span><br><span class="line">    PasswordAuthentication yes</span><br></pre></td></tr></table></figure>

<p><strong>specify user when connect with ssh server</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh root@server</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">$ ssh server -l root</span><br></pre></td></tr></table></figure>

<p><strong>disable openssl popup window when use git</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">unset</span> SSH_ASKPASS</span><br></pre></td></tr></table></figure>

<p><strong>ssh with password on command line</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Centos7</span></span><br><span class="line">$ yum install -y sshpass</span><br><span class="line"></span><br><span class="line">$ sshpass -p your_password ssh user@hostname</span><br></pre></td></tr></table></figure>

<p><strong>launch GUI by ssh</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ssh server side</span><br><span class="line">enable X11 on sshd by edit /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">X11Forwarding yes</span><br><span class="line"></span><br><span class="line">ssh client</span><br><span class="line">While doing ssh use the option -X to enable X11 forwarding.</span><br><span class="line">$ ssh username@hostname -X</span><br><span class="line"></span><br><span class="line">OR</span><br><span class="line"></span><br><span class="line">Enable trusted X11 forwarding, by using the -Y option,</span><br><span class="line">$ ssh username@hostname -Y</span><br></pre></td></tr></table></figure>

<p><strong>run scp&#x2F;ssh&#x2F;sftp used in scripts without password input</strong></p>
<p><code>key point is add the client public key to server&#39;s authorized_keys</code></p>
<p><strong>use ssh-copy-id</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># On client</span></span><br><span class="line">$ ssh-keygen -t rsa  (just enter is a must)</span><br><span class="line">$ ssh-copy-id -f -i /home/lzq/.ssh/xx.pub root@serverip</span><br><span class="line"></span><br><span class="line"><span class="comment"># run command on remote server by ssh</span></span><br><span class="line">$ ssh root@serverip <span class="string">&quot;ls;pwd&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enter particular dir after ssh login</span></span><br><span class="line">$ ssh root@serverip <span class="string">&quot;bash --login&quot;</span></span><br><span class="line">$ ssh root@serverip <span class="string">&quot;cd xxx; bash --login&quot;</span></span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scp is used on client to copy data to server</span></span><br><span class="line"><span class="comment"># on client</span></span><br><span class="line">$ <span class="built_in">mkdir</span> -p /home/lzq/.ssh <span class="comment"># create parent dir as well if not exist</span></span><br><span class="line"><span class="comment"># create private and public key pairs</span></span><br><span class="line">$ ssh-keygen -t rsa  (just enter, no other input)</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy public key to ssh server</span></span><br><span class="line">$ scp /home/lzq/.ssh/id_rsa.pub  root@serverip:/root/.ssh/new.pub</span><br><span class="line"></span><br><span class="line"><span class="comment"># on server</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/.ssh</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  authorized_keys exists</span><br><span class="line">  $ <span class="built_in">cat</span> new.pub &gt;&gt;authorized_keys</span><br><span class="line">  $ <span class="built_in">rm</span> new.pub</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   $ <span class="built_in">mv</span> new.pub authorized_keys</span><br><span class="line"></span><br><span class="line"> $ <span class="built_in">chmod</span> 644 authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># Client</span></span><br><span class="line">$ ssh  root@serverip</span><br></pre></td></tr></table></figure>

<h2 id="user-management"><a href="#user-management" class="headerlink" title="user management"></a>user management</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show all processes of a given user</span></span><br><span class="line">$ ps -u <span class="variable">$user</span></span><br><span class="line">$ pstree <span class="variable">$user</span> -ap</span><br><span class="line"><span class="comment"># show a process and its owner</span></span><br><span class="line">$ ps u <span class="variable">$pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show all processes of given group</span></span><br><span class="line">$ ps -g <span class="variable">$user</span></span><br><span class="line"><span class="comment"># show all groups from local and remote LDAP</span></span><br><span class="line">$ getent group</span><br><span class="line"><span class="comment"># show all users from local and remote LDAP</span></span><br><span class="line">$ getent passwd</span><br><span class="line"><span class="comment"># add a group with given id and name at local</span></span><br><span class="line">$ groupadd [-g 6002] school</span><br><span class="line"><span class="comment"># create a system group</span></span><br><span class="line">$ groupadd -r <span class="variable">$group_name</span></span><br><span class="line"><span class="comment"># delete a group from local</span></span><br><span class="line">$ groupdel <span class="variable">$group_name</span></span><br><span class="line"><span class="comment"># add/delete an existing user to a given group</span></span><br><span class="line">$ gpasswd -a <span class="variable">$user</span> <span class="variable">$group</span></span><br><span class="line">$ gpasswd -d <span class="variable">$user</span> <span class="variable">$group</span></span><br><span class="line">$ gpasswd --members <span class="variable">$user1</span>, <span class="variable">$user2</span> <span class="variable">$group</span></span><br><span class="line"><span class="comment"># show groups for current user</span></span><br><span class="line">$ <span class="built_in">groups</span></span><br><span class="line"><span class="comment"># show groups for a given user</span></span><br><span class="line">$ <span class="built_in">groups</span> jason</span><br><span class="line"></span><br><span class="line"><span class="comment"># add user to given group</span></span><br><span class="line">$ sudo usermod -a -G root jason <span class="comment"># add jason to root group</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show id of current user</span></span><br><span class="line">$ <span class="built_in">id</span> -ru</span><br><span class="line"><span class="comment"># show current user</span></span><br><span class="line">$ <span class="built_in">id</span> -un</span><br><span class="line"><span class="comment"># show id of given user(local or remote)</span></span><br><span class="line">$ <span class="built_in">id</span> <span class="variable">$user1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add a new user or remove a user from local</span></span><br><span class="line"><span class="comment"># adduser [--home DIR] [--shell SHELL] [--no-create-home] [--uid ID]  [--ingroup GROUP | --gid ID] [--disabled-password] [--disabled-login]   user</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -r means deleting its home directory</span></span><br><span class="line">$ userdel -r <span class="variable">$user</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># change passwd for current user</span></span><br><span class="line">$ passwd</span><br><span class="line">$ passwd <span class="variable">$user</span></span><br></pre></td></tr></table></figure>
<h2 id="x2F-etc-x2F-sudoers-Ubuntu18"><a href="#x2F-etc-x2F-sudoers-Ubuntu18" class="headerlink" title="&#x2F;etc&#x2F;sudoers(Ubuntu18)"></a>&#x2F;etc&#x2F;sudoers(Ubuntu18)</h2><p>it’s a file used to control what commands a user can run</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo visudo</span><br></pre></td></tr></table></figure>

<p><strong>&#x2F;etc&#x2F;sudoers</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># User privilege specification, root user can run all with any user on all hosts with any command!!!</span><br><span class="line">root       ALL  =    (ALL)                     ALL</span><br><span class="line">[user]     [host] =  [runas user]              commands</span><br><span class="line"></span><br><span class="line">jorge ALL=(root) NOPASSWD: /usr/bin/find, /bin/rm</span><br><span class="line"># user  jorge can run as root user!!!</span><br><span class="line"># the command must have absolute path!!!, user jorge can run /bin/rm as root without password required.</span><br><span class="line"></span><br><span class="line"># Allow members of group sudo to execute any command after they have provided their password</span><br><span class="line">%sudo ALL=(ALL) ALL</span><br><span class="line"></span><br><span class="line"># Members of the admin group may gain root privileges</span><br><span class="line"># allow members of group admin/users to execute any command with any user on all host without password.</span><br><span class="line">%admin      ALL=    (ALL) NOPASSWD:          ALL</span><br><span class="line">%users      ALL=    (ALL) NOPASSWD:          ALL</span><br><span class="line">[group] [host] =    (runas user)             commands</span><br></pre></td></tr></table></figure>

<p><strong>&#x2F;etc&#x2F;sudoers example</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">lb 10.10.10.3 = (root) NOPASSWD: /usr/bin/find, /bin/rm</span><br><span class="line"># OR</span><br><span class="line">lb 10.10.10.1/24 = (root) NOPASSWD: /usr/bin/find, /bin/rm</span><br><span class="line"></span><br><span class="line"># lb user can run /bin/rm as root without password on jason_dev host</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lb@jason_dev<span class="variable">$sudo</span> <span class="built_in">rm</span> xx</span><br><span class="line">sudo unable to resolve host jason_dev(hostname of my machine)</span><br><span class="line"><span class="comment"># take long time to show such warning</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># let&#x27;s see how this happens and fix it</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step 1: check the user: lb, ok allowed to run /bin/rm</span></span><br><span class="line"><span class="comment"># step 2: check host(as lb is only allowed to run on 10.10.10.3</span></span><br><span class="line"><span class="comment">#         we must know what&#x27;s ip for current machine(jason_dev)</span></span><br><span class="line"><span class="comment">#         check /etc/hosts, if not found</span></span><br><span class="line"><span class="comment">#         DNSLookUp</span></span><br><span class="line"><span class="comment">#         still not found, can&#x27;t find get the above error)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step 3: run rm with root and no password</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># to avoid dnslook, add entry at /etc/hosts with</span></span><br><span class="line"></span><br><span class="line">127.0.0.1 jason_dev</span><br></pre></td></tr></table></figure>

<h2 id="broadcast-message-to-all-users-from-terminal"><a href="#broadcast-message-to-all-users-from-terminal" class="headerlink" title="broadcast message to all users from terminal"></a>broadcast message to all users from terminal</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wall <span class="string">&#x27;hello everyone&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># send msg to one pts</span></span><br><span class="line">$ <span class="built_in">who</span></span><br><span class="line">root     pts/8        2019-11-24 22:30 (10.20.6.117)</span><br><span class="line">root     pts/9        2019-11-25 23:59 (10.20.6.117)</span><br><span class="line">$ write root pts/8</span><br></pre></td></tr></table></figure>

<h2 id="copy-file-from-local-to-remote-ssh-server"><a href="#copy-file-from-local-to-remote-ssh-server" class="headerlink" title="copy file from local to remote ssh server"></a>copy file from local to remote ssh server</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -r will follow symbol link</span></span><br><span class="line">$ scp -r username@hostB:/home/lzq/vim .</span><br><span class="line">$ scp -r vim username@hostB:/home/lzq/</span><br></pre></td></tr></table></figure>
<p>backup file with progress bar locally</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rsync -avP  /home/lzq/Document   /share/</span><br><span class="line"></span><br><span class="line"><span class="comment"># skip following symbol link</span></span><br><span class="line">rsync -a --no-links vim root@hostB:/root/</span><br><span class="line"></span><br><span class="line"><span class="comment"># -a, --archive               archive mode; equals -rlptgoD (no -H,-A,-X)</span></span><br><span class="line"><span class="comment"># -v, --verbose               increase verbosity</span></span><br><span class="line"><span class="comment"># -P  --progress</span></span><br><span class="line"></span><br><span class="line">rsync -avP --no-links vim root@hostB:/root/</span><br></pre></td></tr></table></figure>
<h2 id="create-soft-link-for-all-files-under-a-dir"><a href="#create-soft-link-for-all-files-under-a-dir" class="headerlink" title="create soft link for all files under a dir"></a>create soft link for all files under a dir</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ln</span> -s /home/lzq/* .</span><br></pre></td></tr></table></figure>

<h2 id="cfg-file-for-shell"><a href="#cfg-file-for-shell" class="headerlink" title="cfg file for shell"></a>cfg file for shell</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">non-interactive terminal</span><br><span class="line">bash/csh/sh  /etc/bashrc and $HOME/.bashrc</span><br><span class="line"></span><br><span class="line">interactive terminal</span><br><span class="line">/etc/profile and $HOME/.profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/etc/profile vs /etc/environment</span><br><span class="line">System-wide environment variables</span><br><span class="line">[</span><br><span class="line">/etc/environment is not part of POSIX, it belongs to PAM (Pluggable Authentication Module), and only programs compiled with PAM support are able to use it (primarily login systems, which subsequently start the shell or user environment). This means it isn&#x27;t even read by your shell.</span><br><span class="line">--------------------------------------------------------------------------------------------------------</span><br><span class="line">You can see the programs using /etc/environment with grep -l pam_env /etc/pam.d/*.</span><br><span class="line">So /etc/environment is used for setting variables for programs which are usually not started from a shell</span><br><span class="line">--------------------------------------------------------------------------------------------------------</span><br><span class="line">]</span><br><span class="line">A suitable file for environment variable settings that affect the system as a whole (rather than just a particular user) is /etc/environment. An alternative is to create a file for the purpose in the /etc/profile.d directory.</span><br><span class="line"></span><br><span class="line">/etc/environment</span><br><span class="line"></span><br><span class="line">This file is specifically meant for system-wide environment variable settings. It is not a script file, but rather consists of assignment expressions, one per line.</span><br><span class="line"></span><br><span class="line">FOO=bar</span><br><span class="line"></span><br><span class="line">Note: Variable expansion does not work in /etc/environment.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/etc/profile.d/*.sh</span><br><span class="line"></span><br><span class="line">Files with the .sh extension in the /etc/profile.d directory get executed whenever a bash login shell is entered (e.g. when logging in from the console or over ssh), as well as by the DisplayManager when the desktop session loads.</span><br><span class="line"></span><br><span class="line">You can for instance create the file /etc/profile.d/myenvvars.sh and set variables like this:</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk1.7.0</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line">Other files</span><br><span class="line"></span><br><span class="line">While /etc/profile is often suggested for setting environment variables system-wide, it is a configuration file of the base-files package, so it&#x27;s not appropriate to edit that file directly. Use a file in /etc/profile.d instead as shown above. (Files in /etc/profile.d are sourced by /etc/profile.)</span><br><span class="line"></span><br><span class="line">/etc/default/locale is specifically meant for system-wide locale environment variable settings. It&#x27;s written to by the installer and when you use Language Support to set the language or regional formats system-wide. On a desktop system there is normally no reason to edit this file manually.</span><br><span class="line"></span><br><span class="line">The shell config file /etc/bash.bashrc is sometimes suggested for setting environment variables system-wide. While this may work on Bash shells for programs started from the shell, variables set in that file are not available by default to programs started from the graphical environment in a desktop session.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="sys-related"><a href="#sys-related" class="headerlink" title="sys related"></a>sys related</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Centos</span></span><br><span class="line">$ /etc/centos-release</span><br><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br><span class="line"></span><br><span class="line"><span class="comment"># show cmdline of running kernel</span></span><br><span class="line">$ <span class="built_in">cat</span> /proc/cmdline</span><br><span class="line"></span><br><span class="line"><span class="comment"># change system time</span></span><br><span class="line">$ <span class="built_in">date</span> --<span class="built_in">set</span>=<span class="string">&quot;2017-04-11 13:21:00&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># change timezone from command line</span></span><br><span class="line">$ <span class="built_in">ln</span> -s /usr/share/zoneinfo/US/Pacific /etc/localtime</span><br><span class="line"></span><br><span class="line"><span class="comment"># change hostname permanently</span></span><br><span class="line">/etc/hostname (or /etc/HOSTNAME)</span><br><span class="line"></span><br><span class="line"><span class="comment"># show system reboot and shutodwn event</span></span><br><span class="line">$ last -x reboot</span><br><span class="line">$ last -x shutdown</span><br><span class="line"></span><br><span class="line"><span class="comment"># show the lastest reboot</span></span><br><span class="line">$ last -x reboot | <span class="built_in">head</span> -1</span><br><span class="line"></span><br><span class="line"><span class="comment"># show how lang system boots</span></span><br><span class="line">$ <span class="built_in">uptime</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># disable selinux</span></span><br><span class="line">$ setenforce 0 <span class="comment"># temporary close selinux</span></span><br><span class="line">OR</span><br><span class="line">edit /etc/selinux/config</span><br></pre></td></tr></table></figure>

<h2 id="reset-root-password"><a href="#reset-root-password" class="headerlink" title="reset root password"></a>reset root password</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">In the event your Linux box experiences disk or file system issues you may receive a “Give root password for maintenance” prompt upon reboot. If you have your root password you can login but in the event your using ‘slide’ or ‘sudo’ for wheel access or you’ve just mis-placed your root password – you’ll need to reset it.</span><br><span class="line"></span><br><span class="line">To reset your root password:</span><br><span class="line">    1. When the GRUB loader shows during boot press the spare bar to pause boot.</span><br><span class="line"></span><br><span class="line">    2. Select your boot kernel.</span><br><span class="line"></span><br><span class="line">    3. Type ‘e’ to edit the default kernel line.</span><br><span class="line"></span><br><span class="line">    4. Type ‘e’ again on the line that starts with ‘kernel’.</span><br><span class="line"></span><br><span class="line">    5. Add ‘init=/bin/bash’ to the end of the ‘kernel’ line then press enter.</span><br><span class="line"></span><br><span class="line">    6. Type ‘b’ to boot the modified kernel parameters.</span><br><span class="line"></span><br><span class="line">    7. Once you’re at the /bin/bash prompt you will need to remount the root file system as read/write in order to edit the passwd file:</span><br><span class="line"></span><br><span class="line">    # mount -o remount,rw /</span><br><span class="line"></span><br><span class="line">    8. Change your root password:</span><br><span class="line"></span><br><span class="line">    # passwd root</span><br><span class="line"></span><br><span class="line">    9. Remount the filesystem back to read only:</span><br><span class="line"></span><br><span class="line">    # mount -o remount,ro /</span><br><span class="line"></span><br><span class="line">    10. Reboot your server using CTR-ALT-DELETE.</span><br><span class="line"></span><br><span class="line">    11. You will now be able to login with your new root password and carry out the maintenance.</span><br></pre></td></tr></table></figure>

<h2 id="disable-boot-from-save-grub-entry-for-grub2"><a href="#disable-boot-from-save-grub-entry-for-grub2" class="headerlink" title="disable boot from save grub entry for grub2"></a>disable boot from save grub entry for grub2</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Ubuntu18</span><br><span class="line"></span><br><span class="line">GRUB_DEFAULT=saved</span><br><span class="line">GRUB_SAVEDEFAULT=true</span><br><span class="line"></span><br><span class="line">to</span><br><span class="line"></span><br><span class="line">GRUB_DEFAULT=0</span><br><span class="line">(always first entry)</span><br><span class="line">GRUB_SAVEDEFAULT=false</span><br><span class="line"></span><br><span class="line">then generate /boot/grub2/grub.cfg newly</span><br><span class="line">#grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure>

<h2 id="force-enter-command-line-mode-when-boots"><a href="#force-enter-command-line-mode-when-boots" class="headerlink" title="force enter command-line mode when boots"></a>force enter command-line mode when boots</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$sudo vi /etc/default/grub</span><br><span class="line"></span><br><span class="line">Do below changes:</span><br><span class="line">Comment the line     GRUB_CMDLINE_LINUX_DEFAULT=”quiet splash”, by adding # at the beginning, which will disable the Ubuntu purple screen.</span><br><span class="line">Change               GRUB_CMDLINE_LINUX=”” to GRUB_CMDLINE_LINUX=”text”, this makes Ubuntu boot directly into Text Mode.</span><br><span class="line">Uncomment this line #GRUB_TERMINAL=console, by removing the # at the beginning, this makes Grub Menu into real black &amp; white Text Mode (without background image)</span><br><span class="line"></span><br><span class="line">Ubuntu18</span><br><span class="line">$ sudo update-grub</span><br><span class="line">Centos7</span><br><span class="line">$ grub2-mkconfig</span><br></pre></td></tr></table></figure>

<h2 id="enter-single-user-mode-when-boots"><a href="#enter-single-user-mode-when-boots" class="headerlink" title="enter single-user mode when boots"></a>enter single-user mode when boots</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">开机进入grub时，用上下键移到第二行的恢复模式，按e（注意不是回车）</span><br><span class="line">把ro single 改成rw single init=/bin/bash ， 然后按ctrl+x，就可以进入 单用户模式，完成后，按”ctrl+alt+delete“组合神键重启</span><br><span class="line"></span><br><span class="line">passwd: Authentication token manipulation error</span><br><span class="line">进入单用户模式后， filessystem may be mounted with readonly， so remount it again</span><br><span class="line"></span><br><span class="line">mount -rw -o remount /</span><br><span class="line">OR</span><br><span class="line">mount -o remount, rw /</span><br></pre></td></tr></table></figure>

<h2 id="x2F-etc-x2F-fstab-file-format"><a href="#x2F-etc-x2F-fstab-file-format" class="headerlink" title="&#x2F;etc&#x2F;fstab file format"></a>&#x2F;etc&#x2F;fstab file format</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">What is fstab file?</span><br><span class="line"></span><br><span class="line">fstab is a configuration file that contains information of all the partitions and storage devices in your computer. The file is located under /etc, so the full path to this file is /etc/fstab.</span><br><span class="line"></span><br><span class="line">/etc/fstab contains information of where your partitions and storage devices should be mounted and how. If you can&#x27;t access your Windows partition from Linux, aren&#x27;t able to mount your CD or write to your floppy as a normal user, or have problems with your CD-RW, you probably have a misconfigured /etc/fstab file. So, you can usually fix your mounting problems by editing your fstab file.</span><br><span class="line"></span><br><span class="line">/etc/fstab is just a plain text file, so you can open and edit it with any text editor you&#x27;re familiar with. However, note that you must have the root privileges before editing fstab. So, in order to edit the file, you must either log in as root or use the su command to become root.</span><br><span class="line"></span><br><span class="line">Sample fstab file looks like this</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># /etc/fstab</span><br><span class="line">#</span><br><span class="line"># &lt;device&gt; &lt;mountpoint&gt; &lt;filesystemtype&gt;&lt;options&gt; &lt;dump&gt; &lt;fsckorder&gt;</span><br><span class="line"></span><br><span class="line">/dev/hdb5         /                       ext2               defaults       1              1</span><br><span class="line">/dev/hdb2        /home                  ext2               defaults       1             2</span><br><span class="line">/dev/hdc         /mnt/cdrom            iso9660         noauto,ro,user     0        0</span><br><span class="line">/dev/hda1     /mnt/dos/c              msdos              defaults        0             0</span><br><span class="line">/dev/hdb1    /mnt/dos/d              msdos            defaults           0             0</span><br><span class="line">/dev/fd0     /mnt/floppy               ext2               noauto,user     0             0</span><br><span class="line">/dev/hdb4     none                     ignore             defaults          0              0</span><br><span class="line"></span><br><span class="line">none            /proc                       proc                defaults</span><br><span class="line">/dev/hdb3    none                        swap                sw</span><br><span class="line"></span><br><span class="line">Note that this system has two IDE partitions, one which is used as /, and the other used as /home. It also has two DOS partitions which are mounted under /mnt. Note the user option provided for the cdrom, and the floppy drive. This is one of the many default parameters you can specify. In this case it means that any user can mount a cdrom, or floppy disk. Other options will be dealt with later.</span><br><span class="line"></span><br><span class="line">fstab file format explination</span><br><span class="line"></span><br><span class="line">fstab consists of a number of lines (one for each filesystem) seperated into six fields. Each field is seperated from the next by whitespace (spaces/tabs).</span><br><span class="line"></span><br><span class="line">So from the example given previously:</span><br><span class="line"></span><br><span class="line">/dev/hdc /mnt/cdrom iso9660 noauto,ro,user 0 0</span><br><span class="line"></span><br><span class="line"> first field (/dev/hdc) is the physical device/remote filesystem which is to be described.</span><br><span class="line"></span><br><span class="line"> second field (/mnt/cdrom) specifies the mount point where the filesystem will be mounted.</span><br><span class="line"></span><br><span class="line"> third field (iso9660) is the type of filesystem on the device from the first field.</span><br><span class="line"></span><br><span class="line"> fourth field (noauto,ro,user) is a (default) list of options which mount should use when mounting the filesystem.</span><br><span class="line"></span><br><span class="line"> fifth field (0) is used by dump (a backup utility) to decide if a filesystem should be backed up. If zero then dump will ignore that filesystem. The sixth field (0) is used by fsck (the filesystem check utility) to determine the order in which filesystems should be checked.</span><br><span class="line"></span><br><span class="line">If zero then fsck won&#x27;t check the filesystem.</span><br><span class="line"></span><br><span class="line">(as the example line above is a cdrom there is very little point in doing a fsck on it, so the value is zero).</span><br><span class="line"></span><br><span class="line">File system mount options</span><br><span class="line"></span><br><span class="line">As the filesystems in /etc/fstab will eventually be mounted using mount(8) it isn&#x27;t surprising that the options field simply contains a comma-seperated list of options which will be passed directly to mount when it tries to mount the filesystem.</span><br><span class="line"></span><br><span class="line">The options common to all filesystems are:</span><br><span class="line"></span><br><span class="line">sync / async</span><br><span class="line"></span><br><span class="line">All I/O to the file system should be done (a)synchronously.</span><br><span class="line"></span><br><span class="line">auto</span><br><span class="line"></span><br><span class="line">The filesystem can be mounted automatically (at bootup, or when mount is passed the -a option). This is really unnecessary as this is the default action of mount -a anyway.</span><br><span class="line"></span><br><span class="line">noauto</span><br><span class="line"></span><br><span class="line">The filesystem will NOT be automatically mounted at startup, or when mount passed -a. You must explicitly mount the filesystem.</span><br><span class="line"></span><br><span class="line">dev / nodev</span><br><span class="line"></span><br><span class="line">Permit any user to mount the filesyste. This automatically implies noexec,</span><br><span class="line"></span><br><span class="line">exec / noexec</span><br><span class="line"></span><br><span class="line">Permit/Prevent the execution of binaries from the filesystem.</span><br><span class="line"></span><br><span class="line">suid / nosuid</span><br><span class="line"></span><br><span class="line">Permit/Block the operation of suid, and sgid bits.</span><br><span class="line"></span><br><span class="line">ro</span><br><span class="line"></span><br><span class="line">Mount read-only.</span><br><span class="line"></span><br><span class="line">rw</span><br><span class="line"></span><br><span class="line">Mount read-write.</span><br><span class="line"></span><br><span class="line">user</span><br><span class="line"></span><br><span class="line">Permit any user to mount the filesystem. This automatically implies noexec, nosuid,nodev unless overridden.</span><br><span class="line"></span><br><span class="line">nouser</span><br><span class="line"></span><br><span class="line">Only permit root to mount the filesystem. This is also a default setting.</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line"></span><br><span class="line">Use default settings. Equivalent to rw,suid,dev,exec,auto,nouser,async.</span><br><span class="line"></span><br><span class="line">There are numerous options for the specific filesystes supported by mount.</span><br><span class="line">However these are some of the more useful, for the full list check out the man page for `mount`.</span><br><span class="line"></span><br><span class="line">ext2</span><br><span class="line"></span><br><span class="line">check=&#123;none, normal, strict&#125;</span><br><span class="line">Sets the fsck checking level.</span><br><span class="line"></span><br><span class="line">debug</span><br><span class="line"></span><br><span class="line">print debugging info on each remount.</span><br><span class="line"></span><br><span class="line">sb=n</span><br><span class="line"></span><br><span class="line">n is the block which should be used as the superblock for the fs.</span><br><span class="line"></span><br><span class="line">fat</span><br><span class="line"></span><br><span class="line">check=&#123;r[elaxed], n[ormal], s[trict]&#125;</span><br><span class="line"></span><br><span class="line">Not the same as ext2. Rather deals with allowed filenames. See mount man page.</span><br><span class="line"></span><br><span class="line">conv=&#123;b[inary], t[ext], a[uto]&#125;</span><br><span class="line"></span><br><span class="line">Performs DOS&lt;-&gt;UNIX text file conversions automatically. See mount man page.</span><br><span class="line"></span><br><span class="line">uid=n, gid=n</span><br><span class="line"></span><br><span class="line">iso9660</span><br><span class="line"></span><br><span class="line">norock</span><br><span class="line"></span><br><span class="line">Disables Rock Ridge extensions.</span><br><span class="line"></span><br><span class="line">fstab file Supported file systems list</span><br><span class="line"></span><br><span class="line">affs - I have know idea what this is, if anyone else does please enlighten me.</span><br><span class="line"></span><br><span class="line">coherent</span><br><span class="line"></span><br><span class="line">ext - Don&#x27;t use this. ext has been superseded by ext2.</span><br><span class="line"></span><br><span class="line">ext2 - The standard Linux filesystem. (NB, this has nothing to do with extended partitions.)</span><br><span class="line"></span><br><span class="line">fat - DOS.</span><br><span class="line"></span><br><span class="line">hpfs - OS/2 High Performance File System.</span><br><span class="line"></span><br><span class="line">iso9660 - CD-ROM&#x27;s. Supports Rock Ridge extensions by default.</span><br><span class="line"></span><br><span class="line">minix - can be useful for floppy disks.</span><br><span class="line"></span><br><span class="line">msdos - Just fat with some addtional error checking.</span><br><span class="line"></span><br><span class="line">nfs - Network FileSystem. Dealt with later.</span><br><span class="line"></span><br><span class="line">proc - The process psudeo-filesystem now standard in Linux.</span><br><span class="line"></span><br><span class="line">smb - Another network filesystem. Compatable with WFW, and NT. See Samba.</span><br><span class="line"></span><br><span class="line">ufs - Unix FileSystem.</span><br><span class="line"></span><br><span class="line">unsdos - Unix filesystem on a FAT partition.</span><br><span class="line"></span><br><span class="line">vfat - MS&#x27;s kludge of FAT to provide long filenames.</span><br><span class="line"></span><br><span class="line">xenix</span><br><span class="line"></span><br><span class="line">xiafs</span><br></pre></td></tr></table></figure>

<h2 id="deep-in-remove-file"><a href="#deep-in-remove-file" class="headerlink" title="deep in remove file"></a>deep in remove file</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">rm</span> test.c</span><br><span class="line"><span class="comment"># actually, kernel takes two steps to delete the file</span></span><br><span class="line">1. remove fentry(<span class="keyword">then</span> you can NOT see test.c)</span><br><span class="line">2. free inode of this file <span class="keyword">if</span> its reference count is 0</span><br><span class="line">Only these two steps executed, the disk space is freed</span><br><span class="line"></span><br><span class="line"><span class="comment"># show all deleted files(not see from disk), but still opened by process</span></span><br><span class="line">$  lsof 2&gt;/dev/null | grep deleted</span><br><span class="line">ovsdb-ser  1089          openvswitch    7u      REG              253,0        159   69471332 /tmp/tmpfVYsNnz (deleted)</span><br></pre></td></tr></table></figure>

<p><strong>what about app opens a large file, during it’s reading, someone rm that file?</strong></p>
<p>Only fentry is deleted, inode is not freed, as when app opens that file,<br>it increments the reference of that inode<br>when app closes that file, at that time, it will be deleted from disk.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check file inode</span></span><br><span class="line"><span class="variable">$ls</span> -i a.c b.c</span><br><span class="line">OR</span><br><span class="line"><span class="variable">$stat</span> a.c b.c</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">mv</span> a.c b.c</span><br><span class="line"><span class="comment"># actually, fentry(b.c) points to inode of (a.c)</span></span><br><span class="line"><span class="comment"># a.c(fentry is deleted), inode of (b.c) is freed if no use open it!!!</span></span><br></pre></td></tr></table></figure>

<h2 id="update-file-time"><a href="#update-file-time" class="headerlink" title="update file time"></a>update file time</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Update the access and modification times of each FILE to the current time</span></span><br><span class="line">$ <span class="built_in">touch</span>  test.doc</span><br><span class="line">$ <span class="built_in">touch</span> -d <span class="string">&quot;2010-05-31 08:10:30&quot;</span> test.doc</span><br><span class="line"></span><br><span class="line"><span class="comment"># or change only one</span></span><br><span class="line">$ <span class="built_in">touch</span> -m -d <span class="string">&quot;2010-05-31 08:10:30&quot;</span> test.doc</span><br><span class="line">$ <span class="built_in">touch</span> -a -d <span class="string">&quot;2010-05-31 08:10:30&quot;</span> test.doc</span><br></pre></td></tr></table></figure>
<h2 id="cut-command"><a href="#cut-command" class="headerlink" title="cut command"></a>cut command</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cut split string by tab by default, the first indiex if 1</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;hello boy&quot;</span> | <span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f 1</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>

<h2 id="remove-file-named-with-special-character"><a href="#remove-file-named-with-special-character" class="headerlink" title="remove file named with special character"></a>remove file named with special character</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span></span><br><span class="line"><span class="comment">#a.c  -a.c</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">rm</span> <span class="string">&#x27;#a.c&#x27;</span></span><br><span class="line">$ <span class="built_in">rm</span> \<span class="comment">#a.c</span></span><br><span class="line">$ <span class="built_in">rm</span> ./-a.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># use eval</span></span><br><span class="line">$ <span class="built_in">eval</span> <span class="string">&quot;rm =1.3.0,&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="display-output-to-screen-and-also-write-it-to-file"><a href="#display-output-to-screen-and-also-write-it-to-file" class="headerlink" title="display output to screen and also write it to file"></a>display output to screen and also write it to file</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;just a test&quot;</span> | <span class="built_in">tee</span> log.txt</span><br></pre></td></tr></table></figure>

<h2 id="command-xargs"><a href="#command-xargs" class="headerlink" title="command xargs"></a>command xargs</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xargs will split parameters passed by tab or space, then call after command with splited parameter one by one</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;hello boy&quot;</span> | xargs <span class="built_in">rm</span></span><br><span class="line"><span class="built_in">rm</span>: cannot remove <span class="string">&#x27;hello&#x27;</span>: No such file or directory</span><br><span class="line"><span class="built_in">rm</span>: cannot remove <span class="string">&#x27;boy&#x27;</span>: No such file or directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># if you see xargs: argument line too long</span></span><br><span class="line">$ xx | xargs -l1 <span class="built_in">rm</span> <span class="comment"># -l1 each time each parameter</span></span><br></pre></td></tr></table></figure>

<h2 id="find-command-better-use-find-file-not-content-of-file"><a href="#find-command-better-use-find-file-not-content-of-file" class="headerlink" title="find command(better use find file, not content of file)"></a>find command(better use find file, not content of file)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -name  exactly match!!!</span></span><br><span class="line"><span class="comment"># -iname case insensitive</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -type  f | d | c | l(link) | b(block) | p(pipe)</span></span><br><span class="line"><span class="comment"># -size  n[cwbkMG] # 1M, -1k</span></span><br><span class="line"><span class="comment"># -maxdepth 1 (max depth)</span></span><br><span class="line"><span class="comment"># -perm 755  (permission with 755)</span></span><br><span class="line"><span class="comment"># -user jason</span></span><br><span class="line"></span><br><span class="line">$ find - <span class="built_in">type</span> f -size +1k -name <span class="string">&quot;/*test.c&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># when use | for find better to use -print0</span></span><br><span class="line">$ find . -<span class="built_in">type</span> f -print0 | xargs -0 <span class="built_in">rm</span> -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># more exec on some file</span></span><br><span class="line">$ find . -<span class="built_in">type</span> f -print0 -<span class="built_in">exec</span> <span class="built_in">ls</span> &#123;&#125; \; -<span class="built_in">exec</span> <span class="built_in">rm</span> -f &#123;&#125; \;</span><br><span class="line"></span><br><span class="line">$ find . -<span class="built_in">type</span> f -print0 -<span class="built_in">exec</span> <span class="built_in">rm</span> -f &#123;&#125; \;</span><br><span class="line"><span class="comment"># in some case it may meet error &#x27;too long parameter/argument&#x27; something like use, use find | xargs to sovle it</span></span><br><span class="line"></span><br><span class="line">print0: <span class="built_in">print</span> the full file name on the standard output, followed by a null character (instead of the new-line character that ‘-<span class="built_in">print</span>’ uses).  This allows file names that contain  newlines  or  other  types  of white  space  to  be correctly interpreted by programs that process the find output.  This option corresponds to the ‘-0’ option of xargs.</span><br><span class="line"></span><br><span class="line"><span class="comment"># find file with executable attribute</span></span><br><span class="line">$ find . -executable</span><br><span class="line"></span><br><span class="line"><span class="comment"># negative</span></span><br><span class="line">$ find . ! -name <span class="string">&quot;*.txt&quot;</span></span><br><span class="line"><span class="comment"># find with two or more conditions</span></span><br><span class="line"></span><br><span class="line">$ find . -iname class.* -o -name basic*</span><br></pre></td></tr></table></figure>

<h2 id="rename-a-batch-of-files-with-pattern"><a href="#rename-a-batch-of-files-with-pattern" class="headerlink" title="rename a batch of files with pattern"></a>rename a batch of files with pattern</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rename <span class="string">&#x27;s/ //g&#x27;</span> *.txt <span class="comment"># remove space from filename</span></span><br><span class="line">$ find . -<span class="built_in">type</span> f -<span class="built_in">exec</span> rename <span class="string">&#x27;s/ //g&#x27;</span> &#123;&#125; \; <span class="comment"># remove space from file name only</span></span><br><span class="line">$ find . name <span class="string">&quot;* *&quot;</span> -<span class="built_in">exec</span> rename <span class="string">&#x27;s/ //g&#x27;</span> &#123;&#125; \; <span class="comment"># remove space from file name or dir name</span></span><br></pre></td></tr></table></figure>

<h2 id="show-stats-of-a-file"><a href="#show-stats-of-a-file" class="headerlink" title="show stats of a file"></a>show stats of a file</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">stat</span> a.c</span><br></pre></td></tr></table></figure>

<h2 id="copy-file"><a href="#copy-file" class="headerlink" title="copy file"></a>copy file</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> -r dir1 dir2 dir3/ <span class="comment"># copy dir1, dir2(include hiden files) to dir3(under)</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cp</span> -r dir1/* dir2/</span><br><span class="line">$ <span class="built_in">cp</span> -r dir1/ dir2/ <span class="comment"># copy all files(except hiden files) under dir1 to dir2</span></span><br></pre></td></tr></table></figure>
<h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ERROR: Exiting with failure status due to previous errors</span></span><br><span class="line"><span class="comment"># 原来是待压缩的文件夹是root权限创建的，而执行tar的时候未加sudo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create tar and exclude some dirs for files</span></span><br><span class="line">$ tar czvf test.tar.gz <span class="built_in">test</span>/ --exclude=<span class="string">&#x27;test/exclude/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># extract .xz with tar</span></span><br><span class="line">$ tar -xJf xx.tar.xz</span><br><span class="line"><span class="comment"># extract .gz file</span></span><br><span class="line">$ gunzip *.gz</span><br></pre></td></tr></table></figure>
<h2 id="sleep-and-usleep"><a href="#sleep-and-usleep" class="headerlink" title="sleep and usleep"></a>sleep and usleep</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sleep (sec);</span><br><span class="line">usleep (microsec)</span><br><span class="line"></span><br><span class="line">sec = 1000 milisecond 毫秒</span><br><span class="line">milisecond = 1000 microsecond 微秒</span><br></pre></td></tr></table></figure>
<h2 id="history-command"><a href="#history-command" class="headerlink" title="history command"></a>history command</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show history command with time</span></span><br><span class="line">$ <span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">&quot;`whoami` : |  %F  | %T: | &quot;</span></span><br><span class="line"><span class="comment"># run history command</span></span><br><span class="line">$ <span class="built_in">history</span></span><br><span class="line">1 <span class="built_in">cd</span></span><br><span class="line">2 <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line">$ !2 <span class="comment"># equal ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show latest N history commands</span></span><br><span class="line">$ <span class="built_in">history</span> 10</span><br></pre></td></tr></table></figure>

<h2 id="run-command-with-a-specific-user-or-group"><a href="#run-command-with-a-specific-user-or-group" class="headerlink" title="run command with a specific user or group"></a>run command with a specific user or group</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ su -m jason -c <span class="string">&#x27;ls&#x27;</span> <span class="comment"># jason is a user</span></span><br><span class="line">$ sg - jason_group -c <span class="string">&#x27;ls&#x27;</span> <span class="comment"># sg group</span></span><br></pre></td></tr></table></figure>

<h2 id="list-all-alias"><a href="#list-all-alias" class="headerlink" title="list all alias"></a>list all alias</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">alias</span> -p</span><br></pre></td></tr></table></figure>

<h2 id="redirect-shell-output"><a href="#redirect-shell-output" class="headerlink" title="redirect shell output"></a>redirect shell output</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redirect stdout(1) to /dev/null</span></span><br><span class="line"><span class="comment"># and redirect stder(2) to stdout(1)</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<h2 id="read-one-file-at-a-time-from-a-file"><a href="#read-one-file-at-a-time-from-a-file" class="headerlink" title="read one file at a time from a file"></a>read one file at a time from a file</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># read is a keyword</span></span><br><span class="line"><span class="comment"># line is var</span></span><br><span class="line"><span class="built_in">where</span> <span class="built_in">read</span> -r line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$line</span></span><br><span class="line"><span class="keyword">done</span> &lt; file</span><br></pre></td></tr></table></figure>

<h2 id="read-input-from-standard-input-instead-of-a-file"><a href="#read-input-from-standard-input-instead-of-a-file" class="headerlink" title="read input from standard input instead of a file"></a>read input from standard input instead of a file</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &lt;&lt; <span class="string">END</span></span><br><span class="line"><span class="string">hello boy</span></span><br><span class="line"><span class="string">END</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># read from std and write to a file</span></span><br><span class="line">$ <span class="built_in">cat</span> &gt;new.txt &lt;&lt; <span class="string">END</span></span><br><span class="line"><span class="string">hello boy</span></span><br><span class="line"><span class="string">END</span></span><br><span class="line"><span class="comment"># END is a marker can be any</span></span><br></pre></td></tr></table></figure>

<h2 id="git-status-can’t-display-chinese-character"><a href="#git-status-can’t-display-chinese-character" class="headerlink" title="git status can’t display chinese character"></a>git status can’t display chinese character</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">edit ～/.gitconfig</span><br><span class="line">[core]</span><br><span class="line">quotepath = false</span><br></pre></td></tr></table></figure>

<h2 id="check-md5-value-for-a-file"><a href="#check-md5-value-for-a-file" class="headerlink" title="check md5 value for a file"></a>check md5 value for a file</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">md5sum</span> xx.iso</span><br></pre></td></tr></table></figure>

<h2 id="format-man-output-and-save-it-to-a-file"><a href="#format-man-output-and-save-it-to-a-file" class="headerlink" title="format man output and save it to a file"></a>format man output and save it to a file</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ man strace | col -b &gt; trace.txt</span><br></pre></td></tr></table></figure>



<h2 id="watch-a-command-output-by-‘n-seconds’"><a href="#watch-a-command-output-by-‘n-seconds’" class="headerlink" title="watch a command output by ‘n seconds’"></a>watch a command output by ‘n seconds’</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># by default, free unix is KB -m means MB</span></span><br><span class="line">$ watch -n 1 free -m</span><br></pre></td></tr></table></figure>

<h2 id="file-encoding-convertor-iconv"><a href="#file-encoding-convertor-iconv" class="headerlink" title="file encoding convertor iconv"></a>file encoding convertor iconv</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iconv -l  <span class="comment"># show supported encoding</span></span><br><span class="line"></span><br><span class="line">$ file a.c <span class="comment"># get file encoding</span></span><br><span class="line"></span><br><span class="line">$ iconv -f one_encoding -t another_encoding a.c &gt;b.c</span><br></pre></td></tr></table></figure>

<h2 id="error-‘sorry-you-must-have-a-tty-to-run-sudo’"><a href="#error-‘sorry-you-must-have-a-tty-to-run-sudo’" class="headerlink" title="error ‘sorry, you must have a tty to run sudo’"></a>error ‘sorry, you must have a tty to run sudo’</h2><p>There must be <code>Defaults requiretty</code> in the file you try to edit.</p>
<h2 id="generate-uuid"><a href="#generate-uuid" class="headerlink" title="generate uuid"></a>generate uuid</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ uuidgen</span><br></pre></td></tr></table></figure>

<h2 id="formated-json-output-from-shell"><a href="#formated-json-output-from-shell" class="headerlink" title="formated json output from shell"></a>formated json output from shell</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;&#123;&quot;hostname&quot;:&quot;test&quot;,&quot;domainname&quot;:&quot;example.com&quot;&#125;&#x27;</span> | python -m json.tool</span><br></pre></td></tr></table></figure>
<h2 id="Add-an-environment-variable-to-a-command"><a href="#Add-an-environment-variable-to-a-command" class="headerlink" title="Add an environment variable to a command"></a>Add an environment variable to a command</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">test</span>=hello; <span class="built_in">echo</span> <span class="variable">$test</span></span><br></pre></td></tr></table></figure>
<h2 id="eval-to-run-command-from-string"><a href="#eval-to-run-command-from-string" class="headerlink" title="eval to run command from string"></a>eval to run command from string</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">eval</span> <span class="string">&#x27;ls&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="killall-command-not-found"><a href="#killall-command-not-found" class="headerlink" title="killall command not found"></a>killall command not found</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Centos7</span></span><br><span class="line">$ yum install -y psmisc</span><br></pre></td></tr></table></figure>

<h2 id="capture-signal-in-shell"><a href="#capture-signal-in-shell" class="headerlink" title="capture signal in shell"></a>capture signal in shell</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># trap ctrl-c and call ctrl_c()</span></span><br><span class="line"><span class="built_in">trap</span> ctrl_c INT</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">ctrl_c</span></span>() &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;** Trapped CTRL-C&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 5`; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sleep</span> 1</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot;.&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="write-message-to-x2F-var-x2F-log-x2F-syslog-by-shell"><a href="#write-message-to-x2F-var-x2F-log-x2F-syslog-by-shell" class="headerlink" title="write message to &#x2F;var&#x2F;log&#x2F;syslog by shell"></a>write message to &#x2F;var&#x2F;log&#x2F;syslog by shell</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">logger -t <span class="string">&quot;title&quot;</span> <span class="string">&quot;message&quot;</span>         /* use tcp socket server port 601 */</span><br><span class="line">logger -d <span class="string">&quot;title&quot;</span> <span class="string">&quot;message&quot;</span>         /* use udp socket server port 514 */</span><br><span class="line">logger -u /dev/log <span class="string">&quot;title&quot;</span> <span class="string">&quot;message&quot;</span></span><br><span class="line"><span class="comment"># [looger is a command that can write syslog]</span></span><br></pre></td></tr></table></figure>

<h2 id="rsyslog-conf"><a href="#rsyslog-conf" class="headerlink" title="rsyslog conf"></a>rsyslog conf</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">In /var/log/syslog you may see these kind of message</span><br><span class="line">&quot;Previous message repeated X times&quot;, where X is a number</span><br><span class="line"></span><br><span class="line">it&#x27;s useful for supressing message, but for debugging, you can&#x27;t see it directly, turn it off by(ubuntu)</span><br><span class="line"></span><br><span class="line">edit /etc/rsyslog.conf</span><br><span class="line"></span><br><span class="line">$RepeatedMsgReduction off</span><br></pre></td></tr></table></figure>

<h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><p><strong>download particular files from particular website</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget -r -A .html http://cunit.sourceforge.net/doc/</span><br><span class="line">$ wget -r --no-parent -A <span class="string">&#x27;*.deb&#x27;</span> http://www.xyun.com/amd64/</span><br><span class="line"></span><br><span class="line"><span class="comment"># download all files except auto-generated index.html</span></span><br><span class="line">$ wget -r -np -R <span class="string">&quot;index.html*&quot;</span> http://example.com/configs/.vim/</span><br></pre></td></tr></table></figure>

<h2 id="wget-breakpoint-and-retry"><a href="#wget-breakpoint-and-retry" class="headerlink" title="wget breakpoint and retry"></a>wget breakpoint and retry</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget -c -t 10 <span class="variable">$url</span></span><br><span class="line"><span class="comment"># -c breakpoin</span></span><br><span class="line"><span class="comment"># -t 0, number for retransmission, 0 always retry!</span></span><br></pre></td></tr></table></figure>

<h2 id="run-a-basic-http-server"><a href="#run-a-basic-http-server" class="headerlink" title="run a basic http server"></a>run a basic http server</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python -m http.server 80 <span class="comment">#python3</span></span><br></pre></td></tr></table></figure>

<h2 id="scan-host-on-local-network"><a href="#scan-host-on-local-network" class="headerlink" title="scan host on local network"></a>scan host on local network</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if you know the mac and you are on the local network</span></span><br><span class="line"><span class="comment"># you can easy to know the ip of that host(mac)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># will print IP, MAC</span></span><br><span class="line">$ sudo arp-scan --interface=eth0 --localnet</span><br><span class="line"></span><br><span class="line"><span class="comment"># check if host(ip) opens a specific port</span></span><br><span class="line"><span class="comment"># check RDP port(windows remote desktop port)</span></span><br><span class="line">$ sudo nmap -p 3389 <span class="variable">$IP</span></span><br></pre></td></tr></table></figure>

<h2 id="resize-disk-vm-after-change-its-size"><a href="#resize-disk-vm-after-change-its-size" class="headerlink" title="resize disk(vm) after change its size"></a>resize disk(vm) after change its size</h2><p>Afer you change vm disk by client, the free space of disk can be added to part of disk to expand its size</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo fdisk -l</span><br><span class="line">...</span><br><span class="line">GPT PMBR size mismatch (20971519 != 209715199) will be corrected by w(rite).</span><br><span class="line"></span><br><span class="line">-----new size 100G, old size 10G-----</span><br><span class="line">Disk /dev/sda: 100 GiB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: gpt</span><br><span class="line">Disk identifier: 1C6DFAAE-5BA8-4141-A6CF-953F8D9E871F</span><br><span class="line"></span><br><span class="line">----sda1 still use 10G-----</span><br><span class="line">Device      Start      End  Sectors  Size Type</span><br><span class="line">/dev/sda1  227328 20971486 20744159  9.9G Linux filesystem</span><br><span class="line">/dev/sda14   2048    10239     8192    4M BIOS boot</span><br><span class="line">/dev/sda15  10240   227327   217088  106M EFI System</span><br><span class="line"></span><br><span class="line">$ sudo LANG=en_US.UTF-8 growpart /dev/sda 1</span><br><span class="line">CHANGED: partition=1 start=227328 old: size=20744159 end=20971487 new: size=209487839,end=209715167</span><br><span class="line"></span><br><span class="line">$ sudo fdisk -l</span><br><span class="line">Disk /dev/sda: 100 GiB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: gpt</span><br><span class="line">Disk identifier: 1C6DFAAE-5BA8-4141-A6CF-953F8D9E871F</span><br><span class="line"></span><br><span class="line">----sda1 has 100G, but the new add part should format with fs---</span><br><span class="line">Device      Start       End   Sectors  Size Type</span><br><span class="line">/dev/sda1  227328 209715166 209487839 99.9G Linux filesystem</span><br><span class="line">/dev/sda14   2048     10239      8192    4M BIOS boot</span><br><span class="line">/dev/sda15  10240    227327    217088  106M EFI System</span><br><span class="line"></span><br><span class="line">$ sudo resize2fs /dev/sda1</span><br><span class="line">resize2fs 1.44.1 (24-Mar-2018)</span><br><span class="line">Filesystem at /dev/sda1 is mounted on /; on-line resizing required</span><br><span class="line">old_desc_blocks = 2, new_desc_blocks = 13</span><br><span class="line">The filesystem on /dev/sda1 is now 26185979 (4k) blocks long.</span><br></pre></td></tr></table></figure>
<h2 id="count-line-of-code"><a href="#count-line-of-code" class="headerlink" title="count line of code"></a>count line of code</h2><p>There are lots of tools for counting code, two fast and popular ones, <a href="https://github.com/boyter/scc">scc</a> and <a href="https://github.com/XAMPPRocky/tokei">tokei</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go get -u github.com/boyter/scc/</span><br><span class="line">$ scc [flags] [files or directories]</span><br><span class="line">$ scc .</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────</span><br><span class="line">Language                 Files     Lines   Blanks  Comments     Code Complexity</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────</span><br><span class="line">Go                         113     19031     2746      2181    14104       3360</span><br><span class="line">Markdown                    29      2701      655         0     2046          0</span><br><span class="line">TOML                         2        87       12        32       43          0</span><br><span class="line">Makefile                     1        41        6        17       18          0</span><br><span class="line">Python                       1       112       27         2       83         25</span><br><span class="line">Shell                        1        35        9         2       24          6</span><br><span class="line">Smarty Template              1        25        3         0       22          5</span><br><span class="line">Systemd                      1        19        2         0       17          0</span><br><span class="line">XML                          1         1        0         0        1          0</span><br><span class="line">gitignore                    1         5        0         2        3          0</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────</span><br><span class="line">Total                      151     22057     3460      2236    16361       3396</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────</span><br><span class="line"></span><br><span class="line">$ scc --by-file .</span><br><span class="line">$ scc --exclude-dir vendor .</span><br></pre></td></tr></table></figure>

<h2 id="setup-tcp-x2F-udp-server-with-nc"><a href="#setup-tcp-x2F-udp-server-with-nc" class="headerlink" title="setup tcp&#x2F;udp server with nc"></a>setup tcp&#x2F;udp server with nc</h2><p>nc is command to <strong>setup tcp(tls)&#x2F;udp server or used as tcp&#x2F;udp client</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start tcp server</span></span><br><span class="line">$ nc -lv</span><br><span class="line">nc -lv</span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::31337</span><br><span class="line">Ncat: Listening on 0.0.0.0:31337</span><br><span class="line"></span><br><span class="line"><span class="comment"># send tcp data with nc</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> | nc localhost 31337</span><br></pre></td></tr></table></figure>

<h2 id="check-virtual-disk-real-size"><a href="#check-virtual-disk-real-size" class="headerlink" title="check virtual disk real size"></a>check virtual disk real size</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  use -s option </span></span><br><span class="line"><span class="comment">#  disk size set 10G, but real size is 133M</span></span><br><span class="line">$ <span class="built_in">ls</span> -slh pod-23vmqfdjge-2021-09-08-21-00-07.raw</span><br><span class="line">133M -rw-r--r-- 1 root root 10G Sep  8 20:51 pod-23vmqfdjge-2021-09-08-21-00-07.raw</span><br></pre></td></tr></table></figure>
<h2 id="timezone-and-ntpdate"><a href="#timezone-and-ntpdate" class="headerlink" title="timezone and ntpdate"></a>timezone and ntpdate</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show current timezone</span></span><br><span class="line">$ <span class="built_in">ls</span> -al /etc/localtime</span><br><span class="line">lrwxrwxrwx. 1 root root 35 Sep 14 09:33 /etc/localtime -&gt; ../usr/share/zoneinfo/Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="comment"># OR use command line</span></span><br><span class="line">$ timedatectl status</span><br><span class="line">      Local time: Tue 2021-09-14 09:36:45 CST</span><br><span class="line">  Universal time: Tue 2021-09-14 01:36:45 UTC</span><br><span class="line">        RTC time: Tue 2021-09-14 01:36:51</span><br><span class="line">       Time zone: Asia/Shanghai (CST, +0800)</span><br><span class="line">     NTP enabled: <span class="built_in">yes</span></span><br><span class="line">NTP synchronized: no</span><br><span class="line"> RTC <span class="keyword">in</span> <span class="built_in">local</span> TZ: no</span><br><span class="line">      DST active: n/a</span><br><span class="line"></span><br><span class="line"><span class="comment"># show all available zones</span></span><br><span class="line">$ timedatectl list-timezones</span><br><span class="line"></span><br><span class="line"><span class="comment"># set correct zone</span></span><br><span class="line">$ timedatectl set-timezone Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="comment"># ntpdate will update time with ntpserver to the zone you&#x27;re using</span></span><br><span class="line"><span class="comment"># if you set zone incorrect, the time you get may be not expected.</span></span><br><span class="line">$ ntpdate cn.pool.ntp.org</span><br><span class="line">14 Sep 09:34:01 ntpdate[1524]: adjust time server 124.108.20.1 offset 0.028670 sec</span><br><span class="line"></span><br><span class="line"><span class="comment"># without ntp, set time by date directly, note for web GMT(UTC) is returned!!!</span></span><br><span class="line"><span class="comment"># so must with &#x27;Z&#x27; suffix to convert to local time zone</span></span><br><span class="line">$ <span class="built_in">date</span> -s <span class="string">&quot;<span class="subst">$(curl -H&#x27;Cache-Control:no-cache&#x27; -sI baidu.com | grep &#x27;^Date:&#x27; | cut -d&#x27; &#x27; -f3-6)</span>Z&quot;</span></span><br><span class="line"><span class="comment"># use proxychains for net proxy</span></span><br><span class="line">$ <span class="built_in">date</span> -s <span class="string">&quot;<span class="subst">$(proxychains -q curl -H&#x27;Cache-Control:no-cache&#x27; -sI baidu.com | grep &#x27;^Date:&#x27; | cut -d&#x27; &#x27; -f3-6)</span>Z&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use proxychains for net proxy</span></span><br><span class="line">$ <span class="built_in">date</span> -s <span class="string">&quot;<span class="subst">$(proxychains -q curl -H&#x27;Cache-Control:no-cache&#x27; -sI google.com | grep &#x27;^Date:&#x27; | cut -d&#x27; &#x27; -f3-6)</span>Z&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="ps-aux"><a href="#ps-aux" class="headerlink" title="ps aux"></a>ps aux</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps -aux</span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root         1  0.0  0.0 193888  7052 ?        Ss   08:12   0:01 /usr/lib/systemd/systemd --switched-root --system --deserialize 22</span><br><span class="line">root         2  0.0  0.0      0     0 ?        S    08:12   0:00 [kthreadd]</span><br><span class="line">root         4  0.0  0.0      0     0 ?        S&lt;   08:12   0:00 [kworker/0:0H]</span><br><span class="line">root         6  0.0  0.0      0     0 ?        S    08:12   0:00 [ksoftirqd/0]</span><br><span class="line">root         7  0.0  0.0      0     0 ?        S    08:12   0:00 [migration/0]</span><br><span class="line">root         8  0.0  0.0      0     0 ?        S    08:12   0:00 [rcu_bh]</span><br><span class="line">root         9  0.0  0.0      0     0 ?        S    08:12   0:00 [rcu_sched]</span><br><span class="line"></span><br><span class="line"><span class="comment"># state of process can be in below code</span></span><br><span class="line">D 	Uninterruptible <span class="built_in">sleep</span> (usually IO), <span class="keyword">in</span> kerenl space, can not wake up by signal!!</span><br><span class="line">R 	Running or runnable (on run queue)</span><br><span class="line">S 	Interruptible <span class="built_in">sleep</span> (waiting <span class="keyword">for</span> an event to complete)</span><br><span class="line">T 	Stopped, either by a job control signal(<span class="built_in">kill</span> -STOP <span class="variable">$pid</span>) or because it is being traced.</span><br><span class="line">Z 	Defunct (<span class="string">&quot;zombie&quot;</span>) process, terminated but not reaped by its parent. When a process finishes its task, it `releases the system resources it was using and cleans up its memory`. However,` its entry from the process table is not removed`, and its status is <span class="built_in">set</span> as EXIT_ZOMBIE.</span><br><span class="line"></span><br><span class="line">For BSD formats and when the <span class="built_in">stat</span> keyword is used, additional</span><br><span class="line">characters may be displayed:</span><br><span class="line">&lt;    high-priority (not <span class="built_in">nice</span> to other <span class="built_in">users</span>)</span><br><span class="line">N    low-priority (<span class="built_in">nice</span> to other <span class="built_in">users</span>)</span><br><span class="line">L    has pages locked into memory (<span class="keyword">for</span> real-time and custom IO), never swaped the memory out to disk!!!</span><br><span class="line">s    is a session leader</span><br><span class="line">l    is multi-threaded (using CLONE_THREAD, like NPTL pthreads <span class="keyword">do</span>)</span><br><span class="line">+    is <span class="keyword">in</span> the foreground process group</span><br><span class="line"></span><br><span class="line"><span class="comment"># show more info(backtrace) about D process</span></span><br><span class="line">$ <span class="built_in">echo</span> w &gt; /proc/sysrq-trigger</span><br><span class="line">This <span class="built_in">command</span> produces a report and a list of all processes <span class="keyword">in</span> D state and a full kernel stack trace to /var/log/messages</span><br><span class="line">$ grep <span class="string">&#x27;state:D stack&#x27;</span> /var/log/messages</span><br><span class="line"></span><br><span class="line"><span class="comment"># show all processes id in D state</span></span><br><span class="line">$ ps axl | awk <span class="string">&#x27;$10 ~ /D/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show all processes in Zombine state</span></span><br><span class="line">$ ps axl | awk <span class="string">&#x27;$10 ~ /Z/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show pstree of given process, show tree from 1 to its child with args</span></span><br><span class="line"></span><br><span class="line">$ pstree -ansp 63044</span><br><span class="line">systemd,1 --switched-root --system --deserialize 21</span><br><span class="line">  └─docker-containe,62978 c946e9c0e6845d4496d808c317d20a54086203932d940b103f9705322f4e9308 /var/run/docker/libcontainerd/c946e9c0e6845d4496d808c317d20a54086203932d940b103f9705322f4e9308 /usr/libexec/docker/docker-runc-current</span><br><span class="line">      └─(entry.sh,63044)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pstree -ansp 115764, as you can seee under docker-containe,115764, there are many &#123;docker-containe&#125;,$id which is thread of &#123;docker.containe&#125; process!!!</span></span><br><span class="line">systemd,1 --switched-root --system --deserialize 21</span><br><span class="line">  └─docker-containe,115764 c946e9c0e6845d4496d808c317d20a54086203932d940b103f9705322f4e9308 /var/run/docker/libcontainerd/c946e9c0e6845d4496d808c317d20a54086203932d940b103f9705322f4e9308 /usr/libexec/docker/docker-runc-current</span><br><span class="line">      ├─&#123;docker-containe&#125;,115765</span><br><span class="line">      ├─&#123;docker-containe&#125;,115766</span><br><span class="line">      ├─&#123;docker-containe&#125;,115767</span><br><span class="line">      ├─&#123;docker-containe&#125;,115768</span><br><span class="line">      ├─&#123;docker-containe&#125;,115770</span><br><span class="line">      ├─&#123;docker-containe&#125;,115771</span><br><span class="line">      ├─&#123;docker-containe&#125;,115772</span><br><span class="line">      ├─&#123;docker-containe&#125;,115774</span><br><span class="line">      ├─&#123;docker-containe&#125;,115775</span><br><span class="line">      └─(<span class="built_in">tail</span>,116336)</span><br><span class="line"></span><br><span class="line"><span class="comment"># clear process in D state</span></span><br><span class="line">Reboot, Reboot!</span><br><span class="line"></span><br><span class="line"><span class="comment"># clear process in Z(zombine) state</span></span><br><span class="line">We can’t really <span class="built_in">kill</span> a zombie process since it’s already dead. However, there are a few workarounds we can use to clean up a zombie process</span><br><span class="line">1. Manually send the SIGCHLD signal to the parent of a zombie process, it works only when parent process handles such signal!!! <span class="built_in">kill</span> -s SIGCHLD <span class="variable">$parent_pid</span></span><br><span class="line">2. Kill parent process.</span><br><span class="line"></span><br><span class="line">but <span class="keyword">if</span> the parent process is init(pid 1), so that you can NOT <span class="built_in">kill</span> init</span><br><span class="line">This pretty much leaves you with two options.</span><br><span class="line"></span><br><span class="line">- Manually modify the process table, eg. create a dummy process, <span class="built_in">link</span> the [defunct process] as a child of the dummy, <span class="keyword">then</span> <span class="built_in">kill</span> them off. Quite dangerous, and you may have to manually clean up other process resources such as semaphores and file handles.</span><br><span class="line"></span><br><span class="line">- Reboot the system</span><br></pre></td></tr></table></figure>

<h2 id="cp-without-some-dir"><a href="#cp-without-some-dir" class="headerlink" title="cp without some dir"></a>cp without some dir</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># copy html dir to dev without sites/video</span></span><br><span class="line"><span class="comment"># The the --exclude path is relative to the source directly. Even if you put full absolute path, it will not work</span></span><br><span class="line"><span class="comment"># -v is for verbose, -a is for archive mode which means you want recursion and want to preserve almost everything</span></span><br><span class="line">$ rsync -av --exclude <span class="string">&#x27;sites/video&#x27;</span> /var/www/html /var/www/dev</span><br></pre></td></tr></table></figure>

<h2 id="show-start-time-of-process"><a href="#show-start-time-of-process" class="headerlink" title="show start time of process"></a>show start time of process</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps -eo pid,lstart,cmd</span><br><span class="line"> PID                  STARTED CMD</span><br><span class="line">    1 Mon Jan 24 11:21:04 2022 /usr/lib/systemd/systemd --system --deserialize 15</span><br><span class="line">    2 Mon Jan 24 11:21:04 2022 [kthreadd]</span><br><span class="line">    4 Mon Jan 24 11:21:04 2022 [kworker/0:0H]</span><br><span class="line">    6 Mon Jan 24 11:21:04 2022 [ksoftirqd/0]</span><br><span class="line">    7 Mon Jan 24 11:21:04 2022 [migration/0]</span><br><span class="line">    8 Mon Jan 24 11:21:04 2022 [rcu_bh]</span><br><span class="line">    9 Mon Jan 24 11:21:04 2022 [rcu_sched]</span><br><span class="line">   10 Mon Jan 24 11:21:04 2022 [lru-add-drain]</span><br><span class="line">   11 Mon Jan 24 11:21:04 2022 [watchdog/0]</span><br></pre></td></tr></table></figure>

<h2 id="ls-output-blinking-ls-x2F-proc-x2F-pid-x2F-fd"><a href="#ls-output-blinking-ls-x2F-proc-x2F-pid-x2F-fd" class="headerlink" title="ls output blinking ls &#x2F;proc&#x2F;pid&#x2F;fd"></a>ls output blinking ls &#x2F;proc&#x2F;pid&#x2F;fd</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -al /proc/9358/fd</span><br><span class="line">total 0</span><br><span class="line">dr-x------ 2 root root  0 Jan 28 14:11 .</span><br><span class="line">dr-xr-xr-x 9 root root  0 Jan 28 14:11 ..</span><br><span class="line">lrwx------ 1 root root 64 Jan 28 14:12 0 -&gt; /dev/pts/4</span><br><span class="line">lrwx------ 1 root root 64 Jan 28 14:12 1 -&gt; /dev/pts/4</span><br><span class="line">lrwx------ 1 root root 64 Jan 28 14:11 2 -&gt; /dev/pts/4</span><br><span class="line">lrwx------ 1 root root 64 Jan 28 14:12 3 -&gt; socket:[985807] // inode number</span><br><span class="line"></span><br><span class="line"><span class="comment"># the last line is blinking as, it points to socket not a file on the disk</span></span><br><span class="line"></span><br><span class="line">$ lsof -p 9358</span><br><span class="line">COMMAND  PID USER   FD   TYPE             DEVICE SIZE/OFF     NODE NAME</span><br><span class="line">s       9358 root  cwd    DIR              253,2     4096  2079103 /home/data/tmp</span><br><span class="line">s       9358 root  rtd    DIR              253,0     4096       64 /</span><br><span class="line">s       9358 root  txt    REG              253,2    17240  4216816 /home/data/tmp/s</span><br><span class="line">s       9358 root  mem    REG              253,0  2156592 33841830 /usr/lib64/libc-2.17.so</span><br><span class="line">s       9358 root  mem    REG              253,0   163312 33841791 /usr/lib64/ld-2.17.so</span><br><span class="line">s       9358 root    0u   CHR              136,4      0t0        7 /dev/pts/4</span><br><span class="line">s       9358 root    1u   CHR              136,4      0t0        7 /dev/pts/4</span><br><span class="line">s       9358 root    2u   CHR              136,4      0t0        7 /dev/pts/4</span><br><span class="line">s       9358 root    3u  unix 0xffff8fa41596b740      0t0   985807 /tmp/fd-pass.socket</span><br></pre></td></tr></table></figure>

<h2 id="top-output"><a href="#top-output" class="headerlink" title="top output"></a>top output</h2><p><a href="https://www.booleanworld.com/guide-linux-top-command/#Filtering_through_processes">Top Example</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ top</span><br><span class="line">top - 17:20:52 up  8:15,  6 <span class="built_in">users</span>,  load average: 0.02, 0.03, 0.05</span><br><span class="line">Tasks: 216 total,   1 running, 215 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.0 us,  0.7 sy,  0.0 ni, 99.3 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem :  8172968 total,  3056856 free,  1933172 used,  3182940 buff/cache</span><br><span class="line">KiB Swap:  8257532 total,  8257532 free,        0 used.  5903604 avail Mem </span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                                     </span><br><span class="line">    1 root      20   0  191832   4776   2620 S   0.0  0.1   0:07.57 systemd                                                                                                                                     </span><br><span class="line">    2 root      20   0       0      0      0 S   0.0  0.0   0:00.02 kthreadd                                                                                                                                    </span><br><span class="line">    4 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H                                                                                                                                </span><br><span class="line">    6 root      20   0       0      0      0 S   0.0  0.0   0:01.06 ksoftirqd/0       </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">us - user cpu time (or) % CPU time spent <span class="keyword">in</span> user space</span><br><span class="line">sy - system cpu time (or) % CPU time spent <span class="keyword">in</span> kernel space</span><br><span class="line">ni - user <span class="built_in">nice</span> cpu time (or) % CPU time spent on low priority processes</span><br><span class="line"><span class="built_in">id</span> - idle cpu time (or) % CPU time spent idle</span><br><span class="line">wa - io <span class="built_in">wait</span> cpu time (or) % CPU time spent <span class="keyword">in</span> <span class="built_in">wait</span> (on disk)</span><br><span class="line">hi - hardware irq (or) % CPU time spent servicing/handling hardware interrupts</span><br><span class="line">si - software irq (or) % CPU time spent servicing/handling software interrupts</span><br><span class="line">st - steal time % CPU time <span class="keyword">in</span> involuntary <span class="built_in">wait</span> by virtual cpu <span class="keyword">while</span> hypervisor is servicing another processor (or) % CPU time stolen from a virtual machine</span><br><span class="line"></span><br><span class="line">NOTE: it is aggregate value, <span class="keyword">if</span> you want to check usage <span class="keyword">for</span> each CPU</span><br><span class="line">press  `top` <span class="keyword">then</span> press 1.</span><br><span class="line"></span><br><span class="line">top - 17:22:32 up  8:17,  6 <span class="built_in">users</span>,  load average: 0.00, 0.02, 0.05</span><br><span class="line">Tasks: 216 total,   1 running, 215 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu0  :  0.0 us,  0.0 sy,  0.0 ni,100.0 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu1  :  0.0 us,  0.0 sy,  0.0 ni,100.0 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu2  :  0.0 us,  0.0 sy,  0.0 ni,100.0 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu3  :  0.0 us,  0.0 sy,  0.0 ni,100.0 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu4  :  0.0 us,  0.0 sy,  0.0 ni,100.0 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu5  :  0.3 us,  0.3 sy,  0.0 ni, 99.0 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.3 si,  0.0 st</span><br><span class="line">%Cpu6  :  0.0 us,  0.0 sy,  0.0 ni,100.0 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">%Cpu7  :  0.0 us,  0.0 sy,  0.0 ni,100.0 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem :  8172968 total,  3056468 free,  1933540 used,  3182960 buff/cache</span><br><span class="line">KiB Swap:  8257532 total,  8257532 free,        0 used.  5903236 avail Mem </span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                                     </span><br><span class="line"> 1856 mongod    20   0 1604016 116512  11132 S   0.3  1.4   2:23.77 mongod                                                                                                                                      </span><br><span class="line"> 2148 root      20   0  164024   6480   4952 S   0.3  0.1   0:15.29 sshd              </span><br><span class="line"></span><br><span class="line">NOTE: By default, the top will refresh the output every 3 seconds.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TIPS:</span><br><span class="line">press `c` to show full path</span><br><span class="line">press `o` to filter based on Field.  example(support partial match): COMMAND=libvirt</span><br><span class="line">press `=` to clear filter</span><br><span class="line">press `e` to switch memory unit(kb, mb,gb,tb) <span class="keyword">for</span> mem colums by default is kb</span><br><span class="line"></span><br><span class="line"><span class="comment"># sort by CPU or memory</span></span><br><span class="line">$ top -o %CPU</span><br><span class="line">$ top -o %MEM</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">$ top</span><br><span class="line"><span class="keyword">then</span> press</span><br><span class="line">P</span><br><span class="line">M (RES not VIRT)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add more fields to see</span></span><br><span class="line">TIP:</span><br><span class="line">1 `press f` to show all fields</span><br><span class="line">2 move cursor to the line</span><br><span class="line">3 `press space` to define this line</span><br><span class="line">4 `press right arrow` to select it <span class="keyword">then</span> move the field to righ position</span><br></pre></td></tr></table></figure>

<h2 id="create-iso-file-from-command-line"><a href="#create-iso-file-from-command-line" class="headerlink" title="create iso file from command line"></a>create iso file from command line</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkisofs -o test.iso <span class="variable">$dir</span></span><br></pre></td></tr></table></figure>

<h2 id="setup-proxy-server"><a href="#setup-proxy-server" class="headerlink" title="setup proxy server"></a>setup proxy server</h2><p><a href="https://phoenixnap.com/kb/install-squid-proxy-server-centos">squid proxy</a></p>
<h2 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h2><p>change swap size by map it to a swap file <a href="https://linuxize.com/post/create-a-linux-swap-file/">setup swap file</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check current swap size</span></span><br><span class="line"><span class="variable">$free</span> -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:            31G        5.5G         25G        8.7M        870M         25G</span><br><span class="line">Swap:           31G          0B         31G</span><br><span class="line"></span><br><span class="line"><span class="variable">$swapon</span> -v</span><br><span class="line">NAME      TYPE      SIZE USED PRIO</span><br><span class="line">/dev/dm-1 partition  32G   0B   -2</span><br><span class="line"></span><br><span class="line"><span class="comment"># check trend that swap is used from global, each cgroup can change it within that group</span></span><br><span class="line"><span class="variable">$cat</span> /proc/sys/vm/swappiness</span><br><span class="line"></span><br><span class="line"><span class="comment"># temporary disable/enable swap</span></span><br><span class="line"><span class="variable">$swapon</span> -a</span><br><span class="line"><span class="comment"># when swap is off, all data in swap(disk) will be swap in to memory!!! if not enough memory is avaiable, swapoff will fail with &#x27;can </span></span><br><span class="line"><span class="variable">$swapoff</span> -a</span><br></pre></td></tr></table></figure>

<h2 id="Set-process-prority"><a href="#Set-process-prority" class="headerlink" title="Set process prority"></a>Set process prority</h2><p>Priority value(PRI) — The priority value is the<code> process’s actual priority which is used by the Linux kernel</code> to schedule a task.<br>In Linux system priorities are<code> 0 to 139 in which 0 to 99 for real-time and 100 to 139 for users</code>.</p>
<p>Nice value(NI) — Nice values are <code>user-space values that we can use to control the priority of a process</code>. The nice value range is <code>-20 to +19</code> where -20 is highest, 0 default and +19 is lowest.</p>
<p><strong>The relation between nice value and priority is as such</strong><br><code>Priority_value = Nice_value + 20</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nice value(NI) can be range -20(highest) to 19(lowest)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start process with nice value, threads will inherited parent&#x27;s nice value</span></span><br><span class="line">$ <span class="built_in">nice</span> -5 ./app arg1</span><br><span class="line"></span><br><span class="line"><span class="comment"># change nice value after process starts(only change 1055, not it&#x27;s children)</span></span><br><span class="line">$ renice -n -10  -p 1055</span><br><span class="line"><span class="comment"># renice process which has multi-threads</span></span><br><span class="line">$ renice -n -10 -p `ps --no-heading -Lo tid 1055`</span><br></pre></td></tr></table></figure>

<h2 id="split-large-file-into-smaller-ones"><a href="#split-large-file-into-smaller-ones" class="headerlink" title="split large file into smaller ones"></a>split large file into smaller ones</h2><p>Some website does not allow to upload larger file, split it into smaller ones.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -d use digital sufffix</span></span><br><span class="line"><span class="comment"># -a one digital</span></span><br><span class="line"><span class="comment"># centos. as prefix</span></span><br><span class="line">$ <span class="built_in">split</span> -b 1G CentOS-7-x86_64-GenericCloud.qcow2 -d -a 1 centos.</span><br><span class="line">centos.0  centos.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># combine them to orignal one</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> not &gt;&gt;</span></span><br><span class="line">$ <span class="built_in">cat</span> centos.* &gt; CentOS-7-x86_64-GenericCloud.qcow2</span><br></pre></td></tr></table></figure>

<h2 id="setup-ftp-server-centos"><a href="#setup-ftp-server-centos" class="headerlink" title="setup ftp server (centos)"></a>setup ftp server (centos)</h2><p>The difference for modes is who is the initialator for data connection, <code>for active mode, server always use 20 as the source port.</code></p>
<p><img src="https://ipcisco.com/wp-content/uploads/2021/01/ftp-active-mode-ipcisco.jpg" alt="ftp active mode"></p>
<hr>
<p>In passive mode, the client uses the control connection to send a PASV command to the server and then receives a server IP address and server port number from the server, which the client then uses to open a data connection from an arbitrary client port to the server IP address and server port number received. </p>
<p><img src="https://ipcisco.com/wp-content/uploads/2021/01/ftp-passive-mode-ipcisco.jpg" alt="ftp passive mode"></p>
<p><strong>vsftpd</strong></p>
<p>By default, vsftpd allows local users to login in and switch to its $HOME</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install vsftpd</span><br><span class="line">$ service vsftpd start</span><br><span class="line"></span><br><span class="line"><span class="comment"># edit /etc/vsftpd/vsftpd.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use virtual HOME for local user not $HOME/$USER</span></span><br><span class="line"><span class="comment"># https://www.ryadel.com/en/vsftpd-configure-different-home-folder-each-user-specific-directory/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># test it</span></span><br><span class="line"></span><br><span class="line">$ yum install -y ftp</span><br><span class="line"><span class="comment"># standard port 21 for ftp</span></span><br><span class="line">$ ftp localhost</span><br><span class="line"></span><br><span class="line"><span class="comment"># open on different port</span></span><br><span class="line">$ ftp</span><br><span class="line">ftp&gt;open localhost 6621</span><br></pre></td></tr></table></figure>

<p><img src="https://images.prismic.io/exavault-website/be48decc-2108-4c33-b6f6-ab8bdffb2b6b_essential-ftp-commands.png?auto=compress,format"></p>
<h2 id="ps-command-advanced"><a href="#ps-command-advanced" class="headerlink" title="ps command advanced"></a>ps command advanced</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fields of aux</span></span><br><span class="line">USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line"></span><br><span class="line"><span class="comment"># show top 5 cpu usage processes</span></span><br><span class="line">$ ps aux --<span class="built_in">sort</span> -%cpu| <span class="built_in">head</span> -n 6</span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">openvsw+  1353  0.6  0.1 1220748 51412 ?       S&lt;Lsl 17:44   0:28 ovs-vswitchd unix:/var/run/openvswitch/db.sock -vconsole:emer -vsyslog:err -vfile:info --mlockall --user openvswitch:openvswitch --no-chdir --log-file=/var/log/openvswitch/ovs-vswitchd.log --pidfile=/var/run/openvswitch/ovs-vswitchd.pid --detach</span><br><span class="line">mysql     2086  0.2  1.1 1980300 389644 ?      Ssl  17:44   0:11 /usr/sbin/mysqld</span><br><span class="line">root         1  0.0  0.0 191528  4520 ?        Ss   17:44   0:01 /usr/lib/systemd/systemd --switched-root --system --deserialize 22</span><br><span class="line">root         2  0.0  0.0      0     0 ?        S    17:44   0:00 [kthreadd]</span><br><span class="line">root         4  0.0  0.0      0     0 ?        S&lt;   17:44   0:00 [kworker/0:0H]</span><br><span class="line"></span><br><span class="line"><span class="comment"># show the first 5 memory usage processes, by default memory unit is KB!!!</span></span><br><span class="line">$ ps aux --<span class="built_in">sort</span> -%mem | <span class="built_in">head</span> -n 6</span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">mysql     2086  0.2  1.1 1980300 389644 ?      Ssl  17:44   0:11 /usr/sbin/mysqld</span><br><span class="line">root      1796  0.0  0.2 274540 76708 ?        S    17:44   0:02 /home/data/Anaconda3/envs/py3.9/bin/python3.9 /home/data/Anaconda3/envs/py3.9/bin/jupyter-notebook -y --no-browser --allow-root --ip=172.17.0.2 --port=8080 --notebook-dir=/home/data/jupyter</span><br><span class="line">openvsw+  1353  0.6  0.1 1220748 51412 ?       S&lt;Lsl 17:44   0:28 ovs-vswitchd unix:/var/run/openvswitch/db.sock -vconsole:emer -vsyslog:err -vfile:info --mlockall --user openvswitch:openvswitch --no-chdir --log-file=/var/log/openvswitch/ovs-vswitchd.log --pidfile=/var/run/openvswitch/ovs-vswitchd.pid --detach</span><br><span class="line">root      1794  0.0  0.0 574288 17504 ?        Ssl  17:44   0:00 /usr/bin/python2 -Es /usr/sbin/tuned -l -P</span><br><span class="line">polkitd   1060  0.0  0.0 614316 11136 ?        Ssl  17:44   0:00 /usr/lib/polkit-1/polkitd --no-debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># show thread info of given process</span></span><br><span class="line"><span class="comment"># -L Show threads, possibly with LWP and NLWP columns.</span></span><br><span class="line">$ ps -Lf 13430</span><br><span class="line">UID        PID  PPID   LWP  C NLWP STIME TTY      STAT   TIME CMD</span><br><span class="line">root     13430 13429 13430  0   11 Jun20 ?        Ssl    0:32 node --no-warnings /root/.vim/bundle/coc.nvim/build/index.js</span><br><span class="line">root     13430 13429 13431  0   11 Jun20 ?        Ssl    0:00 node --no-warnings /root/.vim/bundle/coc.nvim/build/index.js</span><br><span class="line">root     13430 13429 13432  0   11 Jun20 ?        Ssl    0:00 node --no-warnings /root/.vim/bundle/coc.nvim/build/index.js</span><br><span class="line">root     13430 13429 13433  0   11 Jun20 ?        Ssl    0:00 node --no-warnings /root/.vim/bundle/coc.nvim/build/index.js</span><br><span class="line">root     13430 13429 13434  0   11 Jun20 ?        Ssl    0:00 node --no-warnings /root/.vim/bundle/coc.nvim/build/index.js</span><br><span class="line">root     13430 13429 13435  0   11 Jun20 ?        Ssl    0:00 node --no-warnings /root/.vim/bundle/coc.nvim/build/index.js</span><br><span class="line">root     13430 13429 13436  0   11 Jun20 ?        Ssl    0:00 node --no-warnings /root/.vim/bundle/coc.nvim/build/index.js</span><br><span class="line">root     13430 13429 13479  0   11 Jun20 ?        Ssl    0:00 node --no-warnings /root/.vim/bundle/coc.nvim/build/index.js</span><br><span class="line">root     13430 13429 13480  0   11 Jun20 ?        Ssl    0:00 node --no-warnings /root/.vim/bundle/coc.nvim/build/index.js</span><br><span class="line">root     13430 13429 13481  0   11 Jun20 ?        Ssl    0:00 node --no-warnings /root/.vim/bundle/coc.nvim/build/index.js</span><br><span class="line">root     13430 13429 13482  0   11 Jun20 ?        Ssl    0:00 node --no-warnings /root/.vim/bundle/coc.nvim/build/index.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># show thread name of a process</span></span><br><span class="line">$ ps -L -o tid,pid,<span class="built_in">comm</span> 19562</span><br><span class="line">  PID   TID COMMAND</span><br><span class="line">19562 19562 qemu-kvm</span><br><span class="line">19562 19565 qemu-kvm</span><br><span class="line">19562 19566 qemu-kvm</span><br><span class="line">19562 19567 IO iothread1</span><br><span class="line">19562 19571 CPU 0/KVM</span><br><span class="line">19562 19572 CPU 1/KVM</span><br><span class="line">19562 19574 vnc_worker</span><br><span class="line"></span><br><span class="line"><span class="comment"># show custom output and more </span></span><br><span class="line">$ ps -eo user,pid,ppid,%cpu,%mem,vsz,rss,pri,ni,start,time,cmd</span><br><span class="line">USER       PID  PPID %CPU %MEM    VSZ   RSS PRI  NI  STARTED     TIME CMD</span><br><span class="line">root         1     0  0.0  0.0 191528  3216  19   0   Jan 11 00:00:09 /usr/lib/systemd/systemd --switched-root --system --deserialize 22</span><br><span class="line">root         2     0  0.0  0.0      0     0  19   0   Jan 11 00:00:00 [kthreadd]</span><br><span class="line">root         4     2  0.0  0.0      0     0  39 -20   Jan 11 00:00:00 [kworker/0:0H]</span><br><span class="line">root         6     2  0.0  0.0      0     0  19   0   Jan 11 00:00:03 [ksoftirqd/0]</span><br><span class="line">root         7     2  0.0  0.0      0     0 139   -   Jan 11 00:00:00 [migration/0]</span><br><span class="line">root         8     2  0.0  0.0      0     0  19   0   Jan 11 00:00:00 [rcu_bh]</span><br><span class="line"></span><br><span class="line"><span class="comment"># custom fields with sorting</span></span><br><span class="line">$ ps -eo user,pid,ppid,%cpu,%mem,vsz,rss,pri,ni,start,time,cmd --<span class="built_in">sort</span>=%cpu</span><br><span class="line">$ ps -eo user,pid,ppid,%cpu,%mem,vsz,rss,pri,ni,start,time,cmd --<span class="built_in">sort</span>=%mem</span><br><span class="line"></span><br><span class="line"><span class="comment"># The &quot;+&quot; is optional since default direction is increasing numerical or lexicographic order</span></span><br><span class="line">$ ps -eo user,pid,ppid,%cpu,%mem,vsz,rss,pri,ni,start,time,cmd --<span class="built_in">sort</span>=+rss</span><br><span class="line">$ ps -eo user,pid,ppid,%cpu,%mem,vsz,rss,pri,ni,start,time,cmd --<span class="built_in">sort</span>=rss</span><br><span class="line"></span><br><span class="line"><span class="comment"># top five memory usage process</span></span><br><span class="line">$ ps -eo user,pid,ppid,%cpu,%mem,vsz,rss,pri,ni,start,time,cmd --<span class="built_in">sort</span>=-rss | <span class="built_in">head</span> -6</span><br><span class="line"></span><br><span class="line"><span class="comment"># show memory in MB unit(format field 7) only support format one field by numfmt!!</span></span><br><span class="line">$ ps -eo user,pid,ppid,%cpu,%mem,vsz,rss,pri,ni,start,time,cmd --<span class="built_in">sort</span>=-rss  | <span class="built_in">numfmt</span> --header --field 7 --to=iec --from-unit=1024</span><br><span class="line"></span><br><span class="line"><span class="comment"># show rss field value(default unit KB) only</span></span><br><span class="line"><span class="variable">$ps</span> -q 1354 -o rss=</span><br><span class="line">51464</span><br><span class="line"><span class="comment"># show given process only</span></span><br><span class="line">$ ps -fp <span class="variable">$pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># there  are two process PID 1 and PID 2 which have no parent!</span></span><br><span class="line"><span class="comment"># all user processes are child of PID 1</span></span><br><span class="line"><span class="comment"># all kernel processes are child of PID 2</span></span><br><span class="line"><span class="comment"># UID         PID   PPID  C STIME TTY          TIME CMD</span></span><br><span class="line"><span class="comment"># root          1      0  0 Mar08 ?        00:00:59 /usr/lib/systemd/systemd --switched-root --system --deserialize 21</span></span><br><span class="line"><span class="comment"># root          2      0  0 Mar08 ?        00:00:02 [kthreadd]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># only show user application process not kernel thread</span></span><br><span class="line">$ ps -ef | awk <span class="string">&#x27;$3!=&quot;2&quot; &#123;print $0&#125;&#x27;</span></span><br><span class="line"><span class="comment"># only show kernel thread</span></span><br><span class="line">$ ps -ef | awk <span class="string">&#x27;$3==&quot;2&quot; &#123;print $0&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="sort-command-advaned"><a href="#sort-command-advaned" class="headerlink" title="sort command advaned"></a>sort command advaned</h2><p>refer to <a href="https://www.cnblogs.com/51linux/archive/2012/05/23/2515299.html">sort example</a></p>
<h2 id="run-python-service-from-virtual-env"><a href="#run-python-service-from-virtual-env" class="headerlink" title="run python service from virtual env"></a>run python service from virtual env</h2><p>Edit your serivce file like this</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /root/py3.8 is virtual env</span></span><br><span class="line">$ <span class="built_in">cat</span> /etc/systemd/system/test.service</span><br><span class="line">...</span><br><span class="line">ExecStart=/root/py3.8/bin/python /root/me/auto-tools/tool/web.py &amp;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># reload service file</span></span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ service <span class="built_in">test</span> restart</span><br></pre></td></tr></table></figure>

<h2 id="encrypt-a-file"><a href="#encrypt-a-file" class="headerlink" title="encrypt a file"></a>encrypt a file</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y gnupg</span><br><span class="line"><span class="comment"># prompt to input password for encryption</span></span><br><span class="line">$ gpg  --cipher-algo AES256 -c file</span><br><span class="line">$ gpg -d file.gpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># with output file</span></span><br><span class="line">$ gpg -o encrypt --cipher-algo AES256 -c file</span><br><span class="line">$ gpg -o file -d encrypt</span><br></pre></td></tr></table></figure>

<h2 id="disable-cpu-without-reboot-system"><a href="#disable-cpu-without-reboot-system" class="headerlink" title="disable cpu without reboot system"></a>disable cpu without reboot system</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">###########One way############################</span></span><br><span class="line">$ chcpu -d 1-10</span><br><span class="line">$ chcpu -d 1</span><br><span class="line">$ chcpu -e 1</span><br><span class="line"></span><br><span class="line"><span class="comment">###########One way############################</span></span><br><span class="line">$ <span class="built_in">echo</span> 0 &gt; /sys/devices/system/cpu/cpu1/online</span><br><span class="line">$ <span class="built_in">echo</span> 1 &gt; /sys/devices/system/cpu/cpu1/online</span><br><span class="line"></span><br><span class="line"><span class="comment"># show online processor</span></span><br><span class="line">$ grep processor /proc/cpuinfo</span><br></pre></td></tr></table></figure>

<h2 id="show-hardware-meta"><a href="#show-hardware-meta" class="headerlink" title="show hardware meta"></a>show hardware meta</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lshw</span><br><span class="line">    description: Rack Mount Chassis</span><br><span class="line">    product: PowerEdge R630 (SKU=NotProvided;ModelName=PowerEdge R630)</span><br><span class="line">    vendor: Dell</span><br><span class="line">    serial: 91TYB72</span><br><span class="line">    width: 64 bits</span><br><span class="line">    capabilities: smbios-2.8 dmi-2.8 vsyscall32</span><br><span class="line">    configuration: boot=normal chassis=rackmount sku=SKU=NotProvided;ModelName=PowerEdge R630 uuid=44454C4C-3100-1054-8059-B9C04F423732</span><br><span class="line">  *-core</span><br><span class="line">       description: Motherboard</span><br><span class="line">       product: 0CNCJW</span><br><span class="line">       vendor: Dell</span><br><span class="line">       physical <span class="built_in">id</span>: 0</span><br><span class="line">       version: A08</span><br><span class="line">       serial: .91TYB72.CN747515840576.</span><br><span class="line">     *-firmware</span><br><span class="line">          description: BIOS</span><br><span class="line">          vendor: Dell</span><br><span class="line">          physical <span class="built_in">id</span>: 0</span><br><span class="line">          version: 1.3.6</span><br><span class="line">          <span class="built_in">date</span>: 06/03/2015</span><br><span class="line">          size: 64KiB</span><br><span class="line">          capacity: 15MiB</span><br><span class="line">          capabilities: isa pci pnp upgrade shadowing cdboot bootselect edd int13floppytoshiba int13floppy360 int13floppy1200 int13floppy720 int9keyboard int14serial int10video acpi usb biosbootspecification netboot uefi</span><br><span class="line">     *-cpu:0</span><br><span class="line">          description: CPU</span><br><span class="line">          product: Xeon</span><br><span class="line">          vendor: Intel Corp.</span><br><span class="line">          physical <span class="built_in">id</span>: 400</span><br><span class="line">          bus info: cpu@0</span><br><span class="line">          version: Intel(R) Xeon(R) CPU E5-2640 v3 @ 2.60GHz</span><br><span class="line">          slot: CPU1</span><br><span class="line">          size: 2600MHz</span><br><span class="line">          capacity: 4GHz</span><br><span class="line">          width: 64 bits</span><br><span class="line">          clock: 3705MHz</span><br><span class="line">... more</span><br><span class="line"></span><br><span class="line">$ lshw -class disk</span><br><span class="line">  *-disk:0                </span><br><span class="line">       description: SCSI Disk</span><br><span class="line">       product: PERC H730 Mini</span><br><span class="line">       vendor: DELL</span><br><span class="line">       physical <span class="built_in">id</span>: 2.0.0</span><br><span class="line">       bus info: scsi@0:2.0.0</span><br><span class="line">       logical name: /dev/sda</span><br><span class="line">       version: 4.25</span><br><span class="line">       serial: 009bf0a4080e81572100a1d44820844a</span><br><span class="line">       size: 558GiB (599GB)</span><br><span class="line">       capabilities: partitioned partitioned:dos</span><br><span class="line">       configuration: ansiversion=5 logicalsectorsize=512 sectorsize=512 signature=000ddb8f</span><br></pre></td></tr></table></figure>

<h2 id="use-x2F-dev-x2F-urandom"><a href="#use-x2F-dev-x2F-urandom" class="headerlink" title="use &#x2F;dev&#x2F;urandom"></a>use &#x2F;dev&#x2F;urandom</h2><p>It’s a file like device, so you can do things like cat it or copy from it</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 4K of random bytes</span></span><br><span class="line">$ <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/urandom of=~/urandom_test count=4 bs=1024</span><br><span class="line"></span><br><span class="line"><span class="comment"># quit until ctrl + c</span></span><br><span class="line">$ <span class="built_in">cat</span> /dev/urandom &gt; ~/urandom_test2 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 30 lines of random</span></span><br><span class="line">$ <span class="built_in">head</span> -30 /dev/urandom &gt; ~/urandom_test3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 30 bytes of random</span></span><br><span class="line"><span class="built_in">head</span> -c 30 /dev/urandom &gt; random.bytes</span><br></pre></td></tr></table></figure>

<h2 id="no-space-left-on-system"><a href="#no-space-left-on-system" class="headerlink" title="no space left on system"></a>no space left on system</h2><p>There are two possible reasons that may cause this.</p>
<ul>
<li>no enough space</li>
<li>no enough inode</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># disk which disk is full</span></span><br><span class="line">$ <span class="built_in">df</span> -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs        440M     0  440M   0% /dev</span><br><span class="line">tmpfs           464M     0  464M   0% /dev/shm</span><br><span class="line">tmpfs           464M   13M  451M   3% /run</span><br><span class="line">tmpfs           464M     0  464M   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1       8.0G  1.1G  7.0G  14% /</span><br><span class="line">tmpfs           119M     0  119M   0% /run/user/0</span><br><span class="line"><span class="comment"># inside that disk, check whih dir uses the much space</span></span><br><span class="line">$ <span class="built_in">cd</span> /home/data</span><br><span class="line">$ <span class="built_in">du</span> -h -d 1</span><br><span class="line">7.0G    ./Anaconda3</span><br><span class="line">0       ./jupyter</span><br><span class="line">23G     ./github</span><br><span class="line">3.3G    ./tmp</span><br><span class="line">1.6G    ./onedrive</span><br><span class="line">34G     .</span><br><span class="line"></span><br><span class="line"><span class="comment"># inode</span></span><br><span class="line">$ <span class="built_in">df</span> -i</span><br><span class="line">Filesystem                  Inodes IUsed IFree IUse% Mounted on</span><br><span class="line">devtmpfs                      2.0M   451  2.0M    1% /dev</span><br><span class="line">tmpfs                         2.0M     2  2.0M    1% /dev/shm</span><br><span class="line">tmpfs                         2.0M   721  2.0M    1% /run</span><br><span class="line">tmpfs                         2.0M    16  2.0M    1% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos_dev-root    50M  363K   50M    1% /</span><br><span class="line">/dev/mapper/centos_dev-home   150M  580K  150M    1% /home</span><br><span class="line">/dev/mapper/centos_dev-var     25M   90K   25M    1% /var</span><br><span class="line">/dev/sda1                     150K   370  150K    1% /boot</span><br><span class="line">tmpfs                         2.0M   366  2.0M    1% /run/user/0</span><br><span class="line">overlay                        25M   90K   25M    1% /var/lib/docker/overlay2/bec9168000402c04316e112d231a51fa1ba120b7e09c5ab65014b80f3161b6b6/merged</span><br><span class="line"></span><br><span class="line"><span class="comment"># to see inodes used for each subdir</span></span><br><span class="line">$ find . -xdev | <span class="built_in">cut</span> -d <span class="string">&quot;/&quot;</span> -f 2 | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -n -r | <span class="built_in">head</span> -10</span><br><span class="line">285913 Anaconda3</span><br><span class="line">226484 github</span><br><span class="line">   760 onedrive</span><br><span class="line">    11 tmp</span><br><span class="line">    11 jupyter</span><br></pre></td></tr></table></figure>

<h2 id="systemd-socket-activation"><a href="#systemd-socket-activation" class="headerlink" title="systemd socket activation"></a>systemd socket activation</h2><p><a href="https://rocketeer.be/articles/deploying-node-js-with-systemd/">how socket activation works</a> and <a href="http://0pointer.de/blog/projects/socket-activation.html">systemd for developer</a></p>
<h1 id="lsmem-and-free-show-different-total-memory"><a href="#lsmem-and-free-show-different-total-memory" class="headerlink" title="lsmem and free show different total memory"></a>lsmem and free show different <code>total</code> memory</h1><p><code>lsmem</code> lists memory blocks and their state; <code>these reflect physical memory and are counted in units of memory blocks</code>, i.e. 128MiB on your system. To do this, lsmem reads information made available by the kernel in <code>/sys/devices/system/memory</code>. On your system, the kernel tracks 64 memory blocks for a total of 8GiB.</p>
<p><code>free</code> lists memory that’s usable by the system; <strong>“total” is the amount of physical memory, minus memory reserved by the system (for the firmware’s purposes mostly) and the kernel’s executable code</strong>. free reads this information from &#x2F;proc&#x2F;meminfo.</p>
<h2 id="get-two-side-of-established-STREAM-socket"><a href="#get-two-side-of-established-STREAM-socket" class="headerlink" title="get two side of established STREAM socket"></a>get two side of established STREAM socket</h2><p>STREAM socket can be over TCP or unix, for TCP, it’s easy to get it, here we foucus on UNIX STREAM socket with <code>ss</code> command.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">State      Recv-Q Send-Q Local Address:Port              Peer Address:Port                <span class="built_in">local</span> process <span class="built_in">who</span> uses <span class="built_in">local</span> address          </span><br><span class="line"><span class="comment"># -t for tcp</span></span><br><span class="line"><span class="comment"># -x for udp</span></span><br><span class="line"><span class="comment"># -p show process name and id</span></span><br><span class="line"><span class="variable">$ss</span> -tp | grep libvirtd</span><br><span class="line">ESTAB      0      0      172.17.0.2:55758                172.17.0.3:16508                 <span class="built_in">users</span>:((<span class="string">&quot;libvirtd&quot;</span>,pid=5056,fd=22))</span><br><span class="line"></span><br><span class="line"><span class="comment"># for unix established socket</span></span><br><span class="line"><span class="comment"># stream client side: Peer Address is *, Port is unix socket inode, same thing for local address and port as well</span></span><br><span class="line"><span class="comment"># stream server side: Peer Address is *, Port is unix socket inode, while local address is unix path, port is unix socket inode</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># as you can see virsh use unix socket(254243) to connect peer who uses 254245 unix socket</span></span><br><span class="line"><span class="variable">$ss</span> -xp | grep virsh</span><br><span class="line">u_str  ESTAB      0      0       * 254243                * 254245                <span class="built_in">users</span>:((<span class="string">&quot;virsh&quot;</span>,pid=11049,fd=6))</span><br><span class="line"></span><br><span class="line"><span class="comment"># it&#x27;s clear</span></span><br><span class="line"><span class="comment"># virsh connects with libivrt on path /var/run/libvirt/libvirt-sock </span></span><br><span class="line"><span class="variable">$ss</span> -xp | grep 254245</span><br><span class="line">u_str  ESTAB      0      0      /var/run/libvirt/libvirt-sock 254245                * 254243                <span class="built_in">users</span>:((<span class="string">&quot;libvirtd&quot;</span>,pid=5056,fd=21))</span><br><span class="line">u_str  ESTAB      0      0       * 254243                * 254245                <span class="built_in">users</span>:((<span class="string">&quot;virsh&quot;</span>,pid=11049,fd=6))</span><br></pre></td></tr></table></figure>

<h2 id="change-PS1-env"><a href="#change-PS1-env" class="headerlink" title="change PS1 env"></a>change PS1 env</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># \u    ---&gt;user</span></span><br><span class="line"><span class="comment"># \h    ---&gt;hostanme</span></span><br><span class="line">[root@A04-R08-I138-44-3G1ZBS2 ~] $ <span class="built_in">echo</span> <span class="variable">$PS1</span></span><br><span class="line">[\u@\h \W]\$</span><br><span class="line"></span><br><span class="line">[root@A04-R08-I138-44-3G1ZBS2 ~] $ <span class="built_in">export</span> PS1=<span class="string">&quot;[\u@node-debug \W]$ &quot;</span></span><br><span class="line">[root@node-debug ~]$</span><br></pre></td></tr></table></figure>

<h2 id="rpm-command-hangs"><a href="#rpm-command-hangs" class="headerlink" title="rpm command hangs"></a>rpm command hangs</h2><p>rpm may be waiting for a lock to be freed.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps -ef | grep rpm </span><br><span class="line">$ <span class="built_in">kill</span> -9 <span class="variable">$output_above</span></span><br><span class="line">$/bin/rm -rf /var/lib/rpm/__db.0*</span><br><span class="line"></span><br><span class="line"><span class="comment"># Then try your rpm command again. If it still doesn&#x27;t work, repeat as above</span></span><br><span class="line"><span class="comment"># but then also run rpm --rebuilddb before trying your rpm command again.</span></span><br></pre></td></tr></table></figure>

<h2 id="proxy-setting"><a href="#proxy-setting" class="headerlink" title="proxy setting"></a>proxy setting</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># global setting, this works only when application use such environment variable</span></span><br><span class="line">$ <span class="built_in">cat</span> ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&#x27;http://10.226.198.162:3128&#x27;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&#x27;http://10.226.198.162:3128&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># application provides its own way for proxy</span></span><br><span class="line"><span class="comment"># git proxy</span></span><br><span class="line">$ git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line">$ git config --global https.proxy https://127.0.0.1:1080</span><br><span class="line">$ git config --global http.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br><span class="line">$ git config --global https.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br><span class="line">$ git config --global --<span class="built_in">unset</span> http.proxy/su</span><br><span class="line">$ git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm proxy</span></span><br><span class="line">$ npm config <span class="built_in">set</span> proxy  http://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker proxy</span></span><br><span class="line">$ <span class="built_in">mkdir</span> -p /etc/systemd/system/docker.service.d</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">touch</span>  /etc/systemd/system/docker.service.d/http-proxy.conf</span><br><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://user01:password@10.10.10.10:8080/&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=https://user01:password@10.10.10.10:8080/&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;NO_PROXY= hostname.example.com,172.10.10.10&quot;</span></span><br><span class="line"></span><br><span class="line">$ systemctl show docker --property Environment</span><br><span class="line"></span><br><span class="line"><span class="comment"># go proxy</span></span><br><span class="line">$ go <span class="built_in">env</span></span><br><span class="line">GOPROXY=<span class="string">&quot;https://goproxy.io,direct&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yum proxy</span></span><br><span class="line">$ <span class="built_in">cat</span> /etc/yum.conf</span><br><span class="line">[main]</span><br><span class="line">proxy=http://192.226.198.162:3128</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip proxy or set global HTTP_PROXY</span></span><br><span class="line">$ pip install --proxy http://user:password@proxyserver:port TwitterApi</span><br><span class="line"></span><br><span class="line"><span class="comment"># proxychains to force any application to use proxy</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> it supports TCP only (no UDP/ICMP etc).</span></span><br><span class="line">$ yum install proxychains-ng</span><br><span class="line">$ <span class="built_in">cat</span> /etc/proxychains.conf</span><br><span class="line">strict_chain</span><br><span class="line">proxy_dns</span><br><span class="line">remote_dns_subnet 224</span><br><span class="line">tcp_read_time_out 15000</span><br><span class="line">tcp_connect_time_out 8000</span><br><span class="line">[ProxyList]</span><br><span class="line">http 192.226.136.231 3128</span><br><span class="line"><span class="comment"># then run app this way</span></span><br><span class="line">$ proxychains pip install ipvsd</span><br></pre></td></tr></table></figure>

<h2 id="process-limits"><a href="#process-limits" class="headerlink" title="process limits"></a>process limits</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># global setting(default for process, but can be reset by process)</span></span><br><span class="line">$ <span class="built_in">ulimit</span> -a</span><br><span class="line">core file size          (blocks, -c) 0</span><br><span class="line">data seg size           (kbytes, -d) unlimited</span><br><span class="line">scheduling priority             (-e) 0</span><br><span class="line">file size               (blocks, -f) unlimited</span><br><span class="line">pending signals                 (-i) 1030598</span><br><span class="line">max locked memory       (kbytes, -l) 64</span><br><span class="line">max memory size         (kbytes, -m) unlimited</span><br><span class="line">open files                      (-n) 102400</span><br><span class="line">pipe size            (512 bytes, -p) 8</span><br><span class="line">POSIX message queues     (bytes, -q) 819200</span><br><span class="line">real-time priority              (-r) 0</span><br><span class="line">stack size              (kbytes, -s) 10240</span><br><span class="line">cpu time               (seconds, -t) unlimited</span><br><span class="line">max user processes              (-u) 307200</span><br><span class="line">virtual memory          (kbytes, -v) unlimited</span><br><span class="line">file locks                      (-x) unlimited</span><br><span class="line"></span><br><span class="line"><span class="comment"># real limits of each process</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> /proc/116446/limits</span><br><span class="line">Limit                     Soft Limit           Hard Limit           Units     </span><br><span class="line">Max cpu time              unlimited            unlimited            seconds   </span><br><span class="line">Max file size             unlimited            unlimited            bytes     </span><br><span class="line">Max data size             unlimited            unlimited            bytes     </span><br><span class="line">Max stack size            10485760             20971520             bytes     </span><br><span class="line">Max core file size        0                    unlimited            bytes     </span><br><span class="line">Max resident <span class="built_in">set</span>          unlimited            unlimited            bytes     </span><br><span class="line">Max processes             307200               307200               processes </span><br><span class="line">Max open files            204800               204800               files     </span><br><span class="line">Max locked memory         65536                65536                bytes     </span><br><span class="line">Max address space         unlimited            unlimited            bytes     </span><br><span class="line">Max file locks            unlimited            unlimited            locks     </span><br><span class="line">Max pending signals       1030598              1030598              signals   </span><br><span class="line">Max msgqueue size         819200               819200               bytes     </span><br><span class="line">Max <span class="built_in">nice</span> priority         0                    0                    </span><br><span class="line">Max realtime priority     0                    0                    </span><br><span class="line">Max realtime <span class="built_in">timeout</span>      unlimited            unlimited            us      </span><br></pre></td></tr></table></figure>

<h2 id="random-lines"><a href="#random-lines" class="headerlink" title="random lines"></a>random lines</h2><p>use <code>shuf</code> to write a random permutation of the input lines to standard output.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># standoutput</span></span><br><span class="line">$ <span class="built_in">shuf</span> new.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># file as output</span></span><br><span class="line">$ <span class="built_in">shuf</span> new.txt -o random.txt</span><br></pre></td></tr></table></figure>

<h2 id="pgrep-vs-pidof"><a href="#pgrep-vs-pidof" class="headerlink" title="pgrep vs pidof"></a>pgrep vs pidof</h2><p>The programs pgrep and pidof are not quite the same thing, but they are very similar. For example:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pidof <span class="string">&#x27;firefox&#x27;</span></span><br><span class="line">5696</span><br><span class="line">$ pgrep <span class="string">&#x27;[i]ref&#x27;</span></span><br><span class="line">5696</span><br><span class="line">$ pidof <span class="string">&#x27;[i]ref&#x27;</span></span><br><span class="line">$ <span class="built_in">printf</span> <span class="string">&#x27;%s\n&#x27;</span> <span class="string">&quot;$?&quot;</span></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"><span class="comment"># get children process(not thread) of given pid</span></span><br><span class="line">$ pgrep -P 1824</span><br><span class="line">1825</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># it shows process and threads as well</span></span><br><span class="line"><span class="comment"># 1694, 1695 are threads not process</span></span><br><span class="line">$ pstree -p 1824</span><br><span class="line">dnsmasq(1824)───dnsmasq(1825)</span><br></pre></td></tr></table></figure>
<p>As you can see, pidof failed to find a match for [i]ref. This is because <code>pidof program returns a list of all process IDs associated with a program called program</code>. On the other hand, <code>pgrep re returns a list of all process IDs associated with a program whose name matches the regular expression re.</code></p>
<p>In their most basic forms, the equivalence is actually: <code>$ pidof &#39;program&#39;</code> &#x3D;&#x3D; <code>$ pgrep &#39;^program$&#39;</code></p>
<h2 id="remove-cgroup-from-x2F-sys-x2F-fs"><a href="#remove-cgroup-from-x2F-sys-x2F-fs" class="headerlink" title="remove cgroup from &#x2F;sys&#x2F;fs"></a>remove cgroup from &#x2F;sys&#x2F;fs</h2><p>First you have to move all processes from this cgroup, then delete it, otherwise it, error shows <code>cgroups can&#39;t be cleaned up: Device or resource busy</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># use cpu cgroup as an example</span></span><br><span class="line">$ <span class="built_in">cat</span> /sys/fs/cgroup/cpu/test/cgroup.procs</span><br><span class="line">8666</span><br><span class="line"><span class="comment"># move 8666 to root group, also moved it from test group</span></span><br><span class="line">$ <span class="built_in">echo</span> 8666 &gt;/sys/fs/cgroup/cpu/cgroup.procs</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> /sys/fs/cgroup/cpu/test/cgroup.procs</span><br><span class="line">$ <span class="built_in">rmdir</span> /sys/fs/cgroup/cpu/test</span><br></pre></td></tr></table></figure>

<h2 id="find-all-shell-scripts"><a href="#find-all-shell-scripts" class="headerlink" title="find all shell scripts"></a>find all shell scripts</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find /xyz | xargs file | grep shell</span><br><span class="line">./david/query-docker.sh:                                                                                                Bourne-Again shell script, ASCII text executable</span><br><span class="line">./david/db/import-db.sh:                                                                                                POSIX shell script, ASCII text executable, with very long lines</span><br><span class="line"></span><br><span class="line">$ find /xyz | xargs file | grep shell | <span class="built_in">cut</span> -d <span class="string">&quot;:&quot;</span> -f1</span><br><span class="line">./david/query-docker.sh</span><br><span class="line">./david/db/import-db.sh</span><br></pre></td></tr></table></figure>

<h2 id="add-time-out-for-any-shell-command"><a href="#add-time-out-for-any-shell-command" class="headerlink" title="add time out for any shell command"></a>add time out for any shell command</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">timeout</span> 5s ping www.sd</span><br><span class="line"></span><br><span class="line"><span class="comment"># capture output of command</span></span><br><span class="line">$ RET=$(<span class="built_in">timeout</span> 5s <span class="built_in">ls</span> asd 2&gt;&amp;1)</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$RET</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sometimes it will hang when capture command output, to solve this add &#x27;--foreground&#x27; option</span></span><br><span class="line">$ RET=$(<span class="built_in">timeout</span> --foreground 5s <span class="variable">$CMD</span> 2&gt;&amp;1)</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$RET</span></span><br></pre></td></tr></table></figure>
<h2 id="which-numa-memory-by-a-process"><a href="#which-numa-memory-by-a-process" class="headerlink" title="which numa memory by a process"></a>which numa memory by a process</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list all memory used by a process</span></span><br><span class="line"><span class="comment"># numa bind policy for huage page, default policy for others</span></span><br><span class="line">$ <span class="built_in">cat</span> /proc/82389/numa_maps</span><br><span class="line">7f069ab9a000 default file=/usr/lib64/ld-2.17.so anon=1 dirty=1 N0=1 kernelpagesize_kB=4</span><br><span class="line">7f0588000000 <span class="built_in">bind</span>:0-1 file=/mnt/huge_2MB/libvirt/qemu/141-i-f2w3m8owht/qemu_back_mem._objects_ram-node0.2IyOfZ\040(deleted) huge dirty=2048 mapmax=4 N0=2048 kernelpagesize_kB=2048</span><br><span class="line"><span class="comment"># the first column is memory address</span></span><br><span class="line"><span class="comment"># the second column is numa node used by this memory</span></span><br><span class="line"><span class="comment">#   default means all numa nodes</span></span><br><span class="line"><span class="comment">#   bind:0-1 means only numa node 0 and node 1 are allowed for this memory, but we may only used one node.</span></span><br><span class="line"><span class="comment"># the third column is file related</span></span><br><span class="line"><span class="comment"># the last column is kernel page for this memory</span></span><br><span class="line"><span class="comment"># the one before last colum is the page count of this memory on each node</span></span><br><span class="line"><span class="comment"># N0=2048 means allocate 2048*kernelpagesize_kB on node 0 </span></span><br><span class="line"></span><br><span class="line">$ numastat -p 82389</span><br><span class="line">Per-node process memory usage (<span class="keyword">in</span> MBs) <span class="keyword">for</span> PID 82389 (qemu-kvm)</span><br><span class="line">                           Node 0          Node 1           Total</span><br><span class="line">                  --------------- --------------- ---------------</span><br><span class="line">Huge                      4096.00            0.00         4096.00</span><br><span class="line">Heap                        65.16            0.00           65.16</span><br><span class="line">Stack                        0.03            0.00            0.04</span><br><span class="line">Private                     32.34            1.21           33.55</span><br><span class="line">----------------  --------------- --------------- ---------------</span><br><span class="line">Total                     4193.53            1.21         4194.74</span><br><span class="line"></span><br><span class="line"><span class="comment"># total numa stat</span></span><br><span class="line">$ numastat </span><br><span class="line">                           node0           node1</span><br><span class="line">numa_hit            271446988685    306962573062</span><br><span class="line">numa_miss                 144931     15014353674</span><br><span class="line">numa_foreign         15014353674          144931</span><br><span class="line">interleave_hit             35352           35604</span><br><span class="line">local_node          271445218315    306961782987</span><br><span class="line">other_node               1915301     15015143749</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># huage page on two numa nodes</span></span><br><span class="line"><span class="variable">$numastat</span> -p 1144</span><br><span class="line">Per-node process memory usage (<span class="keyword">in</span> MBs) <span class="keyword">for</span> PID 1144 (qemu-kvm)</span><br><span class="line">                           Node 0          Node 1           Total</span><br><span class="line">                  --------------- --------------- ---------------</span><br><span class="line">Huge                      1752.00         6440.00         8192.00</span><br><span class="line">Heap                         1.04           44.79           45.82</span><br><span class="line">Stack                        0.00            0.04            0.04</span><br><span class="line">Private                     16.66           11.42           28.08</span><br><span class="line">----------------  --------------- --------------- ---------------</span><br><span class="line">Total                     1769.70         6496.25         8265.95</span><br><span class="line"></span><br><span class="line"><span class="comment"># as you can see N0(node 0) 876*2M and N1(node 1) 3220*2M</span></span><br><span class="line"><span class="comment"># numa bind policy</span></span><br><span class="line">$ <span class="built_in">cat</span> /proc/1144/numa_maps | grep 2048</span><br><span class="line">7fbd58000000 <span class="built_in">bind</span>:0-1 file=/mnt/huge_2MB/libvirt/qemu/38-i-y4s8f9zg2o/qemu_back_mem._objects_ram-node0.dlp9WP\040(deleted) huge dirty=4096 mapmax=4 N0=876 N1=3220 kernelpagesize_kB=2048</span><br><span class="line"></span><br><span class="line"><span class="comment"># numa prefer policy for huge page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># prefre node 1 but huage page is allocated at node0(N0) 12G and node1(N1) 20G</span></span><br><span class="line">$ <span class="built_in">cat</span> /proc/140662/numa_maps | grep 1G</span><br><span class="line">7f5480000000 prefer:1 file=/mnt/huge_1GB/qemu_back_mem._objects_ram-node0.8Jxnog\040(deleted) huge anon=32 dirty=32 N0=12 N1=20 kernelpagesize_kB=1048576</span><br></pre></td></tr></table></figure>

<h2 id="check-initrd-img"><a href="#check-initrd-img" class="headerlink" title="check initrd.img"></a>check initrd.img</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list content of initrd</span></span><br><span class="line">$ lsinitrd build/initrd.img</span><br><span class="line">mage: build/nc-initrd.img: 31M</span><br><span class="line">========================================================================</span><br><span class="line">Version: </span><br><span class="line"></span><br><span class="line">Arguments: </span><br><span class="line">dracut modules:</span><br><span class="line">========================================================================</span><br><span class="line">drwxr-xr-x  11 root     root            0 Mar  8 11:30 .</span><br><span class="line">drwxr-xr-x   2 root     root            0 Mar  8 11:30 bin</span><br><span class="line">lrwxrwxrwx   1 root     root           13 Mar  8 11:30 bin/hwclock -&gt; /sbin/busybox</span><br><span class="line">lrwxrwxrwx   1 root     root           13 Mar  8 11:30 bin/sh -&gt; /sbin/busybox</span><br><span class="line">lrwxrwxrwx   1 root     root           13 Mar  8 11:30 bin/tar -&gt; /sbin/busybox</span><br><span class="line">drwxr-xr-x   2 root     root            0 Mar  8 11:30 dev</span><br><span class="line">-rwxr-xr-x   1 root     root       568240 Mar  8 11:30 init</span><br><span class="line">drwxr-xr-x   2 root     root            0 Mar  8 11:30 kdump_tools</span><br><span class="line">-rw-r--r--   1 root     root     10162077 Mar  8 11:30 kdump_tools/initramfs-4.14.121-jdcloudkdump.img</span><br><span class="line">-rw-r--r--   1 root     root      4964304 Mar  8 11:30 kdump_tools/vmlinuz-4.14.121-jdcloud</span><br><span class="line">drwxr-xr-x   3 root     root            0 Mar  8 11:30 lib</span><br><span class="line">drwxr-xr-x   2 root     root            0 Mar  8 11:30 lib64</span><br><span class="line">-rwxr-xr-x   1 root     root       163312 Mar  8 11:30 lib64/ld-linux-x86-64.so.2</span><br><span class="line">-rwxr-xr-x   1 root     root        13536 Mar  8 11:30 lib64/libfreebl3.so</span><br><span class="line">-rwxr-xr-x   1 root     root       553072 Mar  8 11:30 lib64/libfreeblpriv3.so</span><br><span class="line">-rwxr-xr-x   1 root     root       287312 Mar  8 11:30 lib64/libnspr4.so</span><br><span class="line">-rwxr-xr-x   1 root     root       737664 Mar  8 11:30 lib64/libnss3.so</span><br><span class="line">-rwxr-xr-x   1 root     root       585848 Mar  8 11:30 lib64/libnssckbi.so</span><br><span class="line">-rwxr-xr-x   1 root     root       152576 Mar  8 11:30 lib64/libnssdbm3.so</span><br><span class="line">-rwxr-xr-x   1 root     root       175464 Mar  8 11:30 lib64/libnsspem.so</span><br><span class="line">-rwxr-xr-x   1 root     root        13312 Mar  8 11:30 lib64/libnsssysinit.so</span><br><span class="line">-rwxr-xr-x   1 root     root       229152 Mar  8 11:30 lib64/libnssutil3.so</span><br><span class="line">-rwxr-xr-x   1 root     root        23664 Mar  8 11:30 lib64/libplc4.so</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># unpack </span></span><br><span class="line">$ file gunzip initrd.img.gz</span><br><span class="line">initrd.img: gzip compressed data, from Unix, last modified: Wed Mar  8 11:30:10 2023, max compression</span><br><span class="line">$ gunzip initrd.img.gz</span><br><span class="line"></span><br><span class="line">$ cpio -idv &lt; initrd.img</span><br><span class="line">bin/  dev/  init  kdump_tools/  lib/  lib64/ proc/  sbin/  sys/  usr/</span><br></pre></td></tr></table></figure>

<h2 id="Check-if-Hard-Drive-is-SSD-or-HDD-on-Linux"><a href="#Check-if-Hard-Drive-is-SSD-or-HDD-on-Linux" class="headerlink" title="Check if Hard Drive is SSD or HDD on Linux"></a>Check if Hard Drive is SSD or HDD on Linux</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 for HDD, 0 for SSD</span></span><br><span class="line"><span class="comment">################ way1=======================</span></span><br><span class="line">$ <span class="built_in">cat</span> /sys/block/sda/queue/rotational</span><br><span class="line">1</span><br><span class="line"><span class="comment">################ way2=======================</span></span><br><span class="line">$ lsblk -d -o name,rota</span><br><span class="line">NAME    ROTA</span><br><span class="line">sda        1</span><br><span class="line">...</span><br><span class="line">sdm        0</span><br><span class="line">nvme0n1    0</span><br><span class="line"><span class="comment">################ way3=======================</span></span><br><span class="line">$ smartctl -a /dev/sda | grep <span class="string">&#x27;Rotation Rate&#x27;</span></span><br><span class="line">Rotation Rate:    7200 rpm</span><br><span class="line">$ smartctl -a /dev/sdm | grep <span class="string">&#x27;Rotation Rate&#x27;</span></span><br><span class="line">Rotation Rate:    Solid State Device</span><br></pre></td></tr></table></figure>

<h2 id="disk-related"><a href="#disk-related" class="headerlink" title="disk related"></a>disk related</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show filesystem, uuid etc for block device</span></span><br><span class="line"><span class="variable">$blkid</span></span><br><span class="line">/dev/sda1: UUID=<span class="string">&quot;5cf26576-d3d1-48d1-aab4-1326cdda3c77&quot;</span> TYPE=<span class="string">&quot;xfs&quot;</span> </span><br><span class="line">/dev/sda2: UUID=<span class="string">&quot;mFfzPH-yRAk-6ASm-6ASF-Nizr-9u3m-25wQgr&quot;</span> TYPE=<span class="string">&quot;LVM2_member&quot;</span> </span><br><span class="line">/dev/mapper/centos_dev-root: UUID=<span class="string">&quot;6b5ed230-86e5-4ab6-9e96-08caf90afca6&quot;</span> TYPE=<span class="string">&quot;xfs&quot;</span> </span><br><span class="line">/dev/mapper/centos_dev-swap: UUID=<span class="string">&quot;638cc56c-e2c9-425a-b13a-0c890082db1b&quot;</span> TYPE=<span class="string">&quot;swap&quot;</span> </span><br><span class="line">/dev/mapper/centos_dev-home: UUID=<span class="string">&quot;cab6c113-6e6d-4d9a-8654-eb304b9100c3&quot;</span> TYPE=<span class="string">&quot;xfs&quot;</span> </span><br><span class="line">/dev/mapper/centos_dev-var: UUID=<span class="string">&quot;7aafa462-85af-4587-a334-beeb477e25f6&quot;</span> TYPE=<span class="string">&quot;xfs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$lsblk</span> -f</span><br><span class="line">NAME                FSTYPE      LABEL UUID                                   MOUNTPOINT</span><br><span class="line">sda                                                                          </span><br><span class="line">├─sda1              xfs               5cf26576-d3d1-48d1-aab4-1326cdda3c77   /boot</span><br><span class="line">└─sda2              LVM2_member       mFfzPH-yRAk-6ASm-6ASF-Nizr-9u3m-25wQgr </span><br><span class="line">  ├─centos_dev-root xfs               6b5ed230-86e5-4ab6-9e96-08caf90afca6   /</span><br><span class="line">  ├─centos_dev-swap swap              638cc56c-e2c9-425a-b13a-0c890082db1b   [SWAP]</span><br><span class="line">  ├─centos_dev-home xfs               cab6c113-6e6d-4d9a-8654-eb304b9100c3   /home</span><br><span class="line">  └─centos_dev-var  xfs               7aafa462-85af-4587-a334-beeb477e25f6   /var</span><br><span class="line"><span class="variable">$df</span> -Th</span><br><span class="line">Filesystem                  Type      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs                    devtmpfs   16G     0   16G   0% /dev</span><br><span class="line">tmpfs                       tmpfs      16G     0   16G   0% /dev/shm</span><br><span class="line">tmpfs                       tmpfs      16G  888K   16G   1% /run</span><br><span class="line">tmpfs                       tmpfs      16G     0   16G   0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos_dev-root xfs       100G   45G   56G  45% /</span><br><span class="line">/dev/sda1                   xfs       297M  191M  107M  65% /boot</span><br><span class="line">/dev/mapper/centos_dev-var  xfs        50G  9.4G   41G  19% /var</span><br><span class="line">/dev/mapper/centos_dev-home xfs       300G   58G  243G  20% /home</span><br><span class="line">overlay                     overlay    50G  9.4G   41G  19% /var/lib/docker/overlay2/5c1f012f94cc69c18a9fbcc84c5403232f103c6a68b9544ba2284f59ee99e379/merged</span><br><span class="line">tmpfs                       tmpfs     3.2G  876K  3.2G   1% /run/user/0</span><br><span class="line"></span><br><span class="line"><span class="comment"># disk error hence disk mounted as read-only fix it by</span></span><br><span class="line">$ fsck -aC</span><br><span class="line">OR</span><br><span class="line">$ e2fsck -f -y -v /dev/sda1</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">$ reboot</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">df</span> -lh      <span class="comment"># show disk partition</span></span><br><span class="line">$ <span class="built_in">df</span> -ih      <span class="comment"># show inode free/used</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">du</span> -h -d 1 <span class="comment"># show file size</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># format disk with ext2 or ext3 etc</span></span><br><span class="line"><span class="comment"># mkfs.bfs      mkfs.cramfs   mkfs.ext2     mkfs.ext3     mkfs.ext4     mkfs.ext4dev  mkfs.minix    mkfs.msdos    mkfs.ntfs     mkfs.vfat</span></span><br><span class="line"></span><br><span class="line">$ fdisk -l</span><br><span class="line">$ mkfs.minix /dev/sdb1</span><br><span class="line"></span><br><span class="line"><span class="comment"># increase /tmp size by remounting it with a large file</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/usr/temp-disk bs=2M count=1024</span><br><span class="line">$ mkfs.ext3  /usr/temp-disk</span><br><span class="line"></span><br><span class="line"><span class="comment"># add /etc/fstab file with below content</span></span><br><span class="line">/usr/temp-disk /tmp ext3 rw,noexec,nosuid,loop 0 0</span><br></pre></td></tr></table></figure>

<p><strong>UUID vs PARTUUID</strong></p>
<ul>
<li><code>UUID is a filesystem-level UUID</code>, which is retrieved from the filesystem metadata inside the partition. It can only be read if the filesystem type is known and readable.</li>
<li><code>PARTUUID is a partition-table-level UUID for the partition</code>, a standard feature for all partitions on <strong>GPT-partitioned</strong> disks. Since it is retrieved from the partition table, it is accessible without making any assumptions at all about the actual contents of the partition.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ls</span> /dev/disk/by-uuid/</span><br><span class="line">38db244b-e0b7-45fb-aftg-a168b6fd00fd  433acdf3-70b7-4e93-abcd-04817a6aeae1</span><br><span class="line"><span class="variable">$ls</span> /dev/disk/by-partuuid/</span><br><span class="line">0260d409-b765-4de2-adfd-493e92087395  7d05dd0b-ab8a-48eb-12ad-2ef4e4e8b3af ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># uuid is return if this partition has a filesystem</span></span><br><span class="line"><span class="variable">$blkid</span> /dev/sdm1</span><br><span class="line">/dev/sdm1: UUID=<span class="string">&quot;38db244b-e0b7-34fb-adbd-a168b6fd00fd&quot;</span> TYPE=<span class="string">&quot;xfs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># partuuid is return if no filesytem on it</span></span><br><span class="line"><span class="variable">$blkid</span> /dev/sdl1</span><br><span class="line">/dev/sdl1: PARTLABEL=<span class="string">&quot;meta&quot;</span> PARTUUID=<span class="string">&quot;87a0bfbf-2374-4be8-93c7-b5d49810ee9b&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="regular-pattern-greedy-vs-lazy-match"><a href="#regular-pattern-greedy-vs-lazy-match" class="headerlink" title="regular pattern greedy vs lazy match"></a>regular pattern greedy vs lazy match</h2><p><code>&#39;Greedy&#39;</code> means match longest possible string. while <code>&#39;Lazy&#39; or non-greedy</code> means match shortest possible string. </p>
<table>
<thead>
<tr>
<th>Greedy quantifier</th>
<th>Lazy quantifier</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>*?</td>
<td>Star Quantifier: 0 or more</td>
</tr>
<tr>
<td>+</td>
<td>+?</td>
<td>Plus Quantifier: 1 or more</td>
</tr>
<tr>
<td>?</td>
<td>??</td>
<td>Optional Quantifier: 0 or 1</td>
</tr>
<tr>
<td>{n}</td>
<td>{n}?</td>
<td>Quantifier: exactly n</td>
</tr>
<tr>
<td>{n,}</td>
<td>{n,}?</td>
<td>Quantifier: n or more</td>
</tr>
<tr>
<td>{n,m}</td>
<td>{n,m}?</td>
<td>Quantifier: between n and m</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grep with lazy match</span></span><br><span class="line"><span class="comment"># egrep does not support non-greedy matching. Using perl mode -P will help you:</span></span><br><span class="line"><span class="comment"># -o only print the matched part!!!</span></span><br><span class="line"><span class="variable">$grep</span> -o -P  <span class="string">&#x27;https.*?mp3&#x27;</span> example.txt | <span class="built_in">sort</span> | <span class="built_in">uniq</span> </span><br></pre></td></tr></table></figure>
<h2 id="tar-with-progress-bar"><a href="#tar-with-progress-bar" class="headerlink" title="tar with progress bar"></a>tar with progress bar</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$D</span>=<span class="string">&quot;.//dir1 ./file1&quot;</span></span><br><span class="line"><span class="variable">$tar</span> pcf - <span class="variable">$D</span> | pv -s <span class="string">&quot;<span class="subst">$(du -sk --total $D | tail -n1 | cut -f1)</span>k&quot;</span>| gzip &gt; target.tar.gz</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
        <category>tips</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx_thundering_herd_accept</title>
    <url>/2020/04/14/nginx-thundering-herd-accept/</url>
    <content><![CDATA[<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><ul>
<li><p>old issue: All threads&#x2F;processes who called accept() are awoken when a connection comes: <font color='red'><strong>already fixed after kernel 2.6</strong></font></p>
</li>
<li><p>select&#x2F;epoll have similar issue like accept(): <font color='red'><strong>already fixed at some kernel version</strong></font></p>
</li>
<li><p>epoll_create before fork, same issue as accept() <font color='red'><strong>already fixed at some kernel version</strong>, but has other concern, never do this</font>, see below</p>
</li>
<li><p>epoll_create after fork, <font color='red'><strong>still has thundering herd issue</strong></font>, see how nginx solves it</p>
</li>
</ul>
<h1 id="epoll-create-before-fork-never-use-it"><a href="#epoll-create-before-fork-never-use-it" class="headerlink" title="epoll_create before fork(never use it)"></a>epoll_create before fork(never use it)</h1><p>if epoll_create is called before fork, all child processes share the same epoll instance in the kernel, if a connection comes, kernel selects just one process[**WQ_FLAG_EXCLUSIVE**](other is not awoken), wake it up, <strong>no thundering issue</strong></p>
<p>The <strong>big issue for this case</strong> is that if one process creates fd and adds it to epoll, all processes may be awoken when event happens, <strong>process CAN NOT have private fd added to epoll, only for itself.</strong></p>
<h1 id="epoll-create-after-fork"><a href="#epoll-create-after-fork" class="headerlink" title="epoll_create after fork"></a>epoll_create after fork</h1><p>This is what nginx uses, as each worker needs private fd, say established connection added to epoll should be only processed by the creator, not other worker process. so that different workers have their own epoll instances.</p>
<p><strong>As each worker adds listening fd(created by master mostly for VIP) to its own epoll instance</strong>, so for new connection setup, all workers could be awoken if without any solution.</p>
<p>how nginx solve such issue:</p>
<ul>
<li><p><strong>option1:</strong>  accept mutex lock(deprecated)<br>nginx uses accept mutex lock, for each loop of epoll_wait(), worker first gets the accept mutex lock, if gets it, adds the listening fd by epoll_ctl, otherwise, removes the listening fd, so that at any time there is only one worker has the listening fd, note the <strong>accept mutex is shared by all workers</strong>.</p>
</li>
<li><p><strong>option2:</strong> SO_REUSEPORT(best one, balanced from kernel)<br><font color='orange'>SO_REUSEPORT(kernel 3.9)</font> with this option set, <code>kernel selects a process based on hash(src, port, dst, port)</code>, only wakes up that process <font color='green'>it’s hash balancing from kernel, no lock from user space</font>, nginx always uses this if available. <strong>master will create different fd(same ip+port) for each worker(fd for same ip+port(clone_listening)) before fork</strong>, after fork, each worker adds its fd to its <strong>epoll instance which is created after fork</strong>. that means for each listing_op_t, nginx creates several sockets(same with worker number). each worker has its own epoll instance and different fd.</p>
</li>
<li><p><strong>option3</strong> <font color='orange'>new epoll flag EPOLLEXCLUSIVE(since kernel 4.5)</font>(better one, no balance)<br>EPOLLEXCLUSIVE is thus useful for avoiding thundering herd problems in certain scenarios, only wake up one process If the same file descriptor is in multiple epoll instances. if use it, nginx master does not create different fd(VIP) for each worker, but all workers use the same(fd number), still epoll is created after fork, add the same fd to each worker’s epoll instance. when new connection comes, only <code>the first on the waiting queue is wake up</code>.<br><font color='red'>nginx uses it if SO_REUSPORT is not available.</font></p>
</li>
</ul>
<p>nginx chooses these options in below order</p>
<ul>
<li>SO_REUSEPORT(need kernel support and configure at listen 1.1.1.1:80 reuseport, both needs)</li>
<li>EPOLLEXCLUSIVE(need kernel support)</li>
<li>accept mutex(needs user configure at events {accept_mutex on;})</li>
<li>None</li>
</ul>
]]></content>
      <categories>
        <category>nginx</category>
        <category>accept</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>thundering herd</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx_request_conf_finding</title>
    <url>/2020/12/01/nginx-request-conf-finding/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>each request is served by a virtual server, then based on uri, select the right location, hence each request has related main_conf, srv_conf, loc_conf that hold config, based on config select proper parameters to process the request.</p>
<span id="more"></span>
<h1 id="request-conf-ctx"><a href="#request-conf-ctx" class="headerlink" title="request conf ctx"></a>request conf ctx</h1><p><img src="https://cyun.tech/images/nginx/ngx_http_ctx_finding_for_request.png" alt="request conf finding"></p>
<p><strong>Data Structure</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_http_request_s</span> &#123;</span></span><br><span class="line">    <span class="type">ngx_connection_t</span>                 *connection;</span><br><span class="line">    <span class="type">void</span>                            **main_conf;</span><br><span class="line">    <span class="type">void</span>                            **srv_conf;</span><br><span class="line">    <span class="type">void</span>                            **loc_conf;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">void</span>        **main_conf;</span><br><span class="line">    <span class="type">void</span>        **srv_conf;</span><br><span class="line">    <span class="type">void</span>        **loc_conf;</span><br><span class="line">&#125; <span class="type">ngx_http_conf_ctx_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/* conf ctx like main/srv/loc conf, comes from default virtual server */</span></span><br><span class="line">    <span class="type">ngx_http_conf_ctx_t</span>              *conf_ctx;</span><br><span class="line">&#125; <span class="type">ngx_http_connection_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/* server ctx */</span></span><br><span class="line">    <span class="type">ngx_http_conf_ctx_t</span>        *ctx;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="type">ngx_http_core_srv_conf_t</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nginx</category>
        <category>request</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx_shared_memory_slab</title>
    <url>/2020/11/24/nginx-shared-memory-slab/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>In previous post <a href="/2020/11/24/nginx-shared-memory-layout/" title="nginx_shared_memory_layout">shared memory tracking</a>, it shows how shared memory is tracked and allocated, but it does not show how to manage allocated shared memory, then provide API for user to use memory from it, say you have a big shared memory, later on you may want to allocate blocks from the shared memory, how does nginx manage the shared memory and allocate block to user quickly? this is the post aims to tell you.</p>
<span id="more"></span>

<h1 id="Slab"><a href="#Slab" class="headerlink" title="Slab"></a>Slab</h1><p>Actually nginx uses slab to manage the shared memory, same as kernel does for its slab. it provides several size of slabs like 8, 16, 2^x, that means you can only get 2^x bytes from the shared memory, for each slab, there is a slab header, each entry in the slab list is the slab page control part which has the metadata for that page(like which block is used etc), when user requests size bytes, round(size) to 2^x, then check the proper slab, find a free page in that slab, allocate block from that page, mark that block as used.</p>
<h2 id="Data-structure-and-API"><a href="#Data-structure-and-API" class="headerlink" title="Data structure and API"></a>Data structure and API</h2><p><strong>Data Structure</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* slab page control part OR slab header which no real slab page related*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_slab_page_s</span> &#123;</span></span><br><span class="line">    <span class="type">uintptr_t</span>         slab;</span><br><span class="line">    <span class="type">ngx_slab_page_t</span>  *next;</span><br><span class="line">    <span class="type">uintptr_t</span>         prev;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>        total; <span class="comment">/* all available chunks(used and unused) except bitmap used if has */</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>        used;  <span class="comment">/* used chunks count, NOT count bitmap used */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">ngx_uint_t</span>        reqs;</span><br><span class="line">    <span class="type">ngx_uint_t</span>        fails;</span><br><span class="line">&#125; <span class="type">ngx_slab_stat_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">size_t</span>            min_size; <span class="comment">/* 8 bytes */</span></span><br><span class="line">    <span class="type">size_t</span>            min_shift; <span class="comment">/* 3, 2^3 = 8 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* as for each slab(2^x), first we need a page</span></span><br><span class="line"><span class="comment">     * below fields are used for manges shared memory as pages.</span></span><br><span class="line"><span class="comment">     * inside that page, use bitmap to track small block (2^x size)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ngx_slab_page_t</span>  *pages; <span class="comment">/* page control, each page has one ngx_slab_page_t */</span></span><br><span class="line">    <span class="type">ngx_slab_page_t</span>  *last;  <span class="comment">/* last control page structure */</span></span><br><span class="line">    <span class="type">ngx_slab_page_t</span>   <span class="built_in">free</span>;  <span class="comment">/* header of free page structure */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">ngx_slab_stat_t</span>  *stats; <span class="comment">/* stats for each slot */</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>        pfree; <span class="comment">/* free pages */</span></span><br><span class="line"></span><br><span class="line">    u_char           *start; <span class="comment">/* page data area(aligned) */</span></span><br><span class="line">    u_char           *end;   <span class="comment">/* original addr + size */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>             *data; <span class="comment">/* context of shared memory */</span></span><br><span class="line">    <span class="type">void</span>             *addr; <span class="comment">/* original shared memory addr */</span></span><br><span class="line">&#125; <span class="type">ngx_slab_pool_t</span>;</span><br></pre></td></tr></table></figure>

<p><strong>API</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">ngx_int_t</span> <span class="title function_">ngx_init_zone_pool</span><span class="params">(<span class="type">ngx_cycle_t</span> *cycle, <span class="type">ngx_shm_zone_t</span> *zn)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ngx_slab_init</span><span class="params">(<span class="type">ngx_slab_pool_t</span> *pool)</span>;</span><br><span class="line"><span class="type">void</span> * <span class="title function_">ngx_slab_calloc</span><span class="params">(<span class="type">ngx_slab_pool_t</span> *pool, <span class="type">size_t</span> size)</span>;</span><br><span class="line"><span class="type">void</span> * <span class="title function_">ngx_slab_alloc</span><span class="params">(<span class="type">ngx_slab_pool_t</span> *pool, <span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Slab-layout"><a href="#Slab-layout" class="headerlink" title="Slab layout"></a>Slab layout</h2><p><img src="https://cyun.tech/images/nginx/nginx_slab_management.png" alt="slab layout"></p>
<p>As you can see slab management sits at the beginning of the shared memory, like slab pool, slab header, stats header, ngx_slab_page_t(for each page), that means the available memory for user is less than the size passed to mmap().</p>
<h2 id="Page-movement-during-free-and-allocate"><a href="#Page-movement-during-free-and-allocate" class="headerlink" title="Page movement during free and allocate"></a>Page movement during free and allocate</h2><p><img src="https://cyun.tech/images/nginx/ngx_slab_page_layout.png" alt="slab page layout"></p>
<p>At first, all pages are linked to free list, but after allocation and free, the control part ngx_slab_page_t may be at different slots.</p>
<h2 id="Bitmap-for-block-inside-one-page-management"><a href="#Bitmap-for-block-inside-one-page-management" class="headerlink" title="Bitmap for block(inside one page) management"></a>Bitmap for block(inside one page) management</h2><p>Bitmap is used to track the block status(used or not) in a page, each bit in the map represents a block in the page, it also needs memory for the bitmap, as different blocks need different bitmap size, nginx saves bitmap in two different places, if block size &gt;&#x3D;64 bytes, bitmap saves at ngx_slab_page_t-&gt;slab, otherwise, bitmap saves at page in place(beginning of the page).</p>
<p><img src="https://cyun.tech/images/nginx/ngx_slab_bitmap.png" alt="bitmap in control page"></p>
<p><img src="https://cyun.tech/images/nginx/ngx_slab_bitmap_small_chunk.png" alt="bitmap in page"></p>
<p><strong>How to get the chunk index from chunk address</strong><br>page offset are least 12 bits for each bytes in the page, then we group bytes as chunk, the chunk shift are offset inside each chunk, the least chunk_shift bit is offset inside each chunk, the high bit is same for a chunk（which takes 2^chunk_offset bytes).</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">high---------bit 0  1  0  0  0  0 0 0 0 0 0  1</span><br><span class="line">|--page index----|&lt;---page offset-----------&gt;|</span><br><span class="line">                 |chunk index  | chunk offset|</span><br></pre></td></tr></table></figure>
<p>nginx first needs to know which page the block belongs, then the page control part, knows the chunk offset, then gets chunk index(set bitmap or clear it when free the block).</p>
]]></content>
      <categories>
        <category>nginx</category>
        <category>shared memory</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>slab</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx_shared_memory_lock</title>
    <url>/2020/11/24/nginx-shared-memory-lock/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>As for shared memory, different processes may allocate memory from it at the same time, so it needs a lock when allocate and free shared memory, nginx provides ngx_shmtx_t which is a combination of spin lock and semaphore, in that lock, first try spin lock, if can’t get the lock, use semaphore to block process.</p>
<span id="more"></span>

<h1 id="shared-memory-lock"><a href="#shared-memory-lock" class="headerlink" title="shared memory lock"></a>shared memory lock</h1><h2 id="Data-structure-and-API"><a href="#Data-structure-and-API" class="headerlink" title="Data structure and API"></a>Data structure and API</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* This part always from shared memory, it is on shared memory */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">ngx_atomic_t</span>   lock;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (NGX_HAVE_POSIX_SEM)</span></span><br><span class="line">    <span class="type">ngx_atomic_t</span>   wait;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125; <span class="type">ngx_shmtx_sh_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* shmtx is the lock for shared memory</span></span><br><span class="line"><span class="comment"> *     within atomic(spin lock) if not get the lock, process spins a while, then yield the CPU by way(semaphore)</span></span><br><span class="line"><span class="comment"> *     blocked until resource is available, when wake up, check resource again to see if can get it</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">ngx_atomic_t</span>  *lock;    <span class="comment">/* save the process id who holds the lock(can access the shared memory) */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (NGX_HAVE_POSIX_SEM)</span></span><br><span class="line">    <span class="type">ngx_atomic_t</span>  *wait;    <span class="comment">/* count how many process blocked on this lock */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* you can see lock and wait are pointers, because they always point to ngx_shmtx_sh_t</span></span><br><span class="line"><span class="comment">     * which is allocated from the shared memory, hence every process can see lock and wait</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>     semaphore; <span class="comment">/* flag that indicates semaphore is enabled or not */</span></span><br><span class="line">    <span class="type">sem_t</span>          sem;       <span class="comment">/* posix semaphore used by sem_init/sem_wait/sem_post */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">/* spin count if we can&#x27;t get the lock</span></span><br><span class="line"><span class="comment">     * as it&#x27;s unit hence spin = -1 means spin for ever if call ngx_shmtx_lock()</span></span><br><span class="line"><span class="comment">     * mostly used for accessing critical area within short period that another process only spin very shortly!!!</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Actually: nginx does not spin for ever even if spin = -1, as with spin = -1, nginx does NOT call ngx_shmtx_lock</span></span><br><span class="line"><span class="comment">     * but ngx_shmtx_trylock()!!!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>     spin;</span><br><span class="line">&#125; <span class="type">ngx_shmtx_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">ngx_shmtx_sh_t</span>    lock; <span class="comment">/* spin lock used by ngx_shmtx_t */</span></span><br><span class="line">    <span class="type">ngx_shmtx_t</span>       mutex;</span><br><span class="line">&#125; <span class="type">ngx_slab_pool_t</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>API</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ngx_shmtx_lock</span><span class="params">(<span class="type">ngx_shmtx_t</span> *mtx)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ngx_shmtx_unlock</span><span class="params">(<span class="type">ngx_shmtx_t</span> *mtx)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="inside-ngx-shmtx-lock"><a href="#inside-ngx-shmtx-lock" class="headerlink" title="inside ngx_shmtx_lock"></a>inside ngx_shmtx_lock</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">ngx_shmtx_lock</span><span class="params">(<span class="type">ngx_shmtx_t</span> *mtx)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">ngx_uint_t</span>         i, n;</span><br><span class="line">    <span class="keyword">for</span> ( ;; ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (*mtx-&gt;lock == <span class="number">0</span> &amp;&amp; ngx_atomic_cmp_set(mtx-&gt;lock, <span class="number">0</span>, ngx_pid)) &#123;</span><br><span class="line">            <span class="comment">/* get the lock and save the process id */</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ngx_ncpu &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">/* only need to spin if multicore</span></span><br><span class="line"><span class="comment">             * if there is only one core, no need to spin, spin here, the lock can&#x27;t free at all which is hold by other process, spin waste time</span></span><br><span class="line"><span class="comment">             * because during the spin, you still can&#x27;t the lock as the hold process is not running!!!</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">for</span> (n = <span class="number">1</span>; n &lt; mtx-&gt;spin; n &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                    <span class="comment">/* use assemble directive to pause cpu */</span></span><br><span class="line">                    ngx_cpu_pause();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* spin means cpu pauses a while then check if i can get the lock</span></span><br><span class="line"><span class="comment">                 * if NO, pause a while again, then check...repeated</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (*mtx-&gt;lock == <span class="number">0</span></span><br><span class="line">                    &amp;&amp; ngx_atomic_cmp_set(mtx-&gt;lock, <span class="number">0</span>, ngx_pid))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (NGX_HAVE_POSIX_SEM)</span></span><br><span class="line">        <span class="comment">/* goes here means after spin a while, we still can&#x27;t get the lock</span></span><br><span class="line"><span class="comment">         * so block my self by semaphore</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (mtx-&gt;semaphore) &#123;</span><br><span class="line">            <span class="comment">/* increase process counter who are waiting on the semaphore */</span></span><br><span class="line">            (<span class="type">void</span>) ngx_atomic_fetch_add(mtx-&gt;wait, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* before call sem_wait to block the process, here let&#x27;s try one more time</span></span><br><span class="line"><span class="comment">             * to see if the lock is freed by another process</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (*mtx-&gt;lock == <span class="number">0</span> &amp;&amp; ngx_atomic_cmp_set(mtx-&gt;lock, <span class="number">0</span>, ngx_pid)) &#123;</span><br><span class="line">                (<span class="type">void</span>) ngx_atomic_fetch_add(mtx-&gt;wait, <span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (sem_wait(&amp;mtx-&gt;sem) == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="comment">/* block here */</span></span><br><span class="line">                <span class="type">ngx_err_t</span>  err;</span><br><span class="line"></span><br><span class="line">                err = ngx_errno;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (err != NGX_EINTR) &#123;</span><br><span class="line">                    ngx_log_error(NGX_LOG_ALERT, ngx_cycle-&gt;<span class="built_in">log</span>, err,</span><br><span class="line">                                  <span class="string">&quot;sem_wait() failed while waiting on shmtx&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* as I&#x27;m awoke, decrease the count of waiting processes?</span></span><br><span class="line"><span class="comment">             * Yes! but not here as we already did this in wake process when call ngx_shmtx_wakeup</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            ngx_log_debug0(NGX_LOG_DEBUG_CORE, ngx_cycle-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</span><br><span class="line">                           <span class="string">&quot;shmtx awoke&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* after wake up, start next loop(try to get lock) */</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="comment">/* it goes here only when semaphore is unavailable</span></span><br><span class="line"><span class="comment">         * yield just call usleep(1) after one spin loop is over to block the process</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ngx_sched_yield();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nginx</category>
        <category>shared memory</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>shared memory</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx_upstream_multiplexing_keepalive</title>
    <url>/2020/12/07/nginx-upstream-multiplexing-keepalive/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Http Keep alive(multiplexing) means after a TCP connection serves a request, it’s not closed by server, so that subsequent request can reuse the same connection to avoid create new. hence can improve http performance.<br>enable it from client side(make sure sever does not disable it)</p>
<ul>
<li>Http 1.0: send request(explicit enable) <code>Connection: keep-alive</code></li>
<li>Http 1.1 default is keep-alive(explicit disable <code>Connection: close</code>)</li>
</ul>
<p><code>Note: even connection is keep-alive, it&#39;s not kept for ever if it&#39;s idle(most server has a timeout for idle connection)</code>.</p>
<span id="more"></span>

<h1 id="Upstream-keep-alive"><a href="#Upstream-keep-alive" class="headerlink" title="Upstream keep-alive"></a>Upstream keep-alive</h1><p>Here we say how to enable upstream keep-alive, as by default nginx uses http1.0 for upstream, keep-alive is disabled, to enable upstream keep-alive and make it work, it needs</p>
<ul>
<li>nginx(now as client) to cache the idle connection(keep it)</li>
<li>nginx(now as client) not use http1.0 as by default http1.0 upstream server will close the connection after served.</li>
<li>server(upstream) must not disable keep-alive, out of nginx scope.</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">upstream</span> ups &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">1.1.1.1</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">2.2.2.2</span>;</span><br><span class="line">        <span class="comment"># cache 6 idle connection for this upstream, all servers shares the 6 free connection</span></span><br><span class="line">        <span class="attribute">keepalive</span> <span class="number">6</span>;</span><br><span class="line">        <span class="attribute">keepalive_requests</span> <span class="number">100</span>;</span><br><span class="line">        <span class="attribute">keepalive_timeout</span> <span class="number">60s</span></span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">10.10.10.10:80</span>;</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="comment"># use http 1.1 to tell server not close the connection, hence we can cache it for a while</span></span><br><span class="line">            <span class="comment"># clear Connection header to avoid miss send Connection: close</span></span><br><span class="line">            <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;&quot;</span>;</span><br><span class="line">            proxy_pass: http://ups;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>As mentioned, for idle connection, it’s not kept for ever, it may be closed by client(nginx) Or server due to config</p>
<ul>
<li>client(nginx) closes it due to timed out(on client side) or serve a number of request</li>
<li>server(upstream) closes it due to timed out on server side</li>
</ul>
<h2 id="keep-alive-cache"><a href="#keep-alive-cache" class="headerlink" title="keep-alive cache"></a>keep-alive cache</h2><p>Here is how nginx cache the idle connection to make sure we only cache a number of idle connection.</p>
<p><img src="https://cyun.tech/images/nginx/nginx_upstream_keepalive.png" alt="upstream keepalive"></p>
<p><strong>Data Structure</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* each upstream has one */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/* max kept idle connections for the whole pool(upstream) not each peer */</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>                         max_cached;</span><br><span class="line">    <span class="comment">/* close the idle keep-alive connection if it serves number of requests or timed out */</span></span><br><span class="line">    <span class="type">ngx_uint_t</span>                         requests;</span><br><span class="line">    <span class="type">ngx_msec_t</span>                         timeout;</span><br><span class="line">    <span class="comment">/* cache keep-alive idle connection(tcp established) */</span></span><br><span class="line">    <span class="type">ngx_queue_t</span>                        cache;</span><br><span class="line">    <span class="comment">/* free cache entry that can be used to keep idle connection, queue size is max_cached at initialization */</span></span><br><span class="line">    <span class="type">ngx_queue_t</span>                        <span class="built_in">free</span>;</span><br><span class="line">&#125; <span class="type">ngx_http_upstream_keepalive_srv_conf_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/* for each keep-alive idle connection we have a such entry insert to conf-&gt;cache at head */</span></span><br><span class="line">    <span class="type">ngx_http_upstream_keepalive_srv_conf_t</span>  *conf;</span><br><span class="line">    <span class="type">ngx_queue_t</span>                        <span class="built_in">queue</span>;</span><br><span class="line">    <span class="comment">/* idle peer connection(tcp established, not in use for request) */</span></span><br><span class="line">    <span class="type">ngx_connection_t</span>                  *connection;</span><br><span class="line">    <span class="comment">/* peer info */</span></span><br><span class="line">    <span class="type">socklen_t</span>                          socklen;</span><br><span class="line">    <span class="type">ngx_sockaddr_t</span>                     sockaddr;</span><br><span class="line">&#125; <span class="type">ngx_http_upstream_keepalive_cache_t</span>;</span><br></pre></td></tr></table></figure>

<p><strong>API</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* check idle cache, if found, use existing connection, otherwise create a new by event framework */</span></span><br><span class="line"><span class="type">static</span> <span class="type">ngx_int_t</span> <span class="title function_">ngx_http_upstream_get_keepalive_peer</span><span class="params">(<span class="type">ngx_peer_connection_t</span> *pc, <span class="type">void</span> *data)</span>;</span><br><span class="line"><span class="comment">/* save idle connection to cache */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ngx_http_upstream_free_keepalive_peer</span><span class="params">(<span class="type">ngx_peer_connection_t</span> *pc, <span class="type">void</span> *data, <span class="type">ngx_uint_t</span> state)</span>;</span><br><span class="line"><span class="comment">/* close peer connection if timed out or closed by upstream */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ngx_http_upstream_keepalive_close_handler</span><span class="params">(<span class="type">ngx_event_t</span> *ev)</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nginx</category>
        <category>keepalive</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx-usage-sample</title>
    <url>/2020/12/16/nginx-usage-sample/</url>
    <content><![CDATA[<h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><p>nginx can be used as light web server(serve request directly), reverse proxy(http) and proxy server(stream) for Pop3 and IMAP.</p>
<span id="more"></span>
<h2 id="nginx-as-a-light-static-web-server"><a href="#nginx-as-a-light-static-web-server" class="headerlink" title="nginx as a light static web server"></a>nginx as a light static web server</h2><p><strong>put your website at &#x2F;var&#x2F;www&#x2F;html</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">root</span> /var/www/html;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">index</span> index.htm index.html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="nginx-as-static-content-server-file-server"><a href="#nginx-as-static-content-server-file-server" class="headerlink" title="nginx as static content server(file server)"></a>nginx as static content server(file server)</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> /images/ &#123;</span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>root directive</strong><br>  The root directive specifies the root directory that will be used to search for a file. To obtain the path of a requested file, NGINX appends the request URI to the path specified by the root directive. The directive can be placed on any level within the http {}, server {}, or location {} contexts. In the example below, the root directive is defined for a virtual server. It applies to all location {} blocks where the root directive is not included to explicitly redefine the root:</p>
  <figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">1.1.1.1</span>;</span><br><span class="line">        <span class="comment"># only for this server</span></span><br><span class="line">        <span class="attribute">root</span> /www/data;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /images/ &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> <span class="regexp">~ \.(mp3|mp4)</span> &#123;</span><br><span class="line">            <span class="attribute">root</span> /www/media;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  Here, NGINX searches for a URI that starts with &#x2F;images&#x2F; in the &#x2F;www&#x2F;data&#x2F;images&#x2F; directory in the file system. But if the URI ends with the .mp3 or .mp4 extension, NGINX instead searches for the file in the &#x2F;www&#x2F;media&#x2F; directory because it is defined in the matching location block.</p>
<p>  <strong>If a request ends with a slash, NGINX treats it as a request for a directory and tries to find an index file in the directory</strong>. </p>
</li>
<li><p><strong>index directive</strong><br>  The index directive defines the index file’s name (the default value is index.html). To continue with the example, if the request URI is &#x2F;images&#x2F;some&#x2F;path&#x2F;, NGINX delivers the file &#x2F;www&#x2F;data&#x2F;images&#x2F;some&#x2F;path&#x2F;index.html if it exists. If it does not, NGINX returns HTTP code 404 (Not Found) by default. To configure NGINX to return an <code>automatically generated directory listing instead</code>, include the on parameter to the <code>autoindex directive</code></p>
  <figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># you can also put these at server level or http level</span></span><br><span class="line"><span class="comment"># so that it serve as a whole file server not the /images part only</span></span><br><span class="line"><span class="section">location</span> /images/ &#123;</span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">autoindex_exact_size</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  You can list more than one filename in the index directive. NGINX searches for files in the specified order and returns the first one it finds.</p>
  <figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">index</span> index.<span class="variable">$geo</span>.html index.htm index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>try directive</strong><br>  The try_files directive can be used to check whether the specified file or directory exists; NGINX makes an internal redirect if it does, or returns a specified status code if it doesn’t. For example, to check the existence of a file corresponding to the request URI, use the try_files directive and the $uri variable as follows:</p>
  <figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">root</span> /www/data;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /images/ &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> /images/default.gif;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  The file is specified in the form of the URI, which is processed using the root or alias directives set in the context of the current location or virtual server. In this case, if the file corresponding to the original URI doesn’t exist, NGINX makes an internal redirect to the URI specified by the last parameter, returning &#x2F;www&#x2F;data&#x2F;images&#x2F;default.gif.</p>
<p>  The last parameter can also be a status code (directly preceded by the equals sign) or the name of a location. In the following example, a 404 error is returned if none of the parameters to the try_files directive resolve to an existing file or directory.</p>
  <figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ <span class="variable">$uri</span>.html =<span class="number">404</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  In the next example, if neither the original URI nor the URI with the appended trailing slash resolve into an existing file or directory, the request is redirected to the named location which passes it to a backend server.</p>
  <figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ <span class="variable">@backend</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">location</span> <span class="variable">@backend</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://backend.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>Optimizing Performance for Serving Content</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> /mp3 &#123;</span><br><span class="line">    <span class="attribute">sendfile</span>           <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">sendfile_max_chunk</span> <span class="number">1m</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span>         <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/">setup static content server</a></p>
<h2 id="nginx-as-a-proxy-for-same-app"><a href="#nginx-as-a-proxy-for-same-app" class="headerlink" title="nginx as a proxy(for same app)"></a>nginx as a proxy(for same app)</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment"># one backend server</span></span><br><span class="line">    <span class="section">upstream</span> zp_server1&#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:8089</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="comment"># everything(original uri, args)will be passed to backend server</span></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://zp_server1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="nginx-as-a-load-balancer-for-same-app"><a href="#nginx-as-a-load-balancer-for-same-app" class="headerlink" title="nginx as a load balancer(for same app)"></a>nginx as a load balancer(for same app)</h2><p>load balancer means for the same application, there are several deployed backend servers!, choose one for serving</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment">#two backend servers</span></span><br><span class="line">    <span class="section">upstream</span> zp_server1 &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.1.1:80</span> weight=<span class="number">5</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.1.2:80</span> weight=<span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://zp_server1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="nginx-as-https-server"><a href="#nginx-as-https-server" class="headerlink" title="nginx as https server"></a>nginx as https server</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment"># ssl is needed</span></span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  www.helloworld.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># cert is a must</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span>      cert.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  cert.key;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /var/www;</span><br><span class="line">        <span class="comment"># try index.html, if no, try index.htm</span></span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="nginx-as-proxy-for-different-apps"><a href="#nginx-as-proxy-for-different-apps" class="headerlink" title="nginx as proxy for different apps"></a>nginx as proxy for different apps</h2><p><strong>different websites uri</strong></p>
<ul>
<li><a href="http://www.helloworld.com/finance/">www.helloworld.com/finance/</a></li>
<li><a href="http://www.helloworld.com/product/">www.helloworld.com/product/</a></li>
<li><a href="http://www.helloworld.com/admin/">www.helloworld.com/admin/</a></li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">upstream</span> product_server&#123;</span><br><span class="line">        <span class="comment"># product website server</span></span><br><span class="line">        <span class="attribute">server</span> www.helloworld.com:<span class="number">8081</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">upstream</span> admin_server&#123;</span><br><span class="line">        <span class="attribute">server</span> www.helloworld.com:<span class="number">8082</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">upstream</span> finance_server&#123;</span><br><span class="line">        <span class="attribute">server</span> www.helloworld.com:<span class="number">8083</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">        <span class="attribute">root</span> /var/www/html;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://product_server;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#================================================</span></span><br><span class="line">        <span class="comment"># matching is search location in url</span></span><br><span class="line">        <span class="comment"># if location is /production/</span></span><br><span class="line">        <span class="comment"># url /product, doesn&#x27;t match</span></span><br><span class="line">        <span class="comment">#================================================</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># if location is /product</span></span><br><span class="line">        <span class="comment"># url is /product match, /product/ also match!!</span></span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /product/ &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://product_server;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="section">location</span> /admin/ &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://admin_server;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="section">location</span> /finance/ &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://finance_server;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="proxy-pass-x2F-fastcgi-x2F-scgi-x2F-uwsgi"><a href="#proxy-pass-x2F-fastcgi-x2F-scgi-x2F-uwsgi" class="headerlink" title="proxy_pass&#x2F;fastcgi&#x2F;scgi&#x2F;uwsgi"></a>proxy_pass&#x2F;fastcgi&#x2F;scgi&#x2F;uwsgi</h2><p>proxy_pass is for http(s) between backend, nginx also supports other transport(high level above layer 4) protocol with backend like fastcgi, scgi, uwsgi.</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span>  localhost:<span class="number">9000</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> QUERY_STRING    <span class="variable">$query_string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.(gif|jpg|png)$</span> &#123;</span><br><span class="line">        <span class="attribute">root</span> /data/images;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nginx</category>
        <category>usage</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx-virtual-server</title>
    <url>/2020/12/01/nginx-virtual-server/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>In nginx, a virtual server is defined by a server block with <code>listen</code> directive inside it, something like this.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 1.1.1.1:8000;</span><br><span class="line">    server_name a.b.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>Each virtual server has a unique context, for each request, we first need to know who should be right server that serves the request, this is determined by comparing <code>Host</code> header value or <code>SNI</code> with <code>server_name</code> configured with each virtual server, if none matches, use default virtual server, default virtual server is the one with <code>default</code> keyword in listen directive, if no <code>default</code> configured, the first one in the config(nginx.conf) for that ip:port.</p>
<p>As there could be multiple virtual servers(with different names) listen on same ip:port, <code>nginx builds a hash for the server names for quick searching the matched one</code>, <strong>input: Host(SNI): output: server block ctx</strong>, the next section I will show how virtual server is parsed and management in runtime.</p>
<p><strong>As epoll supports metadata for fd, nginx stores combined context to VIP fd, hence when a new connection comes, we already know that context, from that context get the proper vip by comparing <code>Host header or SNI or use default</code>.</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* same ip:port only has one ngx_listening_t(combined context) */</span></span><br><span class="line"><span class="type">ngx_listening_t</span> &#123;</span><br><span class="line">    <span class="comment">/* virtual servers ctx listen array of ngx_http_in_addr_t, for example */</span></span><br><span class="line">    <span class="type">void</span>               *servers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="virtual-server-organize"><a href="#virtual-server-organize" class="headerlink" title="virtual server organize"></a>virtual server organize</h1><p><img src="https://cyun.tech/images/nginx/ngx_vs_port_management.png" alt="virtual server layout"></p>
]]></content>
      <categories>
        <category>nginx</category>
        <category>virtual-server</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>virtual server</tag>
      </tags>
  </entry>
  <entry>
    <title>pip-deep</title>
    <url>/2019/11/21/pip-deep/</url>
    <content><![CDATA[<h1 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h1><h2 id="pip-commands"><a href="#pip-commands" class="headerlink" title="pip commands"></a>pip commands</h2><p>Here are frequently used commands with pip(pip3 for python3)</p>
<p>search available pkg online goto: <a href="https://pypi.org/pypi">official repo pypi</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip config debug</span><br><span class="line">env_var:</span><br><span class="line"><span class="built_in">env</span>:</span><br><span class="line">global:</span><br><span class="line">  /etc/xdg/pip/pip.conf, exists: False</span><br><span class="line">  /etc/pip.conf, exists: False</span><br><span class="line">site:</span><br><span class="line">  /usr/pip.conf, exists: False</span><br><span class="line">user:</span><br><span class="line">  /root/.pip/pip.conf, exists: False</span><br><span class="line">  /root/.config/pip/pip.conf, exists: False</span><br><span class="line"></span><br><span class="line"><span class="comment"># use pip mirror for speeding up</span></span><br><span class="line">$ pip3 install -U pip</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">$ pip install -U pip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ pip config <span class="built_in">set</span> global.index-url http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"><span class="comment"># OR manually edit /root/.config/pip/pip.conf</span></span><br><span class="line">$ <span class="built_in">cat</span> /root/.config/pip/pip.conf</span><br><span class="line">[global]</span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"><span class="comment"># or change index-url temporary for each install</span></span><br><span class="line">$ pip install --index-url http://mirrors.aliyun.com/pypi/simple/ ansible-core==2.11.12</span><br><span class="line"></span><br><span class="line">$ pip cache <span class="built_in">dir</span></span><br><span class="line">/home/ubuntu/.cache/pip</span><br><span class="line"></span><br><span class="line">$ pip cache list</span><br><span class="line">Nothing cached.</span><br><span class="line"></span><br><span class="line"><span class="comment"># global install, all users see it!!!</span></span><br><span class="line">$ sudo pip install package_name</span><br><span class="line"><span class="comment"># install/uninstall for current user</span></span><br><span class="line">$ pip install package_name <span class="comment"># ~/.local/lib/python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list all version of given package</span></span><br><span class="line">$ pip install ansible==not_exist</span><br><span class="line"><span class="comment"># install a package of given version</span></span><br><span class="line">$ pip install package_name==version</span><br><span class="line">$ pip uninstall package_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip list --format=freeze&gt;req.txt</span></span><br><span class="line">$ pip install -r req.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># list installed python packages using pip</span></span><br><span class="line">$ pip list -v</span><br><span class="line">Package                            Version             Location                                           Installer</span><br><span class="line">---------------------------------- ------------------- -------------------------------------------------- ---------</span><br><span class="line">alabaster                          0.7.12              /home/ubuntu/anaconda3/lib/python3.8/site-packages conda</span><br><span class="line">anaconda-client                    1.7.2               /home/ubuntu/anaconda3/lib/python3.8/site-packages conda</span><br><span class="line">anaconda-navigator                 1.10.0              /home/ubuntu/anaconda3/lib/python3.8/site-packages</span><br><span class="line">anaconda-project                   0.8.3               /home/ubuntu/anaconda3/lib/python3.8/site-packages conda</span><br><span class="line">argh                               0.26.2              /home/ubuntu/anaconda3/lib/python3.8/site-packages</span><br><span class="line">argon2-cffi                        20.1.0              /home/ubuntu/anaconda3/lib/python3.8/site-packages conda</span><br><span class="line">asn1crypto                         1.4.0               /home/ubuntu/anaconda3/lib/python3.8/site-packages conda</span><br><span class="line">astroid                            2.4.2               /home/ubuntu/anaconda3/lib/python3.8/site-packages conda</span><br><span class="line">astropy                            4.0.2               /home/ubuntu/anaconda3/lib/python3.8/site-packages</span><br><span class="line">async-generator                    1.10                /home/ubuntu/anaconda3/lib/python3.8/site-packages conda</span><br><span class="line">atomicwrites                       1.4.0               /home/ubuntu/anaconda3/lib/python3.8/site-packages conda</span><br><span class="line">attrs                              20.3.0              /home/ubuntu/anaconda3/lib/python3.8/site-packages conda</span><br><span class="line">autopep8                           1.5.4               /home/ubuntu/anaconda3/lib/python3.8/site-packages conda</span><br><span class="line">Babel                              2.8.1               /home/ubuntu/anaconda3/lib/python3.8/site-packages conda</span><br><span class="line">backcall                           0.2.0               /home/ubuntu/anaconda3/lib/python3.8/site-packages conda</span><br><span class="line">backports.functools-lru-cache      1.6.1               /home/ubuntu/anaconda3/lib/python3.8/site-packages conda</span><br><span class="line">backports.shutil-get-terminal-size 1.0.0               /home/ubuntu/anaconda3/lib/python3.8/site-packages conda</span><br><span class="line">backports.tempfile                 1.0                 /home/ubuntu/anaconda3/lib/python3.8/site-packages pip</span><br><span class="line"></span><br><span class="line">$ pip list</span><br><span class="line">Package                            Version</span><br><span class="line">---------------------------------- -------------------</span><br><span class="line">alabaster                          0.7.12</span><br><span class="line">anaconda-client                    1.7.2</span><br><span class="line">anaconda-navigator                 1.10.0</span><br><span class="line">anaconda-project                   0.8.3</span><br><span class="line">argh                               0.26.2</span><br><span class="line">argon2-cffi                        20.1.0</span><br><span class="line">asn1crypto                         1.4.0</span><br><span class="line">astroid                            2.4.2</span><br><span class="line">astropy                            4.0.2</span><br><span class="line"></span><br><span class="line">$ pip list --format=freeze</span><br><span class="line">alabaster==0.7.12</span><br><span class="line">anaconda-client==1.7.2</span><br><span class="line">anaconda-navigator==1.10.0</span><br><span class="line">anaconda-project==0.8.3</span><br><span class="line">argh==0.26.2</span><br><span class="line">argon2-cffi==20.1.0</span><br><span class="line">asn1crypto==1.4.0</span><br><span class="line">astroid==2.4.2</span><br><span class="line">astropy==4.0.2</span><br><span class="line">async-generator==1.10</span><br><span class="line">atomicwrites==1.4.0</span><br><span class="line">attrs==20.3.0</span><br><span class="line">autopep8==1.5.4</span><br><span class="line">Babel==2.8.1</span><br><span class="line">backcall==0.2.0</span><br><span class="line"></span><br><span class="line">$ pip list --outdated</span><br><span class="line"></span><br><span class="line"><span class="comment"># !!!while dpkg -l only shows apt-get installed packages!!!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show info of package</span></span><br><span class="line">$ pip show self-tool-lib</span><br><span class="line">Name: self-tool-lib</span><br><span class="line">Version: 0.1</span><br><span class="line">Summary: self utilities <span class="keyword">for</span> tool</span><br><span class="line">Home-page: </span><br><span class="line">Author: Jason Luo</span><br><span class="line">Author-email: jason_lkm@163.com</span><br><span class="line">License: UNKNOWN</span><br><span class="line">Location: /home/data/Anaconda3/envs/py3.9/lib/python3.9/site-packages</span><br><span class="line">Requires: </span><br><span class="line">Required-by: </span><br><span class="line"></span><br><span class="line"><span class="comment"># show files of installed  package</span></span><br><span class="line">$ pip show -f self-tool-lib</span><br><span class="line">Name: self-tool-lib</span><br><span class="line">Version: 0.1</span><br><span class="line">Summary: self utilities <span class="keyword">for</span> tool</span><br><span class="line">Home-page: </span><br><span class="line">Author: Jason Luo</span><br><span class="line">Author-email: jason_lkm@163.com</span><br><span class="line">License: UNKNOWN</span><br><span class="line">Location: /home/data/Anaconda3/envs/py3.9/lib/python3.9/site-packages</span><br><span class="line">Requires: </span><br><span class="line">Required-by: </span><br><span class="line">Files:</span><br><span class="line">  self_tool_lib-0.1.dist-info/INSTALLER</span><br><span class="line">  self_tool_lib-0.1.dist-info/LICENSE</span><br><span class="line">  self_tool_lib-0.1.dist-info/METADATA</span><br><span class="line">  self_tool_lib-0.1.dist-info/RECORD</span><br><span class="line">  self_tool_lib-0.1.dist-info/REQUESTED</span><br><span class="line">  self_tool_lib-0.1.dist-info/WHEEL</span><br><span class="line">  self_tool_lib-0.1.dist-info/direct_url.json</span><br><span class="line">  self_tool_lib-0.1.dist-info/top_level.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># show files in wheel file(which can be installed by pip directly)</span></span><br><span class="line"><span class="comment"># pip install dist/self_tool_lib-0.1-py3-none-any.whl</span></span><br><span class="line">$ python -m zipfile --list  dist/self_tool_lib-0.1-py3-none-any.whl</span><br><span class="line">File Name                                             Modified             Size</span><br><span class="line">self_tool_lib-0.1.dist-info/LICENSE            2022-06-14 15:19:08         1074</span><br><span class="line">self_tool_lib-0.1.dist-info/METADATA           2022-06-14 15:19:08          403</span><br><span class="line">self_tool_lib-0.1.dist-info/WHEEL              2022-06-14 15:19:08           92</span><br><span class="line">self_tool_lib-0.1.dist-info/top_level.txt      2022-06-14 15:19:08            1</span><br><span class="line">self_tool_lib-0.1.dist-info/RECORD             2022-06-14 15:19:08          404</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong><a href="https://zhuanlan.zhihu.com/p/276461821">build pip package</a></strong></p>
<h2 id="apt-get-vs-pip"><a href="#apt-get-vs-pip" class="headerlink" title="apt-get vs pip"></a>apt-get vs pip</h2><p><strong>Note: some python pkg may be only available by apt source or pypi source, not both</strong></p>
<h3 id="pkg-source-is-different"><a href="#pkg-source-is-different" class="headerlink" title="pkg source is different"></a>pkg source is different</h3><p><code>apt-get can install any package from remote repo</code>, not only python related but pip&#x2F;pip3 only for python package, for some python packages you can install it from apt-get or pip, the difference is <code>apt-get use source.list library that&#39;s dedicated for particular ubuntu version, the package from there is always old, but pip uses its own library(PyPI https://pypi.org/pypi) which always have new version for the application</code>, while for some python package, apt-get may NOT have. from apt-get you can’t specify the version to install while pip can have.</p>
<p><strong>pypi usually has many versions of a single pkg while apt source only has one</strong></p>
<h3 id="install-dest-location-is-different"><a href="#install-dest-location-is-different" class="headerlink" title="install dest location is different"></a>install dest location is different</h3><p>apt-get installs python modules in <code>system-wide location</code>. We cannot just install modules in our project virtualenv. pip solves this problem for us. If we are using pip after activating the <code>virtualenv</code>, it is intelligent enough to only install the modules in our project virtualenv. As mentioned in previous point, if there is a version of a particular python package already installed in system-wide location, and one of our project requires an older version of the same python package, in such situations we can use <code>virtualenv and pip to install that older version of python package without any conflicts.</code></p>
<p><strong>apt dest location</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">show dest location</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">dpkg -L python3-httplib2</span></span><br><span class="line">/usr/bin</span><br><span class="line">/usr/lib/</span><br></pre></td></tr></table></figure>

<p><strong>pip dest location</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">show dest location</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pip show httplib2</span></span><br><span class="line">/user/local/bin</span><br><span class="line">/usr/local/lib</span><br><span class="line">~/.local/lib</span><br><span class="line">~/.local/bin</span><br></pre></td></tr></table></figure>

<p>if you install one package by these two, there will be two copies(may be two version of this pkg), but apt-get always wins, as the sys.path always, <code>/usr/bin/; /usr/local/bin</code>, but you can change the PATH.</p>
<h3 id="name-is-different"><a href="#name-is-different" class="headerlink" title="name is different"></a>name is different</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt-get install python3-jinja2</span><br><span class="line">$ yum install -y python3-jinja2</span><br><span class="line"><span class="comment"># vs</span></span><br><span class="line">$ pip install jinjia2</span><br></pre></td></tr></table></figure>

<h2 id="conda"><a href="#conda" class="headerlink" title="conda"></a>conda</h2><p>conda(which has its own repo: <a href="https://anaconda.org/">https://anaconda.org/</a>) is another way to install python pkg, as conda has a python env, activated after you reboot system after installation, hence pip&#x2F;pip3 comes from conda python env, all packages installed either by conda or pip, they see the others as well!!!.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda info</span><br><span class="line">     active environment : base</span><br><span class="line">    active <span class="built_in">env</span> location : /home/ubuntu/anaconda3</span><br><span class="line">            shell level : 1</span><br><span class="line">       user config file : /home/ubuntu/.condarc</span><br><span class="line"> populated config files : </span><br><span class="line">          conda version : 4.9.2</span><br><span class="line">    conda-build version : 3.20.5</span><br><span class="line">         python version : 3.8.5.final.0</span><br><span class="line">       virtual packages : __glibc=2.27=0</span><br><span class="line">                          __unix=0=0</span><br><span class="line">                          __archspec=1=x86_64</span><br><span class="line">       base environment : /home/ubuntu/anaconda3  (<span class="built_in">read</span> only)</span><br><span class="line">           channel URLs : https://repo.anaconda.com/pkgs/main/linux-64</span><br><span class="line">                          https://repo.anaconda.com/pkgs/main/noarch</span><br><span class="line">                          https://repo.anaconda.com/pkgs/r/linux-64</span><br><span class="line">                          https://repo.anaconda.com/pkgs/r/noarch</span><br><span class="line">          package cache : /home/ubuntu/anaconda3/pkgs</span><br><span class="line">                          /home/ubuntu/.conda/pkgs</span><br><span class="line">       envs directories : /home/ubuntu/.conda/envs</span><br><span class="line">                          /home/ubuntu/anaconda3/envs</span><br><span class="line">               platform : linux-64</span><br><span class="line">             user-agent : conda/4.9.2 requests/2.24.0 CPython/3.8.5 Linux/4.15.0-136-generic ubuntu/18.04.5 glibc/2.27</span><br><span class="line">                UID:GID : 1000:1000</span><br><span class="line">             netrc file : None</span><br><span class="line">           offline mode : False</span><br><span class="line"></span><br><span class="line"><span class="comment"># USE conda mirror</span></span><br><span class="line">$ <span class="built_in">cat</span> /root/.condarc </span><br><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: <span class="literal">true</span></span><br><span class="line">default_channels:</span><br><span class="line">  - http://mirrors.aliyun.com/anaconda/pkgs/main</span><br><span class="line">  - http://mirrors.aliyun.com/anaconda/pkgs/r</span><br><span class="line">  - http://mirrors.aliyun.com/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: http://mirrors.aliyun.com/anaconda/cloud</span><br><span class="line">  msys2: http://mirrors.aliyun.com/anaconda/cloud</span><br><span class="line">  bioconda: http://mirrors.aliyun.com/anaconda/cloud</span><br><span class="line">  menpo: http://mirrors.aliyun.com/anaconda/cloud</span><br><span class="line">  pytorch: http://mirrors.aliyun.com/anaconda/cloud</span><br><span class="line">  simpleitk: http://mirrors.aliyun.com/anaconda/cloud</span><br><span class="line"></span><br><span class="line"><span class="comment"># list installed pkgs</span></span><br><span class="line">$ conda list</span><br><span class="line"><span class="comment"># packages in environment at /home/ubuntu/anaconda3:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Name                    Version                   Build  Channel</span></span><br><span class="line">_ipyw_jlab_nb_ext_conf    0.1.0                    py38_0  </span><br><span class="line">_libgcc_mutex             0.1                        main  </span><br><span class="line">alabaster                 0.7.12                     py_0  </span><br><span class="line">anaconda                  2020.11                  py38_0  </span><br><span class="line">anaconda-client           1.7.2                    py38_0  </span><br><span class="line">anaconda-navigator        1.10.0                   py38_0  </span><br><span class="line">anaconda-project          0.8.4                      py_0  </span><br><span class="line">argh                      0.26.2                   py38_0  </span><br><span class="line">argon2-cffi               20.1.0           py38h7b6447c_1  </span><br><span class="line">asn1crypto                1.4.0                      py_0  </span><br><span class="line">astroid                   2.4.2                    py38_0  </span><br><span class="line">astropy                   4.0.2            py38h7b6447c_0  </span><br><span class="line">async_generator           1.10                       py_0  </span><br><span class="line">atomicwrites              1.4.0                      py_0  </span><br><span class="line">attrs                     20.3.0             pyhd3eb1b0_0  </span><br><span class="line">autopep8                  1.5.4                      py_0  </span><br><span class="line">babel                     2.8.1              pyhd3eb1b0_0  </span><br><span class="line">backcall                  0.2.0                      py_0  </span><br><span class="line">backports                 1.0                        py_2  </span><br><span class="line"></span><br><span class="line"><span class="comment"># search available pkgs from remote repo</span></span><br><span class="line">$ conda search <span class="string">&#x27;*scikit&#x27;</span></span><br><span class="line">$ conda search <span class="string">&#x27;numpy&gt;=1.12&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># always use pkg from channel conda-forge which has high priority</span></span><br><span class="line">$ conda search pytest-cov</span><br><span class="line">Loading channels: <span class="keyword">done</span></span><br><span class="line"><span class="comment"># Name                       Version           Build  Channel             </span></span><br><span class="line">pytest-cov                     2.5.1          py27_0  pkgs/main           </span><br><span class="line">pytest-cov                     2.5.1  py27hc4181bb_0  pkgs/main           </span><br><span class="line">pytest-cov                     2.5.1          py35_0  pkgs/main           </span><br><span class="line">pytest-cov                     2.5.1  py35h9d7ae03_0  pkgs/main           </span><br><span class="line">pytest-cov                     2.5.1          py36_0  pkgs/main           </span><br><span class="line">pytest-cov                     2.5.1  py36hd4733f3_0  pkgs/main           </span><br><span class="line">pytest-cov                     2.5.1          py37_0  pkgs/main           </span><br><span class="line">pytest-cov                     2.6.0          py27_0  pkgs/main           </span><br><span class="line">pytest-cov                     2.6.0          py35_0  pkgs/main           </span><br><span class="line">pytest-cov                     2.6.0          py36_0  pkgs/main           </span><br><span class="line">pytest-cov                     2.6.0          py37_0  pkgs/main           </span><br><span class="line">pytest-cov                     2.6.1          py27_0  pkgs/main           </span><br><span class="line">pytest-cov                     2.6.1          py36_0  pkgs/main           </span><br><span class="line">pytest-cov                     2.6.1          py37_0  pkgs/main           </span><br><span class="line">pytest-cov                     2.7.1            py_0  pkgs/main           </span><br><span class="line">pytest-cov                     2.8.1            py_0  pkgs/main           </span><br><span class="line">pytest-cov                     2.9.0            py_0  pkgs/main           </span><br><span class="line">pytest-cov                    2.10.0            py_0  pkgs/main           </span><br><span class="line">pytest-cov                    2.10.1            py_0  pkgs/main           </span><br><span class="line">pytest-cov                    2.10.1    pyhd3eb1b0_0  pkgs/main           </span><br><span class="line">pytest-cov                    2.11.0    pyhd3eb1b0_0  pkgs/main           </span><br><span class="line">pytest-cov                    2.11.1    pyhd3eb1b0_0  pkgs/main</span><br><span class="line"></span><br><span class="line">$ conda install -c conda-forge pytest-cov </span><br><span class="line">$ conda info pytest-cov</span><br><span class="line">$ conda uninstall pytest-cov</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
        <category>pip</category>
      </categories>
  </entry>
  <entry>
    <title>oauth-basic</title>
    <url>/2020/10/09/oauth-basic/</url>
    <content><![CDATA[<h1 id="OAuth"><a href="#OAuth" class="headerlink" title="OAuth"></a>OAuth</h1><p>OAuth 2 is an authorization framework that enables applications to obtain limited access to user accounts on an HTTP service, such as Facebook, GitHub, and DigitalOcean. It works by delegating user authentication to the service that hosts the user account, and authorizing third-party applications to access the user account. OAuth 2 provides authorization flows for web and desktop applications, and mobile devices.</p>
<span id="more"></span>

<h2 id="OAuth-Roles"><a href="#OAuth-Roles" class="headerlink" title="OAuth Roles"></a>OAuth Roles</h2><p>In our case, the application we are building would be the third party application. Facebook would be our HTTP service and the end-user the resource owner. These three fall under the following OAuth roles:</p>
<ul>
<li>Resource Owner&#x2F;End user(provide user&#x2F;password) - This is the user authorizing a third-party application to access certain protected resources from a resource server(facebook).</li>
<li>Client - This is the third party application making protected resource requests to a resource server on behalf of the resource owner(end user).</li>
<li>Resource Server - Hosts the protected resources e.g user profile(provided by facebook)</li>
<li>Authorization Server - Responsible for authenticating the resource owner and providing access token to clients.(provided by facebook as well)</li>
</ul>
<p><img src="https://assets.digitalocean.com/articles/oauth/abstract_flow.png" alt="oauth flow"></p>
<p>In order for successful user authentication to happen, a series of steps need to be followed:</p>
<ol>
<li>The client, (which is our application in this case), requests authorization(ask end-user input user&#x2F;password) from the end-user.</li>
<li>Once the end-user authorizes the client, an application grant is issued.</li>
<li>Our client then requests an access token from the authorization server using the authorization grant.</li>
<li>The authorization server validates the grant and authenticates the client. If the two processes are successful an access token is granted to the client, client only has the access token.</li>
<li>Our client then uses the access token to request the protected resource.</li>
<li>The resources server then validates the access token and if successful, the requested protected resources are shared with the client.</li>
</ol>
<h2 id="Application-Registration"><a href="#Application-Registration" class="headerlink" title="Application Registration"></a>Application Registration</h2><p>Before using OAuth with your application, you must <code>register your application with the service(facebook, github etc)</code>. This is done through a registration form in the “developer” or “API” portion of the service’s website, where you will provide the following information (and probably details about your application):</p>
<ul>
<li>Application Name</li>
<li>Application Website</li>
<li>Redirect URI or Callback URL</li>
</ul>
<p>The redirect URI is where the service will redirect the user after they authorize (or deny) your application, and therefore the part of your application that will handle authorization codes or access tokens.<br>Client ID and Client Secret</p>
<p>Once your application is registered, the service will issue “client credentials” in the form of a client identifier and a client secret. The Client ID is a publicly exposed string that is used by the service API to identify the application, and is also used to build authorization URLs that are presented to users. The Client Secret is used to authenticate the identity of the application to the service API when the application requests to access a user’s account, and must be kept private between the application and the API.</p>
<h2 id="OAuth-scopes"><a href="#OAuth-scopes" class="headerlink" title="OAuth scopes"></a>OAuth scopes</h2><p>Scopes let you specify exactly what type of access need before third-part application gets the access token. Scopes limit access for OAuth tokens, When facebook is responding to your OAuth request, the requested scopes will be displayed to them when they are asked to approve your request, you can know what scopes that third-part application tries to get.</p>
<p><code>OAuth does not define any particular values for scopes</code>, since it is highly dependent on the service’s internal architecture and needs. </p>
<ul>
<li><a href="https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/">github account scope format</a></li>
<li><a href="https://developers.google.com/identity/protocols/oauth2/scopes">google account scope format</a></li>
</ul>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2">introduction to auth 2</a></li>
</ul>
]]></content>
      <categories>
        <category>Auth</category>
        <category>OAuth2</category>
      </categories>
      <tags>
        <tag>OAuth</tag>
      </tags>
  </entry>
  <entry>
    <title>protocol_ip</title>
    <url>/2021/04/11/protocol-ip/</url>
    <content><![CDATA[<h1 id="checksum"><a href="#checksum" class="headerlink" title="checksum"></a>checksum</h1><p>A check sum is basically a value that is computed from data packet to check its integrity. Through integrity, we mean a check on whether the data received is error free or not. This is because while traveling on network a data packet can become corrupt and there has to be a way at the receiving end to know that data is corrupted or not. This is the reason the checksum field is added to the header. At the source side, the checksum is calculated and set in header as a field. At the destination side, the checksum is again calculated and crosschecked with the existing checksum value in header to see if the data packet is OK or not.</p>
<p>This article aims to explain how checksum is calculated, the method is used to calculate checksum. both IP and TCP uses the same method to calculate its checksum, <code>IP checksum is only for IP header, while TCP checksum is for Pseudo IP header + TCP header + TCP payload.</code></p>
<span id="more"></span>

<h2 id="IP-header-checksum"><a href="#IP-header-checksum" class="headerlink" title="IP header checksum"></a>IP header checksum</h2><p><strong>method:</strong><br>we divide the IP header is 16 bit words and sum each of them up and then finally do a one’s compliment(补集) of the sum then the value generated out of this operation would be the checksum.</p>
<p><strong>Example</strong><br>IP header as example. b1e6 is the checksum, let’s see how it’s calculated.<br><code>4500 003c 1c46 4000 4006 b1e6 ac10 0a63 ac10 0a0c</code></p>
<p>4500<br>003c</p>
<blockquote>
<p>sum: 453c</p>
</blockquote>
<p>1c46</p>
<blockquote>
<p>sum: 6182</p>
</blockquote>
<p>4000</p>
<blockquote>
<p>sum: a182</p>
</blockquote>
<p> 4006</p>
<blockquote>
<p>sum: e188</p>
</blockquote>
<p> ac10</p>
<blockquote>
<p>sum: 8d99  larger than 16 bits, overflow, ignore overflow and + 1</p>
</blockquote>
<p> 0a63</p>
<blockquote>
<p>97fc</p>
</blockquote>
<p> ac10</p>
<blockquote>
<p>sum: 440d  larger than 16 bits, overflow, ignore overflow and + 1</p>
</blockquote>
<p> 0a0c</p>
<blockquote>
<p>sum: 4e19</p>
</blockquote>
<p>checksum: b1e6 (b1e6 + 4e19 &#x3D;&#x3D; ffff)</p>
]]></content>
      <categories>
        <category>protocol</category>
        <category>ip</category>
      </categories>
      <tags>
        <tag>protocol</tag>
        <tag>ip</tag>
      </tags>
  </entry>
  <entry>
    <title>authentication_encryption</title>
    <url>/2020/11/10/protocol-security-authentication-encryption/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>cryptography is about constructing and analyzing protocols that prevent third parties or the public from reading private messages; various aspects in information security such as data confidentiality, data integrity, authentication, and non-repudiation are central to modern cryptography.<br><img src="https://cyun.tech/images/ssl/security.png" alt="data security"></p>
<span id="more"></span>
<h2 id="Data-Integrity"><a href="#Data-Integrity" class="headerlink" title="Data Integrity"></a>Data Integrity</h2><p>In real world, something is sent along with message, make sure it’s not modified by the third party.</p>
<h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>The MD5 <code>message-digest algorithm</code> is a widely used hash function producing a 128-bit hash value, this hash value sent out with message to protects a message’s <code>data integrity</code>, receiver uses MD5(algorithm) to calculate the hash value again, if it’s same with the one sent by sender, the data is not modified by someone else.</p>
<h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><h3 id="MAC-message-authentication-code"><a href="#MAC-message-authentication-code" class="headerlink" title="MAC(message authentication code)"></a>MAC(message authentication code)</h3><p>A message authentication code (often called MAC) is a block of a few bytes that is used to authenticate a message.</p>
<p>The MAC value protects a message’s <code>data integrity,as well as its authenticity(because it uses private key as MAC input)</code>, by allowing verifiers (who also possess the <code>secret key</code>) to detect any changes to the message content.</p>
<p>here is workflow of MAC</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/MAC.svg/1322px-MAC.svg.png" alt="mac workflow"></p>
<p>The term <code>message integrity code (MIC)</code> is frequently substituted for the term MAC,especially in communications, to distinguish it from the use of MAC meaning MAC address (for media access control address).</p>
<p>MAC is the abstract part defined by RFC, In implementation, there are ways(algorithms) to calculate the code, that’s what you mostly see like HMAC, PMAC, OMAC, CMA, UMAC etc, HMAC is the most popular one.</p>
<h4 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h4><p>HMAC stands for <strong>hash-based message authentication code</strong>(the generated authentication code also called Digest). It is a specific type of MAC. It contains cryptographic hash functions and a secret cryptographic key. HMAC is capable of verifying data integrity and authentication of a message at the same time.</p>
<p>HAC(in implementation) has several algorithms to generate digest, here is a summary of that.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hash</span> algorithm     digest length(bit)</span><br><span class="line">HmacMD5                 128</span><br><span class="line">HmacSHA1                160</span><br><span class="line">HmacSHA256              256</span><br><span class="line">HmacSHA384              384</span><br><span class="line">HmacSHA512              512</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python <span class="number">3.5</span><span class="number">.2</span> (default, Sep <span class="number">10</span> <span class="number">2016</span>, 08:<span class="number">21</span>:<span class="number">44</span>) </span><br><span class="line">[GCC <span class="number">5.4</span><span class="number">.0</span> <span class="number">20160609</span>] on linux</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hmac</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">b&#x27;Hello, world!&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>key = <span class="string">b&#x27;secret&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h = hmac.new(key, message, digestmod=<span class="string">&#x27;MD5&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h.hexdigest()</span><br><span class="line"><span class="string">&#x27;fa4ee7d173f2d97ee79022d1a7355bcf&#x27;</span>  ------&gt;<span class="number">128</span> bits</span><br></pre></td></tr></table></figure>

<h2 id="Modern-cryptography"><a href="#Modern-cryptography" class="headerlink" title="Modern cryptography"></a>Modern cryptography</h2><h3 id="Symmetric-key-cryptography"><a href="#Symmetric-key-cryptography" class="headerlink" title="Symmetric-key cryptography"></a>Symmetric-key cryptography</h3><p>Symmetric-key cryptography refers to encryption methods in which both <strong>the sender and receiver share the same key.</strong></p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/2/27/Symmetric_key_encryption.svg" alt="symmetric-key"></p>
<p><strong>Implementation</strong></p>
<ul>
<li>Twofish</li>
<li><strong>AES(Advanced Encryption Standard) original name: Rijndael</strong></li>
<li>Blowfish</li>
<li>RC4</li>
<li>DES</li>
<li>3DES</li>
</ul>
<h3 id="Public-key-cryptography-asymmetric-key"><a href="#Public-key-cryptography-asymmetric-key" class="headerlink" title="Public-key cryptography(asymmetric key)"></a>Public-key cryptography(asymmetric key)</h3><p>A public key system is so constructed that calculation of one key (the ‘private key’) is computationally infeasible from the other (the ‘public key’), even though they are necessarily related. Instead, both keys are generated secretly, as an interrelated pair.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/f/f9/Public_key_encryption.svg" alt="public-key system"></p>
<ul>
<li>Diffie–Hellman key exchange protocol</li>
<li>DSS (Digital Signature Standard), which incorporates the Digital Signature Algorithm</li>
<li><strong>RSA encryption algorithm</strong></li>
<li>YAK authenticated key agreement protocol</li>
</ul>
<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul>
<li><a href="https://en.wikipedia.org/wiki/Cryptography">Cryptography wiki</a></li>
</ul>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>authentication</tag>
        <tag>encryption</tag>
        <tag>public-key</tag>
        <tag>symmetric-key</tag>
      </tags>
  </entry>
  <entry>
    <title>protocol-ssl</title>
    <url>/2021/04/16/protocol-ssl/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><h1 id="Handshake"><a href="#Handshake" class="headerlink" title="Handshake"></a>Handshake</h1><p>SSL&#x2F;TLS handshake is different between TLS1.2 and TLS1.3, but they have common concept.</p>
<p>The purpose of the SSL&#x2F;TLS handshake is to perform all the cryptographic work needed to <code>have a secure connection</code>. This includes authenticating the SSL certificate being used, and generating an encryption key.</p>
<p>The TLS handshake accomplishes 3 main things:</p>
<ul>
<li>Exchanging cipher suites and parameters</li>
<li>Authenticating one or both parties</li>
<li>Creating&#x2F;Exchanging symmetric session keys</li>
</ul>
<span id="more"></span>

<p><strong>Negotiating Cipher Suites</strong><br>The first step of the TLS handshake requires the client and server to share their capabilities so they can find the cryptographic features they mutually support.</p>
<p>Once a client and server agree on the exact encryption methods they will use, this is called a cipher suite – the server sends the client its SSL certificate</p>
<p><strong>Authentication SSL certificate</strong><br>Upon its receipt, the client checks to make sure the <code>certificate is “authentic.”</code> This is an extremely important step. To truly have a secure connection, you can’t just encrypt your data, you also need to know it’s being sent to the right website&#x2F;organization. SSL&#x2F;TLS certificates provide that authentication.</p>
<p>During the authentication portion of the TLS handshake, the client performs several cryptographically secure checks to make sure the certificate provided by the server is authentic. This includes <strong>checking the digital signature and making sure the certificate originates from a trusted CA.</strong></p>
<p>With the most common public key cryptosystem, RSA, the client will encrypt random data(<strong>pre-master-key</strong>) with the public key that needs to be used to generate the session key. The server will only be able to decrypt and use that data if it has the private key, which provides proof of possession.</p>
<p><strong>Key Exchange</strong><br>The last part of the TLS handshake involves creating the “session key,” which is the key that will actually be used for secure communication, both client and server <strong>compute the session key by them self</strong> based on <code>(client random number, server random number, pre-master key)</code></p>
<p>Session keys are “symmetric,” meaning the same key is used for encryption and decryption. These keys can achieve strong encryption much more efficiently than asymmetric keys, making them appropriate for sending data back and forth in an HTTPS connection。</p>
<p> The exact method for generating the key varies based on the cipher suite that was chosen, with the two most common schemes being <code>RSA and Diffie-Hellman</code>.</p>
<p> To end the handshake, each party lets the other know they have done all the necessary work, then both run check-sums to make sure the handshake occurred without any malicious tampering or corruption.</p>
<h2 id="TLS-1-2-Handshake"><a href="#TLS-1-2-Handshake" class="headerlink" title="TLS 1.2 Handshake"></a>TLS 1.2 Handshake</h2><p> <strong>Please note this is just the logical process, several steps combine together and may send in one TCP packet.</strong></p>
<p><img src="https://www.thesslstore.com/blog/wp-content/uploads/2017/01/SSL_Handshake_10-Steps-1.png" alt="TLS 1.2 handshake"></p>
<ol>
<li><p>The first message is called the “ClientHello.” This message lists the client’s capabilities so that the server can pick the cipher suite that the two will use to communicate. <strong>It also includes a large, randomly picked prime number called a “client random.”</strong></p>
</li>
<li><p>The server politely responds with a “SeverHello” message. In this message it tells the client what connection parameters it has selected from the provided list and <strong>returns its own randomly selected prime number called a “server random.”</strong> If the client and server do not share any capabilities in common, the connection terminates unsuccessfully.</p>
</li>
<li><p>In the “Certificate” message, the Server sends its SSL certificate chain (which includes its leaf certificate and intermediate certificates) to the client. To provide authentication to the connection an SSL certificate is signed by a CA, which allows the client to verify that the certificate is legitimate. Upon receipt, the client performs several checks to authenticate the certificate. This includes <strong>checking the certificate’s digital signature, verifying the certificate chain, and checking for any other potential problems with the certificate data (expired certificate, wrong domain name, etc)</strong>. The client will also make sure the server has possession of the certificate’s private key. This is done during the key exchange&#x2F;generation process.</p>
</li>
<li><p><strong>(OPTIONAL)[<code>Server Key Exchange</code>]This is an optional message</strong>, only needed for certain key exchange methods (Diffie-Hellman) that require the server provides additional data.</p>
</li>
<li><p>The “Server Hello Done” message tells the client that it has sent over all its messages.</p>
</li>
<li><p>[<code>Client Key Exchange</code>] The client then provides its contribution to the session key. <code>The specifics of this step depend on the key exchange method that was decided on in the initial “Hello” messages</code>. In this example we’re looking at <code>RSA, so the client is going to generate a random string of bytes called a pre-master secret</code>, then encrypt it with the server’s public key and transmit it.</p>
</li>
<li><p>The <code>“Change Cipher Spec”</code> message lets the other party know that it has generated the session key and is going to switch to encrypted communication.</p>
</li>
<li><p>The <code>“Finished” message</code> is then sent to indicate that the handshake is complete on the client side. The Finished message is encrypted, and is the first data protected by the session key. The message contains data (MAC) that allows each party to make sure the handshake was not tampered with.</p>
</li>
<li><p>Now it’s the server’s turn to do the same. It decrypts the pre-master secret and computes the session key. Then it sends its <code>“Change Cipher Spec”</code> message to indicate it is switching to encrypted communication.</p>
</li>
<li><p>The server sends its <code>“Finished”</code> message using the symmetric session key it just generated, it also performs the same check-sum to verify the integrity of the handshake.</p>
</li>
</ol>
<p>After these steps the SSL handshake is complete. Both parties now have a session key and will begin to communicate with an encrypted and authenticated connection.<br>2, 3, 4, 5 may in one TCP message, 6.7.8 may in one TCP message, 9, 10 may in one TCP message.</p>
<p>Another way to see SSL handshake  </p>
<p><img src="http://coppercash.github.io/media/files/2013/12/18/SSL_handshake_with_two_way_authentication_with_certificates.svg" alt="TLS1.2 handshake"></p>
<h2 id="TLS-1-3-Handshake"><a href="#TLS-1-3-Handshake" class="headerlink" title="TLS 1.3 Handshake"></a>TLS 1.3 Handshake</h2><h1 id="Cipher-Suite"><a href="#Cipher-Suite" class="headerlink" title="Cipher Suite"></a>Cipher Suite</h1><p>A cipher suite is a collection of algorithms that determine the parameters of a secure connection.</p>
<p>At the start of any connection, the very first interaction, the Client Hello, is a list of cipher suites that are supported. The server looks for the best, most secure option that is mutually supported and responds with its choice. You can look at a cipher suite and figure out all of the parameters of the handshake and the connection</p>
<h2 id="TLS1-2"><a href="#TLS1-2" class="headerlink" title="TLS1.2"></a>TLS1.2</h2><p>four distinct algorithms represented in TLS 1.2 cipher suites:</p>
<ul>
<li>Key Exchange(how to generate pre-master key)</li>
<li>Authentication(how to valid certificate)</li>
<li>Bulk Cipher(data encryption)</li>
<li>Hashing Algorithm(data integrity check)</li>
</ul>
<p><strong>Example Format</strong><br><img src="https://www.thesslstore.com/blog/wp-content/uploads/2019/04/TLS-1.2-Cipher-Suite.png" alt="TLS1.2 Cipher"></p>
<ul>
<li>TLS is the protocol</li>
<li>ECDHE is the key exchange algorithm</li>
<li>ECDSA is the authentication algorithm</li>
<li>AES 128 GCM is the symmetric encryption algorithm</li>
<li>SHA256 is the hashing algorithm.</li>
</ul>
<p>In the example above, we’re using Elliptic Curve Diffie-Hellman Ephemeral(ECDHE) for key exchange and Elliptic Curve Digital Signature Algorithm(ECDSA) for authentication. DH can also be paired with RSA (functioning as a digital signature algorithm) to accomplish authentication.</p>
<p>TLS 1.2 has 37 available ciphers in total, though not all of them are advisable. Here’s a list of the most widely-supported cipher suites:</p>
<ul>
<li><p>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</p>
</li>
<li><p>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</p>
</li>
<li><p>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA</p>
</li>
<li><p>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA</p>
</li>
<li><p>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256</p>
</li>
<li><p>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384</p>
</li>
<li><p>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</p>
</li>
<li><p>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</p>
</li>
<li><p>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA</p>
</li>
<li><p>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA</p>
</li>
<li><p>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256</p>
</li>
<li><p>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384</p>
</li>
<li><p>TLS_DHE_RSA_WITH_AES_128_GCM_SHA256</p>
</li>
<li><p>TLS_DHE_RSA_WITH_AES_256_GCM_SHA384</p>
</li>
<li><p>TLS_DHE_RSA_WITH_AES_128_CBC_SHA</p>
</li>
<li><p>TLS_DHE_RSA_WITH_AES_256_CBC_SHA</p>
</li>
<li><p>TLS_DHE_RSA_WITH_AES_128_CBC_SHA256</p>
</li>
<li><p>TLS_DHE_RSA_WITH_AES_256_CBC_SHA256</p>
</li>
</ul>
<h2 id="TLS-1-3"><a href="#TLS-1-3" class="headerlink" title="TLS 1.3"></a>TLS 1.3</h2><p>TLS 1.3 has made countless improvements over its predecessors, which is good considering it was in development for about a decade. The IETF removed support for older outmoded algorithms and streamlined everything, shortening the entire handshake from two round trips to one and reducing the sizes of cipher suites from four negotiations&#x2F;algorithms to two.</p>
<p>The number of supported cipher suites has also dropped from 37 to five. Here’s an example of a TLS 1.3 cipher suite:<br><img src="https://www.thesslstore.com/blog/wp-content/uploads/2019/04/TLS-1.3-cipher-suite.png" alt="TLS1.3 Cipher Suite"></p>
<ul>
<li>TLS is the protocol</li>
<li>AES 256 GCM is the Authenticated Encryption with Associated Data (AEAD) algorithm</li>
<li>SHA384 is the Hashed-Key Derivation Function (HKFD) algorithm</li>
</ul>
<p>We(TLS 1.3) already know we’re going be <code>using some version of Diffie-Hellman Ephemeral key exchange</code>, we just don’t know the parameters, so that means that the first two algorithms in the TLS 1.2 cipher suite are no longer needed. Those functions are still occurring, they just <code>no longer need to be negotiated during the handshake</code>.</p>
<p>Here are the five supported TLS 1.3 cipher suites:</p>
<ul>
<li>TLS_AES_256_GCM_SHA384</li>
<li>TLS_CHACHA20_POLY1305_SHA256</li>
<li>TLS_AES_128_GCM_SHA256</li>
<li>TLS_AES_128_CCM_8_SHA256</li>
<li>TLS_AES_128_CCM_SHA256</li>
</ul>
<h1 id="SNI"><a href="#SNI" class="headerlink" title="SNI"></a>SNI</h1><h2 id="why-need-SNI"><a href="#why-need-SNI" class="headerlink" title="why need SNI"></a>why need SNI</h2><p>Let’s begin from an example, Let’s say you have two HTTP websites and you want to run them on <strong>a single IP address and port</strong>, how to config nginx to support this.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen  80;</span><br><span class="line">        server_name www.example.com;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen  80;</span><br><span class="line">        server_name www.example.org;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Both server has the same IP and port!!!</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The default_server parameter, <span class="keyword">if</span> present, will cause the server to become the default server <span class="keyword">for</span> the specified address:port pair.</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">If none of the directives have the default_server parameter</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">then</span> the first server with the address:port pair will be the default server <span class="keyword">for</span> this pair</span></span><br></pre></td></tr></table></figure>
<p>when a user requests a particular site out of two, it uses a unique HTTP header(‘HOST’) that includes hostname.<br>nginx will use this header to match the request server, hence use that server to serve the request.</p>
<p><img src="https://cyun.tech/images/ssl/http-client-server-interaction.png" alt="http"></p>
<p>but this won’t work in the case of HTTPS, that’s because the HTTPS protocol uses an SSL&#x2F;TLS handshake to enforce secure communications between the client (browser) and server. The HTTP header will only be sent once the handshake is over. <strong>during the handshake, we need to send server’s certificate to client, which server’s certificate should be sent is a problem because we do not have HOST header right now</strong>, before SNI, we must listen on different IPs to support different website, so that one IP&lt;—–&gt;one certificate, after SNI was introduced, no need to use different addresses.</p>
<h2 id="what’s-SNI"><a href="#what’s-SNI" class="headerlink" title="what’s SNI"></a>what’s SNI</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name www.example.com;</span><br><span class="line">        ssl_certificate     www.example.com.crt;</span><br><span class="line">        ssl_certificate_key www.example.com.key;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name www.example.org;</span><br><span class="line">        ssl_certificate     www.example.org.crt;</span><br><span class="line">        ssl_certificate_key www.example.org.key;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>as Server Name Indication (SNI), an extension to the SSL&#x2F;TLS protocol, <code>allows multiple SSL certificates to be hosted on a single unique IP address</code>. <strong>SNI does this by inserting the HTTP header (virtual domain) in the SSL&#x2F;TLS handshake</strong>. As the server is able to see the virtual domain at ssl handshake phase, hence send correct certificate and serves the client with the website he&#x2F;she requested.</p>
<p><img src="https://cyun.tech/images/ssl/sni-vs-non-sni.png" alt="https"></p>
<h1 id="SSL-certificate"><a href="#SSL-certificate" class="headerlink" title="SSL certificate"></a>SSL certificate</h1><p>Certificate is used for identification, like you’re a good man, I trust you, Or it’s good company, I can send my personal info to it!!</p>
<p>How to identify the certificate to know you’re good man?<br>As certificate is issued by CA encrypted with its private key(popular CA’s public key is always installed at PC), if we can decrypt the certificate and valid the field in it, Ok, you’re good man!!!</p>
<p><strong>certificate contains company’s info and its public key! and encrypted with CA’s private key!!!</strong>  </p>
<p><img src="https://cyun.tech/images/ssl/certificate.png" alt="certificate"></p>
<p>Actually, certificate contains two parts, one is CSR(public key+ basic info), the other is signature(CA signed use CA private key), then encode these two with BASE64. that means you can <code>get the basic info and public key,without verify it</code>, but you can’t trust them until you verify it(use CA public key)</p>
<p>Everyone should have a certificate if he&#x2F;she needs to be identified by others. First he&#x2F;she gives his&#x2F;her certificate(like an ID) to the one she&#x2F;he wants to talk, then the one ASKs CA(certificate authority ), if this guy is a good man(good company), did he register at CA? CA checks his db, ok, he is good man(good company), you can talk with he&#x2F;her, or trust he&#x2F;her. but be sure talk with encryption, so that others can NOT know what you’re saying!</p>
<p><strong>Before SSL, what client&#x2F;server needs to do?</strong><br>client&#x2F;server need to get their certificates and install CA, for two direction identification!</p>
<ul>
<li><p>Install CA<br>  Always the computer(OS) pre installed commonly used CA, organized like a tree(CA tree)</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root(CA)</span><br><span class="line">|      |</span><br><span class="line">|      |</span><br><span class="line">   CA1    CA2</span><br></pre></td></tr></table></figure>
<p>  Note: each CA entry contains CA’s public key! key point!!<br>  (certificate is encrypted by CA’s private key)</p>
</li>
<li><p>Get certificate<br> server(client) generates its own public&#x2F;private keys, then send a CSR(certificate signing request) which contains its public key&#x2F;company name, website etc to CA, CA encrypts these info with CA’s private key to issue a certificate! now server(client) has its certificate(encrypted with CA’s private key) which contains his public key, company info and signature.</p>
<p> <img src="https://cyun.tech/images/ssl/ssl-certificate.png" alt="certificate generation"></p>
</li>
</ul>
<h2 id="Certificate-format"><a href="#Certificate-format" class="headerlink" title="Certificate format"></a>Certificate format</h2><p><code>X.509 - 这是一种证书标准</code>,主要定义了证书中应该包含哪些内容.其详情可以参考RFC5280,SSL使用的就是这种证书标准.</p>
<p>目前有以下<code>两种编码格式(实现方式).(PEM, DER编码格式)</code></p>
<h3 id="PEM"><a href="#PEM" class="headerlink" title="PEM"></a>PEM</h3><p>Privacy Enhanced Mail,打开看文本格式,以”—–BEGIN…”开头, “—–END…”结尾,内容是BASE64编码.  </p>
<p>查看PEM格式证书的信息:<code>$ openssl x509 -in certificate.pem -text -noout</code><br><code>Apache和NGINX服务器偏向于使用这种编码格式.</code></p>
<p>PEM – Openssl使用 PEM(Privacy Enhanced Mail)格式来存放各种信息, 它是 **<code>openssl 默认采用的信息存放方式</code>**。<br>Openssl 中的 PEM 文件一般包含如下信息:</p>
<ul>
<li><p>内容类型:表明本文件存放的是什么信息内容,它的形式为“——-BEGIN XXXX ——”,与结尾的“——END XXXX——”对应。</p>
</li>
<li><p>头信息:表明数据是如果被处理后存放,openssl 中用的最多的是加密信息,比如加密算法以及初始化向量 iv。</p>
</li>
<li><p>信息体:为 BASE64 编码的数据。可以包括所有私钥（RSA 和 DSA）、公钥（RSA 和 DSA）和 (x509) 证书。<br>它存储用 Base64 编码的 DER 格式数据，用 ascii 报头包围，因此适合系统之间的文本模式传输。</p>
</li>
</ul>
<p><strong>使用PEM格式存储的证书：</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">—–BEGIN CERTIFICATE—–</span><br><span class="line">MIICJjCCAdCgAwIBAgIBITANBgkqhkiG9w0BAQQFADCBqTELMAkGA1UEBhMCVVMx</span><br><span class="line">………</span><br><span class="line">1p8h5vkHVbMu1frD1UgGnPlOO/K7Ig/KrsU=</span><br><span class="line">—–END CERTIFICATE—–</span><br></pre></td></tr></table></figure>

<p><strong>使用PEM格式存储的私钥：</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">—–BEGIN RSA PRIVATE KEY—–</span><br><span class="line">MIICJjCCAdCgAwIBAgIBITANBgkqhkiG9w0BAQQFADCBqTELMAkGA1UEBhMCVVMx</span><br><span class="line">………</span><br><span class="line">1p8h5vkHVbMu1frD1UgGnPlOO/K7Ig/KrsU=</span><br><span class="line">—–END RSA PRIVATE KEY—–</span><br></pre></td></tr></table></figure>
<p><strong>使用PEM格式存储的证书请求文件：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">—–BEGIN CERTIFICATE REQUEST—–</span><br><span class="line">MIICJjCCAdCgAwIBAgIBITANBgkqhkiG9w0BAQQFADCBqTELMAkGA1UEBhMCVVMx</span><br><span class="line">………</span><br><span class="line">1p8h5vkHVbMu1frD1UgGnPlOO/K7Ig/KrsU=</span><br><span class="line">—–END CERTIFICATE REQUEST—–</span><br></pre></td></tr></table></figure>

<p><strong>Here is a certificate(encode with base64)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIICPjCCAaegAwIBAgIBADANBgkqhkiG9w0BAQ0FADA8MQswCQYDVQQGEwJ1czEL</span><br><span class="line">MAkGA1UECAwCYmoxCzAJBgNVBAoMAnd3MRMwEQYDVQQDDAp3d3cuYXMuY29tMB4X</span><br><span class="line">DTE5MTAyODE1MDUxNFoXDTIwMTAyNzE1MDUxNFowPDELMAkGA1UEBhMCdXMxCzAJ</span><br><span class="line">BgNVBAgMAmJqMQswCQYDVQQKDAJ3dzETMBEGA1UEAwwKd3d3LmFzLmNvbTCBnzAN</span><br><span class="line">BgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA1P7qDXxtezldoIv5Id7pylE0k3JMqUa1</span><br><span class="line">nw3HLhITZfOs2kt/hvoeeVcsOZMsgXtHNTHZCJrA6KilnCUpJUM3qhKjmLLfRE9Q</span><br><span class="line">wahEbd9zoCxvDNhBztcx8UFZKtX3oOtYBlmW2QHrzm9mHfRduYFSiRsLyMOzeU98</span><br><span class="line">BKfMwV+ZdZMCAwEAAaNQME4wHQYDVR0OBBYEFFzwMNE95TTwAifd8k2//byKQzyc</span><br><span class="line">MB8GA1UdIwQYMBaAFFzwMNE95TTwAifd8k2//byKQzycMAwGA1UdEwQFMAMBAf8w</span><br><span class="line">DQYJKoZIhvcNAQENBQADgYEACxvLypbO4tugxpcgl6NFsYx9pGwp4eMteyPVa1pt</span><br><span class="line">FuRytVrTyV/AP397nazQ9Msm7vFxlmHjQoVyZ29a49QTN/uFAkV+OkZu0QqjY//I</span><br><span class="line">0t0uW2lD/+jdRP+MLt2aVga3qPuS9DaxN0b52DOoJTLCmjJfApdrqdqLC+QiOfxr</span><br><span class="line">j+Q=</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure>

<p><strong>After decode with base64</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Certificate:</span><br><span class="line">    Data:</span><br><span class="line">        Version: 3 (0x2)</span><br><span class="line">        Serial Number: 0 (0x0)</span><br><span class="line">    Signature Algorithm: sha512WithRSAEncryption</span><br><span class="line">        Issuer: C=us, ST=bj, O=ww, CN=www.as.com</span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Oct 28 15:05:14 2019 GMT</span><br><span class="line">            Not After : Oct 27 15:05:14 2020 GMT</span><br><span class="line">        Subject: C=us, ST=bj, O=ww, CN=www.as.com</span><br><span class="line">        Subject Public Key Info:</span><br><span class="line">            Public Key Algorithm: rsaEncryption</span><br><span class="line">                Public-Key: (1024 bit)</span><br><span class="line">                Modulus:</span><br><span class="line">                    00:d4:fe:ea:0d:7c:6d:7b:39:5d:a0:8b:f9:21:de:</span><br><span class="line">                    e9:ca:51:34:93:72:4c:a9:46:b5:9f:0d:c7:2e:12:</span><br><span class="line">                    13:65:f3:ac:da:4b:7f:86:fa:1e:79:57:2c:39:93:</span><br><span class="line">                    2c:81:7b:47:35:31:d9:08:9a:c0:e8:a8:a5:9c:25:</span><br><span class="line">                    29:25:43:37:aa:12:a3:98:b2:df:44:4f:50:c1:a8:</span><br><span class="line">                    44:6d:df:73:a0:2c:6f:0c:d8:41:ce:d7:31:f1:41:</span><br><span class="line">                    59:2a:d5:f7:a0:eb:58:06:59:96:d9:01:eb:ce:6f:</span><br><span class="line">                    66:1d:f4:5d:b9:81:52:89:1b:0b:c8:c3:b3:79:4f:</span><br><span class="line">                    7c:04:a7:cc:c1:5f:99:75:93</span><br><span class="line">                Exponent: 65537 (0x10001)</span><br><span class="line">        X509v3 extensions:</span><br><span class="line">            X509v3 Subject Key Identifier: </span><br><span class="line">                5C:F0:30:D1:3D:E5:34:F0:02:27:DD:F2:4D:BF:FD:BC:8A:43:3C:9C</span><br><span class="line">            X509v3 Authority Key Identifier: </span><br><span class="line">                keyid:5C:F0:30:D1:3D:E5:34:F0:02:27:DD:F2:4D:BF:FD:BC:8A:43:3C:9C</span><br><span class="line"></span><br><span class="line">            X509v3 Basic Constraints: </span><br><span class="line">                CA:TRUE</span><br><span class="line">    Signature Algorithm: sha512WithRSAEncryption</span><br><span class="line">         0b:1b:cb:ca:96:ce:e2:db:a0:c6:97:20:97:a3:45:b1:8c:7d:</span><br><span class="line">         a4:6c:29:e1:e3:2d:7b:23:d5:6b:5a:6d:16:e4:72:b5:5a:d3:</span><br><span class="line">         c9:5f:c0:3f:7f:7b:9d:ac:d0:f4:cb:26:ee:f1:71:96:61:e3:</span><br><span class="line">         42:85:72:67:6f:5a:e3:d4:13:37:fb:85:02:45:7e:3a:46:6e:</span><br><span class="line">         d1:0a:a3:63:ff:c8:d2:dd:2e:5b:69:43:ff:e8:dd:44:ff:8c:</span><br><span class="line">         2e:dd:9a:56:06:b7:a8:fb:92:f4:36:b1:37:46:f9:d8:33:a8:</span><br><span class="line">         25:32:c2:9a:32:5f:02:97:6b:a9:da:8b:0b:e4:22:39:fc:6b:</span><br><span class="line">         8f:e4</span><br></pre></td></tr></table></figure>
<p>As you can see that it contains basic info and public key and signature(signed with CA private key)</p>
<p><strong>Certificate revocation list(CRL)</strong><br>In cryptography, a certificate revocation list (or CRL) is “<code>a list of digital certificates that have been revoked by the issuing certificate authority (CA) before their scheduled expiration date</code> and should no longer be trusted.</p>
<p>Expiration dates are not a substitute for a CRL. While all expired certificates are considered invalid, <code>not all unexpired certificates should be valid</code></p>
<p><strong>Common Name(CN) vs Subject Alternative Name(SAN)</strong><br><a href="https://support.dnsimple.com/articles/what-is-common-name/#commonname-format">CN vs SAN</a></p>
<h3 id="DER-–-辨别编码规则-DER-可包含所有私钥、公钥和证书"><a href="#DER-–-辨别编码规则-DER-可包含所有私钥、公钥和证书" class="headerlink" title="DER – 辨别编码规则 (DER) 可包含所有私钥、公钥和证书**"></a>DER – 辨别编码规则 (DER) 可包含所有私钥、公钥和证书**</h3><p><code>它是大多数浏览器的缺省格式</code>，并按 ASN1 DER 格式存储。它是无报头的 － PEM 是用文本报头包围的 DER。</p>
<p>DER - Distinguished Encoding Rules,打开看是二进制格式,不可读.<br>查看DER格式证书的信息:<code>$ openssl x509 -in certificate.der -inform der -text -noout</code><br><code>Java和Windows服务器偏向于使用这种编码格式.</code></p>
<h3 id="证书编码的转换"><a href="#证书编码的转换" class="headerlink" title="证书编码的转换"></a>证书编码的转换</h3><p><code>PEM转为DER $ openssl x509 -in cert.crt -outform der -out cert.der</code></p>
<p><code>DER转为PEM $ openssl x509 -in cert.crt -inform der -outform pem -out cert.pem</code></p>
<p>(提示:要转换KEY文件也类似,只不过把x509换成rsa,要转CSR的话,把x509换成req…)</p>
<h3 id="相关的文件扩展名"><a href="#相关的文件扩展名" class="headerlink" title="相关的文件扩展名"></a>相关的文件扩展名</h3><p>这是比较误导人的地方,虽然我们已经知道有PEM和DER这两种编码格式, 但文件扩展名并不一定就叫”PEM”或者”DER”,常见的扩展名除了PEM和DER还有以下这些, 它们除了编码格式可能不同之外,内容也有差别,但大多数都能相互转换编码格式.</p>
<ul>
<li><p>CRT - <code>CRT应该是certificate,其实还是证书的意思</code>,常见于 NIX系统,有可能是PEM编码,也有可能是DER编码, 大多数应该是PEM编码,相信你已经知道怎么辨别.</p>
</li>
<li><p>CER - <code>还是certificate,还是证书</code>,常见于Windows系统,同样的,可能是PEM编码,也可能是DER编码,大多数应该是DER编码.证书中没有私钥，DER 编码二进制格式的证书文件</p>
</li>
<li><p>KEY - 通常用来存放一个<code>公钥或者私钥,并非X.509证书</code>, 编码同样的,可能是PEM,也可能是DER.<br>  查看KEY的办法 PEM 格式: <code>$ openssl rsa -in mykey.key -text -noout</code><br>  DER格式: <code>$ openssl rsa -in mykey.key -text -noout -inform der</code></p>
</li>
<li><p>CSR - <code>Certificate Signing Request,即证书签名请求,这个并不是证书</code>,而是向权威证书颁发机构获得签名证书的申请,其核心内容是一个公钥(当然还附带了一些别的信息),在生成这个申请的时候,同时也会生成一个私钥,私钥要自己保管好.做过iOS APP的朋友都应该知道是怎么向苹果申请开发者证书的吧.<br>查看的办法:openssl req -noout -text -in my.csr (如果是DER格式的话照旧加上-inform der,这里不写了)</p>
</li>
<li><p>PFX&#x2F;P12 - predecessor of PKCS#12,包含公钥和私钥的二进制格式证书</p>
<p>  对nginx服务器来说,一般CRT和KEY是分开存放在不同文件中的,但Windows的IIS则将它们存在一个PFX文件中,(因此这个文件包含了证书及私钥)这样会不会不安全？应该不会,PFX通常会有一个”提取密码”,你想把里面的东西读取出来的话,它就要求你提供提取密码,PFX使用的时DER编码,如何把PFX转换为PEM编码？</p>
<p>  <code>$ openssl pkcs12 -in for-iis.pfx -out for-iis.pem -nodes</code><br>  这个时候会提示你输入提取代码. for-iis.pem就是可读的文本.<br>  生成pfx的命令类似这样: <code>$ openssl pkcs12 -export -in certificate.crt -inkey privateKey.key -out certificate.pfx</code></p>
<p>  其中CACert.crt是CA(权威证书颁发机构)的根证书,有的话也通过-certfile参数一起带进去.这么看来,PFX其实是个证书密钥库.</p>
</li>
<li><p>p7b - 以树状展示证书链(certificate chain)，同时也支持单个证书，不含私钥。</p>
</li>
<li><p>JKS - 即Java Key Storage,这是Java的专利,跟OpenSSL关系不大,利用Java的一个叫”keytool”的工具,可以将PFX转为JKS,当然了,keytool也能直接生成JKS,不过在此就不多表了.</p>
</li>
</ul>
<h1 id="Openssl-command"><a href="#Openssl-command" class="headerlink" title="Openssl command"></a>Openssl command</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check certificate with .pem format</span></span><br><span class="line">$ openssl x509 -text -noout -<span class="keyword">in</span> cert.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># create self-signed certificate with openssl</span></span><br><span class="line"><span class="comment"># no extension</span></span><br><span class="line">$ <span class="built_in">cat</span> san.cnf</span><br><span class="line">[ req ]</span><br><span class="line">default_bits       = 2048</span><br><span class="line">distinguished_name = req_distinguished_name</span><br><span class="line">prompt = no</span><br><span class="line">[ req_distinguished_name ]</span><br><span class="line">countryName                 = CN</span><br><span class="line">stateOrProvinceName         = bj</span><br><span class="line">localityName               = bj</span><br><span class="line">organizationName           = cyun </span><br><span class="line">commonName                 = cyun.com</span><br><span class="line"></span><br><span class="line">$ openssl req -config san.cnf -new -x509 -sha256 \</span><br><span class="line">   -newkey rsa:2048 -nodes -keyout private.key -days 365 -out cert.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># with extension</span></span><br><span class="line">$ <span class="built_in">cat</span> san.cnf</span><br><span class="line">[ req ]</span><br><span class="line">default_bits       = 2048</span><br><span class="line">distinguished_name = req_distinguished_name</span><br><span class="line">req_extensions     = req_ext</span><br><span class="line">prompt = no</span><br><span class="line">[ req_distinguished_name ]</span><br><span class="line">countryName                 = CN</span><br><span class="line">stateOrProvinceName         = bj</span><br><span class="line">localityName               = bj</span><br><span class="line">organizationName           = cyun </span><br><span class="line">commonName                 = cyun.com</span><br><span class="line">[ req_ext ]</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line">[alt_names]</span><br><span class="line">DNS.1   = bestflare.com</span><br><span class="line">DNS.2   = usefulread.com</span><br><span class="line">DNS.3   = chandank.com</span><br><span class="line"></span><br><span class="line">$ openssl req -config san.cnf -new -x509 -sha256 \</span><br><span class="line">  -newkey rsa:2048 -nodes -keyout private.key -days 365 \</span><br><span class="line">  -out cert.pem -extensions req_ext</span><br></pre></td></tr></table></figure>

<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul>
<li><a href="https://www.thesslstore.com/blog/explaining-ssl-handshake/">SSL handshake</a></li>
</ul>
]]></content>
      <categories>
        <category>protocol</category>
        <category>ssl</category>
      </categories>
      <tags>
        <tag>ssl</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>protocol_vxlan_nvgre_geneve</title>
    <url>/2021/04/22/protocol-vxlan-nvgre-geneve/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Tunneling is a mechanism that makes transfer of payloads feasible over an incompatible delivery network. It allows the network user to gain access to denied or insecure networks. Data encryption may be employed to transport the payload, ensuring that the encapsulated user network data appears as public even though it is private and can easily pass the conflicting network.</p>
<p>An information center hosting hundreds of thousands of customers located across many locations with virtualized customer workloads will most likely need many VLANs and at the same time the ability to share assets on each other networks. VXLAN&#x2F; NVGRE SUPPORT Software Defined Networking (SDN) was created partly to solve problems associated with multi-tenant environments. This wide resource sharing enables <code>Microsoft to create NVGRE for Hyper-V</code>, a native hypervisor that can create virtual machines on x86-64 systems starting with Windows 8 and <code>VMware to create Virtual Extensible LAN (VXLAN)</code>, a tunneling protocol that recognizes network users to access or provide networking services to networks that does not support or provide directly.</p>
<p>NVGRE standard is proposed by Microsoft, Intel, HP and Dell.<br>VXLAN specification was originally created by Cisco, VMware, and Arista Networks</p>
<span id="more"></span>
<h2 id="NVGRE"><a href="#NVGRE" class="headerlink" title="NVGRE"></a>NVGRE</h2><p>NVGRE is a networking virtualization process that primarily seeks to ease the scalability problems related to large cloud computing deployments. The network virtualization process uses encapsulation to <strong>tunnel the data link layer (layer 2) packets over the network layer (layer 3) networks</strong>. The aim is to permit multi-tenant and load-level networks that could be shared across on-site and cloud-based environments.</p>
<p>In NVGRE, the packets of the virtual machine are encapsulated inside another packet resulting to this new NVGRE-formatted packet possessing the appropriate source and destination provider area (PA) IP addresses.</p>
<p>NVGRE uses the <code>lower 24 bits of the GRE header as the TNI (tenant network identifier)</code>, which, like the VXLAN, can support 16 million virtual networks. In order to provide a flow-level granularity describing the bandwidth utilization, the transmission network needs to use the GRE header. But this results in NVGRE not being compatible with traditional load balancing, which is the main shortcoming of NVGRE and the biggest difference from NVGRE.</p>
<ul>
<li>OUTER IP + GRE HEADER + (Inner Layer2 + Inner Layer3 + TCP&#x2F;UDP + payload) <strong>as IP payload</strong></li>
<li>no extra UDP header as GRE is at same level as TCP or UDP.</li>
</ul>
<p><img src="https://media.fs.com/images/community/upload/wangEditor/202001/15/_1579074741_e5GnyeD3gR.png"></p>
<h2 id="VXLAN（Virtual-extensible-local-area-network"><a href="#VXLAN（Virtual-extensible-local-area-network" class="headerlink" title="VXLAN（Virtual extensible local area network)"></a>VXLAN（Virtual extensible local area network)</h2><p>The purpose of VXLAN is to provide scalable network isolation. <code>VXLAN is a Layer 2 overlay scheme on a Layer 3 network</code>. It allows an overlay layer-2 network to spread across multiple underlay layer-3 network domains. Each overlay is termed a VXLAN segment. <code>Only VMs within the same VXLAN segment can communicate</code>.</p>
<p>The VXLAN packet header includes a 24-bit ID segment, which stands for 16 million unique virtual segments. <code>This ID is usually generated by pseudo-random algorithm on UDP ports</code>. This helps to <code>keep load balancing based on 5-tuple</code> and preserve the order of packets between VMs by mapping the MAC group within packets to a unique UDP port group.<code> VXLAN encapsulation expands the packet size to 50 bytes</code>, which is shown as below.</p>
<ul>
<li>OUTER IP + UDP + (VXLAN HEADER + Inner Layer2 + Inner Layer3 + TCP&#x2F;UDP + payload)<strong>as UDP payload</strong></li>
</ul>
<p><img src="https://media.fs.com/images/community/upload/wangEditor/202001/15/_1579074689_0O2BuihUDc.png"></p>
<h2 id="GENEVE-Generic-Network-Virtualization-Encapsulation"><a href="#GENEVE-Generic-Network-Virtualization-Encapsulation" class="headerlink" title="GENEVE(Generic Network Virtualization Encapsulation)"></a>GENEVE(Generic Network Virtualization Encapsulation)</h2><p>VXLAN (Virtual Extensible LAN), NVGRE (Network Virtualization using Generic Routing Encapsulation) and STT (Stateless Transport Tunneling). All three encapsulate application data in a new larger <strong>fixed header field</strong>. That header size is 24-bit for VXLAN and NVGRE, the latter being used mostly by Microsoft, while STT has a 64-bit header size. None of these encapsulation tunnelling methods require any change to hardware networking infrastructure, though some vendors offer hardware that can help assist in accelerating the efficiency of the solution. However,<code> none of the solutions are compatible with each other</code>.</p>
<p>Geneve is designed to recognize and accommodate changing capabilities and needs of different devices in network virtualization. It provides a framework for tunneling rather than being prescriptive about the entire system. Geneve defines the content of the metadata flexibly that is added during encapsulation and tries to adapt to various virtualization scenarios. <code>It uses UDP as its transport protocol and is dynamic in size using extensible option headers</code>. Geneve supports unicast, multicast, and broadcast.</p>
<p>GENEVE encapsulated packets are designed to be transmitted via standard networking equipment. Packets are sent from one tunnel endpoint to one or more tunnel endpoints using either unicast or multicast addressing.</p>
<p>GENEVE is being adopted as the default tunnelling protocol for <code>OVN (Open Virtual Network) </code>which in turn is being <code>promoted as an implementation of OVS (OpenvSwitch) in future OpenStack releases</code></p>
]]></content>
      <categories>
        <category>protocol</category>
        <category>overlay</category>
      </categories>
      <tags>
        <tag>overlay</tag>
      </tags>
  </entry>
  <entry>
    <title>python-advanced</title>
    <url>/2019/11/15/python-advance/</url>
    <content><![CDATA[<h1 id="Advanced-feature"><a href="#Advanced-feature" class="headerlink" title="Advanced feature"></a>Advanced feature</h1><h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><p>lambda is like a function(<font color='red' size='4'>with return implicitly</font>) with <font color='red' size='4'> one statement</font>, but no name(<font color='red' size='4'>anonymous function</font>), <strong>if you have more logic, use function instead</strong>, create a lambda means create a function object, then call it later on.</p>
<hr>
<p><strong>lambda features</strong></p>
<ul>
<li><strong>return implicitly</strong></li>
<li><strong>one statement</strong></li>
<li><strong>anonymous function</strong></li>
</ul>
<p><font color='red' size=3><code>f = lambda arg1, arg2: expression</code> the result of the expression is return value.</font></p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[expression <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">list</span> condition]</span><br><span class="line"><span class="comment"># save result of expression to a list if condition matches</span></span><br><span class="line"><span class="comment"># expression can be simple or lambda!!!</span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>Most use case of lambda is like this.&#96;</strong><br><font color='red'></p>
<ul>
<li>some API parameters need a function</li>
<li>the function is small</font>
In this case, use lambda instead of a function.</li>
</ul>
<hr>
<p><code>map(), filter(), reduce()</code> all return a new list after applying function for each element.</p>
<p><strong>map()</strong></p>
<p>Map applies a function to all the items in an <code>input_list</code>. Here is the blueprint:</p>
<p><code>map(function_to_apply_must_return_value_with_elm_as_input, list_of_inputs)</code></p>
<p><strong>filter()</strong></p>
<p>As the name suggests, filter creates a list of elements for which a function returns true.<br><code>filter(filter_function_must_return_true_or_false_with_elm_as_input, list_of_inputs)</code></p>
<p><strong>reduce()</strong></p>
<p>Reduce is a really useful function for performing some computation on a list and returning the result. It applies a rolling computation to sequential pairs of values in a list, <code>it passed the previous result as the second parameter!</code></p>
<p><code>reduce(fun_return_value_with_elm_and_previous_result_as_input, list_of_inputs)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_demo</span>():</span><br><span class="line">    <span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">    <span class="comment">#function created by lambda is said to be anonymous because it was never given a name</span></span><br><span class="line">    f = <span class="keyword">lambda</span> x: x**<span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(f(<span class="number">3</span>))</span><br><span class="line">    </span><br><span class="line">    items = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;org:&quot;</span>, items)</span><br><span class="line">    squared = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, items))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;map():&quot;</span>,squared)</span><br><span class="line">    </span><br><span class="line">    number_list = <span class="built_in">range</span>(-<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;org:&quot;</span>,  <span class="built_in">list</span>(number_list))</span><br><span class="line">    less_than_zero = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x &lt; <span class="number">0</span>, number_list))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;filter():&quot;</span>,less_than_zero)</span><br><span class="line"></span><br><span class="line">    list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">    <span class="comment"># y is the result of previous op, x is the element of list1.</span></span><br><span class="line">    <span class="built_in">print</span>(reduce(<span class="keyword">lambda</span> x, y: x * y, list1))</span><br><span class="line">    <span class="built_in">print</span>(reduce(<span class="keyword">lambda</span> x, y: x + y, list1))</span><br><span class="line">    </span><br><span class="line">lambda_demo()</span><br></pre></td></tr></table></figure>

<pre><code>27
org: [1, 2, 3, 4, 5]
map(): [1, 4, 9, 16, 25]
org: [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]
filter(): [-5, -4, -3, -2, -1]
24
10
</code></pre>
<h2 id="retry"><a href="#retry" class="headerlink" title="retry"></a>retry</h2><p>Sometimes function needs to run again when it fails, that’s retry, you can use function from python <a href="https://github.com/rholder/retrying">retrying</a> module, it provides a decorator that can do retrying, just add this decorator to your function that needs retrying.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip3 install retrying</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">retry_demo</span>():</span><br><span class="line">    <span class="keyword">from</span> retrying <span class="keyword">import</span> retry</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># by default, retry happens when exception happens,but can be customized.</span></span><br><span class="line"><span class="meta">    @retry(<span class="params">stop_max_attempt_number=<span class="number">2</span>, wait_random_min=<span class="number">1000</span>, wait_random_max=<span class="number">2000</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;you should see me twice&#x27;</span>)</span><br><span class="line">        <span class="keyword">raise</span> NameError(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retry_if_result_not_2</span>(<span class="params">result</span>):</span><br><span class="line">        <span class="keyword">return</span> result != <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># retry by checking result of run2</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line"><span class="meta">    @retry(<span class="params">retry_on_result=retry_if_result_not_2, wait_random_min=<span class="number">1000</span>, wait_random_max=<span class="number">2000</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run2</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> result</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;you should see me twice:&#x27;</span>, result)</span><br><span class="line">        <span class="keyword">if</span> result != <span class="number">2</span>:</span><br><span class="line">            result = result + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">        </span><br><span class="line">    run2()</span><br><span class="line">retry_demo()</span><br></pre></td></tr></table></figure>

<pre><code>you should see me twice: 0
you should see me twice: 1
</code></pre>
<h2 id="daemon"><a href="#daemon" class="headerlink" title="daemon"></a>daemon</h2><p>In some case, app needs to run as a daemon, <code>python-daemon</code> provides us such function, in order to use it, first install <code>pip3 install python-daemon</code></p>
<p><strong>main.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip3 install python-daemon</span></span><br><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> daemon</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> daemon.DaemonContext():</span><br><span class="line">            <span class="comment"># fork a new process</span></span><br><span class="line">            self.run()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        time.sleep(<span class="number">10000</span>)</span><br><span class="line">        <span class="comment"># print is not to console as it&#x27;s a daemon!!!</span></span><br><span class="line">        <span class="comment"># print(&quot;I runs as a daemon&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = App()</span><br><span class="line">app.start()</span><br></pre></td></tr></table></figure>

<p>Run it this way</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">./main.py</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps -ef | grep main.py</span></span><br></pre></td></tr></table></figure>

<h2 id="Run-shell-command"><a href="#Run-shell-command" class="headerlink" title="Run shell command"></a>Run shell command</h2><p>sometimes we need to run shell command from python, there are several APIs you can use to run shell command.</p>
<p><strong>These APIs can be grouped into two types</strong></p>
<ul>
<li>one is <code>with shell output</code>, </li>
<li>the other is <code>without shell output returned</code>.</li>
</ul>
<h3 id="shell-output-returned-as-value"><a href="#shell-output-returned-as-value" class="headerlink" title="shell output returned as value"></a>shell output returned as value</h3><p><font color='red'><strong>Old APIs</strong></font></p>
<ul>
<li>getoutput()</li>
<li>getstatusoutput()</li>
</ul>
<p><strong>parameter</strong></p>
<p>these two methods implicitly are invoked with shell mode!, that means parameter is <code>&#39;ls -al&#39; not [&#39;ls&#39;, &#39;-al&#39;]</code></p>
<p><strong>result:</strong></p>
<p>getoutput() returns a str of command output or error message like <code>&#39;/bin/sh: 1: lh: not found&#39;</code></p>
<p>getstatusoutput() returns a tuple (returncode, output), return code 0 means good!</p>
<p><font color='red'><strong>New API</strong></font></p>
<ul>
<li>check_output()–&gt;<code>waits until all output is read. If ssh inherits the pipe then check_output() will wait until it exits (until it closes its inherited pipe ends).</code></li>
</ul>
<p><strong>return value: output in bytes(utf-8)</strong></p>
<p><code>Raise exception if return code is non-zero otherwise output with bytes</code>, it more like <code>getoutput()</code>, but <code>getoutput() doesn&#39;t raise exception if fails</code>.</p>
<h3 id="no-shell-output-returned-but-print-it-to-console"><a href="#no-shell-output-returned-but-print-it-to-console" class="headerlink" title="no shell output returned but print it to console"></a>no shell output returned but print it to console</h3><p><font color='red'><strong>Old API</strong></font></p>
<ul>
<li>call()</li>
</ul>
<p><font color='red'><strong>New API</strong></font></p>
<ul>
<li>check_call()–&gt;<code>returns as soon as /bin/sh process exits without waiting for descendant processes, fast</code></li>
</ul>
<p>These two methods do not store the output, only print it out inside library(may be to console or file depends on current STD)!!! it only <font color='red'>returns code with 0 if success to run, otherwise raises exception for check_xx version</font>, catch the exception(<code>CalledProcessError</code>) to see the return code and output attribute in it</p>
<p>check_call() does the same thing as call(), but <strong><code>check_call() will throw exception when command fails to run, so that you can see where the problem is!!! so always use check_call().</code></strong></p>
<p><strong>paramter</strong></p>
<p>these API can run with two modes, shell enabled or disabled, <code>with shell enabled, the parameter is a str</code>, otherwise it’s a list [] like this.  </p>
<p><font color='red'>when shell&#x3D;True, it uses <code>/bin/sh</code> to run command, <strong><code>/bin/sh</code> does not support brace expansion($echo ‘hi ‘{jason,josh})</strong></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">call([<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;-al&#x27;</span>])</span><br><span class="line">check_call(<span class="string">&#x27;ls -al&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">check_call(cmd, shell=<span class="literal">True</span>, executable=<span class="string">&#x27;/bin/bash&#x27;</span>) <span class="comment"># use bash</span></span><br></pre></td></tr></table></figure>


<h3 id="result-of-check-call-or-check-output"><a href="#result-of-check-call-or-check-output" class="headerlink" title="result of check_call() or check_output()"></a>result of check_call() or check_output()</h3><p>  exception subprocess.CalledProcessError</p>
<p>  Subclass of SubprocessError, raised when a process run by check_call() or check_output() returns a non-zero exit status.</p>
<p>  returncode</p>
<p>  Exit status of the child process. If the process exited due to a signal, this will be the negative signal number.</p>
<p>  cmd</p>
<p>  Command that was used to spawn the child process.</p>
<p>  output</p>
<p>  Output of the child process if it was captured by run() or check_output(). Otherwise, None.</p>
<p>  stdout</p>
<p>  Alias for output, for symmetry with stderr.</p>
<p>  stderr</p>
<p>  Stderr output of the child process if it was captured by run(). Otherwise, None.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;getoutput(&#x27;ls /bin/ls&#x27;) show below&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(subprocess.getoutput(<span class="string">&#x27;ls /bin/ls&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;getstatus(&#x27;/bin/ls&#x27;) show below&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(subprocess.getstatusoutput(<span class="string">&#x27;/bin/ls&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;check_output(&#x27;/bin/ls&#x27;, shell=True) show below&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># need to decode return value by check_output</span></span><br><span class="line"><span class="built_in">print</span>(subprocess.check_output(<span class="string">&#x27;/bin/ls&#x27;</span>, shell=<span class="literal">True</span>).decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    subprocess.check_output(<span class="string">&#x27;/bin/not_found&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">except</span> subprocess.CalledProcessError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;exception: check_output() not found command&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;no exception getoutput()&#x27;</span>, subprocess.getoutput(<span class="string">&#x27;/bin/not_found&#x27;</span>)) <span class="comment"># no exception</span></span><br></pre></td></tr></table></figure>

<pre><code>getoutput(&#39;ls /bin/ls&#39;) show below
/bin/ls
getstatus(&#39;/bin/ls&#39;) show below
(0, &#39;algorithm\nclass_advanced.ipynb\ndebug\nfunction_advanced.ipynb\nhello.txt\npython3_advanced.ipynb\npython3_basic.ipynb\npython3_lib.ipynb\nreadme_pip.ipynb\nsamples&#39;)
check_output(&#39;/bin/ls&#39;, shell=True) show below
algorithm
class_advanced.ipynb
debug
function_advanced.ipynb
hello.txt
python3_advanced.ipynb
python3_basic.ipynb
python3_lib.ipynb
readme_pip.ipynb
samples

exception: check_output() not found command
no exception getoutput() /bin/sh: /bin/not_found: No such file or directory


/bin/sh: /bin/not_found: No such file or directory
</code></pre>
<h2 id="Deep-copy-and-shallow-copy-of-list-or-dict"><a href="#Deep-copy-and-shallow-copy-of-list-or-dict" class="headerlink" title="Deep copy and shallow copy of list or dict"></a>Deep copy and shallow copy of list or dict</h2><p>A shallow copy means constructing a new collection object and then populating it with references to the <code>child objects found in the original</code>. The <code>copying process does not recurse</code> and therefore will not create copies of the child objects themselves. In case of shallow copy, a reference of object is copied in other object, it means that any changes made to the copied object do reflect in the original object.</p>
<p><font color='red'>reference only works for object(like list, dict, class object) but for integer etc</font></p>
<p><strong>Create shallow copy</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># use copy library</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="comment"># shallow copy, no recurse for embedded object!!!</span></span><br><span class="line">newlt = copy.copy(<span class="built_in">list</span>)</span><br><span class="line">newdt = copy.copy(<span class="built_in">dict</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># shallow copy(another way)</span></span><br><span class="line">newlt = list1[:]</span><br><span class="line">newdt = <span class="built_in">dict</span>.copy()</span><br></pre></td></tr></table></figure>

<p><strong>Create deep copy</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="comment"># recurse for embed object!!!</span></span><br><span class="line">copy.deepcopy(<span class="built_in">list</span>)</span><br><span class="line">copy.deepcopy(<span class="built_in">dict</span>)</span><br></pre></td></tr></table></figure>

<h3 id="shallow-copy"><a href="#shallow-copy" class="headerlink" title="shallow copy"></a>shallow copy</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dt = &#123;<span class="string">&#x27;a&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;before creating new dict, org dict: &#x27;</span>, dt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># shadow copy</span></span><br><span class="line">ndt = dt.copy()</span><br><span class="line"></span><br><span class="line">ndt[<span class="string">&#x27;a&#x27;</span>].append(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;new dict &#x27;</span>, ndt)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;org dict&#x27;</span>, dt)</span><br><span class="line"></span><br><span class="line">lt = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;before creating new list, org list: &#x27;</span>, lt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># shadow copy</span></span><br><span class="line">nlt = lt[:]</span><br><span class="line"></span><br><span class="line">nlt[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;new list: &#x27;</span>, nlt)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;org list: &#x27;</span>, lt)</span><br></pre></td></tr></table></figure>

<pre><code>before creating new dict, org dict:  &#123;&#39;a&#39;: [1, 2]&#125;
new dict  &#123;&#39;a&#39;: [1, 2, 3]&#125;
org dict &#123;&#39;a&#39;: [1, 2, 3]&#125;
before creating new list, org list:  [1, [2, 3]]
new list:  [1, [5, 3]]
org list:  [1, [5, 3]]
</code></pre>
<h3 id="Deep-copy"><a href="#Deep-copy" class="headerlink" title="Deep copy"></a>Deep copy</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">dt = &#123;<span class="string">&#x27;a&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>]&#125;</span><br><span class="line">dtcc = copy.deepcopy(dt)  <span class="comment"># deep copy.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;orignal dict: &quot;</span>, dt)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;copied dict after deepcopy is: &quot;</span>, dtcc)</span><br><span class="line">dt[<span class="string">&#x27;a&#x27;</span>].append(<span class="number">3</span>)  <span class="comment"># dtcc doesn&#x27;t change!!!!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;added a item in orignal dict: &quot;</span>, dt)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;copied dict now is: &quot;</span>, dtcc)</span><br></pre></td></tr></table></figure>

<pre><code>orignal dict:  &#123;&#39;a&#39;: [1, 2]&#125;
copied dict after deepcopy is:  &#123;&#39;a&#39;: [1, 2]&#125;
added a item in orignal dict:  &#123;&#39;a&#39;: [1, 2, 3]&#125;
copied dict now is:  &#123;&#39;a&#39;: [1, 2]&#125;
</code></pre>
<h2 id="any-x2F-all-function"><a href="#any-x2F-all-function" class="headerlink" title="any&#x2F;all function"></a>any&#x2F;all function</h2><p>all(iterable object) returns True if all values in the iterable match bool(elm)&#x3D;&#x3D;True<br>while any(iterable object) returns True if any value in the iterable matches bool(elm)&#x3D;&#x3D;True.</p>
<ul>
<li><strong>all(empty_iterable) &#x3D;&#x3D; True</strong></li>
<li><strong>any(empty_iterable) &#x3D;&#x3D; False</strong></li>
</ul>
<p>One use case for all() is to check if an iterable object includes another.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">any_all_demo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;any([])=&quot;</span>, <span class="built_in">any</span>([]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;any([0])=&quot;</span>, <span class="built_in">any</span>([<span class="number">0</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;any([1])=&quot;</span>, <span class="built_in">any</span>([<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;all(())=&quot;</span>, <span class="built_in">all</span>(()))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;all((1,))=&quot;</span>, <span class="built_in">all</span>((<span class="number">1</span>,)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;all([0])=&quot;</span>, <span class="built_in">all</span>([<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">any_all_demo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_list_container_another</span>():</span><br><span class="line">    list1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="comment"># for..in to loop</span></span><br><span class="line">    <span class="comment"># in to test</span></span><br><span class="line">    result = [elm <span class="keyword">in</span> list2 <span class="keyword">for</span> elm <span class="keyword">in</span> list1]</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">all</span>(result):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;list2 contains list1&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;list2 doest not contain list1&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">check_list_container_another()</span><br></pre></td></tr></table></figure>

<pre><code>any([])= False
any([0])= False
any([1])= True
all(())= True
all((1,))= True
all([0])= False
[True, True]
list2 contains list1
</code></pre>
<h2 id="CSV-file"><a href="#CSV-file" class="headerlink" title="CSV file"></a>CSV file</h2><p>If file type is csv, you can use <code>import csv</code> or <code>import pandas</code> to access it</p>
<p><strong>use <code>pandas</code> always as it’s powerful!</strong></p>
<p><code>csv file is text file but with fixed format, each row should have same columns and separated by a &#39;separator&#39;</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pandas_csv</span>():</span><br><span class="line">    <span class="comment"># 任意的多组列表</span></span><br><span class="line">    a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 字典中的key值即为csv中列名</span></span><br><span class="line">    dataframe = pd.DataFrame(&#123;<span class="string">&#x27;a_name&#x27;</span>: a, <span class="string">&#x27;b_name&#x27;</span>: b&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将DataFrame存储为csv,index表示是否显示行名，default=True</span></span><br><span class="line">    <span class="comment"># dataframe.to_csv(&quot;test.csv&quot;, index=False, sep=&#x27;,&#x27;, mode=&#x27;a&#x27;)   a--&gt;append  w--&gt;write</span></span><br><span class="line">    dataframe.to_csv(<span class="string">&quot;test.csv&quot;</span>, index=<span class="literal">False</span>, sep=<span class="string">&#x27;,&#x27;</span>, mode=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    a_name,b_name</span></span><br><span class="line"><span class="string">    1,     4</span></span><br><span class="line"><span class="string">    2,     5</span></span><br><span class="line"><span class="string">    3,     6</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    data = pd.read_csv(<span class="string">&#x27;test.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;pandas read test.csv\n&#x27;</span>, data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;pandas read test.csv only values:\n&#x27;</span>, data.values)</span><br><span class="line">    os.remove(<span class="string">&#x27;test.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pandas_csv()</span><br></pre></td></tr></table></figure>

<pre><code>pandas read test.csv
    a_name  b_name
0       1       4
1       2       5
2       3       6
pandas read test.csv only values:
 [[1 4]
 [2 5]
 [3 6]]
</code></pre>
<h2 id="serialization-class-tuple-list-dict"><a href="#serialization-class-tuple-list-dict" class="headerlink" title="serialization class, tuple, list, dict"></a>serialization class, tuple, list, dict</h2><p>In some case we want to <code>save our data(object) into a file with binary(not json)</code>, as it’s small, then read it back into object that we use before, use <code>cloudpickle which extends pickle</code>, it supports <code>serialization of many objects, class, tuple, list, dict</code> etc.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_object_into_file</span>():</span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">import</span> cloudpickle</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    lt = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># write data to file with binary mode</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data_binary&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fd:</span><br><span class="line">        cloudpickle.dump(lt, fd) <span class="comment"># cloudpickle.dumps(lt) returns result of bytes not writing to file</span></span><br><span class="line">    <span class="comment"># read it back</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;write to file with data: &quot;</span>, lt)</span><br><span class="line">    <span class="comment"># must open with binary mode</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data_binary&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fd:</span><br><span class="line">        lt = cloudpickle.load(fd) <span class="comment"># cloudpickle.loads(bytes) loads from bytes</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;read data back: &#x27;</span>, lt)</span><br><span class="line">        </span><br><span class="line">    os.remove(<span class="string">&#x27;data_binary&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">save_object_into_file()</span><br></pre></td></tr></table></figure>

<pre><code>write to file with data:  [&#39;a&#39;, &#39;b&#39;]
read data back:  [&#39;a&#39;, &#39;b&#39;]
</code></pre>
<h2 id="show-trace-with-try-x2F-except"><a href="#show-trace-with-try-x2F-except" class="headerlink" title="show trace with try&#x2F;except"></a>show trace with try&#x2F;except</h2><p><code>Without try/except</code>, trace is printed when exception happens, <strong>but if we want to see trace even we catch the exception, use <code>traceback(new traceback2)</code>.</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show_traceback_even_with_exception</span>():</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    <span class="keyword">import</span> traceback2</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = <span class="number">12</span> / <span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;------------traceback is printed&#x27;</span>)</span><br><span class="line">        traceback2.print_exc(file=sys.stdout)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;------------traceback is printed&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">show_traceback_even_with_exception()</span><br></pre></td></tr></table></figure>

<pre><code>------------traceback is printed
Traceback (most recent call last):
  File &quot;/tmp/ipykernel_2840/2931145062.py&quot;, line 6, in show_traceback_even_with_exception
ZeroDivisionError: division by zero
------------traceback is printed
</code></pre>
<h2 id="package-and-module"><a href="#package-and-module" class="headerlink" title="package and module"></a>package and module</h2><ul>
<li>A package is dir with <code>__init__.py</code> under it</li>
<li>a module is a python file like <code>request.py</code></li>
</ul>
<p>The most use case is to group related modules within a package then use them, the struct may look like this.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">`-- common</span><br><span class="line">    |-- __init__.py</span><br><span class="line">    `-- request.py</span><br></pre></td></tr></table></figure>

<p><font color='red' size='3'>after import you may use xxx.yyy (yyy must be a symbol of xxx.py or symbol of xxx&#x2F;_<em>init</em>_.py)</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> package_name</span><br><span class="line"><span class="comment"># then use this way: package_name.module.function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> package_name <span class="keyword">import</span> module_name</span><br><span class="line"><span class="comment"># then use this way: module_name.function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> module_name</span><br><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_xx</span><br><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> var_xx</span><br><span class="line"><span class="comment"># then use this way: function_xx</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>what content of _<em>init</em>_.py?</strong></p>
<p>Idealy, you can write anything in it, <code>it&#39;s just a python file that is called when import the package</code>, but mostly we write it with below content.</p>
<p><strong>Examples of _<em>init</em>_.py</strong></p>
<ul>
<li><strong>empty, just required by python</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#__init__.py</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py to show how use module</span></span><br><span class="line"><span class="comment"># must use module with package prefix or module prefix!!!</span></span><br><span class="line"><span class="keyword">from</span> common <span class="keyword">import</span> request</span><br><span class="line">request.aaa</span><br></pre></td></tr></table></figure>
<ul>
<li><font color='red'><strong>wrapper modules API</strong></font></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line"><span class="keyword">from</span> request <span class="keyword">import</span> *   <span class="comment"># import all from request module.</span></span><br><span class="line"><span class="keyword">from</span> request <span class="keyword">import</span> aaa <span class="comment"># OR only import aaa for package</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="comment"># then you can access module&#x27;s function by package name like below</span></span><br><span class="line"><span class="comment"># use it</span></span><br><span class="line"><span class="keyword">import</span> common</span><br><span class="line"><span class="comment"># as in common/__init__.py we import aaa from request</span></span><br><span class="line"><span class="comment"># so here just use common.aaa, not request.aaa, common seems a wrapper for its module!!!</span></span><br><span class="line">common.aaa()</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>wrapper module API and define package level API as well</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line"><span class="keyword">from</span> request <span class="keyword">import</span> *   <span class="comment"># import all for package</span></span><br><span class="line"><span class="keyword">from</span> request <span class="keyword">import</span> aaa <span class="comment"># OR only import aaa for package</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># package level API, it may call package api to wrapper them.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pkg_aaa</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;pkg_aaa&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">import</span> common</span><br><span class="line"></span><br><span class="line">common.aaa()</span><br><span class="line">common.pkg_aaa()</span><br></pre></td></tr></table></figure>

<h3 id="access-module-from-parent-directory"><a href="#access-module-from-parent-directory" class="headerlink" title="access module from parent directory"></a>access module from parent directory</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`-- app</span><br><span class="line">    |-- app.py</span><br><span class="line">    |-- common</span><br><span class="line">    |   |-- __init__.py</span><br><span class="line">    |   `-- util.py</span><br><span class="line">    `-- tests</span><br><span class="line">        `-- test_app.py</span><br></pre></td></tr></table></figure>

<p><strong>Add module to sys.path</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># file test_app.py</span></span><br><span class="line"><span class="keyword">import</span> os                                                                       </span><br><span class="line"><span class="keyword">import</span> sys                                                                      </span><br><span class="line">                                                                                </span><br><span class="line">currentdir = os.path.dirname(os.path.realpath(__file__))                        </span><br><span class="line">parentdir = os.path.dirname(currentdir)                                         </span><br><span class="line">sys.path.append(parentdir)                                                      </span><br><span class="line">                                                                                </span><br><span class="line"><span class="keyword">import</span> app                                                                      </span><br><span class="line"><span class="keyword">from</span> common <span class="keyword">import</span> util                           </span><br></pre></td></tr></table></figure>

<p><strong>Use relative path</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># file test_app.py</span></span><br><span class="line">                                                                                                                                                             </span><br><span class="line"><span class="keyword">import</span> ..app                                                                      </span><br><span class="line"><span class="keyword">from</span> ..common <span class="keyword">import</span> util      </span><br><span class="line"><span class="keyword">import</span> ..common.util</span><br></pre></td></tr></table></figure>

<h2 id="inside-with-statement"><a href="#inside-with-statement" class="headerlink" title="inside with statement"></a>inside <code>with</code> statement</h2><h3 id="class-based-support-with"><a href="#class-based-support-with" class="headerlink" title="class-based support with()"></a>class-based support with()</h3><p>when “with” statement is executed, Python evaluates the expression, <code>calls the __enter__ method on the resulting value (which is called a &quot;context guard&quot;) and assigns whatever __enter__ returns to the variable given by as</code>. Python will then execute the code body and <font color='red'>no matter what happens in that code, call the guard object’s <strong>exit</strong> method&#96;</font></p>
<p>This interface of <strong>enter</strong>() and <strong>exit</strong>() methods which provides the support of with statement in user defined objects is called <code>Context Manager</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ctl</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#set things up</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, <span class="built_in">type</span>, value, traceback</span>):</span><br><span class="line">        <span class="comment"># tear things down</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> <span class="comment"># True means continue goes run even exception happens!!!!</span></span><br><span class="line">        <span class="comment"># most of time, False used</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">divide_zero</span>(<span class="params">self</span>):</span><br><span class="line">        bar = <span class="number">1</span>/<span class="number">0</span>  <span class="comment"># the execption will pass to __exit__</span></span><br><span class="line">        <span class="comment"># if no __exit__, program quit, otherwise, if __exit__ return False</span></span><br><span class="line">        <span class="comment"># exception, True --contine run</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">with_as_example</span>():</span><br><span class="line">    <span class="comment"># like th = ctl().__enter__()</span></span><br><span class="line">    <span class="keyword">with</span> ctl() <span class="keyword">as</span> th:</span><br><span class="line">        th.divide_zero()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;go here&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="function-based-contextlib-module-to-support-with"><a href="#function-based-contextlib-module-to-support-with" class="headerlink" title="function-based: contextlib module to support with()"></a>function-based: contextlib module to support with()</h3><p>A class based context manager as shown above<code>(__enter__, __exit__) is not the only way</code> to support the with statement in user defined objects. The <code>contextlib module</code> provides a few more abstractions built upon the basic context manager interface.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MessageWriter</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename</span>):</span><br><span class="line">        self.file_name = filename</span><br><span class="line">  </span><br><span class="line"><span class="meta">    @contextmanager</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_file</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            file = <span class="built_in">open</span>(self.file_name, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">            <span class="keyword">yield</span> file</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            file.close()</span><br><span class="line">  </span><br><span class="line"><span class="comment"># usage</span></span><br><span class="line">message_writer = MessageWriter(<span class="string">&#x27;hello.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> message_writer.open_file() <span class="keyword">as</span> my_file:</span><br><span class="line">    my_file.write(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="with-for-file-and-lock"><a href="#with-for-file-and-lock" class="headerlink" title="with for file and lock"></a>with for file and lock</h3><p>As it reduces user work for progamming, hence some builtin object like <code>file and lock, condition from threading</code> support context manager, hence for file and lock always use <code>with statement</code>.</p>
<p><strong>lock&#x2F;condition from threading</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">impor threading</span><br><span class="line"></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># without with</span></span><br><span class="line">lock.acquire()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    logging.debug(<span class="string">&#x27;Lock acquired directly&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="comment"># with with</span></span><br><span class="line"><span class="keyword">with</span> lock:</span><br><span class="line">    logging.debug(<span class="string">&#x27;Lock acquired directly&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>open file</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># without using with statement</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;file_path&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    file.write(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># with using with statement</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file_path&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="schedule-job"><a href="#schedule-job" class="headerlink" title="schedule job"></a>schedule job</h2><p>APScheduler has four kinds of components:</p>
<ul>
<li>triggers</li>
<li>job stores</li>
<li>executors</li>
<li>schedulers</li>
</ul>
<p><code>Triggers</code> contain the scheduling logic. Each job has its own trigger which determines when the job should be run next. Beyond their initial configuration, triggers are completely stateless.</p>
<p><code>Job stores</code> house the scheduled jobs. The default job store simply keeps the jobs in memory, but others store them in various kinds of databases. A job’s data is serialized when it is saved to a persistent job store, and deserialized when it’s loaded back from it. Job stores (other than the default one) don’t keep the job data in memory, but act as middlemen for saving, loading, updating and searching jobs in the backend. Job stores must never be shared between schedulers.</p>
<p><code>Executors</code> are what handle the running of the jobs. They do this typically by submitting the designated callable in a job to a thread or process pool. When the job is done, the executor notifies the scheduler which then emits an appropriate event.</p>
<p><code>Schedulers</code> are what bind the rest together. You typically have only one scheduler running in your application. The application developer doesn’t normally deal with the job stores, executors or triggers directly. Instead, the scheduler provides the proper interface to handle all those. Configuring the job stores and executors is done through the scheduler, as is adding, modifying and removing jobs.</p>
<hr>
<p><strong>choose trigger</strong><br>When you schedule a job, you need to choose a trigger for it. The trigger determines the logic by which the dates&#x2F;times are calculated when the job will be run. APScheduler comes with three built-in trigger types:</p>
<ul>
<li><code>date</code>: use when you want to run the job just once at a certain point of time</li>
<li><code>interval</code>: use when you want to run the job at fixed intervals of time</li>
<li><code>cron</code>: use when you want to run the job periodically at certain time(s) of day</li>
</ul>
<hr>
<p><strong>choose scheduler</strong><br>Your choice of scheduler depends mostly on your programming environment and what you’ll be using APScheduler for. Here’s a quick guide for choosing a scheduler:</p>
<ul>
<li><code>BlockingScheduler</code>: use when the scheduler is the only thing running in your process</li>
<li><code>BackgroundScheduler</code>: use when you’re not using any of the frameworks below, and want the scheduler to run in the background inside your application</li>
<li><code>AsyncIOScheduler</code>: use if your application uses the asyncio module</li>
<li><code>GeventScheduler</code>: use if your application uses gevent</li>
</ul>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p><strong>start scheduler</strong><br>Starting the scheduler is done by simply calling start() on the scheduler. <code>For schedulers other than BlockingScheduler, this call will return immediately</code> and you can continue the initialization process of your application, possibly adding jobs to the scheduler.</p>
<p>For <code>BlockingScheduler, you will only want to call start() after you’re done with any initialization steps.</code></p>
<p><strong>Add a job</strong><br>There are two ways to add jobs to a scheduler</p>
<ul>
<li>by calling add_job()</li>
<li>by decorating a function with scheduled_job()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># args = [name]</span></span><br><span class="line"><span class="comment"># kwargs= &#123;&#x27;n&#x27;: name&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_job</span>(<span class="params">self, func, trigger=<span class="literal">None</span>, args=<span class="literal">None</span>, kwargs=<span class="literal">None</span>, <span class="built_in">id</span>=<span class="literal">None</span>, name=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">            misfire_grace_time=undefined, coalesce=undefined, max_instances=undefined,</span></span><br><span class="line"><span class="params">            next_run_time=undefined, jobstore=<span class="string">&#x27;default&#x27;</span>, executor=<span class="string">&#x27;default&#x27;</span>,</span></span><br><span class="line"><span class="params">            replace_existing=<span class="literal">False</span>, **trigger_args</span>): </span><br></pre></td></tr></table></figure>

<p>The first way is the most common way to do it. The second way is mostly a convenience to declare jobs that don’t change during the application’s run time. The add_job() method returns a apscheduler.job.Job instance that you can use to modify or remove the job later.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line"><span class="comment"># add a job with args, na=name, position args</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">job</span>(<span class="params">na</span>):</span><br><span class="line">    <span class="built_in">print</span>(na)</span><br><span class="line">    </span><br><span class="line">scheduler.add_job(job, trigger=<span class="string">&#x27;interval&#x27;</span>, args=[name], seconds=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># here must named n!!!</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">job</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># named parameters    </span></span><br><span class="line">scheduler.add_job(job, trigger=<span class="string">&#x27;interval&#x27;</span>, kwargs=&#123;<span class="string">&#x27;n&#x27;</span>: name&#125;, seconds=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p><strong>Remove a job</strong><br>When you remove a job from the scheduler, it is removed from its associated job store and will not be executed anymore. There are two ways to make this happen:</p>
<ul>
<li>by calling remove_job() with the job’s ID and job store alias</li>
<li>by calling remove() on the Job instance you got from add_job()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">job = scheduler.add_job(myfunc, <span class="string">&#x27;interval&#x27;</span>, minutes=<span class="number">2</span>)</span><br><span class="line">job.remove()</span><br><span class="line"></span><br><span class="line">scheduler.add_job(myfunc, <span class="string">&#x27;interval&#x27;</span>, minutes=<span class="number">2</span>, <span class="built_in">id</span>=<span class="string">&#x27;my_job_id&#x27;</span>)</span><br><span class="line">scheduler.remove_job(<span class="string">&#x27;my_job_id&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>list all jobs</strong><br>Getting a list of scheduled jobs  </p>
<p>To get a machine processable list of the scheduled jobs, you can use the get_jobs() method. It will return a list of Job instances.</p>
<p><strong>Cron job</strong></p>
<p>Parameter for <a href="https://apscheduler.readthedocs.io/en/3.x/modules/triggers/cron.html">cron type</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schedules job_function to be run on the third Friday</span></span><br><span class="line"><span class="comment"># of June, July, August, November and December at 00:00, 01:00, 02:00 and 03:00</span></span><br><span class="line">sched.add_job(job_function, <span class="string">&#x27;cron&#x27;</span>, month=<span class="string">&#x27;6-8,11-12&#x27;</span>, day=<span class="string">&#x27;3rd fri&#x27;</span>, hour=<span class="string">&#x27;0-3&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>year (int|str) – 4-digit year</li>
<li>month (int|str) – month (1-12)</li>
<li>day (int|str) – day of month (1-31)</li>
<li>week (int|str) – ISO week (1-53)</li>
<li>day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)</li>
<li>hour (int|str) – hour (0-23)</li>
<li>minute (int|str) – minute (0-59)</li>
<li>second (int|str) – second (0-59)</li>
<li>start_date (datetime|str) – earliest possible date&#x2F;time to trigger on (inclusive)</li>
<li>end_date (datetime|str) – latest possible date&#x2F;time to trigger on (inclusive)</li>
<li>timezone (datetime.tzinfo|str) – time zone to use for the date&#x2F;time calculations (defaults to scheduler timezone)</li>
<li>jitter (int|None) – delay the job execution by jitter seconds at most</li>
</ul>
<p><a href="https://apscheduler.readthedocs.io/en/3.x/userguide.html">document</a> and <a href="https://www.cnblogs.com/leffss/p/11912364.html">schedule framework</a></p>
<h3 id="use-mongodb-as-default-job-store"><a href="#use-mongodb-as-default-job-store" class="headerlink" title="use mongodb as default job store"></a>use mongodb as default job store</h3><p>By default, apscheduler uses memory as job store, that means jobs are lost when it restarts, for persistent job store, now <strong>it supports sql, mongodb, redis etc.</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> apscheduler.jobstores.mongodb <span class="keyword">import</span> MongoDBJobStore                       </span><br><span class="line">                                                                                  </span><br><span class="line">jobstores = &#123; <span class="string">&#x27;default&#x27;</span>: MongoDBJobStore(database=<span class="string">&#x27;apscheduler&#x27;</span>, collection=<span class="string">&#x27;jobs&#x27;</span>, host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">27017</span>)&#125;                                                                               </span><br><span class="line"></span><br><span class="line">scheduler = BackgroundScheduler(timezone=<span class="string">&#x27;Asia/Shanghai&#x27;</span>, jobstores=jobstores)  </span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> apscheduler.schedulers.blocking <span class="keyword">import</span> BlockingScheduler</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">scheduler = BlockingScheduler(timezone=<span class="string">&#x27;Asia/Shanghai&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">job</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s: start job&quot;</span> % time.asctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># run every 1 hour and 1 minutes and 3 seconds</span></span><br><span class="line">scheduler.add_job(job, <span class="string">&#x27;interval&#x27;</span>, hours=<span class="number">1</span>, minutes=<span class="number">1</span>,seconds=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># run once at a given time</span></span><br><span class="line"><span class="comment"># scheduler.add_job(job, trigger=&#x27;date&#x27;, run_date=&#x27;2022-01-04 09:04:01&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cron job</span></span><br><span class="line"><span class="comment"># scheduler.add_job(job, trigger=&#x27;cron&#x27;, minute=&#x27;*/5&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start to run as a daemon</span></span><br><span class="line"><span class="comment">#scheduler.start()</span></span><br></pre></td></tr></table></figure>




<pre><code>&lt;Job (id=91ed6da1d3ba41e6b6169d329243687b name=job)&gt;
</code></pre>
<h2 id="types"><a href="#types" class="headerlink" title="types"></a>types</h2><p>Python has support for optional “type hints” from python3.6.</p>
<p>These “type hints” are a special syntax that allow declaring the type of a variable, function, parameters etc</p>
<p>By declaring types for your variables, editors and tools can give you better support.</p>
<ul>
<li><a href="https://fastapi.tiangolo.com/python-types/">types introduction</a></li>
<li><a href="https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html">types cheat sheet</a></li>
<li><a href="https://realpython.com/python-type-checking/">types example</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Set</span>, <span class="type">Dict</span>, <span class="type">Tuple</span>, <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For simple built-in types, just use the name of the type</span></span><br><span class="line">x: <span class="built_in">int</span> = <span class="number">1</span></span><br><span class="line">x: <span class="built_in">float</span> = <span class="number">1.0</span></span><br><span class="line">x: <span class="built_in">bool</span> = <span class="literal">True</span></span><br><span class="line">x: <span class="built_in">str</span> = <span class="string">&quot;test&quot;</span></span><br><span class="line">x: <span class="built_in">bytes</span> = <span class="string">b&quot;test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For collections, the type of the collection item is in brackets</span></span><br><span class="line"><span class="comment"># (Python 3.9+)</span></span><br><span class="line">x: <span class="built_in">list</span>[<span class="built_in">int</span>] = [<span class="number">1</span>]</span><br><span class="line">x: <span class="built_in">set</span>[<span class="built_in">int</span>] = &#123;<span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># In Python 3.8 and earlier, the name of the collection type is</span></span><br><span class="line"><span class="comment"># capitalized, and the type is imported from the &#x27;typing&#x27; module</span></span><br><span class="line">x: <span class="type">List</span>[<span class="built_in">int</span>] = [<span class="number">1</span>]</span><br><span class="line">x: <span class="type">Set</span>[<span class="built_in">int</span>] = &#123;<span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># This is how you annotate a function definition</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stringify</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use Union when something could be one of a few types</span></span><br><span class="line">x: <span class="built_in">list</span>[<span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>]] = [<span class="number">3</span>, <span class="number">5</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;fun&quot;</span>]</span><br></pre></td></tr></table></figure>

<h1 id="CLI-Framework"><a href="#CLI-Framework" class="headerlink" title="CLI Framework"></a>CLI Framework</h1><img src="https://i0.wp.com/www.linuxlinks.com/wp-content/uploads/2021/03/Best-Free-Open-Source-Command-line-Development-Python-Tools.png?resize=1536%2C1229&ssl=1" height=200 width=300 />

<p>For good application, it’s better provide good CLI for user, so that user can know how to use it with help, python provides a good built-in parser <a href="https://docs.python.org/3/library/argparse.html">argparse</a>, but there are other frameworks as well which is better than argparse, <a href="https://github.com/google/python-fire">python-fire</a> is the best on to go which is developed by Google, while <a href="https://click.palletsprojects.com/en/8.0.x/">click</a> is also another good choice which is suitable to understand and auto generate help!!</p>
<h2 id="python-fire"><a href="#python-fire" class="headerlink" title="python-fire"></a>python-fire</h2><p><a href="https://github.com/google/python-fire">Python Fire</a> is a library for automatically generating command-line interfaces from absolutely any Python object. It can help debug Python code more easily from the command line, create CLI interfaces to existing code, allow you to interactively explore code in a REPL, and simplify transitioning between Python and Bash (or any other shell).</p>
<p><code>You can call Fire on any Python object:functions, classes, modules, objects, dictionaries, lists, tuples, etc. They all work!</code></p>
<h2 id="click-use-me"><a href="#click-use-me" class="headerlink" title="click (use me)"></a>click (use me)</h2><p><font color='red' size=4>Recommended Way</font></p>
<p><a href="https://click.palletsprojects.com/en/8.0.x/">Click</a> is a Python package for creating beautiful command line interfaces in a composable way with as little code as necessary. It’s the “Command Line Interface Creation Kit”. It’s highly configurable but comes with sensible defaults out of the box.</p>
<p>It aims to make the process of writing command line tools quick and fun while also preventing any frustration caused by the inability to implement an intended CLI API.</p>
<p>Click in three points:</p>
<ul>
<li><code>Arbitrary nesting of commands</code></li>
<li><code>Automatic help page generation</code></li>
<li><code>Supports lazy loading of subcommands at runtime</code></li>
<li><a href="https://click.palletsprojects.com/en/8.0.x/options/">click options</a></li>
</ul>
<p><strong>Only one command</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> click</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&quot;--count&quot;</span>, default=<span class="number">1</span>, <span class="built_in">help</span>=<span class="string">&quot;Number of greetings.&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&quot;-name&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              <span class="string">&quot;--name&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              prompt=<span class="string">&quot;Your name&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">              <span class="built_in">help</span>=<span class="string">&quot;The person to greet.&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cli</span>(<span class="params">count, name</span>):</span><br><span class="line">    <span class="comment"># handler of command</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Simple program that greets NAME for a total of COUNT times.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">        click.echo(<span class="string">f&quot;Hello, <span class="subst">&#123;name&#125;</span>!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cli()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./cli.py --<span class="built_in">help</span></span><br><span class="line">Usage: cli.py [OPTIONS]</span><br><span class="line"></span><br><span class="line">  Simple program that greets NAME <span class="keyword">for</span> a total of COUNT <span class="built_in">times</span>.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --count INTEGER     Number of greetings.</span><br><span class="line">  -name, --name TEXT  The person to greet.</span><br><span class="line">  --<span class="built_in">help</span>              Show this message and <span class="built_in">exit</span>.</span><br></pre></td></tr></table></figure>

<p><strong>Multiple commands</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> click</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@click.group()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cli</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTE here is cli which is group function name!!! not click.command!!!</span></span><br><span class="line"><span class="comment"># so it&#x27;s under cli group!!</span></span><br><span class="line"><span class="meta">@cli.command()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initdb</span>():</span><br><span class="line">    click.echo(<span class="string">&#x27;Initialized the database&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@cli.command()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dropdb</span>():</span><br><span class="line">    click.echo(<span class="string">&#x27;Dropped the database&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cli()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$./t.py</span><br><span class="line">Usage: t.py [OPTIONS] COMMAND [ARGS]...</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --<span class="built_in">help</span>  Show this message and <span class="built_in">exit</span>.</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  dropdb</span><br><span class="line">  initdb</span><br></pre></td></tr></table></figure>

<h2 id="argparse"><a href="#argparse" class="headerlink" title="argparse"></a>argparse</h2><p><strong>Three steps to use this library</strong></p>
<ul>
<li>initialize the parser by <font color='red'>argparse.ArgumentParser</font></li>
<li>add argument(keyword) by <font color='red'>named argument: parser.add_argument(‘–port’) or positional argument: parser.add_argument(‘port’)</font></li>
<li>get the parsed args by <font color='red'>parser.parse_args()</font> then do more</li>
</ul>
<p>Here is a basic example for it.</p>
<p><strong>app.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># parametrs for add_argument</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.</span></span><br><span class="line"><span class="comment"># action - The basic type of action to be taken when this argument is encountered at the command line.</span></span><br><span class="line"><span class="comment"># nargs - The number of command-line arguments that should be consumed.</span></span><br><span class="line"><span class="comment"># const - A constant value required by some action and nargs selections.</span></span><br><span class="line"><span class="comment"># default - The value produced if the argument is absent from the command line.</span></span><br><span class="line"><span class="comment"># type - The type to which the command-line argument should be converted.</span></span><br><span class="line"><span class="comment"># default type is str!!! if no type specified, str is the type of that!!!</span></span><br><span class="line"><span class="comment"># choices - A container of the allowable values for the argument.</span></span><br><span class="line"><span class="comment"># required - Whether or not the command-line option may be omitted (optionals only).</span></span><br><span class="line"><span class="comment"># help - A brief description of what the argument does.</span></span><br><span class="line"><span class="comment"># metavar - A name for the argument in usage messages.</span></span><br><span class="line"><span class="comment"># dest - The name of the attribute to be added to the object returned by parse_args(). [if not privided, use name as keyword to store]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">cli_commands = &#123;</span><br><span class="line">    <span class="string">&#x27;get&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;usage&#x27;</span>: [<span class="string">&quot;get &lt;type&gt;&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;put&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;usage&#x27;</span>: [<span class="string">&quot;put &lt;type&gt; value&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">contruct_help_commands</span>():</span><br><span class="line">    help_commands = []</span><br><span class="line">    <span class="keyword">for</span> command <span class="keyword">in</span> cli_commands.keys():</span><br><span class="line">        help_commands.extend(</span><br><span class="line">            [<span class="string">&quot;- &quot;</span> + x <span class="keyword">for</span> x <span class="keyword">in</span> cli_commands[command][<span class="string">&#x27;usage&#x27;</span>]])</span><br><span class="line">    <span class="comment"># here create a command list with &#x27;- &#x27; insert&#x27;</span></span><br><span class="line">    <span class="comment"># like [&#x27;- get &lt;type&gt;&#x27;, &#x27;- put &lt;type&gt; value&#x27;]</span></span><br><span class="line">    <span class="keyword">return</span> help_commands</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_cli</span>():</span><br><span class="line">    commands = contruct_help_commands()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># initialize parser</span></span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        description=<span class="string">&#x27;app cli&#x27;</span>,</span><br><span class="line">        formatter_class=argparse.RawTextHelpFormatter)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;--cmd&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, nargs=<span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&#x27;Runs a CLI command where CMD is one of:\n%s&#x27;</span> %</span><br><span class="line">        <span class="string">&quot;\n&quot;</span>.join(commands))</span><br><span class="line">    <span class="comment"># &#x27;--cmd&#x27; is the keyword for user to use, as nargs is &#x27;+&#x27; means at least 1 parameter for it</span></span><br><span class="line">    <span class="comment"># so parsed args is a list</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># example</span></span><br><span class="line">    <span class="comment"># ./app.py --cmd get LB </span></span><br><span class="line">    <span class="comment"># ./app.py -c get LB</span></span><br><span class="line">    <span class="comment"># after parsed</span></span><br><span class="line">    <span class="comment"># args.cmd = [&#x27;get&#x27; &#x27;LB&#x27;]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># true or false parameter</span></span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;--json&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&#x27;Outputs in json format (default: %(default)s)&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># example, if provided True, not provided false                                 </span></span><br><span class="line">    <span class="comment"># ./app.py --json                                                               </span></span><br><span class="line">    <span class="comment"># args.json = True                                                              </span></span><br><span class="line">                                                                                </span><br><span class="line">    <span class="comment"># int parameter                                                                 </span></span><br><span class="line">    parser.add_argument(                                                            </span><br><span class="line">        <span class="string">&#x27;--count&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">10</span>,                                            </span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&#x27;Outputs count (default: %(default)s)&#x27;</span>)                                </span><br><span class="line"></span><br><span class="line">    <span class="comment"># example, if provided 20, not provided 10                                 </span></span><br><span class="line">    <span class="comment"># ./app.py --count 20                                                           </span></span><br><span class="line">    <span class="comment"># args.count = 20          </span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    parser.add_argument(<span class="string">&#x27;host&#x27;</span>, nargs=<span class="number">1</span>, <span class="built_in">help</span>=<span class="string">&#x27;host address&#x27;</span>) </span><br><span class="line">    <span class="comment">#positional, no need to proivde keyword, always the last one</span></span><br><span class="line">    </span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="comment"># ./apppy --cmd get LB --json True www.test.com</span></span><br><span class="line">    <span class="comment"># Namespace(client_id=&#x27;edge&#x27;, cmd=[&#x27;get&#x27;, &#x27;LB&#x27;], json_output=&#x27;True&#x27;, host=&#x27;wwww.test.com&#x27;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Some-tips"><a href="#Some-tips" class="headerlink" title="Some tips"></a>Some tips</h1><p> <code>zip()</code> creates pairs from two sequences.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">step_two_sequences_pars</span>():</span><br><span class="line">    countries = (<span class="string">&#x27;Japan&#x27;</span>, <span class="string">&#x27;Korea&#x27;</span>, <span class="string">&#x27;China&#x27;</span>)</span><br><span class="line">    cities = (<span class="string">&#x27;Tokyo&#x27;</span>, <span class="string">&#x27;Seoul&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> country, city <span class="keyword">in</span> <span class="built_in">zip</span>(countries, cities):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;The capital of <span class="subst">&#123;country&#125;</span> is <span class="subst">&#123;city&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">step_two_sequences_pars()</span><br></pre></td></tr></table></figure>

<pre><code>The capital of Japan is Tokyo
The capital of Korea is Seoul
The capital of China is Beijing
</code></pre>
<h2 id="better-code-snips"><a href="#better-code-snips" class="headerlink" title="better code snips"></a>better code snips</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create a new list based on condition from a list</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, -<span class="number">1</span>]</span><br><span class="line">positives = [val+<span class="number">10</span> <span class="keyword">for</span> val <span class="keyword">in</span> arr <span class="keyword">if</span> val &gt;= <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(positives)</span><br><span class="line"></span><br><span class="line"><span class="comment"># open a file always this way</span></span><br><span class="line"><span class="comment">#with open(&#x27;filename.txt&#x27;, &#x27;w&#x27;) as fd:  </span></span><br><span class="line"><span class="comment">#    fd.write(&#x27;Hello&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># compared with None</span></span><br><span class="line">value = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> value <span class="keyword">is</span> <span class="literal">None</span>:  </span><br><span class="line">    <span class="comment"># some task</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use join() to concatenate strings which is faster</span></span><br><span class="line">nst = <span class="string">&#x27;a &#x27;</span> + <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Store unique values with Sets</span></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>]</span><br><span class="line">my_set = <span class="built_in">set</span>(my_list) <span class="comment"># removes duplicates</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Save Memory With Generators when list is huge</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list comprehension</span></span><br><span class="line">my_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(my_list)) <span class="comment"># 49995000</span></span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(my_list), <span class="string">&#x27;bytes&#x27;</span>) <span class="comment"># 87616 bytes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># generator comprehension</span></span><br><span class="line">my_gen = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(my_gen)) <span class="comment"># 49995000</span></span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(my_gen), <span class="string">&#x27;bytes&#x27;</span>) <span class="comment"># 112 bytes</span></span><br></pre></td></tr></table></figure>

<h2 id="two-prints-in-the-same-line"><a href="#two-prints-in-the-same-line" class="headerlink" title="two prints in the same line"></a>two prints in the same line</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>,end=<span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;boy&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>boylo
</code></pre>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://book.pythontips.com/en/latest/">python intermediate</a></li>
<li><a href="https://refactoring.guru/design-patterns/python">design pattern with python</a></li>
<li><a href="https://realpython.com/python-with-statement/">context manager</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
        <category>advanced</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python-advanced</tag>
      </tags>
  </entry>
  <entry>
    <title>python-basics</title>
    <url>/2019/11/15/python-basics/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Here are some basics about python3 that you should know. if your code is written with python2, convert it to python3 with <code>2to3</code> tool. </p>
<ul>
<li><a href="https://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html">difference between python2 and python3</a></li>
</ul>
<img src="https://learntocodewith.me/wp-content/uploads/2014/06/python-2-vs-3-2018.png" alt="drawing" width="300"/>


<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">2to3 python2_file</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">2to3 python2_dir</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>You can also run your app with virtual env, so that different python applications can use different python(python2 or python3) libraries</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">sudo pip3 install virtualenv</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">(python version &gt;= 3.3)</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">python3 -m venv ~/my_app_env</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">(will copy python3 binary(default) and related libs(less) from system, my_app_env is a directory)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> you want to inherit all system sites packages</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">python3 -m venv ~/my_app_env --system-site-packages</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">source</span> ~/my_app_env/bin/activate</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">(<span class="built_in">set</span> python path as ~/my_app_env, run with virtual <span class="built_in">env</span>)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">(my_new_app)$ </span><span class="language-bash">pip3 install flask</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">(will install flask at ~/my_app_env (<span class="built_in">dir</span>)!!! not system lib directory, so that each <span class="built_in">env</span> can have separate flasks)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">(my_new_app)$</span><span class="language-bash">deactivate</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>.py, pyc, pyo</strong></p>
<ul>
<li>.py:  this is normal input source code that you’ve written.</li>
<li>.pyc: this is the compiled bytecode. If you <code>import a module(python file)</code>, python will build a *.pyc file that contains the bytecode for importing to make it easier (and faster). <strong><strong>pycache</strong>&#x2F;lib.cpython-39.pyc</strong></li>
<li>.pyo: this is a another form of *.pyc file that was created while optimizations (-O) was on.</li>
</ul>
<p>When the Python interpreter is invoked with the -O flag, optimized code is generated and stored in ‘.pyo’ files.</p>
<p><font color='red' size=5>.pyo is gone, never use it</font></p>
<p><strong>A program doesn’t run faster when it is read from a ‘.pyc’ or ‘.pyo’ file than when it is read from a ‘.py’ file</strong>,the only thing that’s <strong><code>faster about &#39;.pyc&#39; or &#39;.pyo&#39; files is the speed with which they are loaded</code></strong>.</p>
<p><code>When a script is run by giving its name on the command line, the bytecode for the script is never written to a &#39;.pyc&#39; or &#39;.pyo&#39; file automatically</code>. Thus, the startup time of a script may be reduced by moving most of its code to a module and having a small bootstrap script that imports that module.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">generate pyc manually(pyc is generated automatically <span class="keyword">for</span> module when it<span class="string">&#x27;s imported by others)</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">python3 -m compileall test.py</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">ls __pycache__/</span></span></span><br><span class="line">test.cpython-3.9.pyc</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string">python3 __pycache__/test.cpython-3.9.pyc</span></span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>generic methods for types</strong></p>
<p>Each variable has a type, each type has some common methods and specific methods, here are generic rules you should know</p>
<p><strong>methods for all types(str, list, tuple, range, dict, set)</strong></p>
<ul>
<li><code>dir(str)</code> to get methods of type(str) for help, or detail for a specific one <code>help(str.index)</code>.  </li>
<li><font color='red' size='3'> item in s, item not in s, len(s), max&#x2F;min(except dict, str), for item in s(s must be iterable)</font></li>
</ul>
<hr>
<p><strong>methods for sequence type(str, list, tuple, range)</strong></p>
<ul>
<li><font color='red' size='3'> s[i], s[i:j](not include j), s[i:j:k], s + s1, s.count(x)</font></li>
<li><strong><code>a, b, c = s (size of s must be 3)</code></strong></li>
<li><strong><code>call func(*s), pass each elem to func, like func(s[0], s[1], s[2])</code></strong></li>
<li><strong>the first index of sequence is 0</strong></li>
</ul>
<p><font color='red' size=4>you can’t declare var with explicit type, the type of var depends on its value, can be changed at runtime!!!</font></p>
<h1 id="naming-convention"><a href="#naming-convention" class="headerlink" title="naming convention"></a>naming convention</h1><p>python uses underscores to write <code>multiword names</code> like <code>get_name</code>, no capital letter. </p>
<p><strong>Files</strong>  </p>
<ul>
<li>python follows a convention where source <code>files are all lower case with underscore separating multiple words</code>, <span style="color:red">client_log.py</span></li>
<li>Compound file names are separated with <code>_</code></li>
</ul>
<p><strong>Functions and Methods</strong>  </p>
<ul>
<li>private functions like this <code>_do_work()</code></li>
<li>built-in function like this <code>__init__()</code></li>
<li>If a name consists of multiple words, should write like this <code>get_name()</code>.</li>
<li>function names are case-sensitive (<code>car, Car and CAR</code> are three different variables).</li>
</ul>
<p><strong>Variables</strong></p>
<ul>
<li>should not include the name of your type in the name of your variable’s name, <code>tet_list</code></li>
<li>Generally, use relatively <strong>simple (short) name(lower case), (_ underscore for multiple worlds) long var</strong>.<ul>
<li><span style="color:red">user to u</span></li>
<li><span style="color:red">user_id to uid</span></li>
<li><span style="color:red">server_listener</span></li>
<li><span style="color:red">lpcfg</span></li>
</ul>
</li>
<li>If variable type is bool, its name should start with <code>has, is, can or allow</code>, etc.</li>
<li>Single letter represents index: i, j, k</li>
</ul>
<p><strong>Constants</strong>  </p>
<ul>
<li>Constant should be <code>capitalized all letters</code>. <strong>WORLD</strong></li>
</ul>
<p><strong>class</strong>  </p>
<ul>
<li>type of class <code>should be capitalized and camel case</code> <strong>Class Person(object):</strong></li>
<li>private function(<code>_private_f()</code>) and built-in(<code>__eq__()</code>) function can NOT be accessed!</li>
</ul>
<p><strong>import package</strong>  </p>
<ul>
<li>package(is dir with <strong>init</strong>.py under it) name should be lowercase. like <span style="color:red">import xxx.testhello</span>, xxx is package name</li>
</ul>
<h1 id="printing"><a href="#printing" class="headerlink" title="printing"></a>printing</h1><p>Printing is an easy way to show result, there are several ways to print variables.</p>
<ul>
<li>print one line</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span></span><br><span class="line">      <span class="string">&quot;jason&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello \</span></span><br><span class="line"><span class="string">       jason&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>print multiple lines</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello \n jason&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;hello</span></span><br><span class="line"><span class="string">      jason&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>show one parameter at last position</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;jason&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>, name) <span class="comment"># a space is added between after &#x27;hello&#x27; automatically</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello %s&quot;</span> % name) <span class="comment"># no auto added space (python2 format)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>show multiple parameters at different positions</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># position parameters</span></span><br><span class="line">msg = <span class="string">&quot;welcome&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello %s msg %s&quot;</span> % (name, msg)) <span class="comment"># python2 format</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># named parameters like &#123;0&#125; or &#123;n&#125;</span></span><br><span class="line"><span class="comment"># format index start from 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello &#123;0&#125;, msg &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(name, msg))</span><br><span class="line"><span class="comment"># no need to write index if used with order</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello &#123;&#125;, msg &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, msg))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello &#123;1&#125;, msg &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(name, msg))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello &#123;n&#125;, msg &#123;m&#125;&quot;</span>.<span class="built_in">format</span>(n=name, m=msg))</span><br></pre></td></tr></table></figure>

<ul>
<li>variable can be at any position</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print add space between different parts!!!</span></span><br><span class="line"><span class="built_in">print</span>(name, <span class="string">&quot;hi&quot;</span>) <span class="comment">#has auto added space before &#x27;hi&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name, <span class="string">&quot;hi&quot;</span>, name) <span class="comment"># has auto added space before and after &#x27;hi&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name, <span class="string">&quot;hi %s&quot;</span> % name) <span class="comment"># has auto added space before &#x27;hi&#x27;, python2 format</span></span><br></pre></td></tr></table></figure>

<ul>
<li>print with string.format()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#123; &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;hi&#x27;</span>))</span><br><span class="line"><span class="comment"># &#123;&#123; for escape</span></span><br></pre></td></tr></table></figure>
<ul>
<li>print with template which is less verbose than format() but need high python version</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># use var directly in template with &#123;&#125;</span></span><br><span class="line">name=<span class="string">&#x27;jason&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;hi<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># more advanced, use var and function directly!!!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hi<span class="subst">&#123;<span class="number">2</span>+<span class="number">3</span>&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hi<span class="subst">&#123;fun1(name)&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>Should always use ‘’.format() and f”cool{name}” which python3 style</strong></p>
<p><a href="https://pyformat.info/">format() details</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&#x27;jason&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">msg</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hi &#x27;</span> + name</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hi <span class="subst">&#123;name&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hi <span class="subst">&#123;<span class="number">2</span>+<span class="number">3</span>&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;msg(name)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print in one lines</span></span><br><span class="line">msg=(</span><br><span class="line">    <span class="string">&quot;hello &quot;</span></span><br><span class="line">    <span class="string">&quot;world&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello &quot;</span></span><br><span class="line">      <span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello &quot;</span> + </span><br><span class="line">      <span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write at different lines with \ or ()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello \</span></span><br><span class="line"><span class="string">world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print in multiple lines</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello \nworld&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;hello</span></span><br><span class="line"><span class="string">world&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>hi jason
hi 5
hi jason
hello world
hello world
hello world
hello world
hello 
world
hello
world
</code></pre>
<h1 id="built-in-APIS"><a href="#built-in-APIS" class="headerlink" title="built-in APIS"></a>built-in APIS</h1><p>Python(without library) provides many methods to make it easy to use. here is a list of that.</p>
<ul>
<li><strong>Complex</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c1 = <span class="number">4</span> + <span class="number">3j</span></span><br><span class="line">c2 = <span class="built_in">complex</span>(<span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line">c1*c2</span><br></pre></td></tr></table></figure></li>
<li><strong>Built-in function</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">divmod</span>(<span class="number">8</span>, <span class="number">4</span>) <span class="comment"># result: (2, 0)</span></span><br><span class="line"><span class="built_in">abs</span>(-<span class="number">12</span>)</span><br><span class="line"><span class="built_in">sum</span>([<span class="number">1</span>,<span class="number">2</span>]) <span class="built_in">sum</span>([<span class="literal">False</span>, <span class="literal">True</span>])</span><br><span class="line"><span class="built_in">max</span>([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">min</span>([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="built_in">round</span>(<span class="number">3.23</span>, <span class="number">1</span>) <span class="comment"># return 3.2</span></span><br><span class="line"><span class="built_in">round</span>(<span class="number">3.26</span>, <span class="number">1</span>) <span class="comment"># return 3.3</span></span><br></pre></td></tr></table></figure></li>
<li><strong>built-in modules</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">math.pi</span><br><span class="line">math.sin()</span><br><span class="line">math.cos()</span><br><span class="line">math.<span class="built_in">pow</span>()</span><br><span class="line">math.log2()</span><br><span class="line">math.ceil(<span class="number">2.1</span>) == <span class="number">3</span>   <span class="comment"># rounds up to close integer</span></span><br><span class="line">math.floor(<span class="number">2.1</span>) == <span class="number">2</span>  <span class="comment"># rounds down to close integer</span></span><br></pre></td></tr></table></figure></li>
<li><strong>assert</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">assert</span> a, <span class="string">&#x27;bad value&#x27;</span>  <span class="comment"># assert true, never raise exception.</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">0</span>, <span class="string">&#x27;bad value&#x27;</span>  <span class="comment"># assert fail, exception with msg &#x27;bad value&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>argv</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(sys.argv) <span class="comment"># argv is list that includes the app name and parameter</span></span><br><span class="line"><span class="comment"># ./app.py -f xx.text</span></span><br><span class="line"><span class="comment"># sys.argv = [&#x27;./app.py&#x27;, &#x27;-f&#x27;, &#x27;xx.text&#x27;]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="constants"><a href="#constants" class="headerlink" title="constants"></a>constants</h1><ul>
<li>Python doesn’t have built-in constant types.</li>
<li>By convention, <strong>Python uses a variable whose name contains all capital letters to define a constant.</strong></li>
</ul>
<p><strong>NOTE: someone can go and change the value, even it’s unlikely but possible.</strong></p>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MY_CONSTANT = <span class="string">&quot;Whatever&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># trick way</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CONST</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    FOO = <span class="number">1234</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setattr__</span>(<span class="params">self, *_</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">CONST = CONST()</span><br><span class="line"><span class="built_in">print</span> CONST.FOO    <span class="comment"># 1234</span></span><br><span class="line"></span><br><span class="line">CONST.FOO = <span class="number">4321</span></span><br><span class="line">CONST.BAR = <span class="number">5678</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> CONST.FOO    <span class="comment"># Still 1234!</span></span><br><span class="line"><span class="built_in">print</span> CONST.BAR    <span class="comment"># Oops AttributeError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or this way</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Const</span>:</span><br><span class="line"><span class="meta">  @property</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">FOO</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;foo&quot;</span></span><br><span class="line"></span><br><span class="line">CONST = Const()  <span class="comment"># You need an instance</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> something == CONST.FOO:</span><br></pre></td></tr></table></figure>


<h1 id="variable"><a href="#variable" class="headerlink" title="variable"></a>variable</h1><p>A variable is a label or a name given to a certain location in memory. This location holds the value you want your program to remember for use later on. What’s great in Python is that you do not have to explicitly state what the type of variable you want to define is - it can be of any type (string, integer, float, list, dict etc.). To create a new variable in Python, you simply use the assignment operator (&#x3D;, a single equals sign) and assign the desired value to it, its type is determined by its value, but if you change the value, the type can be changed as well.</p>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first_string_var = <span class="string">&quot;First String&quot;</span>  </span><br><span class="line">first_int_var = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">total = <span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span></span><br><span class="line">total = <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Local-Scope"><a href="#Local-Scope" class="headerlink" title="Local Scope"></a>Local Scope</h2><p>A variable created inside a function belongs to the local scope of that function, and can only be used inside that function.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_number</span>():</span><br><span class="line">    first_num = <span class="number">1</span></span><br><span class="line">    <span class="comment"># Print statement 1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The first number defined is:&quot;</span>, first_num)</span><br><span class="line"></span><br><span class="line">print_number()</span><br></pre></td></tr></table></figure>

<pre><code>The first number defined is: 1
</code></pre>
<h2 id="Enclosing-Scope"><a href="#Enclosing-Scope" class="headerlink" title="Enclosing Scope"></a>Enclosing Scope</h2><p>Inner function can access var defined in outer function directly, while the <code>reverse direction is not allowed.</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    first_num = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        second_num = <span class="number">2</span></span><br><span class="line">        <span class="comment"># Print statement 1 - Scope: Inner</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;first_num from outer:&quot;</span>, first_num)</span><br><span class="line">        <span class="comment"># Print statement 2 - Scope: Inner</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;second_num from inner:&quot;</span>, second_num)</span><br><span class="line">    inner()</span><br><span class="line">    <span class="comment"># Print statement 3 - Scope: Outer</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># this will cause error if uncommented</span></span><br><span class="line">    <span class="comment"># print(&quot;second_num from inner: &quot;, second_num)</span></span><br><span class="line"></span><br><span class="line">outer()</span><br></pre></td></tr></table></figure>

<pre><code>first_num from outer: 1
second_num from inner: 2
</code></pre>
<h3 id="nolocal-keyword"><a href="#nolocal-keyword" class="headerlink" title="nolocal keyword"></a>nolocal keyword</h3><p>The nonlocal keyword is useful in nested functions. <code>It causes the variable to refer to the previously bound variable in the closest enclosing scope</code>. In other words, it will prevent the variable from trying to bind locally first,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    first_num = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="comment"># try without nonlocal</span></span><br><span class="line">        <span class="comment"># without nonlocal, you can still access first_num, but if you modify it, a new local variable is defined</span></span><br><span class="line">        <span class="keyword">nonlocal</span> first_num</span><br><span class="line">        first_num = <span class="number">0</span></span><br><span class="line">        second_num = <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;inner - second_num is:&quot;</span>, second_num)</span><br><span class="line">        </span><br><span class="line">    inner()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;outer - first_num is:&quot;</span>, first_num)</span><br><span class="line"></span><br><span class="line">outer()</span><br></pre></td></tr></table></figure>

<pre><code>inner - second_num is: 1
outer - first_num is: 0
</code></pre>
<h2 id="Global-Scope"><a href="#Global-Scope" class="headerlink" title="Global Scope"></a>Global Scope</h2><p>A variable created in the main body of the Python code is a global variable and belongs to the global scope.</p>
<p><code>Global variables are available from any scope, global and local.</code></p>
<p>If you need to create a global variable, but are stuck in the local scope, you can use the <code>global</code> keyword.</p>
<p>The global keyword makes the variable global.</p>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gb</span>(<span class="params">new_greeting</span>):</span><br><span class="line">    <span class="comment"># define a global variable from a function.</span></span><br><span class="line">    <span class="keyword">global</span> gt</span><br><span class="line">    gt = new_greeting</span><br><span class="line">    </span><br><span class="line">gb(<span class="string">&quot;cool&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(gt)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">greeting = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greeting_world</span>():</span><br><span class="line">    world = <span class="string">&quot;World&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(greeting, world)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greeting_name</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(greeting, name)</span><br><span class="line"></span><br><span class="line">greeting_world()</span><br><span class="line">greeting_name(<span class="string">&quot;Samuel&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Hello World
Hello Samuel
</code></pre>
<h3 id="Global-keyword"><a href="#Global-keyword" class="headerlink" title="Global keyword"></a>Global keyword</h3><p>To change the value of a global variable inside a function, refer to the variable by using the <code>global keyword</code>, it’s similar like <code>nolocal</code> keyword.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">greeting = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_greeting</span>(<span class="params">new_greeting</span>):</span><br><span class="line">    <span class="comment"># try without it</span></span><br><span class="line">    <span class="keyword">global</span> greeting</span><br><span class="line">    greeting = new_greeting</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greeting_world</span>():</span><br><span class="line">    world = <span class="string">&quot;World&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(greeting, world)</span><br><span class="line"></span><br><span class="line">change_greeting(<span class="string">&quot;Hi&quot;</span>)</span><br><span class="line">greeting_world()</span><br></pre></td></tr></table></figure>

<pre><code>Hi World
</code></pre>
<h1 id="types"><a href="#types" class="headerlink" title="types"></a>types</h1><h2 id="operators"><a href="#operators" class="headerlink" title="operators"></a>operators</h2><p><strong>Arithmetic operators</strong></p>
<table>
<thead>
<tr>
<th align="left">Operator</th>
<th align="left">Meaning</th>
<th align="left">Example</th>
</tr>
</thead>
<tbody><tr>
<td align="left">+</td>
<td align="left">Add two operands or unary plus</td>
<td align="left">x + y+ 2</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">Subtract right operand from the left or unary minus</td>
<td align="left">x - y- 2</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">Multiply two operands</td>
<td align="left">x * y</td>
</tr>
<tr>
<td align="left">&#x2F;</td>
<td align="left">Divide left operand by the right one (always results into float)</td>
<td align="left">x &#x2F; y</td>
</tr>
<tr>
<td align="left">%</td>
<td align="left">Modulus - remainder of the division of left operand by the right</td>
<td align="left">x % y (remainder of x&#x2F;y)</td>
</tr>
<tr>
<td align="left">&#x2F;&#x2F;</td>
<td align="left">Floor division - division that results into whole number adjusted to the left in the number line</td>
<td align="left">x &#x2F;&#x2F; y</td>
</tr>
<tr>
<td align="left">**</td>
<td align="left">Exponent - left operand raised to the power of right</td>
<td align="left">x**y (x to the power y)</td>
</tr>
</tbody></table>
<hr>
<p><strong>Comparison operators</strong></p>
<table>
<thead>
<tr>
<th align="left">Operator</th>
<th align="left">Meaning</th>
<th align="left">Example</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&gt;</td>
<td align="left">Greater than - True if left operand is greater than the right</td>
<td align="left">x &gt; y</td>
</tr>
<tr>
<td align="left">&lt;</td>
<td align="left">Less than - True if left operand is less than the right</td>
<td align="left">x &lt; y</td>
</tr>
<tr>
<td align="left">&#x3D;&#x3D;</td>
<td align="left">Equal to - True if both operands are equal</td>
<td align="left">x &#x3D;&#x3D; y</td>
</tr>
<tr>
<td align="left">!&#x3D;</td>
<td align="left">Not equal to - True if operands are not equal</td>
<td align="left">x !&#x3D; y</td>
</tr>
<tr>
<td align="left">&gt;&#x3D;</td>
<td align="left">Greater than or equal to - True if left operand is greater than or equal to the right</td>
<td align="left">x &gt;&#x3D; y</td>
</tr>
<tr>
<td align="left">&lt;&#x3D;</td>
<td align="left">Less than or equal to - True if left operand is less than or equal to the right</td>
<td align="left">x &lt;&#x3D; y</td>
</tr>
</tbody></table>
<hr>
<p><strong>Logical operators</strong></p>
<table>
<thead>
<tr>
<th align="left">Operator</th>
<th align="left">Meaning</th>
<th align="left">Example</th>
</tr>
</thead>
<tbody><tr>
<td align="left">and</td>
<td align="left">True if both the operands are true</td>
<td align="left">x and y</td>
</tr>
<tr>
<td align="left">or</td>
<td align="left">True if either of the operands is true</td>
<td align="left">x or y</td>
</tr>
<tr>
<td align="left">not</td>
<td align="left">True if operand is false (complements the operand)</td>
<td align="left">not x</td>
</tr>
</tbody></table>
<hr>
<p><strong>Bitwise operators</strong></p>
<table>
<thead>
<tr>
<th align="left">Operator</th>
<th align="left">Meaning</th>
<th align="left">Example</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&amp;</td>
<td align="left">Bitwise AND</td>
<td align="left">x &amp; y &#x3D; 0 (0000 0000)</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left">Bitwise OR</td>
</tr>
<tr>
<td align="left">~</td>
<td align="left">Bitwise NOT</td>
<td align="left">~x &#x3D; -11 (1111 0101)</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">Bitwise XOR</td>
<td align="left">x ^ y &#x3D; 14 (0000 1110)</td>
</tr>
<tr>
<td align="left">&gt;&gt;</td>
<td align="left">Bitwise right shift</td>
<td align="left">x &gt;&gt; 2 &#x3D; 2 (0000 0010)</td>
</tr>
<tr>
<td align="left">&lt;&lt;</td>
<td align="left">Bitwise left shift</td>
<td align="left">x &lt;&lt; 2 &#x3D; 40 (0010 1000)</td>
</tr>
</tbody></table>
<hr>
<p><strong>Assignment operators</strong></p>
<table>
<thead>
<tr>
<th align="left">Operator</th>
<th align="left">Example</th>
<th align="left">Equivalent to</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&#x3D;</td>
<td align="left">x &#x3D; 5</td>
<td align="left">x &#x3D; 5</td>
</tr>
<tr>
<td align="left">+&#x3D;</td>
<td align="left">x +&#x3D; 5</td>
<td align="left">x &#x3D; x + 5</td>
</tr>
<tr>
<td align="left">-&#x3D;</td>
<td align="left">x -&#x3D; 5</td>
<td align="left">x &#x3D; x - 5</td>
</tr>
<tr>
<td align="left">*&#x3D;</td>
<td align="left">x *&#x3D; 5</td>
<td align="left">x &#x3D; x * 5</td>
</tr>
<tr>
<td align="left">&#x2F;&#x3D;</td>
<td align="left">x &#x2F;&#x3D; 5</td>
<td align="left">x &#x3D; x &#x2F; 5</td>
</tr>
<tr>
<td align="left">%&#x3D;</td>
<td align="left">x %&#x3D; 5</td>
<td align="left">x &#x3D; x % 5</td>
</tr>
<tr>
<td align="left">&#x2F;&#x2F;&#x3D;</td>
<td align="left">x &#x2F;&#x2F;&#x3D; 5</td>
<td align="left">x &#x3D; x &#x2F;&#x2F; 5</td>
</tr>
<tr>
<td align="left">**&#x3D;</td>
<td align="left">x **&#x3D; 5</td>
<td align="left">x &#x3D; x ** 5</td>
</tr>
<tr>
<td align="left">&amp;&#x3D;</td>
<td align="left">x &amp;&#x3D; 5</td>
<td align="left">x &#x3D; x &amp; 5</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">&#x3D;</td>
<td align="left">x</td>
</tr>
<tr>
<td align="left">^&#x3D;</td>
<td align="left">x ^&#x3D; 5</td>
<td align="left">x &#x3D; x ^ 5</td>
</tr>
<tr>
<td align="left">&gt;&gt;&#x3D;</td>
<td align="left">x &gt;&gt;&#x3D; 5</td>
<td align="left">x &#x3D; x &gt;&gt; 5</td>
</tr>
<tr>
<td align="left">&lt;&lt;&#x3D;</td>
<td align="left">x &lt;&lt;&#x3D; 5</td>
<td align="left">x &#x3D; x &lt;&lt; 5</td>
</tr>
</tbody></table>
<hr>
<p><strong>Membership operators</strong></p>
<table>
<thead>
<tr>
<th>Operator</th>
<th>Meaning</th>
<th>Example</th>
</tr>
</thead>
<tbody><tr>
<td>in</td>
<td>True if value&#x2F;variable is found in the sequence</td>
<td>5 in x</td>
</tr>
<tr>
<td>not in</td>
<td>True if value&#x2F;variable is not found in the sequence</td>
<td>5 not in x</td>
</tr>
</tbody></table>
<hr>
<p>NOTE: <strong><font color='red'>+, &#x3D;&#x3D;, !&#x3D; works for tuple, list, string as well.</font></strong></p>
<h2 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h2><p>Integer supports most operators like C but with less difference, here are the operators it supports.</p>
<ul>
<li>+, -, *, &#x2F;, &#x2F;&#x2F;</li>
<li>**, %<font color='red' size='3'></li>
<li><strong>x or y (C ||), x and y (C &amp;&amp;), not x (C !)</strong></font></li>
<li>&lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;&#x3D;, !&#x3D;</li>
<li>x | y, x &amp; y, x ^ y, x &gt;&gt; y, x &lt;&lt; y</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">integer_demo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;convert str to int int(&#x27;12&#x27;) =&quot;</span>, <span class="built_in">int</span>(<span class="string">&#x27;12&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;convert int to string str(12) =&quot;</span>, <span class="built_in">str</span>(<span class="number">12</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;// only remains interger 5//1.5=&quot;</span>, <span class="number">5</span>//<span class="number">1.5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;/  result is float 1/2=&quot;</span>, <span class="number">1</span>/<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2**3 =&quot;</span>, <span class="number">2</span>**<span class="number">3</span>) <span class="comment"># like pow(2,3)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;8%4 =&quot;</span>, <span class="number">8</span> % <span class="number">4</span>) <span class="comment"># result: 0 while divmod(8,4)=(2,0)</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">integer_demo()</span><br></pre></td></tr></table></figure>

<pre><code>convert str to int int(&#39;12&#39;) = 12
convert int to string str(12) = 12
// only remains interger 5//1.5= 3.0
/  result is float 1/2= 0.5
2**3 = 8
8%4 = 0
</code></pre>
<h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p><code>string</code> is a kind of sequence, like <code>list, tuple</code>, but <code>its content can&#39;t be modified in place</code>, in order to change its content, you must create a new one. </p>
<p><font color='red'>no char type in python, that means ‘’ and “” has the same meaning</font></p>
<hr>
<p><strong>Create a string</strong></p>
<ul>
<li>s &#x3D; “hello”</li>
<li>s &#x3D; ‘hello’</li>
<li>s &#x3D; “hi” + “world”</li>
<li><code>s = r&#39;hello\nworld&#39; # raw literal string now \n is a normal char!!</code></li>
</ul>
<hr>
<p><strong>Ops</strong></p>
<ul>
<li>index from 0, last index -1</li>
<li>len(str), no \0 is there but we count in C.</li>
<li>count(), index(), isdigit(), islower(), lower(), isupper(), upper(), isspace(), join(), replace(), find(), split(), splitlines(), strip()</li>
<li><code>str.strip(&#39;hy&#39;)</code> will strip <strong>h or y both from right and left not hy as a whole</strong></li>
<li>index() and find() return same if found(index), otherwise, <code>exception ValueError for index, -1 returned for find()</code></li>
<li>slicing [2:5], [2:], [:5], [2:-1] all with default step 1 from left to right</li>
<li>slicing with steps, [2:5:2] ([start:end:step])</li>
<li>[::-1](reverse the string)</li>
<li><code>&quot;hello&quot;.xxx() all such methods do NOT support regular pattern</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">str_demo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;raw string r\&quot;a\\nb\&quot; = &quot;</span>, <span class="string">r&quot;a\nb&quot;</span>)</span><br><span class="line">    <span class="comment"># very useful when use re as regular pattern may contain special char to python</span></span><br><span class="line">    <span class="comment"># use r before a string to suppress(r means raw literal)</span></span><br><span class="line"></span><br><span class="line">    s1 = <span class="string">&quot;hello boy&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;str=&#x27;hello boy&#x27;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reverse s1 by s1[::-1]=&quot;</span>, s1[::-<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;count sub words, str.count(&#x27;o&#x27;) =&quot;</span>, s1.count(<span class="string">&#x27;o&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;first element index 0, str[0] =&quot;</span>, s1[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;last element index: str[-1] =&quot;</span>, s1[-<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;not include \\0 len(str) =&quot;</span>, <span class="built_in">len</span>(s1))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a:b means [a, b)  str[:-1] =&quot;</span>, s1[:-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s1[<span class="number">2</span>] = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;can&#x27;t change the content of a string by str[2] = &#x27;a&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;create a copy of str by str[:]!&quot;</span>)</span><br><span class="line">    <span class="comment"># newstr = s1[:]#a copy a str.</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;str is: &quot;</span> + s1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;s1.startswith(&quot;hello&quot;) =&#x27;</span>, s1.startswith(<span class="string">&quot;hello&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;s1.endswith(&quot;bo&quot;) =&#x27;</span>, s1.endswith(<span class="string">&quot;bo&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> s1.isdigit():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;str is digital&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> s1.islower():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;str is lower&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> s1.isupper():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;str is upper&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> s1.isspace():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;str is space&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;str is&quot;</span>, s1)</span><br><span class="line"></span><br><span class="line">    idx = s1.find(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> idx != -<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;find hello at %d in : %s&quot;</span> % (idx, s1))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;replace boy with girl, new str is: &quot;</span> + s1.replace(<span class="string">&quot;boy&quot;</span>, <span class="string">&quot;girl&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;splitlines() == split(&#x27;\\n&#x27;), split() will return a list, but s1 is unchanged s1 = %s s1.split(&#x27; &#x27;) = %s&quot;</span> % (s1, s1.split(<span class="string">&#x27; &#x27;</span>)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;strip() removes characters(whitespace by default)</span></span><br><span class="line"><span class="string">             from both left and right based on the argument set of character</span></span><br><span class="line"><span class="string">             while rstrip() only from right&#x27;&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;before strip str =&quot;</span>, s1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;after strip(&#x27;hy&#x27;) str =&quot;</span>, s1.strip(<span class="string">&#x27;hy&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;join() join each elem in an iterable object with character provided, &#x27;-&#x27;&#x27;.join(&#x27;hello&#x27;) =&quot;</span>, <span class="string">&#x27;-&#x27;</span>.join(<span class="string">&quot;hello&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#x27;-&#x27;.join([&#x27;hello&#x27;, &#x27;boy&#x27;] =&quot;</span>, <span class="string">&#x27;-&#x27;</span>.join([<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;boy&quot;</span>]))</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_demo()</span><br></pre></td></tr></table></figure>

<pre><code>raw string r&quot;a\nb&quot; =  a\nb
str=&#39;hello boy&#39;
reverse s1 by s1[::-1]= yob olleh
count sub words, str.count(&#39;o&#39;) = 2
first element index 0, str[0] = h
last element index: str[-1] = y
not include \0 len(str) = 9
a:b means [a, b)  str[:-1] = hello bo
can&#39;t change the content of a string by str[2] = &#39;a&#39;
create a copy of str by str[:]!
str is: hello boy
s1.startswith(&quot;hello&quot;) = True
s1.endswith(&quot;bo&quot;) = False
str is lower
find hello at 0 in : hello boy
replace boy with girl, new str is: hello girl
splitlines() == split(&#39;\n&#39;), split() will return a list, but s1 is unchanged s1 = hello boy s1.split(&#39; &#39;) = [&#39;hello&#39;, &#39;boy&#39;]
strip() removes characters(whitespace by default)
             from both left and right based on the argument set of character
             while rstrip() only from right
before strip str = hello boy
after strip(&#39;hy&#39;) str = ello bo
join() join each elem in an iterable object with character provided, &#39;-&#39;&#39;.join(&#39;hello&#39;) = h-e-l-l-o
&#39;-&#39;.join([&#39;hello&#39;, &#39;boy&#39;] = hello-boy
</code></pre>
<h3 id="encoding-and-decoding"><a href="#encoding-and-decoding" class="headerlink" title="encoding and decoding"></a>encoding and decoding</h3><p>Python3’s str type is meant to represent human-readable text and can <code>contain any Unicode character</code>.</p>
<p>The <code>bytes type</code>, conversely, represents <code>binary data or sequences of raw bytes</code>, that do not intrinsically have an encoding attached to it.</p>
<img src="https://files.realpython.com/media/encode-decode.3e665ad9b455.png" width=380>


<p>Python 3 is all-in on Unicode and UTF-8 specifically. Here is what that means:</p>
<ul>
<li><p>Python 3 source code is assumed to be UTF-8 by default. This means that <strong>you don’t need # -<em>- coding: UTF-8 -</em>- at the top of .py files in Python 3.</strong></p>
</li>
<li><p>All text <code>(str) is Unicode by default</code>. Encoded Unicode text is represented as binary data in memory (bytes). The str type can contain any literal Unicode character, such as “Δv &#x2F; Δt”, all of which will be stored as Unicode.</p>
</li>
<li><p>Python’s re module defaults to the re.UNICODE flag rather than re.ASCII. This means, for instance, that r”\w” matches Unicode word characters, not just ASCII letters.</p>
</li>
<li><p>The default encoding&#x2F;decoding in <code>str.encode() and bytes.decode() is UTF-8.</code></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The length of a single Unicode character as a Python str will always be 1</span></span><br><span class="line"><span class="comment"># no matter how many bytes it occupies.</span></span><br><span class="line"><span class="comment"># The length of the same character encoded to bytes</span></span><br><span class="line"><span class="comment"># will be anywhere between 1 and 4.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>():</span><br><span class="line">    ibrow = <span class="string">&quot;🤨&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;len of character:&#x27;</span>, <span class="built_in">len</span>(ibrow))</span><br><span class="line">    bs = ibrow.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;encoded with utf-8:&#x27;</span>, bs)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;len of bytes:&#x27;</span>, <span class="built_in">len</span>(bs))</span><br><span class="line">    </span><br><span class="line">encode()</span><br></pre></td></tr></table></figure>

<pre><code>len of character: 1
encoded with utf-8: b&#39;\xf0\x9f\xa4\xa8&#39;
len of bytes: 4
</code></pre>
<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>List is a sequence, <code>element can be any type even for the a list. but for sort() method it requires same type of all elements</code>.</p>
<hr>
<p><strong>To create a list</strong></p>
<ul>
<li>lv &#x3D; list()</li>
<li><strong>lv &#x3D; [], lv &#x3D;&#x3D; [] True, len(lv)&#x3D;&#x3D;0</strong></li>
<li>lv &#x3D; <strong>[1, 2]</strong></li>
<li>lv &#x3D; list(‘abc’) same as lv &#x3D; [‘a’, ‘b’, ‘c’]</li>
<li>lv &#x3D; list(dt.items()), dt&#x3D;{‘a’:1} same as  lv&#x3D;[(‘a’, 1)]</li>
<li>lv &#x3D; list(range(3)) same as  lv &#x3D; [0, 1, 2]</li>
<li>lv &#x3D; <strong>[1, ‘a’, False, [3, 4]]</strong></li>
<li>lv &#x3D; [1] * 3 same as [1, 1, 1]</li>
<li><strong>lv &#x3D; old[:] # shadow copy, only the top level is copied</strong></li>
<li><code>lv = [val+10 for val in arr if val &gt;= 0]</code></li>
</ul>
<hr>
<p><strong>Ops</strong></p>
<ul>
<li>append(value), count(value), extend(iterable), index(value, start&#x3D;None, stop&#x3D;None), insert(index, value), pop(index&#x3D;None)(default from last), remove(value), reverse(), sort(key&#x3D;None, reverse&#x3D;False)</li>
<li>sort() needs all elements have the same type.</li>
<li><code>for i in range(len(lt)): lt[i]</code></li>
<li><code>for elem in lt: print(elem)</code></li>
<li><code>for i in range(len(lt) - 1, -1, -1):lt[i]</code> loop from last</li>
</ul>
<hr>
<p><strong>Note</strong></p>
<ul>
<li>reverse() and sort() are <code>in place methods</code>.</li>
<li>if you pass a list to a function, modification in that function of the list will take place in original</li>
<li>pop() from last by default —-&gt; pop(0) pop from head.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_demo</span>():</span><br><span class="line">    la = [<span class="string">&#x27;1&#x27;</span>, <span class="number">5</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">2</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;list element can be any type: &quot;</span>, la)</span><br><span class="line">    la.append(<span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;append only take one element, after list.append(6): &quot;</span>, la)</span><br><span class="line"></span><br><span class="line">    la.extend([<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;after list.extend([3,4]) = &quot;</span>, la)</span><br><span class="line">    la.insert(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;after insert 10 at index 1, the previous index 1 move back, list.insert(1,10): &quot;</span>, la)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># la.pop() remove the last</span></span><br><span class="line">    <span class="comment"># la.pop(0) remove the first one</span></span><br><span class="line">    </span><br><span class="line">    la.pop(<span class="number">2</span>) <span class="comment"># same as del la[2] here 2 is index</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;after pop() value at index 2, list=: &quot;</span>, la)</span><br><span class="line">    la.remove(<span class="number">2</span>) <span class="comment"># here 2 is value</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;after remove() element whose value is 2,\</span></span><br><span class="line"><span class="string">           list.remove(2) now list is: &quot;</span>, la)</span><br><span class="line"></span><br><span class="line">    lt = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line">    <span class="comment"># please note: to sort, make sure all elements has the same type!!!</span></span><br><span class="line">    lt.sort() <span class="comment"># take in place!!!</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[2, 1, 4] after sorted , now lt is %s&quot;</span>,lt)</span><br><span class="line">    lt.reverse()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;list.reverse() after reverse now list is: &quot;</span>, lt)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># loop list with index</span></span><br><span class="line">    <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(lt):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;with index&quot;</span>, (index, value))</span><br><span class="line">    <span class="comment"># another way to loop list with index</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lt)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;with index:&quot;</span>, i, lt[i])</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> lt:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;without index:&quot;</span>,e)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;reverse loop: &#x27;</span>)</span><br><span class="line">    <span class="comment"># loop list from end to start</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lt) - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(i, lt[i])</span><br><span class="line">    <span class="comment"># shadow copy, only the top level is copied</span></span><br><span class="line">    la = [<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">6</span>]</span><br><span class="line">    cla = la[:]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;shadow copy la: %s, cla: %s&quot;</span> %(la, cla))</span><br><span class="line">    cla[<span class="number">1</span>] += <span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cla[1] += 10, now la:&quot;</span>,la)</span><br><span class="line">    cla[<span class="number">2</span>].append(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cla[2].append(5), la changes as well la:&quot;</span>,la)</span><br><span class="line">    </span><br><span class="line">    la = [<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">6</span>]</span><br><span class="line">    dla = copy.deepcopy(la)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">60</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;deep copy la: %s, dla: %s&quot;</span> %(la, dla))</span><br><span class="line">    dla[<span class="number">1</span>] += <span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dla[1] += 10, now la:&quot;</span>,la)</span><br><span class="line">    dla[<span class="number">2</span>].append(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dla[2].append(5), la changes as well la:&quot;</span>,la)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_demo()</span><br></pre></td></tr></table></figure>

<pre><code>list element can be any type:  [&#39;1&#39;, 5, [3, 4], 2]
append only take one element, after list.append(6):  [&#39;1&#39;, 5, [3, 4], 2, 6]
after list.extend([3,4]) =  [&#39;1&#39;, 5, [3, 4], 2, 6, 3, 4]
after insert 10 at index 1, the previous index 1 move back, list.insert(1,10):  [&#39;1&#39;, 10, 5, [3, 4], 2, 6, 3, 4]
after pop() value at index 2, list=:  [&#39;1&#39;, 10, [3, 4], 2, 6, 3, 4]
after remove() element whose value is 2,           list.remove(2) now list is:  [&#39;1&#39;, 10, [3, 4], 6, 3, 4]
[2, 1, 4] after sorted , now lt is %s [1, 2, 4]
list.reverse() after reverse now list is:  [4, 2, 1]
with index (0, 4)
with index (1, 2)
with index (2, 1)
with index: 0 4
with index: 1 2
with index: 2 1
without index: 4
without index: 2
without index: 1
reverse loop: 
2 1
1 2
0 4
shadow copy la: [&#39;1&#39;, 2, [3, 4], 6], cla: [&#39;1&#39;, 2, [3, 4], 6]
cla[1] += 10, now la: [&#39;1&#39;, 2, [3, 4], 6]
cla[2].append(5), la changes as well la: [&#39;1&#39;, 2, [3, 4, 5], 6]
************************************************************
deep copy la: [&#39;1&#39;, 2, [3, 4], 6], dla: [&#39;1&#39;, 2, [3, 4], 6]
dla[1] += 10, now la: [&#39;1&#39;, 2, [3, 4], 6]
dla[2].append(5), la changes as well la: [&#39;1&#39;, 2, [3, 4], 6]
</code></pre>
<h3 id="pack-x2F-unpack-list"><a href="#pack-x2F-unpack-list" class="headerlink" title="pack&#x2F;unpack list"></a>pack&#x2F;unpack list</h3><p>unpack list to separate elements, while pack from separate elements to a list, this is mostly used for parameter passing.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">list_unpack_pack</span>():</span><br><span class="line">    <span class="comment"># unpack, must have the same elements number</span></span><br><span class="line">    a, b, c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    a, *e = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_unpack</span>(<span class="params">a, b, c</span>):</span><br><span class="line">        <span class="built_in">print</span>(a, b, c)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># *list in call to unpack list</span></span><br><span class="line">    test_unpack(*[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment"># same element numbers</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># *list in definition to pack separate ones.</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_pack</span>(<span class="params">*lt</span>):</span><br><span class="line">        <span class="built_in">print</span>(lt)</span><br><span class="line">    test_pack(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">list_unpack_pack()</span><br></pre></td></tr></table></figure>

<pre><code>1 2 3
(1, 2, 3)
</code></pre>
<h2 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h2><p>dict is not sequence type, but we can <code>convert dict to a list</code>.</p>
<hr>
<p><strong>to create a dict</strong></p>
<ul>
<li>dt &#x3D; {}</li>
<li>dt &#x3D; dict()</li>
<li>dt &#x3D; <strong>{“a”:1, “b”:2}</strong></li>
<li>lt &#x3D; [(‘a’, 1), (‘b’, 2)] dt &#x3D; dict(lt)</li>
</ul>
<p><font color='red'>key without <code>&#39;&#39; or &quot;&quot;</code>, treated as variable if not literal must define it firstly</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># both are valid, but key 2 and &#x27;2&#x27; are different keys!!!!</span></span><br><span class="line">dt = &#123;<span class="number">2</span>: <span class="number">1</span>&#125;</span><br><span class="line">dt = &#123;<span class="string">&#x27;2&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># must define var a firstly!!!, otherwise error!!!</span></span><br><span class="line">dt = &#123;a: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>Ops</strong></p>
<ul>
<li><code>dt[newkey] = 12(add a new element)</code></li>
<li><code>dt[key] (exception if no key), dt.key NOT support it s only valid for class</code></li>
<li><code>dt.get(key, default=None)</code></li>
<li>dt.pop(key, default&#x3D;None) # get its value and pop it.</li>
<li>del dt[key] # only delete it.</li>
<li>dt.keys()</li>
<li>dt.values()</li>
<li><code>dt.items() # each element is a tuple</code></li>
<li>dt.update(another_dict) # <code>extend a dict or update existing elem</code></li>
<li><code>dt.copy() # shallow copy!!!</code></li>
<li>dt.clear() # reset dict</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dict_demo</span>():</span><br><span class="line">    dt = &#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;b&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line">    <span class="comment"># different with list as list is []</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dict now is:&quot;</span>, dt)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># add an element</span></span><br><span class="line">    dt[<span class="string">&#x27;c&#x27;</span>] = <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;add dt[&#x27;c&#x27;] = 3 now dt is:&quot;</span>, dt)</span><br><span class="line">    dt[<span class="string">&#x27;c&#x27;</span>] += <span class="number">1</span></span><br><span class="line">    dt[<span class="string">&#x27;d&#x27;</span>] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    dt[<span class="string">&#x27;e&#x27;</span>] = &#123;<span class="string">&quot;f&quot;</span>: <span class="number">6</span>&#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;after added and modifed</span></span><br><span class="line"><span class="string">           dt[&#x27;c&#x27;] += 1</span></span><br><span class="line"><span class="string">           dt[&#x27;d&#x27;] = [1, 2]</span></span><br><span class="line"><span class="string">           dt[&#x27;e&#x27;] = &#123;&quot;f&quot;:6&#125;</span></span><br><span class="line"><span class="string">           now dict:&quot;&quot;&quot;</span>, dt)</span><br><span class="line">    <span class="comment"># access element, you can NOT access elem by dt.key</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;access one element dt[&#x27;e&#x27;][&#x27;f&#x27;] =&quot;</span>, dt[<span class="string">&#x27;e&#x27;</span>][<span class="string">&#x27;f&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;get a its value with dt.get():&quot;</span>, dt.get(<span class="string">&#x27;a&#x27;</span>, <span class="string">&quot;doesn&#x27;t exist&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;get f its vlaue with dt.get():&quot;</span>, dt.get(<span class="string">&quot;f&quot;</span>,  <span class="string">&quot;doesn&#x27;t exist&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;pop f from dict with dt.pop():&quot;</span>, dt.pop(<span class="string">&quot;f&quot;</span>, <span class="string">&quot;doesn&#x27;t exist&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;now dic is: &quot;</span>, dt)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># delete an element</span></span><br><span class="line">    dt.pop(<span class="string">&#x27;a&#x27;</span>) <span class="comment"># delete key-value pair, can also be done: del dt[&#x27;a&#x27;]</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;pop a from dict, dt.pop(&#x27;a&#x27;) now dict:&quot;</span>, dt)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;all keys in dict is dt.keys() =&quot;</span>, dt.keys())  <span class="comment"># a list</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;all values in dict is dt.values() =&quot;</span>, dt.values())  <span class="comment"># a list</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;all items in dict is dt.items() =&quot;</span>, dt.items()) <span class="comment"># list, each element is a tuple</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># join two dicts if has duplicated key, use the later one</span></span><br><span class="line">    dt.update(&#123;<span class="string">&quot;c&quot;</span>: <span class="number">100</span>, <span class="string">&quot;g&quot;</span>: <span class="number">100</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;update dict with &#123;&quot;c&quot;: 100, &quot;g&quot;: 100&#125;, now dt =&#x27;</span>, dt)</span><br><span class="line">    <span class="comment"># iterate all elements with dict</span></span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> dt.keys():</span><br><span class="line">        <span class="built_in">print</span>(it, <span class="string">&quot;==&quot;</span>, dt[it])</span><br><span class="line">    dt.clear() <span class="comment"># remove all elements</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dt is %s after clear()&quot;</span> % dt)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_demo()</span><br></pre></td></tr></table></figure>

<pre><code>dict now is: &#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;
add dt[&#39;c&#39;] = 3 now dt is: &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;
after added and modifed
           dt[&#39;c&#39;] += 1
           dt[&#39;d&#39;] = [1, 2]
           dt[&#39;e&#39;] = &#123;&quot;f&quot;:6&#125;
           now dict: &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 4, &#39;d&#39;: [1, 2], &#39;e&#39;: &#123;&#39;f&#39;: 6&#125;&#125;
access one element dt[&#39;e&#39;][&#39;f&#39;] = 6
get a its value with dt.get(): 1
get f its vlaue with dt.get(): doesn&#39;t exist
pop f from dict with dt.pop(): doesn&#39;t exist
now dic is:  &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 4, &#39;d&#39;: [1, 2], &#39;e&#39;: &#123;&#39;f&#39;: 6&#125;&#125;
pop a from dict, dt.pop(&#39;a&#39;) now dict: &#123;&#39;b&#39;: 2, &#39;c&#39;: 4, &#39;d&#39;: [1, 2], &#39;e&#39;: &#123;&#39;f&#39;: 6&#125;&#125;
all keys in dict is dt.keys() = dict_keys([&#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;])
all values in dict is dt.values() = dict_values([2, 4, [1, 2], &#123;&#39;f&#39;: 6&#125;])
all items in dict is dt.items() = dict_items([(&#39;b&#39;, 2), (&#39;c&#39;, 4), (&#39;d&#39;, [1, 2]), (&#39;e&#39;, &#123;&#39;f&#39;: 6&#125;)])
update dict with &#123;&quot;c&quot;: 100, &quot;g&quot;: 100&#125;, now dt = &#123;&#39;b&#39;: 2, &#39;c&#39;: 100, &#39;d&#39;: [1, 2], &#39;e&#39;: &#123;&#39;f&#39;: 6&#125;, &#39;g&#39;: 100&#125;
b == 2
c == 100
d == [1, 2]
e == &#123;&#39;f&#39;: 6&#125;
g == 100
dt is &#123;&#125; after clear()
</code></pre>
<h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><p>tuple is similar as list(element can be any type) except it can <code>NOT be modified meaning its top level element can not be changed, but the embedded object can be modified</code>, tuple has <code>no special methods for itself</code>.</p>
<hr>
<p><strong>Create a tuple</strong></p>
<ul>
<li>tp &#x3D; 1, 2</li>
<li>tp &#x3D; <strong>(1, 2)</strong></li>
<li>tp &#x3D; tuple([1, 2])</li>
</ul>
<hr>
<p><strong>Ops</strong></p>
<ul>
<li>no special method for itself, has sequence type generic methods</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tuple_demo</span>():</span><br><span class="line">    tp = (<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;d&#x27;</span>, &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>&#125;, [<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tuple is:&quot;</span>, tp)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tp[:-1]:&quot;</span>, tp[:-<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tp + (6,):&quot;</span>, tp + (<span class="number">6</span>,))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># the top level can NOT change but the embeded type can be modified if possible</span></span><br><span class="line">    tp[<span class="number">3</span>][<span class="string">&#x27;a&#x27;</span>] = <span class="number">2</span> <span class="comment"># good</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;change the value it points tuple is:&quot;</span>, tp)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># tp can NOT modified just means it can&#x27;t change top level.</span></span><br><span class="line">    <span class="comment"># but the value it points can be modified</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple_demo()</span><br></pre></td></tr></table></figure>

<pre><code>tuple is: (1, 2, &#39;d&#39;, &#123;&#39;a&#39;: 1&#125;, [3, 4])
tp[:-1]: (1, 2, &#39;d&#39;, &#123;&#39;a&#39;: 1&#125;)
tp + (6,): (1, 2, &#39;d&#39;, &#123;&#39;a&#39;: 1&#125;, [3, 4], 6)
change the value it points tuple is: (1, 2, &#39;d&#39;, &#123;&#39;a&#39;: 2&#125;, [3, 4])
</code></pre>
<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p><strong><code>Set is like dict without value</code></strong>, only keys and it’s <strong><code>not sequence type but iterable</code></strong> and has its special methods</p>
<p><strong><code>NO duplicate element in set.</code></strong></p>
<hr>
<p><strong>Create a set</strong></p>
<ul>
<li>st &#x3D; set()  empty set</li>
<li>st &#x3D; set(“abc”) &#x3D;&#x3D; st&#x3D;{‘a’, ‘b’, ‘c’}</li>
<li>st &#x3D; <strong>{‘a’, ‘b’, ‘c’}</strong></li>
<li>st &#x3D; set([‘a’, ‘b’, ‘c’]) # from list</li>
</ul>
<hr>
<p><strong>Ops</strong></p>
<ul>
<li>s1.add()</li>
<li>s1.remove()</li>
<li>s1.update()   #extend a set with another one</li>
<li>s1 | s2  并集</li>
<li>s1 &amp; s2  交集</li>
<li>s1 - s2  差集</li>
<li>s1 ^ st2 对称差</li>
<li>s1.issubset(s2) s1 is subnet of s2</li>
<li>s2.issuperset(s1) s2 is subnet of s1</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_demo</span>():</span><br><span class="line">    <span class="comment"># &#123;&#125; not []</span></span><br><span class="line">    st = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;st =&quot;</span>, st)</span><br><span class="line">    st.add(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;after st.add(3) =&quot;</span>, st)</span><br><span class="line">    st.remove(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;after st.remove(&#x27;a&#x27;) =&quot;</span>, st)</span><br><span class="line">    <span class="comment"># set is iterable, but not sequence.</span></span><br><span class="line">    <span class="keyword">for</span> elm <span class="keyword">in</span> st:</span><br><span class="line">        <span class="built_in">print</span>(elm)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set_demo()</span><br></pre></td></tr></table></figure>

<pre><code>st = &#123;&#39;a&#39;, &#39;c&#39;, &#39;b&#39;&#125;
after st.add(3) = &#123;&#39;a&#39;, 3, &#39;c&#39;, &#39;b&#39;&#125;
after st.remove(&#39;a&#39;) = &#123;3, &#39;c&#39;, &#39;b&#39;&#125;
3
c
b
</code></pre>
<h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><p>When you call range() API, it returns an object of range type, but most of time, we <code>convert range to list or tuple implicitly.</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">range_demo</span>():</span><br><span class="line">    <span class="comment"># range(stop)------&gt;[start, stop)</span></span><br><span class="line">    rg = <span class="built_in">range</span>(<span class="number">5</span>) <span class="comment">#[0, 4]</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;range is:&quot;</span>, rg)</span><br><span class="line">    lt = <span class="built_in">list</span>(rg) <span class="comment"># convert range to list explicitly</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;convert range to list:&quot;</span>, lt)</span><br><span class="line">    tp = <span class="built_in">tuple</span>(rg)</span><br><span class="line">    <span class="built_in">print</span>(tp)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>): <span class="comment">#convert range to tuple implicitly!</span></span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># range(start, stop, step)------&gt;[start, stop)</span></span><br><span class="line">    <span class="comment"># a list from large to small</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>, -<span class="number">1</span>, -<span class="number">1</span>)))</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">range_demo()</span><br></pre></td></tr></table></figure>

<pre><code>range is: range(0, 5)
convert range to list: [0, 1, 2, 3, 4]
(0, 1, 2, 3, 4)
0
1
2
3
4
[5, 4, 3, 2, 1, 0]
</code></pre>
<h2 id="convertion"><a href="#convertion" class="headerlink" title="convertion"></a>convertion</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># string &lt;--&gt; integer</span></span><br><span class="line">a = <span class="built_in">int</span>(<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line">b = <span class="built_in">str</span>(<span class="number">12</span>)</span><br><span class="line"><span class="built_in">print</span>(a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># string &lt;---&gt; list</span></span><br><span class="line">lt = <span class="built_in">list</span>(<span class="string">&#x27;abc2&#x27;</span>)</span><br><span class="line">s = <span class="string">&#x27;&#x27;</span>.join(lt)</span><br><span class="line"><span class="built_in">print</span>(lt, s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># string &lt;--&gt;set</span></span><br><span class="line">st = <span class="built_in">set</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">s = <span class="string">&#x27;&#x27;</span>.join(st)</span><br><span class="line"><span class="built_in">print</span>(st, s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># list &lt;---&gt;dict</span></span><br><span class="line">lt = <span class="built_in">list</span>(&#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>, <span class="string">&quot;b&quot;</span>:<span class="number">2</span>&#125;.items())</span><br><span class="line"><span class="built_in">print</span>(lt)</span><br><span class="line">dt = <span class="built_in">dict</span>(lt)</span><br><span class="line"><span class="built_in">print</span>(dt)</span><br></pre></td></tr></table></figure>

<h1 id="function"><a href="#function" class="headerlink" title="function"></a>function</h1><p>variable scope is like C, variable is local by default, if want to <code>change value of global variable, must use keyword global x in function, you can access global variable in function without global keyword, but only for accessing, not modifying</code>.</p>
<p>variable defined in a function is also visible to the function embedded in it.</p>
<p><strong>argument can have default value when define it</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">x, y=<span class="number">0</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>when you call function with named parameter, the order can be any</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">show(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">show(y=<span class="number">2</span>, x=<span class="number">1</span>) <span class="comment">### order can be different with function definition!!!</span></span><br><span class="line">show(<span class="number">1</span>, y=<span class="number">23</span>)</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>For dynamic args(the number of argument is not defined)</strong></p>
<ul>
<li>use <code>*arg</code> for list like parameters in function definition</li>
<li><code>**arg</code> for dict like parameters in function definition</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;arg: &#x27;</span>, i)</span><br><span class="line">test([<span class="number">1</span>, <span class="number">2</span>])  <span class="comment"># passed args [[1, 2]]</span></span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>)    <span class="comment"># passed args [1, 2]</span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>Note: &gt;&#x3D;python3.5, python supports define function with type</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function_demo_python3_5</span>(<span class="params">name: <span class="built_in">str</span>=<span class="string">&#x27;jason&#x27;</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># no global keyword when defines it.</span></span><br><span class="line">g_y = <span class="number">100</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function_demo</span>():</span><br><span class="line">    x = <span class="number">12</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_y</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;g_y: &#x27;</span>, g_y)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_v</span>():</span><br><span class="line">        x = <span class="number">10</span>  <span class="comment"># modified here, define a local x, not impact x outside</span></span><br><span class="line">        <span class="keyword">global</span> g_y  <span class="comment"># no need this line if only access y, not modify it!!!!</span></span><br><span class="line">        g_y = <span class="number">200</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;x in show_v is: &quot;</span>, x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">show_sub_v</span>():</span><br><span class="line">            <span class="comment"># x defined in show_v is visible in show_sub_v</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;x in show_sub_v is: &quot;</span>, x)</span><br><span class="line">        show_sub_v()</span><br><span class="line">    show_v()</span><br><span class="line">    show_y()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;out of show_v x is: &quot;</span>, x)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;out of show_v y is:&quot;</span>, g_y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># dynamic arguments</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_arg</span>(<span class="params">x, *argc, **argv</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;x=%d, argc=%s argv=%s&quot;</span> % (x, argc, argv))</span><br><span class="line">    show_arg(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, name=<span class="string">&#x27;jason&#x27;</span>, <span class="built_in">id</span>=<span class="number">12</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function_demo()</span><br></pre></td></tr></table></figure>

<pre><code>x in show_v is:  10
x in show_sub_v is:  10
g_y:  200
out of show_v x is:  12
out of show_v y is: 200
x=1, argc=(2, 3) argv=&#123;&#39;name&#39;: &#39;jason&#39;, &#39;id&#39;: 12&#125;
</code></pre>
<h1 id="flow-control"><a href="#flow-control" class="headerlink" title="flow control"></a>flow control</h1><p>Flow control controls the logic of statement, like C, python supports many flow control directives like <code>while/else, for/else, if/elif/else, pass, break/continue, try/except/finally, raise</code></p>
<p><strong><font color='red'>NO <code>goto, switch/case</code> in python.</font></strong></p>
<h2 id="if-x2F-elif-x2F-else"><a href="#if-x2F-elif-x2F-else" class="headerlink" title="if&#x2F;elif&#x2F;else"></a>if&#x2F;elif&#x2F;else</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">if_demo</span>():</span><br><span class="line">    con = <span class="number">1</span></span><br><span class="line">    short_out = <span class="string">&#x27;con is 1&#x27;</span> <span class="keyword">if</span> con == <span class="number">1</span> <span class="keyword">else</span> <span class="string">&#x27;con is not 1&#x27;</span> <span class="comment"># shortcut for if/else at same line no &#x27;:&#x27; needed</span></span><br><span class="line">    <span class="built_in">print</span>(short_out)</span><br><span class="line">    </span><br><span class="line">    a = <span class="number">12</span> <span class="keyword">if</span> <span class="literal">False</span> <span class="keyword">else</span> <span class="number">23</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;like: a = 12 if False else 23&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a =&quot;</span>, a)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;say hi&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span>  <span class="comment"># nothing</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;say hi&quot;</span>)  <span class="comment"># simple</span></span><br><span class="line">        </span><br><span class="line">if_demo()</span><br></pre></td></tr></table></figure>

<pre><code>con is 1
like: a = 12 if False else 23
a = 23
say hi
say hi
</code></pre>
<h2 id="while-x2F-else"><a href="#while-x2F-else" class="headerlink" title="while&#x2F;else"></a>while&#x2F;else</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">while_demo</span>():</span><br><span class="line">    i = <span class="number">10</span></span><br><span class="line">    <span class="keyword">while</span> i:</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;loop while is out not by break statement&quot;</span>)</span><br><span class="line"></span><br><span class="line">while_demo()</span><br></pre></td></tr></table></figure>

<pre><code>loop while is out not by break statement
</code></pre>
<h2 id="for-x2F-else"><a href="#for-x2F-else" class="headerlink" title="for&#x2F;else"></a>for&#x2F;else</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">for_demo</span>():</span><br><span class="line">    lt = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> lt[<span class="number">0</span>] == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;equal&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;break from loop&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;loop for is out not by break statement&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    lt1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">    lines = <span class="string">&#x27;-&#x27;</span>.join([<span class="built_in">str</span>(m) <span class="keyword">for</span> m <span class="keyword">in</span> lt1])</span><br><span class="line">    <span class="built_in">print</span>(lines)</span><br><span class="line">    </span><br><span class="line">for_demo()</span><br></pre></td></tr></table></figure>

<pre><code>equal
break from loop
1-2-3-4
</code></pre>
<h2 id="try-x2F-exception"><a href="#try-x2F-exception" class="headerlink" title="try&#x2F;exception"></a>try&#x2F;exception</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    fd = <span class="built_in">open</span>(<span class="string">&#x27;/sdaf/b.c&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br></pre></td></tr></table></figure>

<h1 id="system-env"><a href="#system-env" class="headerlink" title="system env"></a>system env</h1><p>Sometimes, you may want to get environment from system or set an environ for a process, use <code>from os import environ</code></p>
<p><strong>note: environ[‘PATH’] is different with os.path which is only used for search .py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">env_demo</span>():</span><br><span class="line">    <span class="keyword">from</span> os <span class="keyword">import</span> environ</span><br><span class="line">    environ[<span class="string">&#x27;HOST&#x27;</span>] = <span class="string">&quot;10.64.32.1&quot;</span></span><br><span class="line">    <span class="comment"># set env</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;get HOST env: &#x27;</span>, environ.get(<span class="string">&#x27;HOST&#x27;</span>, <span class="string">&#x27;HOST default value&#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> key, v <span class="keyword">in</span> environ.items():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;env-&gt; %s : %s&quot;</span> % (key, v))</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># environ[&#x27;PATH&#x27;] si different with os.path which is only used for seerch .py!!!</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">env_demo()</span><br></pre></td></tr></table></figure>

<pre><code>get HOST env:  10.64.32.1
env-&gt; PATH : /home/data/Anaconda3/envs/py3.9/bin:/opt/llvm/bin:/home/data/Anaconda3/envs/py3.9/bin:/home/data/Anaconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/home/go:/home/go/bin:/root/.yarn_pkg/bin:/usr/lib64:/usr/local/go/bin:/home/data/Anaconda3/envs/py3.9/libexec/git-core:/root/bin:/root/.yarn_pkg/bin:/home/go/bin:/home/go:/usr/local/go/bin
env-&gt; PWD : /
env-&gt; LANG : en_US.UTF-8
env-&gt; SHLVL : 1
env-&gt; _ : /usr/bin/env
env-&gt; GO111MODULE : on
env-&gt; GOMODCACHE : /home/go/pkg/mod
env-&gt; GOCACHE : /root/.cache/go-build
env-&gt; GOPATH : /home/go
env-&gt; PYDEVD_USE_FRAME_EVAL : NO
env-&gt; JPY_PARENT_PID : 1372
env-&gt; TERM : xterm-color
env-&gt; CLICOLOR : 1
env-&gt; PAGER : cat
env-&gt; GIT_PAGER : cat
env-&gt; MPLBACKEND : module://matplotlib_inline.backend_inline
env-&gt; HOST : 10.64.32.1
</code></pre>
<h1 id="small-tips"><a href="#small-tips" class="headerlink" title="small tips"></a>small tips</h1><h2 id="Id-of-object"><a href="#Id-of-object" class="headerlink" title="Id of object"></a>Id of object</h2><p>In python, each object has a unique identifier(memory address), to get it by <code>id(var)</code>, <code>a is b</code> checks the id of them, <code>for integer, string, if content is same, id is same as well, but this is not true for list, tuple, dict</code>. for example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">3</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"><span class="built_in">id</span>(a) == <span class="built_in">id</span>(b) <span class="comment"># True</span></span><br><span class="line">a <span class="keyword">is</span> b <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>]</span><br><span class="line">b = [<span class="number">1</span>]</span><br><span class="line">a == b <span class="comment"># True</span></span><br><span class="line">a <span class="keyword">is</span> b <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<p>while <code>isinstance(var, str)</code> to check if a var is an instance of a class</p>
<h2 id="None-“”"><a href="#None-“”" class="headerlink" title="None () {} [] “”"></a>None () {} [] “”</h2><p><strong>None () {} [] “” are false when used a condition.</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;None, (), &#123;&#125;, [], &quot;&quot;, &#x27;&#x27; all are false but they are different types&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="literal">None</span>), <span class="built_in">bool</span>(()), <span class="built_in">bool</span>([]), <span class="built_in">bool</span>(&#123;&#125;), <span class="built_in">bool</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line">msg = <span class="string">&#x27;None == []&#x27;</span> <span class="keyword">if</span> <span class="literal">None</span> == [] <span class="keyword">else</span> <span class="string">&quot;None not equal []&quot;</span></span><br><span class="line"><span class="built_in">print</span>(msg)</span><br></pre></td></tr></table></figure>

<pre><code>None, (), &#123;&#125;, [], &quot;&quot;, &#39;&#39; all are false but they are different types
False False False False False
None not equal []
</code></pre>
<h2 id="exec-eval"><a href="#exec-eval" class="headerlink" title="exec eval"></a>exec eval</h2><ul>
<li>exec is used to <code>execute python statements which are stored in a string or file</code></li>
<li>eval is used to <code>evaluate valid python expression which are stored in a string</code>.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># execute python code from string</span></span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&#x27;print(&quot;hello&quot;)&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># eval python expression from string</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&#x27;2*3&#x27;</span>))</span><br></pre></td></tr></table></figure>

<pre><code>hello
6
</code></pre>
<h2 id="try-x2F-except"><a href="#try-x2F-except" class="headerlink" title="try&#x2F;except"></a>try&#x2F;except</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="number">1.0</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Error: Division by zero&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> TypeError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Error: Unsupported operation&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> error:  <span class="comment"># catch all other exception</span></span><br><span class="line">    <span class="built_in">print</span>(error) <span class="comment"># general error, unknown</span></span><br></pre></td></tr></table></figure>

<pre><code>Error: Division by zero
</code></pre>
<h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><ul>
<li><a href="https://www.runoob.com/python3/python3-tutorial.html">python basics in Chinese</a></li>
<li><a href="https://docs.python.org/3/tutorial/">python tutorial</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>function</tag>
        <tag>class</tag>
      </tags>
  </entry>
  <entry>
    <title>qemu-kvm-command-options</title>
    <url>/2022/04/14/qemu-kvm-command-options/</url>
    <content><![CDATA[<h1 id="Standard-Options"><a href="#Standard-Options" class="headerlink" title="Standard Options"></a>Standard Options</h1><p><strong>-boot [order&#x3D;drives][,once&#x3D;drives][,menu&#x3D;on|off][,splash&#x3D;sp_name][,splash-time&#x3D;sp_time][,reboot-timeout&#x3D;rb_timeout][,strict&#x3D;on|off]</strong></p>
<blockquote>
<p>Specify boot order drives as a string of drive letters. Valid drive letters depend on the target architecture. The x86 PC uses: a, b (floppy 1 and 2), c (first hard disk), d (first CD-ROM), n-p (Etherboot from network adapter 1-4), hard disk boot is the default. To apply a particular boot order only on the first startup, specify it via once. <code>Note that the order or once parameter should not be used together with the bootindex property of devices</code>, since the firmware implementations normally do not support both at the same time.</p>
</blockquote>
<span id="more"></span>

<p><strong>-machine [type&#x3D;]name[,prop&#x3D;value[,…]]</strong></p>
<blockquote>
<p>Select the emulated machine(chipset) by name. Use <code>-machine help</code> to list available machines.For architectures which aim to support live migration compatibility across releases, each release will introduce a new versioned machine type. For example, the 2.8.0 release introduced machine types “pc-i440fx-2.8” and “pc-q35-2.8” for the x86_64&#x2F;i686 architectures. <code>-machine pc-i440fx-rhel7.6.0,accel=kvm,usb=off,dump-guest-core=off</code></p>
</blockquote>
<p><strong>-cpu model</strong></p>
<blockquote>
<p>Select CPU model (-cpu help for list and additional feature selection), <code>-cpu help</code> to check availabe cpu and flags, enable or disable or use default.<br><code>-cpu IvyBridge,pcid=on,movbe=on,hypervisor=on,arat=on,tsc_adjust=on,avx2=on,rdseed=on,clflushopt=on,abm=on,3dnowprefetch=on,f16c=off,smep=off,erms=off,xsaveopt=off</code> <font color='red'> without <code>-cpu</code> default is used that’s <code>model name : QEMU Virtual CPU version 2.5+</code></font></p>
</blockquote>
<p><strong>-daemonize</strong></p>
<blockquote>
<p>Daemonize the QEMU process after initialization. <code>QEMU will not detach from standard IO until it is ready to receive connections on any of its devices</code>. This option is a useful way for external programs to launch QEMU without having to cope with initialization race conditions.</p>
</blockquote>
<p><strong>-no-shutdown</strong></p>
<blockquote>
<p><code>Don’t exit QEMU(qemu process is still there) on guest shutdown, but instead only stop the emulation.</code> This allows for instance switching to monitor to commit changes to the disk image. <strong>but this is not working for libvirt as it will kill qemu process when shutdown from guest finished.</strong></p>
</blockquote>
<p><strong>-nodefaults</strong>  </p>
<blockquote>
<p>Don’t create default devices. <strong>Normally, QEMU sets the default devices like serial port, parallel port, virtual console, monitor device, VGA adapter, floppy and CD-ROM drive and others</strong>. The -nodefaults option will disable all those default devices <font color='red'>if <code>-nodefaults</code> is used, you must set vga adapter explicitly(<code>-vga std</code>), otherwise VNC is not working!!!</font></p>
</blockquote>
<p><strong>-S</strong></p>
<blockquote>
<p>Do not start CPU at startup (you must type ‘c’ in the monitor), this is mostly used for migration, at dst host, start qemu with such option, then we can copy memory from source to dst</p>
</blockquote>
<p><strong>-object typename[,prop1&#x3D;value1,…]</strong></p>
<blockquote>
<p>Create a new object of type typename setting properties in the order they are specified. Note that the ‘id’ property must be set. These objects are placed in the ‘&#x2F;objects’ path</p>
</blockquote>
<p><strong>-no-user-config</strong>  </p>
<blockquote>
<p>The -no-user-config option makes QEMU not load any of the user-provided config files on sysconfdir(&#x2F;etc&#x2F;qemu&#x2F;qemu.conf)</p>
</blockquote>
<p><strong>-global driver.prop&#x3D;value</strong></p>
<blockquote>
<p>In particular, you can use this to <strong><code>set driver properties for devices which are created automatically by the machine model</code></strong>, example <code>-global kvm-pit.lost_tick_policy=delay</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get all properties of a given driver </span></span><br><span class="line">/usr/libexec/qemu-kvm -device kvm-pit,<span class="built_in">help</span></span><br><span class="line">kvm-pit.iobase=uint32</span><br><span class="line">kvm-pit.lost_tick_policy=LostTickPolicy</span><br></pre></td></tr></table></figure>

<p><strong>-rtc [base&#x3D;utc|localtime|datetime][,clock&#x3D;host|rt|vm][,driftfix&#x3D;none|slew]</strong></p>
<blockquote>
<p>Specify base as utc or localtime to let the RTC start at the current UTC or local time, respectively. localtime is required for correct date in MS-DOS or Windows.</p>
</blockquote>
<blockquote>
<p>By default <code>the RTC is driven by the host system time</code>. This allows using of the RTC as accurate reference clock inside the guest, specifically if the host time is smoothly following an accurate external reference clock, e.g. via NTP. If you want to <code>isolate the guest time from the host, you can set clock to rt instead</code>, which provides a host monotonic clock if host support it. <a href="https://en.wikipedia.org/wiki/List_of_time_zone_abbreviations">timezones abbre</a> and <a href="https://wiki.osdev.org/Timer_Interrupt_Sources">rtc, pit, hpet</a></p>
</blockquote>
<blockquote>
<p>check guest clock source by <code>cat  /sys/devices/system/clocksource/clocksource0/current_clock</code></p>
</blockquote>
<p><strong>-msg [timestamp[&#x3D;on|off]][,guest-name[&#x3D;on|off]]</strong></p>
<blockquote>
<p>Control error message format of qemu process</p>
</blockquote>
<h2 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h2><p>For each memory(main ram, device ram), Qemu will create <code>memory backend object</code> automatically, QEMU has alternative memory backends.</p>
<ul>
<li>memory-backend-ram – The default backend</li>
<li>memory-backend-file – Memory backed by a file, typcially used for non volatile memories (to save the contents when powering off the machine)</li>
<li>memory-backend-memfd – Anonymous memory file backend</li>
</ul>
<p><strong>-m [size&#x3D;]megs[,slots&#x3D;n,maxmem&#x3D;size]</strong></p>
<blockquote>
<p>Sets guest startup RAM(main ram) size to megs megabytes. Optionally, a suffix of “M” or “G” can be used to signify a value in megabytes or gigabytes respectively. Optional <code>pair slots, maxmem could be used to set amount of hotpluggable memory slots and maximum amount of memory</code>. Note that <strong>maxmem must be aligned to the page size.</strong> </p>
</blockquote>
<blockquote>
<p>For example, the following command-line sets the guest startup RAM size to 1GB, creates 3 slots to hotplug additional memory and sets the maximum memory the guest can reach to 4GB:<code>qemu-system-x86_64 -m 1G,slots=3,maxmem=4G</code></p>
</blockquote>
<blockquote>
<p>If slots and maxmem are not specified, memory hotplug won’t be enabled and the guest startup RAM will never increase.</p>
</blockquote>
<blockquote>
<p><font color='red'>By default, Qemu will create a memory backend(memory-backend-ram) object(named pc.ram) for the main ram automatically if user does not set memory backend object(pc.ram) explicitly.</font></p>
</blockquote>
<p><strong>-object memory-backend-ram,id&#x3D;id,merge&#x3D;on|off,dump&#x3D;on|off,share&#x3D;on|off,prealloc&#x3D;on|off,size&#x3D;size,host-nodes&#x3D;host-nodes,policy&#x3D;default|preferred|bind|interleave</strong></p>
<blockquote>
<p>Creates a memory backend object, which can be used to back the guest RAM. <strong>Memory backend objects offer more control than the -m option that is traditionally used to define guest RAM, with host-nodes can specify where guest ram comes from(which numa node)</strong>.<br>bind: Strict policy means that the allocation will fail if the memory cannot be allocated on the target node.<br>interleave: Memory pages are allocated across nodes specified by a nodeset, but are allocated in a round-robin fashion.<br>preferred: Memory is allocated from a single preferred memory node. If sufficient memory is not available, memory can be allocated from other nodes.</p>
</blockquote>
<p><strong>-object memory-backend-file,id&#x3D;id,size&#x3D;size,mem-path&#x3D;dir,share&#x3D;on|off,discard-data&#x3D;on|off,merge&#x3D;on|off,dump&#x3D;on|off,prealloc&#x3D;on|off,host-nodes&#x3D;host-nodes,policy&#x3D;default|preferred|bind|interleave,align&#x3D;align,readonly&#x3D;on|off</strong></p>
<blockquote>
<p>Creates a memory file backend object(<code>mem-path is required</code>), which can be used to back the guest RAM with huge pages.</p>
</blockquote>
<blockquote>
<p>The id parameter is a unique ID that will be used to reference this memory region in other parameters, e.g. -numa, -device nvdimm, etc.</p>
</blockquote>
<blockquote>
<p>The size option provides the size of the memory region, and accepts common suffixes, e.g. 500M.</p>
</blockquote>
<blockquote>
<p>The <code>mem-path provides the path to either a shared memory or huge page filesystem mount.</code></p>
</blockquote>
<h3 id="No-Explicit-memory-backend"><a href="#No-Explicit-memory-backend" class="headerlink" title="No Explicit memory backend"></a>No Explicit memory backend</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># by default, memory is not prealloc, memory is grabed from host only when it&#x27;s accessed.</span></span><br><span class="line">-m 512M</span><br></pre></td></tr></table></figure>

<h3 id="Explicit-memory-backend-ram-more-control"><a href="#Explicit-memory-backend-ram-more-control" class="headerlink" title="Explicit memory backend ram more control"></a>Explicit memory backend ram more control</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># new qemu version, memory-backend as the key</span></span><br><span class="line"><span class="comment"># guest ram bind to host numa node0, if no sufficient memory, it fails!!!</span></span><br><span class="line">-object memory-backend-ram,<span class="built_in">id</span>=pc.ram,size=512M,dump=on,share=on,prealloc=on,host-nodes=0,policy=<span class="built_in">bind</span> \</span><br><span class="line">-machine memory-backend=pc.ram \</span><br><span class="line">-m 512M</span><br><span class="line"></span><br><span class="line"><span class="comment"># old qemu version, memdev as the key</span></span><br><span class="line">-object memory-backend-ram,<span class="built_in">id</span>=pc.ram,size=512M,dump=on,share=on,prealloc=on \</span><br><span class="line">-numa node,nodeid=0,memdev=pc.ram \ </span><br><span class="line">-m 512M</span><br></pre></td></tr></table></figure>

<h3 id="Explicit-memory-backend-file-to-use-hugepage"><a href="#Explicit-memory-backend-file-to-use-hugepage" class="headerlink" title="Explicit memory backend file to use hugepage"></a>Explicit memory backend file to use hugepage</h3><p><font color='red'><strong>Qemu will create this file automatically, but not delete it when qemu exits</strong></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># new qemu version</span></span><br><span class="line">-object memory-backend-file,<span class="built_in">id</span>=pc.ram,size=512M,mem-path=/dev/hugepages/libvirt/qemu/centos,prealloc=on,share=on,host-nodes=0,policy=<span class="built_in">bind</span> \</span><br><span class="line">-machine memory-backend=pc.ram \</span><br><span class="line">-m 512M</span><br><span class="line"></span><br><span class="line"><span class="comment"># old qemu version</span></span><br><span class="line">-object memory-backend-file,<span class="built_in">id</span>=pc.ram,size=512M,mem-path=/dev/hugepages/libvirt/qemu/centos,prealloc=on,share=on,host-nodes=0,policy=<span class="built_in">bind</span> \</span><br><span class="line">-numa node,nodeid=0,memdev=pc.ram \ </span><br><span class="line">-m 512M</span><br></pre></td></tr></table></figure>

<h2 id="CPUS-and-Numa"><a href="#CPUS-and-Numa" class="headerlink" title="CPUS and Numa"></a>CPUS and Numa</h2><p><strong>-smp [[cpus&#x3D;]n][,maxcpus&#x3D;maxcpus][,sockets&#x3D;sockets][,dies&#x3D;dies][,clusters&#x3D;clusters][,cores&#x3D;cores][,threads&#x3D;threads]</strong></p>
<blockquote>
<p>Simulate a SMP system with ‘n’ CPUs initially present on the machine type board. On boards supporting CPU hotplug, the optional ‘maxcpus’ parameter can be set to enable further CPUs to be added at runtime. When both parameters are omitted, the maximum number of CPUs will be calculated from the provided topology members and the initial CPU count will match the maximum number. When only one of them is given then the omitted one will be set to its counterpart’s value.</p>
</blockquote>
<blockquote>
<p><code>-smp 8,sockets=2,cores=2,threads=2,maxcpus=8</code></p>
</blockquote>
<blockquote>
<p><strong>Either the initial CPU count, or at least one of the topology parameters must be specified</strong>. Values for any omitted parameters will be computed from those which are given.</p>
</blockquote>
<p><strong>-numa node[,mem&#x3D;size][,cpus&#x3D;firstcpu[-lastcpu]][,nodeid&#x3D;node][,initiator&#x3D;initiator]</strong><br><strong>-numa node[,memdev&#x3D;id][,cpus&#x3D;firstcpu[-lastcpu]][,nodeid&#x3D;node][,initiator&#x3D;initiator]</strong><br><strong>-numa dist,src&#x3D;source,dst&#x3D;destination,val&#x3D;distance</strong><br><strong>-numa cpu,node-id&#x3D;node[,socket-id&#x3D;x][,core-id&#x3D;y][,thread-id&#x3D;z]</strong><br><strong>-numa hmat-lb,initiator&#x3D;node,target&#x3D;node,hierarchy&#x3D;hierarchy,data-type&#x3D;tpye[,latency&#x3D;lat][,bandwidth&#x3D;bw]</strong><br><strong>-numa hmat-cache,node-id&#x3D;node,size&#x3D;size,level&#x3D;level[,associativity&#x3D;str][,policy&#x3D;str][,line&#x3D;size]</strong></p>
<blockquote>
<p>Define a NUMA node and assign RAM and VCPUs to it. Set the NUMA distance from a source node to a destination node. Set the ACPI Heterogeneous Memory Attributes for the given nodes.</p>
</blockquote>
<p><strong>Legacy CPU assigment</strong><br><strong>Legacy VCPU assignment uses ‘cpus’</strong> option where firstcpu and lastcpu are CPU indexes. Each ‘cpus’ option represent a contiguous range of CPU indexes (or a single VCPU if lastcpu is omitted). A non-contiguous set of VCPUs can be represented by providing multiple ‘cpus’ options. If ‘cpus’ is omitted on all nodes, VCPUs are automatically split between them.</p>
<p><strong>New CPU assignment Way</strong><br>‘cpu’ option is a new alternative to ‘cpus’ option which uses ‘socket-id|core-id|thread-id’ properties to assign CPU objects to a node using topology layout properties of CPU.</p>
<p><strong>memory assignment way(legacy and new)</strong><br><strong>Legacy ‘mem’</strong> assigns a given RAM amount to a node (not supported for 5.1 and newer machine types). ‘memdev’ assigns RAM from a given memory backend device to a node. <strong>If ‘mem’ and ‘memdev’ are omitted in all nodes, RAM is split equally between them.</strong></p>
<p><strong>New Way for cpu(cpu) and memory(mdev)</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-M pc \</span><br><span class="line">-m 2G,slots=2,maxmem=4G \</span><br><span class="line">-object memory-backend-ram,size=1G,<span class="built_in">id</span>=m0 \</span><br><span class="line">-object memory-backend-ram,size=1G,<span class="built_in">id</span>=m1 \</span><br><span class="line">-numa node,nodeid=0,memdev=m0 \</span><br><span class="line">-numa node,nodeid=1,memdev=m1 \</span><br><span class="line">-smp 2,sockets=2,maxcpus=2  \</span><br><span class="line">-numa cpu,node-id=0,socket-id=0 \</span><br><span class="line">-numa cpu,node-id=1,socket-id=1</span><br></pre></td></tr></table></figure>

<p><strong>Legency CPU(cpus) and New memory way(mdev)</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-M pc \</span><br><span class="line">-m 2G,slots=2,maxmem=4G \</span><br><span class="line">-object memory-backend-ram,size=1G,<span class="built_in">id</span>=m0 \</span><br><span class="line">-object memory-backend-ram,size=1G,<span class="built_in">id</span>=m1 \</span><br><span class="line">-smp 2,sockets=2,maxcpus=2  \</span><br><span class="line">-numa node,nodeid=0,memdev=m0,cpus=0 \</span><br><span class="line">-numa node,nodeid=1,memdev=m1,cpus=1</span><br></pre></td></tr></table></figure>

<p><strong>Legency CPU(cpus) and legency memory way(mem)</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-M pc \</span><br><span class="line">-m 2G,slots=2,maxmem=4G \</span><br><span class="line">-smp 2,sockets=2,maxcpus=2  \</span><br><span class="line">-numa node,nodeid=0,mem=1G,cpus=0 \</span><br><span class="line">-numa node,nodeid=1,mem=1G,cpus=1</span><br></pre></td></tr></table></figure>

<p><font color='red'><strong>Note that the -numa option doesn’t allocate any of the specified resources, it just assigns existing resources to NUMA nodes. This means that one still has to use the -m, -smp options to allocate RAM and VCPUs respectively</strong>.</font></p>
<p><strong>-sandbox arg[,obsolete&#x3D;string][,elevateprivileges&#x3D;string][,spawn&#x3D;string][,resourcecontrol&#x3D;string]</strong></p>
<blockquote>
<p>Enable Seccomp mode 2 system call filter. ‘on’ will enable syscall filtering and ‘off’ will disable it. The default is ‘off’.  <strong>It disables system calls that are not needed by QEMU</strong>, thereby reducing the host kernel attack surface.</p>
</blockquote>
<blockquote>
<p>obsolete&#x3D;string  </p>
<blockquote>
<p>   Enable Obsolete system calls  </p>
</blockquote>
</blockquote>
<blockquote>
<p>elevateprivileges&#x3D;string  </p>
<blockquote>
<p>   Disable set*uid|gid system calls  </p>
</blockquote>
</blockquote>
<blockquote>
<p>spawn&#x3D;string  </p>
<blockquote>
<p>   Disable *fork and execve  </p>
</blockquote>
</blockquote>
<blockquote>
<p>resourcecontrol&#x3D;string  </p>
<blockquote>
<p>   Disable process affinity and schedular priority   </p>
</blockquote>
</blockquote>
<p><strong>NOTE</strong></p>
<ul>
<li>qemu does not proivde parameter to bind host’s physical cpu to vcpu, vcpu affinity is set outside of qemu either by <code>cgroup as we create cpu cgroup for each vm</code> or <code>cpuset_setaffinity() if cgroup is not available</code></li>
</ul>
<h2 id="migration"><a href="#migration" class="headerlink" title="migration"></a>migration</h2><p><strong>-incoming tcp:[host]:port[,to&#x3D;maxport][,ipv4&#x3D;on|off][,ipv6&#x3D;on|off]</strong><br><strong>-incoming rdma:host:port[,ipv4&#x3D;on|off][,ipv6&#x3D;on|off]</strong>  </p>
<blockquote>
<p>Prepare for incoming migration, listen on a given tcp port.</p>
</blockquote>
<p><strong>-incoming unix:socketpath</strong>  </p>
<blockquote>
<p>Prepare for incoming migration, listen on a given unix socket.</p>
</blockquote>
<p><strong>-incoming fd:fd</strong>  </p>
<blockquote>
<p>Accept incoming migration from a given filedescriptor.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -S -incoming tcp:0.0.0.0:10000 is used for migration at dst host</span></span><br><span class="line"><span class="comment"># start qemu at dst host, now cpu is stopped, listn on 10000 for migration</span></span><br><span class="line">$/usr/libexec/qemu-kvm <span class="variable">$args</span> -S -incoming tcp:0.0.0.0:10000</span><br><span class="line"></span><br><span class="line">qmp_shell/&gt; query-status</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;running&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;singlestep&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&quot;inmigrate&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># then at src host, you can start migration process</span></span><br><span class="line"><span class="comment"># after migration completed, start vm at dst host</span></span><br></pre></td></tr></table></figure>

<h1 id="Device-Emulation"><a href="#Device-Emulation" class="headerlink" title="Device Emulation"></a>Device Emulation</h1><h2 id="usb-options"><a href="#usb-options" class="headerlink" title="usb options"></a>usb options</h2><p><strong>-usb</strong></p>
<blockquote>
<p>Enable USB emulation on machine types with an on-board USB host controller (if not enabled by default). <strong>Note that on-board USB host controllers may not support USB 3.0. In this case -device qemu-xhci can be used instead on machines with PCI.</strong></p>
</blockquote>
<p><strong>-usbdevice devname</strong></p>
<blockquote>
<p>Add the USB device devname, and enable an on-board USB controller if possible and necessary (just like it can be done via -machine usb&#x3D;on). <strong>Note that this option is mainly intended for the user’s convenience only</strong>. More fine-grained control can be achieved by selecting a USB host controller (if necessary) and the desired USB device via the -device option instead. For example, instead of using -usbdevice mouse it is possible to use -device qemu-xhci -device usb-mouse to connect the USB mouse to a USB 3.0 controller instead (at least on machines that support PCI and do not have an USB controller enabled by default yet).</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># easy way</span></span><br><span class="line"><span class="comment"># use on-board usb controller</span></span><br><span class="line">-usb \</span><br><span class="line">-usbdevice tablet \</span><br><span class="line"></span><br><span class="line"><span class="comment"># more fine-grained control way(use usb3.0)</span></span><br><span class="line">-device qemu-xhci \</span><br><span class="line">-device usb-tablet \</span><br></pre></td></tr></table></figure>

<p><strong>-device usb-tablet</strong>  </p>
<blockquote>
<p>Pointer device that uses absolute coordinates (like a touchscreen). This means QEMU is able to report the mouse position without having to grab the mouse. Also overrides the PS&#x2F;2 mouse emulation when activated. with this enabled, <code>mouse cursor follows mous position right way.</code></p>
</blockquote>
<h2 id="block-options"><a href="#block-options" class="headerlink" title="block options"></a>block options</h2><p><strong>-blockdev option[,option[,option[,…]]]</strong><br><font color='red'>Define a new block driver node(backend) only</font>. <strong>Some of the options apply to all block drivers, other options are only accepted for a specific block driver</strong>.</p>
<p>Options that expect a reference to another node (e.g. file) can be given in two ways. Either you specify the node name of an already existing node (file&#x3D;node-name), or you define a new node inline, adding options for the referenced node after a dot (file.filename&#x3D;path,file.aio&#x3D;native).</p>
<p><strong>A block driver node created with -blockdev can be used for a guest device by specifying its node name for the drive property in a -device argument that defines a block device.</strong></p>
<p><strong>Valid options for any block driver node:</strong></p>
<ul>
<li>driver<blockquote>
<blockquote>
<p>Specifies the block driver to use for the given node.</p>
</blockquote>
</blockquote>
</li>
<li>node-name<blockquote>
<blockquote>
<p>This defines the name of the block driver node by which it will be referenced later. The name must be unique, i.e. it must not match the name of a different block driver node, or (if you use -drive as well) the ID of a drive.</p>
</blockquote>
</blockquote>
</li>
</ul>
<p><strong>Driver-specific options for file</strong></p>
<ul>
<li>filename<blockquote>
<blockquote>
<p>The path to the image file in the local filesystem <code>-blockdev driver=file,node-name=disk,filename=disk.img</code></p>
</blockquote>
</blockquote>
</li>
</ul>
<p><strong>Driver-specific options for raw</strong></p>
<ul>
<li>file<blockquote>
<blockquote>
<p>Reference to or definition of the data source block driver node (e.g. a file driver node), <code>-blockdev driver=raw,node-name=disk,file=disk_file</code></p>
</blockquote>
</blockquote>
</li>
</ul>
<p><strong>Driver-specific options for qcow2</strong></p>
<ul>
<li>file<blockquote>
<blockquote>
<p>Reference to or definition of the data source block driver node (e.g. a file driver node) <code>-blockdev driver=qcow2,node-name=hda,file=my_file,overlap-check=none,cache-size=16777216</code></p>
</blockquote>
</blockquote>
</li>
</ul>
<p><strong>-drive option[,option[,option[,…]]]</strong></p>
<blockquote>
<p><font color='red'>Define a new drive. This includes creating a block driver node (the backend) as well as a guest device, and is mostly a shortcut for defining the corresponding -blockdev and -device options. </font></p>
</blockquote>
<blockquote>
<p>-drive accepts all options that are accepted by -blockdev. In addition, it knows the following options:</p>
</blockquote>
<ul>
<li>file&#x3D;file<blockquote>
<blockquote>
<p>This option defines which disk image to use with this drive</p>
</blockquote>
</blockquote>
</li>
<li>if&#x3D;interface<blockquote>
<blockquote>
<p>This option defines on which type on interface the drive is connected. Available types are: <strong>ide, scsi, sd, mtd, floppy, pflash, virtio, none</strong></p>
</blockquote>
</blockquote>
</li>
<li>bus&#x3D;bus,unit&#x3D;unit<blockquote>
<blockquote>
<p>These options define where is connected the drive by defining the bus number and the unit id.</p>
</blockquote>
</blockquote>
</li>
<li>index&#x3D;index<blockquote>
<blockquote>
<p>This option defines where the drive is connected by using an index in the list of available connectors of a given interface type, cdrom and disk share the index!!!</p>
</blockquote>
</blockquote>
</li>
<li>media&#x3D;media<blockquote>
<blockquote>
<p>This option defines the type of the media: <strong>disk or cdrom</strong></p>
</blockquote>
</blockquote>
</li>
<li>format&#x3D;format<blockquote>
<blockquote>
<p>Specify which disk format will be used rather than detecting the format. Can be used to specify format&#x3D;raw to avoid interpreting an untrusted format header.</p>
</blockquote>
</blockquote>
</li>
<li>iops&#x3D;i,iops_rd&#x3D;r,iops_wr&#x3D;w<blockquote>
<blockquote>
<p>Specify request rate limits in requests per second, either for all request types or for reads or writes only.</p>
</blockquote>
</blockquote>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cdrom</span></span><br><span class="line">qemu-system-x86_64 -drive file=file,index=2,media=cdrom</span><br><span class="line"></span><br><span class="line"><span class="comment"># fda, fdb</span></span><br><span class="line">qemu-system-x86_64 -drive file=file,index=0,<span class="keyword">if</span>=floppy</span><br><span class="line">qemu-system-x86_64 -drive file=file,index=1,<span class="keyword">if</span>=floppy</span><br><span class="line"></span><br><span class="line"><span class="comment"># index0 hda, index1 hdb as if=ide by default.</span></span><br><span class="line">qemu-system-x86_64 -drive file=file,index=0,media=disk</span><br><span class="line">qemu-system-x86_64 -drive file=file,index=1,media=disk</span><br><span class="line">qemu-system-x86_64 -drive file=file,index=2,media=disk</span><br><span class="line">qemu-system-x86_64 -drive file=file,index=3,media=disk</span><br></pre></td></tr></table></figure>

<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="what’s-chipset"><a href="#what’s-chipset" class="headerlink" title="what’s chipset?"></a>what’s chipset?</h2><p>A chipset is a set of electronic components in an integrated circuit known as a <code>&quot;Data Flow Management System&quot;</code> that <code>manages the data flow between the processor, memory and peripherals</code>. It is usually <code>found on the motherboard</code>. <code>Chipsets are usually designed to work with a specific family of microprocessors</code>. Because it controls communications between the processor and external devices, the chipset plays a crucial role in determining system performance.</p>
<h2 id="add-console-to-qemu"><a href="#add-console-to-qemu" class="headerlink" title="add console to qemu"></a>add console to qemu</h2><p>With this, we can access console from pty directly</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># run qemu-kvm with daemon, then later connect to its console</span></span><br><span class="line">-D /tmp/qemu_vm.log \</span><br><span class="line">-daemonize \</span><br><span class="line">-device virtio-serial-pci,<span class="built_in">id</span>=virtio-serial0 \</span><br><span class="line">-chardev pty,<span class="built_in">id</span>=charconsole1 -device virtconsole,chardev=charconsole1,<span class="built_in">id</span>=console1 \</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> /tmp/qemu_vm.log</span><br><span class="line">qemu-kvm: -chardev pty,<span class="built_in">id</span>=charconsole1: char device redirected to /dev/pts/1 (label charconsole1)</span><br><span class="line"></span><br><span class="line">$ screen /dev/pts/1</span><br><span class="line"></span><br><span class="line"><span class="comment"># quit from console(terminate screen session)</span></span><br><span class="line">ctrl + a, <span class="keyword">then</span> press \</span><br></pre></td></tr></table></figure>

<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul>
<li><a href="https://qemu-project.gitlab.io/qemu/system/invocation.html">Qemu Options</a></li>
</ul>
]]></content>
      <categories>
        <category>qemu</category>
      </categories>
      <tags>
        <tag>qemu</tag>
      </tags>
  </entry>
  <entry>
    <title>python-class</title>
    <url>/2019/11/15/python-class/</url>
    <content><![CDATA[<h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><p>Python class is more like C++ class, it supports inheritance, function overridden (<code>not like C++, if you create an instance of child class, you never see parent&#39;s method if child defines method with same name even different signature(argument list)</code>), operator overload, static method etc.</p>
<hr>
<p><strong>Overloading vs Overriding</strong><br>Overloading occurs when <code>two or more methods in one class have the same method name but different parameters</code>.</p>
<p><code>Overriding occurs when two methods have the same method name and parameters</code>. One of the methods is in the parent class, and the other is in the child class. Overriding allows a child class to provide the specific implementation of a method that is already present in its parent class</p>
<span id="more"></span>
<hr>
<ul>
<li><p><strong>basic rules</strong></p>
<ul>
<li><code>&quot;_&quot;</code> is used to indicate that it should be used in a private context, but still can be accessed outside of class</li>
<li>prefix <font color='red'><code>__show two underscores</code> for private user defined, NO accessable outside of class</font>, exception happens when accesses it.</li>
<li>prefix <code>__len__</code> for built-in attr, but accessable outside of class</li>
<li>no prefix for public attribute</li>
<li><code>def __init__(self)</code> is not need if nothing in it</li>
<li><code>child must call super().__init__() only if parent needs input</code></li>
<li><code>self</code> can be other name, but it has to be the first parameter of any function in the class</li>
<li><code>del instance</code></li>
</ul>
</li>
<li><p><strong>parameter can be class type or other built-in type as well</strong></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun_parm_types</span>(<span class="params">fun_n, class_n</span>):</span><br><span class="line">    fun_n()</span><br><span class="line">    t1 = class_n(<span class="string">&#x27;show test&#x27;</span>, <span class="number">12</span>)  <span class="comment"># create an instance of class_n</span></span><br><span class="line">    t1.show()</span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factory</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> n(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factory(<span class="built_in">str</span>)) <span class="comment"># pass str type!!!</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Always use composition not inheritance for python class</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CA</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, company, group</span>):</span><br><span class="line">        self._company = company <span class="comment"># plan to be private, but still acceable outside</span></span><br><span class="line">        self.__group = group    <span class="comment"># private, not acceable outside</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_should_show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self._company)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.__group)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># __xx__ is for built-in, internal function</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__say__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">c1 = CA(<span class="string">&quot;google&quot;</span>, <span class="string">&#x27;CJ&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c1._company)</span><br><span class="line">c1.__say__()</span><br><span class="line">c1._should_show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    c1.__show()</span><br><span class="line"><span class="keyword">except</span> AttributeError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(e))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(c1.__group)</span><br><span class="line"><span class="keyword">except</span> AttributeError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(e))</span><br></pre></td></tr></table></figure>

<pre><code>google
hello
google
&#39;CA&#39; object has no attribute &#39;__show&#39;
&#39;CA&#39; object has no attribute &#39;__group&#39;
</code></pre>
<h2 id="dynamic-attribute"><a href="#dynamic-attribute" class="headerlink" title="dynamic attribute"></a>dynamic attribute</h2><p>There is one special feature for python that is different from C++, <code>you can add attribute dynamically</code> that means you can <code>add attribute anytime you want to a class or an instance</code>, but it’s <code>not a good habit</code> as others do not know that attribute at all.</p>
<p><font color='red'>by default you can add any attribute to an instance, but you can restrict it by <code>__slots__</code>, <strong>but restriction only applies on instance not class</strong>.</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CA</span>:</span><br><span class="line">    <span class="comment"># attribute allowed to added for instance</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;new_attr_c&#x27;</span>,<span class="string">&#x27;new_attr_b&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">c1 = CA() </span><br><span class="line">CA.new_attr = <span class="number">12</span> <span class="comment"># you can see we can add attr for class even not in __slots__</span></span><br><span class="line"><span class="comment"># this must before print, but can after creating an instance, after this, all instances now have new_attr</span></span><br><span class="line"><span class="built_in">print</span>(c1.new_attr)</span><br><span class="line"></span><br><span class="line">c1.new_attr_c = <span class="number">13</span></span><br><span class="line"><span class="built_in">print</span>(c1.new_attr_c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    c1.new_attr_d = <span class="number">12</span></span><br><span class="line"><span class="keyword">except</span> AttributeError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;add new attr not in __slots__, exception happened&quot;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<pre><code>12
13
add new attr not in __slots__, exception happened
</code></pre>
<h2 id="function-overloading-x2F-overriding"><a href="#function-overloading-x2F-overriding" class="headerlink" title="function overloading&#x2F;overriding"></a>function overloading&#x2F;overriding</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">person</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    this part will be person.__doc__</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="comment"># constructor!!!</span></span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I eat from person&quot;</span>)</span><br><span class="line">        self.after()</span><br><span class="line">        <span class="comment"># if self is child class, self.after() will call child&#x27;s after(), if not found, call person.after()</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">after</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;after eat from person&quot;</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>(<span class="title class_ inherited__">person</span>): <span class="comment"># inheritance this way</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, sid</span>):</span><br><span class="line">        <span class="comment"># child must call parent init</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line">        self.__sid = sid</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">after</span>(<span class="params">self</span>):<span class="comment"># overriding</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;after eat from student&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">teacher</span>(<span class="title class_ inherited__">person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, tid</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)  <span class="comment"># call parent&#x27;s constructor</span></span><br><span class="line">        self.__tid = tid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self, msg</span>): <span class="comment"># overloading</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;i eat %s from teacher&quot;</span> % msg)</span><br><span class="line">        </span><br><span class="line">s1 = student(<span class="string">&quot;s1&quot;</span>, <span class="number">1</span>)</span><br><span class="line">t1 = teacher(<span class="string">&quot;t1&quot;</span>, <span class="number">1</span>)</span><br><span class="line">s1.eat()</span><br><span class="line"></span><br><span class="line"><span class="comment"># t1.eat() called with no parameter</span></span><br><span class="line"><span class="comment"># error as parent function is hiden even with different signatures</span></span><br><span class="line"></span><br><span class="line">t1.eat(<span class="string">&quot;apple&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>I eat from person
after eat from student
i eat apple from teacher
</code></pre>
<h2 id="operator-overloading"><a href="#operator-overloading" class="headerlink" title="operator overloading"></a>operator overloading</h2><p>In some case, you may want to access <code>user defined class like other built-in type</code>, like <code>len(user_class_instance), user_class_instance[0]</code> what you need to do is to implement <code>special functions</code>, here are a list for such special functions.</p>
<p><strong>built-in function(descriptor)</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- len           __len__</span><br><span class="line">- str           __str__</span><br><span class="line">- []            __getitem__</span><br><span class="line">- ins.attr      __getattr__</span><br><span class="line">- CLASS()       __call__</span><br><span class="line">- hash          __hash__</span><br><span class="line">- with/as       __enter__/__exit__</span><br></pre></td></tr></table></figure>
<p><strong>operator</strong></p>
<table>
<thead>
<tr>
<th>p1 + p2</th>
<th>__add__</th>
</tr>
</thead>
<tbody><tr>
<td>p1 - p2</td>
<td>__sub__</td>
</tr>
<tr>
<td>*,&#x2F;,&#x2F;&#x2F;</td>
<td>__xx__</td>
</tr>
<tr>
<td>p1 % p2</td>
<td>__mod__</td>
</tr>
<tr>
<td>&lt;&lt;,&gt;&gt;</td>
<td>__xx__</td>
</tr>
<tr>
<td>p1 &lt; p2</td>
<td>__lt__</td>
</tr>
<tr>
<td>&gt;, &lt;&#x3D;, &gt;, &gt;&#x3D;</td>
<td>__le__, __gt__, __ge__</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>:      </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Apple&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="string">&#x27;Apple&#x27;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">ph1 = Phone()</span><br><span class="line"><span class="built_in">str</span>(ph1)</span><br></pre></td></tr></table></figure>




<pre><code>&#39;Apple&#39;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(ph1))</span><br></pre></td></tr></table></figure>

<pre><code>5
</code></pre>
<h2 id="setattr-x2F-getattr-x2F-hasattr-x2F-delattr-with-class"><a href="#setattr-x2F-getattr-x2F-hasattr-x2F-delattr-with-class" class="headerlink" title="setattr&#x2F;getattr&#x2F;hasattr&#x2F;delattr with class"></a>setattr&#x2F;getattr&#x2F;hasattr&#x2F;delattr with class</h2><p>Most of time, class attribute(include function) is defined when defines a class, so we know the name of it, hence we can access it by <code>class_instance.name or class_instance.get_name()</code>, but there are times when you might <strong><code>not know the name of a attribute until runtime as some of them defined by setattr at runtime!!!</code>, that’s where <code>hasattr and getattr</code></strong> (as well as delattr and setattr) come into play.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># must quote attribute</span></span><br><span class="line"><span class="comment"># getattr(class_name, &#x27;attribute&#x27;)</span></span><br><span class="line"><span class="comment"># getattr(instance, &#x27;attribute&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># without default value</span></span><br><span class="line">val = <span class="built_in">getattr</span>(Apple, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">var = <span class="string">&#x27;name&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># with default value</span></span><br><span class="line">val = <span class="built_in">getattr</span>(Apple, var, <span class="string">&#x27;default value&#x27;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">f1 = Foo(<span class="string">&#x27;jason&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;all attributes(not include function) for instance are stored at instance._dict__=&quot;</span>, f1.__dict__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(f1, <span class="string">&#x27;id&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;class instance doesn&#x27;t have id, use default value &quot;</span>, <span class="built_in">getattr</span>(f1, <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;123&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;f1.get_name return &quot;</span>, <span class="built_in">getattr</span>(f1, <span class="string">&#x27;get_name&#x27;</span>)())</span><br></pre></td></tr></table></figure>

<pre><code>all attributes(not include function) for instance are stored at instance._dict__= &#123;&#39;name&#39;: &#39;jason&#39;&#125;
class instance doesn&#39;t have id, use default value  123
f1.get_name return  jason
</code></pre>
<h2 id="staticmethod-and-classmethod"><a href="#staticmethod-and-classmethod" class="headerlink" title="staticmethod and classmethod"></a>staticmethod and classmethod</h2><p><strong>staticmethod</strong></p>
<p>staticmethod is used to <code>group functions</code> which <code>have some logical connection within a class</code>. <strong>it knows nothing about the class or instance it was called on</strong>, It just gets the arguments that were passed, <strong><font color='red'>no self argument, just group functions in a class</font></strong>. but it can be called by class or instance as well.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Class.<span class="built_in">staticmethod</span>() <span class="comment"># class directly</span></span><br><span class="line">Or even</span><br><span class="line">Class().<span class="built_in">staticmethod</span>() <span class="comment"># instance calls it</span></span><br></pre></td></tr></table></figure>

<p><strong><code>It is basically useless in Python you can just use a module function instead of a staticmethod</code></strong></p>
<p><strong>classmethod</strong></p>
<p>A classmethod is a method that is <code>bound to a class rather than its object</code>. It <code>doesn&#39;t require creation of a class instance</code>, much like staticmethod.</p>
<p>The differences between a static method and a class method are:<br><font color='red'></p>
<ul>
<li><strong>Static method knows <code>nothing</code> about the class and just deals with the parameters</strong></li>
<li><strong>Class method <code>works with the class</code> since its first parameter is always the class type.</strong></li>
</ul>
<p>The class method can be called both by the class and its object, both <code>pass class type as first parameter</code>.</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Class.<span class="built_in">classmethod</span>() <span class="comment"># class directly</span></span><br><span class="line">Or even</span><br><span class="line">Class().<span class="built_in">classmethod</span>() <span class="comment"># instance</span></span><br></pre></td></tr></table></figure>
<p>But no matter what, the <code>class method is always attached to a class with first argument as the class itself cls</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cls is class type!!!</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">classMethod</span>(<span class="params">cls, args...</span>)</span><br></pre></td></tr></table></figure>

<p>This is useful when you want a method to be a factory for the class</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    COUNT = <span class="number">0</span> <span class="comment"># COUNT here means it blongs to CLASS, can access it by class name or instance</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># can use COUNT as without class prefix as parameter</span></span><br><span class="line">    <span class="comment"># but inside function, must add prefix Student.count inside function</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ct=COUNT</span>):</span><br><span class="line">        self.count_inc_class()  <span class="comment"># even COUNT is increase here,</span></span><br><span class="line">     </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count_inc_class</span>(<span class="params">cls</span>): <span class="comment"># pass CLASS, cls is CLASS type, not self!</span></span><br><span class="line">        cls.COUNT += <span class="number">1</span> <span class="comment"># access class COUNT by CLASS name</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_count_static</span>():</span><br><span class="line">        <span class="keyword">return</span> Student.COUNT <span class="comment"># access class COUNT by instance</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_count_class</span>(<span class="params">cls</span>): <span class="comment"># pass CLASS as firt argument, not self</span></span><br><span class="line">        <span class="built_in">print</span>(cls)</span><br><span class="line">        s3 = cls()</span><br><span class="line">        <span class="keyword">return</span> cls.COUNT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student()</span><br><span class="line">s2 = Student()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1.get_count_static(), Student.get_count_static())</span><br><span class="line"><span class="built_in">print</span>(s1.get_count_class(), Student.get_count_class())</span><br><span class="line"><span class="comment">#s1.get_count_class passed CLASS implicitly not self to classmethod</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(Student)</span><br></pre></td></tr></table></figure>

<pre><code>2 2
&lt;class &#39;__main__.Student&#39;&gt;
&lt;class &#39;__main__.Student&#39;&gt;
3 4
&lt;__main__.Student object at 0x7f5e5d055df0&gt;
&lt;class &#39;__main__.Student&#39;&gt;
</code></pre>
<h2 id="setter-x2F-getter"><a href="#setter-x2F-getter" class="headerlink" title="setter&#x2F;getter"></a>setter&#x2F;getter</h2><p>setter&#x2F;getter provide a way that you can <strong>access&#x2F;modify attribute with <code>obj.name</code> but the implementation behind it is a function</strong>, this is very useful in some case, let’s say your old application writing code with <code>obj.name</code>, but after several years, you want to &#x2F;need to <code>return value depends on more logic, but without changing user code</code>, <code>getter</code> comes into play.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="comment"># two name functions with different decorators</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;getting name&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter </span><span class="comment">#@name must be same with attribute</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;setting name %s&#x27;</span> % value)</span><br><span class="line">        self._name = value</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">st1 = Student()</span><br><span class="line"><span class="comment"># behind it, a function is called!!!</span></span><br><span class="line">st1.name = <span class="string">&quot;jason&quot;</span></span><br><span class="line"><span class="built_in">print</span>(st1.name)</span><br></pre></td></tr></table></figure>

<pre><code>setting name jason
getting name
jason
</code></pre>
<h2 id="enum-class"><a href="#enum-class" class="headerlink" title="enum class"></a>enum class</h2><p>enum is used to group literal together, so that you can use them from class, more specific for its purpose</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="comment"># Month is the ID of the enum</span></span><br><span class="line">mth = Enum(<span class="string">&#x27;Month&#x27;</span>, (<span class="string">&quot;Jan&quot;</span>, <span class="string">&quot;Feb&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(mth.Jan) <span class="comment"># the resut is a number but can use name like c enum</span></span><br></pre></td></tr></table></figure>

<pre><code>Month.Jan
</code></pre>
]]></content>
      <categories>
        <category>python</category>
        <category>class</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python-class</tag>
      </tags>
  </entry>
  <entry>
    <title>qemu-kvm-security</title>
    <url>/2022/04/15/qemu-kvm-security/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p><strong>Why qemu need security?</strong><br>There are several cases where security is needed like The virtualization use cases rely on hardware virtualization extensions to execute guest code safely on the physical CPU at close-to-native speed.</p>
<p><strong>The following entities are untrusted, meaning that they may be buggy or malicious:</strong></p>
<ul>
<li>Guest</li>
<li>User-facing interfaces (e.g. VNC, SPICE, WebSocket)</li>
<li>Network protocols (e.g. NBD, live migration)</li>
<li>User-supplied files (e.g. disk images, kernels, device trees)</li>
<li>Passthrough devices (e.g. PCI, USB)</li>
</ul>
<p>Bugs affecting these entities are evaluated on whether they can cause damage in real-world use cases and treated as security bugs if this is the case.</p>
<span id="more"></span>

<h1 id="Security-Architecture-in-Qemu"><a href="#Security-Architecture-in-Qemu" class="headerlink" title="Security Architecture in Qemu"></a>Security Architecture in Qemu</h1><h2 id="Design-principles"><a href="#Design-principles" class="headerlink" title="Design principles"></a>Design principles</h2><p>Below are <code>design principles that ensure the security requirements</code> are met.</p>
<p><strong>Guest Isolation</strong><br>Guest isolation is the confinement of guest code to the virtual machine. When guest code gains control of execution on the host this is called escaping the virtual machine. Isolation also includes resource limits such as throttling of CPU, memory, disk, or network. Guests must be unable to exceed their resource limits.</p>
<p>QEMU presents an attack surface to the guest in the form of emulated devices. The guest must not be able to gain control of QEMU. Bugs in emulated devices could allow malicious guests to gain code execution in QEMU. At this point the guest has escaped the virtual machine and is able to act in the context of the QEMU process on the host.</p>
<p>Guests often interact with other guests and share resources with them. A malicious guest must not gain control of other guests or access their data. Disk image files and network traffic must be protected from other guests unless explicitly shared between them by the user</p>
<p><strong>Principle of Least Privilege</strong><br>The principle of least privilege states that each component only has access to the privileges necessary for its function. In the case of QEMU this means that each process only has access to resources belonging to the guest.</p>
<p>The QEMU process should not have access to any resources that are inaccessible to the guest. This way the guest does not gain anything by escaping into the QEMU process since it already has access to those same resources from within the guest</p>
<p>In reality certain resources are inaccessible to the guest but must be available to QEMU to perform its function. For example, host system calls are necessary for QEMU but are not exposed to guests. A guest that escapes into the QEMU process can then begin invoking host system calls</p>
<h2 id="Isolation-mechanisms"><a href="#Isolation-mechanisms" class="headerlink" title="Isolation mechanisms"></a>Isolation mechanisms</h2><p>Several isolation mechanisms are available to realize this architecture of guest isolation and the principle of least privilege. <strong>With the exception of Linux seccomp(dployed by qemu itself), these mechanisms are all deployed by management tools that launch QEMU, such as libvirt.</strong></p>
<p>The fundamental isolation mechanism is that <strong>QEMU processes must run as unprivileged users</strong>. Sometimes it seems more convenient to launch QEMU as root to give it access to host devices (e.g. &#x2F;dev&#x2F;net&#x2F;tun) but this poses a huge security risk. File descriptor passing can be used to give an otherwise unprivileged QEMU process access to host devices without running QEMU as root. It is also possible to launch QEMU as a non-root user and configure UNIX groups for access to &#x2F;dev&#x2F;kvm, &#x2F;dev&#x2F;net&#x2F;tun, and other device nodes. Some Linux distros already ship with UNIX groups for these devices by default.</p>
<ul>
<li>SELinux and AppArmor make it possible to confine processes beyond the traditional UNIX process and file permissions model. They restrict the QEMU process from accessing processes and files on the host system that are not needed by QEMU.</li>
<li><strong>Resource limits and cgroup controllers</strong> provide throughput and utilization limits on key resources such as CPU time, memory, and I&#x2F;O bandwidth.</li>
<li><strong>Linux namespaces can be used to make process, file system, and other system resources unavailable to QEMU</strong>. A namespaced QEMU process is restricted to only those resources that were granted to it.</li>
<li><strong>Linux seccomp is available via the QEMU –sandbox option. It disables system calls that are not needed by QEMU, thereby reducing the host kernel attack surface.</strong></li>
</ul>
<p><strong>Limiting syscalls with seccomp</strong><br><code>Seccomp stands for secure computing mode</code> and has been a feature of the Linux kernel since version 2.6.12. It can be used to sandbox the privileges of a process, restricting the calls it is able to make from userspace into the kernel.</p>
<p><code>Seccomp filtering(Seccomp BPF)</code> provides a means for a process to <code>specify a filter for incoming system calls</code>. The filter is expressed as a Berkeley Packet Filter (BPF) program, as with socket filters, except that the data operated on is related to the system call being made: system call number and the system call arguments. This allows for expressive filtering of system calls using a filter program language with a long history of being exposed to userland and a straightforward data set.</p>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://qemu.readthedocs.io/en/latest/system/security.html">Qemu security</a></li>
</ul>
]]></content>
      <categories>
        <category>qemu</category>
        <category>security</category>
      </categories>
      <tags>
        <tag>qemu</tag>
      </tags>
  </entry>
  <entry>
    <title>python-function</title>
    <url>/2019/11/15/python-function/</url>
    <content><![CDATA[<h1 id="Advanced-function-feature"><a href="#Advanced-function-feature" class="headerlink" title="Advanced function feature"></a>Advanced function feature</h1><p>In python, <code>function is an object</code> that means you can assign it to a variable or  pass it as a parameter! we can also return a function inside another function, cool!</p>
<p><strong>Assign functions to a variable</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name</span><br><span class="line"></span><br><span class="line">greet_someone = greet</span><br><span class="line">greet_someone(<span class="string">&quot;John&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>Function can return other function</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compose_greet_func</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_message</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> get_message</span><br><span class="line"></span><br><span class="line">greet = compose_greet_func(<span class="string">&quot;jason&quot;</span>)</span><br><span class="line">greet()</span><br></pre></td></tr></table></figure>
<p><code>if nothing returns in function, None returned by default</code></p>
<span id="more"></span>

<h2 id="descriptor-class-method"><a href="#descriptor-class-method" class="headerlink" title="descriptor(class method)"></a>descriptor(class method)</h2><p>In general, <code>a descriptor is an object attribute with &quot;binding behavior&quot;</code> whose access has been overridden by method in the descriptor protocol. <strong>Those methods are <code>__get__(), __set__(), and __delete__()</code>. If any of those methods is defined for an object, it is said to be a descriptor</strong></p>
<p>Calling property() is a succinct way of <code>building a data descriptor that triggers function call upon access to an attribute</code>.</p>
<p><strong>define a property</strong><br><code>property(fget=None, fset=None, fdel=None, doc=None) -&gt; property attribute</code> <font color='red' size='3'>we can also use decorator @property and @xx.setter to define a property, must define @property first!!!</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">#descriptor</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self._name = name</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;get_name() is called&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_name</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set_name() is called with name:&#x27;</span>, name)</span><br><span class="line">        self._name = name</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># declare name as a property, obj.name</span></span><br><span class="line">    <span class="comment"># but inside class, it&#x27;s function.</span></span><br><span class="line">    <span class="comment"># @property is getter which must define first!!!   </span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;name getter is called&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="comment"># name must be same between getter and setter.</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;name setter is called&#x27;</span>)</span><br><span class="line">        self._name = name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># bname: a property of person(fget() fset(), property can be different names)</span></span><br><span class="line">    <span class="comment"># but if you use decorator to define a propterty, in that case fget, fset, property must be same name!!!</span></span><br><span class="line">    bname = <span class="built_in">property</span>(get_name, set_name) <span class="comment"># declare a property </span></span><br><span class="line">    </span><br><span class="line">p1 = Person(<span class="string">&quot;jason&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(p1.bname)</span><br><span class="line">p1.bname = <span class="string">&quot;kk&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p1.name)</span><br></pre></td></tr></table></figure>

<pre><code>get_name() is called
jason
set_name() is called with name: kk
name getter is called
kk
</code></pre>
<h2 id="function-closure"><a href="#function-closure" class="headerlink" title="function closure"></a>function closure</h2><p>if a function <code>defines another function in its scope and returns it</code>, it’s a closure</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">welcome</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;wrapper is called with: &quot;</span>, name)</span><br><span class="line">    <span class="keyword">return</span> wrapper <span class="comment"># here we return a function</span></span><br><span class="line"></span><br><span class="line">wf = welcome(<span class="string">&quot;jason&quot;</span>)</span><br><span class="line">wf() </span><br></pre></td></tr></table></figure>

<pre><code>wrapper is called with:  jason
</code></pre>
<h2 id="decorator"><a href="#decorator" class="headerlink" title="decorator"></a>decorator</h2><p>Python has built-in decorator like <code>property</code>, to apply a decorator to a function by placing it just before the function definition. like </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@xxx</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># with parameter(s)</span></span><br><span class="line"><span class="meta">@xxx(<span class="params">arg</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>()</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p><strong>Decorator is needed when you want do something before a function run, place it anywhere that needs it.</strong></p>
<p><code>Decorator can be a class or function, if it is class, must be callable, has __call__ function defined</code>.</p>
<p>below are the ways to create a custom decorator</p>
<h3 id="function-as-a-decorator"><a href="#function-as-a-decorator" class="headerlink" title="function as a decorator."></a>function as a decorator.</h3><p>decorator is applied when you define that function, later on when you call it, the wrapped function is called actually.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;we got parameter for decorator: &#x27;</span>, text)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myDecorator</span>(<span class="params">f</span>): <span class="comment"># passed in user function.</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **argv</span>): <span class="comment"># parameters for user functioin</span></span><br><span class="line">            <span class="comment"># *args for dynamic position parameters</span></span><br><span class="line">            <span class="comment"># args is a list [&#x27;a&#x27;, &#x27;b&#x27;]</span></span><br><span class="line">            f(*args, **argv) <span class="comment"># here *args, separate the list == f(&#x27;a&#x27;, &#x27;b&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="comment"># return a function object, when it&#x27;s called, call wrapped f() actually!</span></span><br><span class="line">    <span class="keyword">return</span> myDecorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@log(<span class="params"><span class="string">&quot;param1&quot;</span></span>) </span><span class="comment"># parameter is used by decorator, not wrapper function!!!</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aFunction</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;inside aFunction &quot;</span>, name)</span><br><span class="line">aFunction(<span class="string">&quot;jason&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>we got parameter for decorator:  param1
inside aFunction  jason
</code></pre>
<h3 id="class-as-a-decorator"><a href="#class-as-a-decorator" class="headerlink" title="class as a decorator"></a>class as a decorator</h3><p>decorator is applied when you define that function, later on when you call it, the wrapped function is called actually.</p>
<p><font color='red'>**Always use call as decorator, as it’s easy to understand</font>.</p>
<h4 id="class-decorator-without-parameter"><a href="#class-decorator-without-parameter" class="headerlink" title="class decorator without parameter"></a>class decorator without parameter</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">cDecorator</span>:</span><br><span class="line">    <span class="string">&#x27;doc of class decorator&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, f</span>): <span class="comment"># fixed format</span></span><br><span class="line">        <span class="comment"># must passed function</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;decorator is initialized&#x27;</span>)</span><br><span class="line">        self.f = f</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *argc, **argv</span>): <span class="comment"># argc is a list, argv is a dict, fixed format</span></span><br><span class="line">        <span class="comment"># do extra here</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;decorator is called&#x27;</span>)</span><br><span class="line">        self.f(*argc, **argv) <span class="comment"># get args from wrap function, then pass it orginal.</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment"># here is NOT @cDecorator()</span></span><br><span class="line"><span class="comment"># this happend when function is declared!!!</span></span><br><span class="line"><span class="comment"># wrapped = cDecorator(bFunction)---&gt;__init__()</span></span><br><span class="line"><span class="meta">@cDecorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bFunction</span>(<span class="params">msg, name=<span class="string">&quot;josh&quot;</span></span>):</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;inside bFunction: &#123;0&#125; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(msg, name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># repalced with wrapped function</span></span><br><span class="line"><span class="comment"># wrapped(&quot;hi&quot;, name=&quot;josh&quot;)---&gt;__call__()</span></span><br><span class="line">bFunction(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(bFunction.__doc__)</span><br></pre></td></tr></table></figure>

<pre><code>decorator is initialized
decorator is called
inside bFunction: hi josh
doc of class decorator
</code></pre>
<h4 id="class-decorator-with-parameter"><a href="#class-decorator-with-parameter" class="headerlink" title="class decorator with parameter"></a>class decorator with parameter</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">cDecorator</span>:</span><br><span class="line">    <span class="string">&quot;doc of class decorator&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, msg</span>):  <span class="comment"># fixed format</span></span><br><span class="line">        <span class="comment"># must passed function</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;decorator is initialized&quot;</span>, msg)</span><br><span class="line">        self.msg = msg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, fn</span>):  <span class="comment"># argc is a list, argv is a dict, fixed format</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;wrapper parameter:&quot;</span>, self.msg)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **argv</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;call original function&quot;</span>)</span><br><span class="line">            fn(*args, **argv)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># wrapped = cDecorator(&quot;cool&quot;)(bFunction) --&gt;__init__(), then __call__()</span></span><br><span class="line"><span class="meta">@cDecorator(<span class="params"><span class="string">&quot;cool&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bFunction</span>(<span class="params">msg, name=<span class="string">&quot;josh&quot;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;inside bFunction: &#123;0&#125; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(msg, name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># wrapped(&quot;hi&quot;)</span></span><br><span class="line">bFunction(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(bFunction.__doc__) <span class="comment"># see below function wraps </span></span><br></pre></td></tr></table></figure>

<pre><code>decorator is initialized cool
wrapper parameter: cool
call original function
inside bFunction: hi josh
None
</code></pre>
<h3 id="why-use-functools-wraps"><a href="#why-use-functools-wraps" class="headerlink" title="why use functools.wraps"></a>why use functools.wraps</h3><p>when a function is decorated, <code>getting the docstring and function signature return “wrapper”, the inner function, not the original function</code>, this is a problem, we can use “functool.wraps” decorator to decorate our inner function, By applying this “wraps” decorator to our inner function, we <code>copy over func name, docstring, and signature to our inner function</code>, avoiding the issues.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">        </span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>) </span><span class="comment"># assign func.__name__ to inner function</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kw</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s call %s()&#x27;</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@log(<span class="params"><span class="string">&#x27;execute&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">msg, name=<span class="string">&#x27;josh&#x27;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(msg, name))</span><br><span class="line">f(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.__name__) <span class="comment"># __name__ is not wrapper, but f great!</span></span><br></pre></td></tr></table></figure>

<pre><code>execute call f()
hi josh
f
</code></pre>
<h2 id="Generator-vs-Iterator"><a href="#Generator-vs-Iterator" class="headerlink" title="Generator vs Iterator"></a>Generator vs Iterator</h2><p><font color='red'>generator function returns a generator object</font>, <strong>generator function is function that yield(like return) value</strong> when <code>next()</code> call,it will execute until last yield point, most of time <code>next()</code> is not called explictly but implicitly like this <code>for elm in list</code>.</p>
<p><strong>Iterator</strong></p>
<p>An iterator is an object that implements the iterator protocol (don’t panic!). An <code>iterator protocol is nothing but a specific class with __next__()</code> in Python which further<font color='red'> has the <code>__next__()</code> method</font>.</p>
<p>While for <code>iterable object, No need to __next__()</code> but mostly <code>have __iter__() and __getitem__()</code>, <code>__iter__()</code> allows to convert the object into an iterator,  <code>__getitem__()</code> will be called in iterator’s <code>__next__()</code> function.</p>
<p><font color='red'>iter(object) will call object.__iter__() while next(object) will call object.<code>__next__()</code></font></p>
<p><strong>Generator</strong></p>
<ul>
<li>Iterator is an object has <code>__next__()</code> method</li>
<li>generator is an object which implements <font color='red'><code>__next__()</code>,  so that it’s an iterator!</font>  </li>
<li><code>generator function is a function that uses yield as return</code>, when you call this function, it <code>returns a generator object!</code></li>
</ul>
<p>more details about these two, refer to <a href="https://www.datacamp.com/community/tutorials/python-iterator-tutorial">iterator-generator-descriptor</a>.</p>
<p><img src="https://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1540502316/Screen_Shot_2018-10-25_at_4.52.02_PM_ygflgk.png" alt="vs"></p>
<p><font size=3> <code>Most uses case, you create a generator function which returns a generator object and for elm in generator_object</code></font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;start&#x27;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;middle&#x27;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;end&#x27;</span></span><br><span class="line"></span><br><span class="line">gen = f()</span><br><span class="line"><span class="comment"># return generator object, then call next()  to </span></span><br><span class="line"><span class="comment"># yield object(which has __next__() method provided by yield)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gen)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(gen))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;use next(generator_object)&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))</span><br><span class="line"></span><br><span class="line"><span class="comment"># next(gen) exception happend!!!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;use for/in to iterate generator&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> stage <span class="keyword">in</span> f():</span><br><span class="line">    <span class="built_in">print</span>(stage)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;generator object f at 0x7f3e30235f90&gt;
[&#39;__class__&#39;, &#39;__del__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__name__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__next__&#39;, &#39;__qualname__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;close&#39;, &#39;gi_code&#39;, &#39;gi_frame&#39;, &#39;gi_running&#39;, &#39;gi_yieldfrom&#39;, &#39;send&#39;, &#39;throw&#39;]
use next(generator_object)
start
middle
end
use for/in to iterate generator
start
middle
end
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># List is iterable, but it&#x27;s not an Iterator!</span></span><br><span class="line"><span class="comment"># but can be converted to an Iterator</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.__<span class="built_in">list</span> = data[:]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> MyIterator(self) <span class="comment"># return Iterator</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, i</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__<span class="built_in">list</span>[i]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.__<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyIterator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, obj</span>):</span><br><span class="line">        self.__obj = obj</span><br><span class="line">        self.__index = <span class="number">0</span> <span class="comment"># key: the current index</span></span><br><span class="line">        self.__size = <span class="built_in">len</span>(obj)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># must __next__ as it&#x27;s Iterator</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.__index &gt;= self.__size:</span><br><span class="line">            <span class="comment"># stop next by return StopIteration!!!</span></span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            value = self.__obj[self.__index] <span class="comment"># call obj.__getitem__()</span></span><br><span class="line">            self.__index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">lt = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">mlt = MyList(lt)</span><br><span class="line">it = <span class="built_in">iter</span>(mlt)</span><br><span class="line"><span class="built_in">print</span>(it)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))</span><br></pre></td></tr></table></figure>

<pre><code>&lt;__main__.MyIterator object at 0x7f3e30278d00&gt;
1
2
</code></pre>
]]></content>
      <categories>
        <category>python</category>
        <category>function</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>react_faq</title>
    <url>/2020/07/23/react-faq/</url>
    <content><![CDATA[<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="Can-I-use-react-for-part-of-my-page"><a href="#Can-I-use-react-for-part-of-my-page" class="headerlink" title="Can I use react for part of my page"></a>Can I use react for part of my page</h2><p>The answer is Yes, as React use render() which mounts the react element to the Dom node, as the Dom node can be any dom node of the html, so that react be part of the html or whole page if Dom node is the whole body.<br>Here is how to <a href="https://reactjs.org/docs/add-react-to-an-existing-app.html">add react to part of your page</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;container_id&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="What’s-Babel"><a href="#What’s-Babel" class="headerlink" title="What’s Babel"></a>What’s Babel</h2><p>As any language, Javascript also has versions named ECMAScript (short for ES). Currently, most browsers support ES5. ES5 used to be good even though it was painful to code in it. Remember, this not reading from inside callback functions? The new version of Javascript, ES6, also known as ES2015 (specs of the language were finalized in June 2015) makes Javascript great again. If you want to learn about ES6, check out the links at the end of this article. All the great features of ES6 come with one big problem — majority of browsers do not fully support them. That’s when Babel comes to play. <strong>Babel is a JS transpiler that converts new JS code into old ones</strong>. It is a very flexible tool in terms of transpiling. One can easily add presets such as es2015, es2016, es2017, so that Babel compiles them to ES5.</p>
<span id="more"></span>

<h3 id="polyfill"><a href="#polyfill" class="headerlink" title="polyfill"></a>polyfill</h3><p>In order to support Promises you must include the Babel polyfill.</p>
<h2 id="Learning-JavaScript-bundlers"><a href="#Learning-JavaScript-bundlers" class="headerlink" title="Learning JavaScript bundlers"></a>Learning JavaScript bundlers</h2><p>For a number of good technical reasons <strong>CommonJS modules</strong> (i.e. everything in npm) cannot be used natively in the browser. You need a JavaScript “bundler” to “bundle” these modules into <strong>.js files[es6 or old version based on config]</strong> that you can include in your web page with a &lt;script&gt; tag.</p>
<p>WebPack<br>we would like to use that. We would also like to use SASS for our styles, PostCSS for autoprefixing. Plus, we would like to minify and uglify both our CSS and Javascript code. Webpack solves all of these problems using one config file (named webpack.config.js) and one CLI command webpack</p>
<p>Webpack is a modular build tool that has two sets of functionality — <strong>Loaders and Plugins</strong>. Loaders transform the source code of a module. For example <strong>style-loader adds CSS to DOM using style tags</strong>. <strong>sass-loader compiles SASS files to CSS</strong>. <strong>babel-loader transpiles JS code given the presets</strong>. Plugins are the core of Webpack. They can do things that loaders can’t. For example, there is a plugin called UglifyJS that minifies and uglifies the output of webpack.</p>
<p>Popular js bundlers</p>
<ul>
<li>wepack</li>
<li>browserify</li>
<li>grunt or gulp</li>
</ul>
<h2 id="Should-I-use-client-side-Router-for-my-website"><a href="#Should-I-use-client-side-Router-for-my-website" class="headerlink" title="Should I use client side Router for my website"></a>Should I use client side Router for my website</h2><p>“Single-page applications” are all the rage these days. These are web pages that load once, and when the user clicks on a link or a button, JavaScript running on the page updates the address bar, but the web page is not refreshed(no request send to server). Management of the address bar is done by something called a router.</p>
<p>Use it or not depends on your website</p>
<ul>
<li><strong>If you’re building a single-page application, use it unless you have a good reason not to.</strong></li>
<li><strong>Don’t use a router if you aren’t building a single-page application</strong>.</li>
</ul>
<p>If you need a router, use <code>react-router</code> in your react application.</p>
<h2 id="Should-I-use-Redux"><a href="#Should-I-use-Redux" class="headerlink" title="Should I use Redux?"></a>Should I use Redux?</h2><p>React components are arranged in a hierarchy. Most of the time, your data model also follows a hierarchy. In these situations Flux doesn’t buy you much. Sometimes, however, your data model is not hierarchical. When your React components start to receive props that feel extraneous, or you have a small number of components starting to get very complex, then you might want to look into Redux which is used for manage <code>complex state</code>.</p>
<p><strong>You’ll know when you need Redux. If you aren’t sure if you need it, you don’t need it.</strong></p>
<h2 id="Should-I-use-Immutable-js"><a href="#Should-I-use-Immutable-js" class="headerlink" title="Should I use Immutable.js?"></a>Should I use Immutable.js?</h2><p>Immutable.js provides a set of data structures that can help to solve certain performance issues when building React apps. It’s a great library, and you’ll probably use it a lot in your apps moving forward, but it’s <code>completely unnecessary until you have an appreciation of the performance implications</code>.</p>
<p><strong><code>Use it when you find your react apps has performance issue. and there is a library for this [immutability-helper](https://github.com/kolodny/immutability-helper)</code></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;immutable&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> map1 = <span class="title class_">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> map2 = map1.<span class="title function_">set</span>(<span class="string">&#x27;b&#x27;</span>, <span class="number">50</span>); <span class="comment">// when you change an attr, a new object is created, but</span></span><br><span class="line"><span class="comment">//the new object shares the unchanged part.</span></span><br><span class="line"><span class="comment">//without immutable js (native js), map2 and map1 points to the same shared memory</span></span><br><span class="line">map1.<span class="title function_">get</span>(<span class="string">&#x27;b&#x27;</span>) + <span class="string">&quot; vs. &quot;</span> + map2.<span class="title function_">get</span>(<span class="string">&#x27;b&#x27;</span>); <span class="comment">// 2 vs. 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// it supports List, Map, Stack, OrderedMap, Set, OrderedSet, Record</span></span><br></pre></td></tr></table></figure>

<h2 id="how-to-create-React-APP"><a href="#how-to-create-React-APP" class="headerlink" title="how to create React APP"></a>how to create React APP</h2><p>Here are rules and steps you should take</p>
<ul>
<li><p>Step 1: Break The UI Into A Component Hierarchy</p>
</li>
<li><p>Step 2: Build A Static Version in React(no state at all use static)</p>
</li>
<li><p>Step 3: Identify The minimal (but complete) Representation Of UI State</p>
</li>
<li><p>Step 4: Identify Where Your State Should Live</p>
</li>
<li><p>Step 5: Add Inverse Data Flow</p>
</li>
</ul>
<h2 id="use-bootstrap-in-React"><a href="#use-bootstrap-in-React" class="headerlink" title="use bootstrap in React"></a>use bootstrap in React</h2><p>There are two ways to use bootstrap in React, one is use bootstrap css the native way hence more control, the other way is use bootstrap Component which is wrapper of bootstrap native element, easy to use but less control.</p>
<p><strong>bootstrap css</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $ yarn add bootstrap</span></span><br><span class="line"><span class="comment">// add this to index.js so all js can use bootstrap css class</span></span><br><span class="line"><span class="comment">// import &#x27;bootstrap/dist/css/bootstrap.min.css&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./logo.svg&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// use bootstrap native component</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;&#x27;Test button &#x27;&#125;<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<p><strong>bootstrap component</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $ yarn add bootstrap</span></span><br><span class="line"><span class="comment">// $ yarn add react-bootstrap</span></span><br><span class="line"><span class="comment">// add this to index.js so all js can use bootstrap css class</span></span><br><span class="line"><span class="comment">// import &#x27;bootstrap/dist/css/bootstrap.min.css&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//App.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./logo.svg&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-bootstrap&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;&#x27; &#x27;&#125;<span class="tag">&lt;<span class="name">Button</span> <span class="attr">variant</span>=<span class="string">&quot;success&quot;</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><ul>
<li><a href="https://github.com/petehunt/webpack-howto">webpack howto</a></li>
<li><a href="https://github.com/ReactTraining/react-router">react router</a></li>
<li><a href="https://blog.pshrmn.com/simple-react-router-v4-tutorial/">react router tutorial</a></li>
<li><a href="https://www.youtube.com/watch?v=1iAG6h9ff5s">Video: router</a></li>
<li><a href="https://egghead.io/courses/getting-started-with-redux">Video: Getting Started with Redux</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLoYCgNOIyGADILc3iUJzygCqC8Tt3bRXt">Video Redux Series</a></li>
<li><a href="https://dev.to/valentinogagliardi/react-redux-tutorial-for-beginners-learning-redux-in-2018-13hj">React Redux Tutorial</a></li>
<li><a href="https://redux.js.org/">redux official</a></li>
<li><a href="https://immutable-js.github.io/immutable-js/">immutable js</a></li>
</ul>
]]></content>
      <categories>
        <category>react</category>
        <category>tool</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>Babel</tag>
        <tag>Webpack</tag>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>react_basic</title>
    <url>/2020/07/23/react-basic/</url>
    <content><![CDATA[<h1 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h1><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p>JSX is a syntax extension to JavaScript, it combines js with html, it only comes in when writes your js code like this, but not all browsers support such extension, if browser does not support it, you can convert it to native js code by Babel at server-side or at client side by include Babel.js for that website, we recommend do this in server-side as we can do some optimization. but Most mordent browsers support JSX now.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;greating&quot;</span>&gt;</span> Hello <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="comment">// React doesn’t require using JSX, same as below if browser does not support JSX</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  &#123;<span class="attr">className</span>: <span class="string">&#x27;greeting&#x27;</span>&#125;,</span><br><span class="line">  <span class="string">&#x27;Hello, world!&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//the final object.</span></span><br><span class="line"><span class="keyword">const</span> element = &#123;</span><br><span class="line">  <span class="comment">// type and props are two attributes of each React Element!!!!</span></span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">className</span>: <span class="string">&#x27;greeting&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: <span class="string">&#x27;Hello, world!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>Embedding Expressions in JSX</strong><br>You can put any valid JavaScript expression inside the curly braces in JSX.  For example, 2 + 2, user.firstName, or formatName(user) are all valid JavaScript expressions.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Josh Perez&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;2+2&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;fun(2)&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;false&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;user.avatarUrl&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>
<p><strong>React DOM uses camelCase property naming convention instead of HTML attribute names</strong></p>
<ul>
<li>class becomes className in JSX, and tabindex becomes tabIndex</li>
<li>built-in tag attributes may be renamed if it has two words or one word that is reserved by JSX</li>
</ul>
<p>There are several rules about JSX</p>
<ul>
<li><p>&lt;tags&gt; are elements</p>
<ul>
<li>JSX &lt;tags&gt; map to calls to React.createElement().</li>
<li>Use &lt;lowercase &#x2F;&gt; tags when you need a DOM elements, and <Capitalized /> tags for component elements</li>
</ul>
</li>
<li><p>JSX children become child elements</p>
<ul>
<li>they become the element’s props.children</li>
</ul>
</li>
<li><p>Attributes are props</p>
<ul>
<li>Use “” quotes when your props are strings</li>
<li>Use {} braces when your props are literals or variables</li>
</ul>
</li>
<li><p>{} interpolates children</p>
<ul>
<li>When a pair of {} braces is encountered within a JSX element, it’s value will be interpolated in as a child.</li>
<li>let Hello &#x3D; (props) &#x3D;&gt; &lt;div&gt;Hello, {props.to}</div></li>
</ul>
</li>
<li><p>Empty &lt;&gt; tags</p>
<ul>
<li>A pair of empty &lt;&gt; and &lt;&#x2F;&gt; tags get’s turned into a React.Fragment element, i.e. an element that doesn’t map to DOM nodes</li>
</ul>
</li>
<li><p>{…object} acts like Object.assign()</p>
<ul>
<li>Passing {…object} as an attribute will add all of the properties of the object as separate attributes</li>
</ul>
</li>
</ul>
<h2 id="Function-Component"><a href="#Function-Component" class="headerlink" title="Function Component"></a>Function Component</h2><p>Function Component has no state, is cheap, always use it if no state needed or no life cycle hooks needed.<br>Function Component must return a React element or null to prevent render there are several ways to achieve this.</p>
<p>Actually you can use <code>any name to replace props but props seems have the right meaning</code>. any object name would be fine.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;children:&quot;</span>,props.<span class="property">children</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//All attributes will store at an object and passed to Constructor!!</span></span><br><span class="line"><span class="comment">// &#123;name: &quot;jason&quot;&#125; passed as props= &#123;name: &quot;jason&quot;&#125;</span></span><br><span class="line"><span class="keyword">const</span> elment_jason = <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;jason&quot;</span>/&gt;</span></span>;</span><br><span class="line"><span class="comment">//anything inside &lt;Welcome&gt;xxx&lt;/Welcom&gt; are called children</span></span><br><span class="line"><span class="keyword">const</span> elment_jason = <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;jason&quot;</span>&gt;</span> children<span class="tag">&lt;/<span class="name">Welcome</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//operator spreading in parameter</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Hi</span>(<span class="params">&#123;name:name1, ...other&#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// other is also an object &#123;id: 12, city: &quot;shanghai&quot;&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;name1&#125; &#123;other.id&#125; &#123;other.city&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//The other same way</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Hi</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;<span class="attr">name</span>: name1, ...other&#125; = props;</span><br><span class="line">    <span class="comment">// other is also an object &#123;id: 12, city: &quot;shanghai&quot;&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;name1&#125; &#123;other.id&#125; &#123;other.city&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element_jason = <span class="language-xml"><span class="tag">&lt;<span class="name">Hi</span> <span class="attr">name</span>=<span class="string">&quot;jason&quot;</span> <span class="attr">id</span>=<span class="string">&#123;12&#125;</span> <span class="attr">city</span>=<span class="string">&quot;shanghai&quot;</span>/&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pass each attr in other object separately same as above</span></span><br><span class="line"><span class="keyword">const</span> other = &#123;<span class="attr">id</span>: <span class="number">12</span>, <span class="attr">city</span>: <span class="string">&quot;shanghai&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> element_jason = <span class="language-xml"><span class="tag">&lt;<span class="name">Hi</span> <span class="attr">name</span>=<span class="string">&quot;jason&quot;</span> &#123;<span class="attr">...other</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="comment">// if there are several statements, use &#123;&#125; and return is a must</span></span><br><span class="line"><span class="comment">//otherwise, one statement, must omit &#123;&#125; and return at same time, it&#x27;s required by arrow function</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Greeting</span> = (<span class="params">props</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Greeting</span> = (<span class="params">props</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Greeting</span> = (<span class="params">props</span>) =&gt; &#123; <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Greeting</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(props.<span class="property">warn</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="props-check-and-default-value"><a href="#props-check-and-default-value" class="headerlink" title="props check and default value"></a>props check and default value</h3><p>When we declare an property of an React element, we can add some checks and default value for it.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;: &#123;props.id&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Welcome</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;josh&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Welcome</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="title class_">PropTypes</span>.<span class="property">element</span>.<span class="property">isRequired</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hiJason = <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">id</span>=<span class="string">&#123;12&#125;</span> <span class="attr">name</span>=<span class="string">&quot;Jason&quot;</span>/&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> hiJosh = <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">id</span>=<span class="string">&#123;16&#125;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>
<p><strong>Note this way also works for Class Component as well!!!</strong></p>
<h3 id="More-step-of-function-component"><a href="#More-step-of-function-component" class="headerlink" title="More step of function component."></a>More step of function component.</h3><p>As normally, Function Component is not stateful or no lifecycle hook like Class Component, but class Component is heavy, is there a way we can use state and lifecycle hook like Class does. that’s why Hooks comes into place which let you use state and other React features without writing a class(use them in Function.</p>
<p>Hooks are functions that let you “hook into” React state and lifecycle features from function components. Hooks don’t work inside classes.</p>
<p><strong>State Hook</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Declare a new state variable, which we&#x27;ll call &quot;count&quot;</span></span><br><span class="line">  <span class="comment">// you can call useState(0) many times if you need more states</span></span><br><span class="line">  <span class="comment">// const [number, setNumber] = useState(12);  12 is initial value</span></span><br><span class="line">  <span class="comment">// const [data, setData] = useState(&#123;ob: 12&#125;); &#123;ob: 12&#125;;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//then update count in callback by call setCount(1)</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>useState is a Hook. We call it inside a function component to add some local state to it. React will preserve this state between re-renders. useState returns a pair: the current state value and a function that lets you update it. You can call this function from an event handler or somewhere else. It’s similar to this.setState in a class, except it doesn’t merge the old and new state together</p>
<p><strong>Effect Hook</strong><br>The Effect Hook, useEffect, adds the ability to perform side effects from a function component. It <code>serves the same purpose as componentDidMount, componentDidUpdate, and componentWillUnmount in React classes, but unified into a single API</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Similar to componentDidMount and componentDidUpdate:</span></span><br><span class="line">  <span class="comment">// also you can call useEffect many times.</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Update the document title using the browser API</span></span><br><span class="line">    <span class="comment">// this is call when DidMount and DidUpdate</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//useEffect only takes on parameter, callback but if the callback return a function</span></span><br><span class="line">    <span class="comment">//that returned function is called when DidUnmount!</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Effects are declared inside the component so they have access to its props and state. By default,<code> React runs the effects after every render — including the first render</code>.</p>
<p><strong>Rules for Hooks</strong></p>
<ul>
<li>Only call Hooks at the top level. Don’t call Hooks inside loops, conditions, or nested functions.</li>
<li>Only call Hooks from React function components. Don’t call Hooks from regular JavaScript functions.<h2 id="Class-Component"><a href="#Class-Component" class="headerlink" title="Class Component"></a>Class Component</h2>Class Component has a built-in state attribute, an object stores all states of such component, it must</li>
<li>inherit from React.Component</li>
<li>call super(props) if has custom constructor, you can also access this.props in its method!!!</li>
<li>have a render() method that returns an React element</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">	<span class="variable language_">super</span>(props);</span><br><span class="line">	<span class="comment">//init the state object, state is a object with many key:value pairs</span></span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">date</span>.<span class="title function_">toLocaleTimeString</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;now&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">xxx</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//add another state Id, setState is built-in method</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="title class_">Id</span>: <span class="number">2</span>&#125;);</span><br><span class="line">    <span class="comment">//another way to call setState with callback which must return &#123;k: v&#125; object used to update state store</span></span><br><span class="line">    <span class="comment">//setState((prestate, preprops)=&gt;&#123; return &#123;id: prestate.id + 1&#125;;&#125;);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="React-element-life-cycle-hooks"><a href="#React-element-life-cycle-hooks" class="headerlink" title="React element life cycle hooks"></a>React element life cycle hooks</h3><p>When we mount a React element to a Dom node(mount point), other remove it from that, several event happens, React already added some hooks to each event, you just need to implement that hook if you want to do thing.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">        <span class="attr">counter</span>: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//setup thing</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// do cleanup</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// pass state to child as props</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Sub</span> <span class="attr">counter</span>=<span class="string">&#123;this.state.counter&#125;/</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Data-state-Flow-Down"><a href="#Data-state-Flow-Down" class="headerlink" title="Data(state) Flow Down"></a>Data(state) Flow Down</h3><p><code>state is often called local or encapsulated, always set it and access it in the component who owns it, if child wants to access it, pass it as props to the child.</code></p>
<h3 id="Lift-state-up"><a href="#Lift-state-up" class="headerlink" title="Lift state up"></a>Lift state up</h3><p>Two child elements wants to modify same state(shared same one), this is impossible if each child has a state as it’s local so lift state up, after Lift state up, parent elements owns this state, that means parent is only person who can call setState to update it, but two children want to modify it and see same, so parent passes two props to child, one is the value, the other is callback defined by parent, each child calls the callback which setState() to update the shared state which owns by parent. child update parent’s state by parent’s callback.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">update</span> = <span class="variable language_">this</span>.<span class="property">update</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//must bind otherwise, you can not see this here!!!</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.update&#125;</span>&gt;</span>A:&#123;this.props.num&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">update</span> = <span class="variable language_">this</span>.<span class="property">update</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.update&#125;</span>&gt;</span>B:&#123;this.props.num&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">add</span> = <span class="variable language_">this</span>.<span class="property">add</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">prestate</span>) =&gt;</span> &#123;<span class="keyword">return</span> &#123;<span class="attr">counter</span>: prestate.<span class="property">counter</span> + n&#125;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">AButton</span> <span class="attr">num</span>=<span class="string">&#123;this.state.counter&#125;</span> <span class="attr">add</span>=<span class="string">&#123;this.add&#125;/</span>&gt;</span> <span class="tag">&lt;<span class="name">BButton</span> <span class="attr">num</span>=<span class="string">&#123;this.state.counter&#125;</span> <span class="attr">add</span>=<span class="string">&#123;this.add&#125;/</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">GButton</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h2 id="Composition-vs-Inheritance"><a href="#Composition-vs-Inheritance" class="headerlink" title="Composition vs Inheritance"></a>Composition vs Inheritance</h2><p>We recommend using composition instead of inheritance to reuse code between components, here are some good example to use composition</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FancyBorder</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">//put children directly here</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>&#x27;<span class="attr">FancyBorder</span> <span class="attr">FancyBorder-</span>&#x27; + <span class="attr">props.color</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">WelcomeDialog</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">//&lt;FancyBorder &gt;xxx&lt;/FancyBorder&gt; xxx are children</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">FancyBorder</span> <span class="attr">color</span>=<span class="string">&quot;blue&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;Dialog-title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Welcome</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;Dialog-message&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Thank you for visiting our spacecraft!</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">FancyBorder</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//instead of use children as a whole, we use specific property set by caller with proper &#x27;reuse&#x27; element</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SplitPane</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;SplitPane&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;SplitPane-left&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;props.left&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;SplitPane-right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;props.right&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//React Element as in expression</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">SplitPane</span> <span class="attr">left</span>=<span class="string">&#123;</span>&lt;<span class="attr">Contacts</span> /&gt;</span>&#125; right=&#123; <span class="tag">&lt;<span class="name">Chat</span> /&gt;</span>&#125;/&gt;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//combine attribute and children</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dialog</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">FancyBorder</span> <span class="attr">color</span>=<span class="string">&quot;blue&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;Dialog-title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;props.title&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;Dialog-message&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;props.message&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">FancyBorder</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SignUpDialog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleSignUp</span> = <span class="variable language_">this</span>.<span class="property">handleSignUp</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">login</span>: <span class="string">&#x27;&#x27;</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Dialog</span> <span class="attr">title</span>=<span class="string">&quot;Mars Exploration Program&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">message</span>=<span class="string">&quot;How should we refer to you?&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;this.state.login&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleSignUp&#125;</span>&gt;</span> Sign Me up! <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Dialog</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">login</span>: e.<span class="property">target</span>.<span class="property">value</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleSignUp</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`Welcome aboard, <span class="subst">$&#123;<span class="variable language_">this</span>.state.login&#125;</span>!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Controlled-Component"><a href="#Controlled-Component" class="headerlink" title="Controlled Component"></a>Controlled Component</h2><p>In HTML, form elements such as &lt;input&gt;, &lt;textarea&gt;, and &lt;select&gt; <code>typically maintain their own state</code> and update it based on user input. In React, mutable state is typically kept in the state property of components, and only updated with setState().</p>
<p>We can combine the two by <code>making the React state be the “single source of truth”</code>. Then the React component that renders a form also controls what happens in that form on subsequent user input. <code>An input form element whose value is controlled by React in this way is called a “controlled component”</code>.  React does not want HTML dom element maintain their own state, React wants state be ‘single source of truth’, that why React wants to control the value(state property).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NameForm</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">value</span>: <span class="string">&#x27;&#x27;</span>&#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleSubmit</span> = <span class="variable language_">this</span>.<span class="property">handleSubmit</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123; <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">value</span>: event.<span class="property">target</span>.<span class="property">value</span>&#125;); &#125;</span><br><span class="line">  <span class="title function_">handleSubmit</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;A name was submitted: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">value</span>);</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// value attribute comes from state which is controlled by React.</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Uncontrolled component</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NameForm</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleSubmit</span> = <span class="variable language_">this</span>.<span class="property">handleSubmit</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="comment">//create Ref</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">input</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleSubmit</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">//ref.current points to linked element</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;A name was submitted: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">input</span>.<span class="property">current</span>.<span class="property">value</span>);</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//link the Ref to &lt;input&gt; element</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span> Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.input&#125;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="React-Events"><a href="#React-Events" class="headerlink" title="React Events"></a>React Events</h2><p>React implements the standard Event API(W3C Spec) that’s same as Dom event except React named with different styles.</p>
<ul>
<li>React events are named using camelCase, rather than lowercase</li>
<li>With JSX you pass a function as the event handler, rather than a string.<br>In html<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;activateLasers()&quot;</span>&gt;</span></span><br><span class="line">  Activate Lasers</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>In React</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;activateLasers&#125;&gt;  <span class="title class_">Activate</span> <span class="title class_">Lasers</span></span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Note: if you refer to a method without () after it, such as onClick&#x3D;{this.handleClick}, you should bind that method otherwise you can’t use this in that handler</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//*experimental*</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoggingButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is:&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use this way.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoggingButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is:&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoggingButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  handleClick () &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is:&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Never use this way.</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> ()=&gt;</span> this.handleClick() &#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoggingButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  handleClick (id, e) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is:&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// use this way if you want to pass another parameter to event callback</span></span><br><span class="line">    <span class="comment">// by default, callback is called with only event parameter</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this,</span> <span class="attr">id</span>)&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Another difference is that you cannot return false to prevent default behavior in React. You must call preventDefault explicitly.</p>
<h2 id="treats-special-handling-for-Array"><a href="#treats-special-handling-for-Array" class="headerlink" title="{} treats special handling for Array"></a>{} treats special handling for Array</h2><p>As you know any expression can be in {}, if an Array in the {}, it will destruct the Array!! also note when use map, each item must has a key attribute, this is required by React.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">NumberList</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.<span class="property">numbers</span>;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">    <span class="comment">//no dom node for Fragment</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">React.Fragment</span> <span class="attr">key</span>=<span class="string">&#123;number.toString()&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;number&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;listItems&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">NumberList</span> <span class="attr">numbers</span>=<span class="string">&#123;numbers&#125;</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="Fragments"><a href="#Fragments" class="headerlink" title="Fragments"></a>Fragments</h2><p>A common pattern in React is for a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Columns</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>World<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React.Fragment supports attribute but &lt;&gt;&lt;/&gt; not</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Glossary</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.items.map(item =&gt; (</span></span><br><span class="line"><span class="language-xml">        // Without the `key`, React will fire a key warning</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">React.Fragment</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">dt</span>&gt;</span>&#123;item.term&#125;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">dd</span>&gt;</span>&#123;item.description&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Use-CSS-module"><a href="#Use-CSS-module" class="headerlink" title="Use CSS module"></a>Use CSS module</h2><p>CSS Modules allows the scoping of CSS by <code>automatically creating a unique classname of the format</code> this is done Webpack, it let you use the <code>same CSS class name in different files</code> without worrying about naming clashes, you write CSS files like before, nothing change for you when writing CSS file.</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//button.css</span></span><br><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//text.css</span></span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//use it in react app Button.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./button.css&#x27;</span>; <span class="comment">// Import css modules stylesheet as styles</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./text.css&#x27;</span>  <span class="comment">//not as a modules, use class directly</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// reference as a js object, must use this way</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#123;styles.error&#125;</span>&gt;</span>Error Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;text&quot;</span>&gt;</span>Error Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The result in html is this</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- This button has red background but not red text --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;Button_error_ax7yz&quot;</span>&gt;</span>Error Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>Error Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><ul>
<li><a href="https://www.freecodecamp.org/news/learning-react-roadmap-from-scratch-to-advanced-bff7735531b6/">How to Learn React</a></li>
<li><a href="https://reactjs.org/tutorial/tutorial.html">official tutorial</a></li>
<li><a href="iahttps://egghead.io/courses/the-beginner-s-guide-to-react">Video: react tutorial</a></li>
<li><a href="https://medium.com/front-end-weekly/what-are-npm-yarn-babel-and-webpack-and-how-to-properly-use-them-d835a758f987">react intro</a></li>
</ul>
]]></content>
      <categories>
        <category>react</category>
        <category>basic</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>component</tag>
        <tag>mount event</tag>
      </tags>
  </entry>
  <entry>
    <title>react-testing</title>
    <url>/2020/07/24/react-testing/</url>
    <content><![CDATA[<h1 id="Frameworks"><a href="#Frameworks" class="headerlink" title="Frameworks"></a>Frameworks</h1><p>There are two popular test frameworks for React application, one is <code>Enzyme</code> developed by Airebnb, Enzyme is used by React early days, later on React developed its own framework <code>React Testing Library(RTT)</code>, Both two frameworks are specific to React Application, <code>lack of assert, mock</code> which is provided by other framework like <code>chai, sinon</code> and Jest developed by FackBook.</p>
<span id="more"></span>
<p>Note: <code>chai, sinon</code> and Jest are independent, they can be used to test pure javascript code, they are test framework for javascript, not specific to React.</p>
<p>The popular way is <code>Enzyme + Jest</code> which is used early by Facebook, now Facebook suggests <code>RTT + Jest</code> both are developed by itself.</p>
<p><strong>Enzyme vs RTT</strong><br>Enzyme allows you to access the internal workings of your components. You can read and set the state, and you can mock children to make tests run faster, the render output is Component, you deal with that.</p>
<p>react-testing-library doesn’t give you any access to the implementation details. It renders the components and provides utility methods to interact with them(Dom output). The idea is that you should communicate with your application in the same way a user would. you act on Dom output not Component.</p>
<h2 id="RTT-usage"><a href="#RTT-usage" class="headerlink" title="RTT usage"></a>RTT usage</h2>]]></content>
      <categories>
        <category>react</category>
        <category>test</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>test framework</tag>
      </tags>
  </entry>
  <entry>
    <title>react_setup</title>
    <url>/2020/07/23/react-setup/</url>
    <content><![CDATA[<h1 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h1><h2 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h2><p>Yarn is a superset of NPM that solves many problems that NPM has, NPM stands for Node Package Manage , It keeps track of all the packages and their versions and allows the developer to easily update or remove these dependencies. All of these external dependencies are being stored inside a file called called package.json. when you have a node project, as package.json has all dependencies and version, you can easilier to setup a same env as the development.</p>
<span id="more"></span>
<p>Yarn is a package manager that uses NPM registry as its backend, but it’s more than npm, say NPM installs packages sequentially. This slows down the performance significantly. Yarn solves this problem by installing these packages in <strong>parallel</strong>.</p>
<p>you can install pkg into global or particular project, for global part, there are several configs that control where to install, the <code>global dir</code> is used to store installed packages the <code>global bin</code> are symbol links to binary file installed at <code>global dir</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn config list</span><br><span class="line"></span><br><span class="line"><span class="comment"># show global dir and bin path</span></span><br><span class="line">$ yarn global <span class="built_in">dir</span></span><br><span class="line">$ yarn global bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># change bin path: $prefix/bin</span></span><br><span class="line">$ yarn config <span class="built_in">set</span> prefix /root/yarn</span><br><span class="line"><span class="comment"># change global dir, make sure check it again</span></span><br><span class="line">$ yarn config <span class="built_in">set</span> global-folder /root/yarn</span><br><span class="line"><span class="comment"># but this will not change global-folder in .yarnrc if has</span></span><br><span class="line"><span class="comment"># you should change that file manually</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add/del package globally</span></span><br><span class="line">$ yarn global list  --depth=0</span><br><span class="line">$ yarn global add package</span><br><span class="line">$ yarn global remove package</span><br><span class="line"></span><br><span class="line"><span class="comment"># goto project dir show package for that project</span></span><br><span class="line">$ yarn list  --depth=0</span><br><span class="line">$ yarn add package</span><br><span class="line">$ yarn remove package</span><br><span class="line"></span><br><span class="line"><span class="comment"># show config of yarn</span></span><br><span class="line">$ yarn config list</span><br><span class="line"></span><br><span class="line"><span class="comment"># set repository taobao</span></span><br><span class="line">$ yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org -g</span><br><span class="line">$ yarn config <span class="built_in">set</span> disturl https://npm.taobao.org/dist --global</span><br><span class="line"></span><br><span class="line"><span class="comment"># reset to default repo</span></span><br><span class="line">$ yarn config <span class="built_in">set</span> registry https://registry.yarnpkg.com</span><br></pre></td></tr></table></figure>

<p>More command, refer to <a href="https://www.yarnpkg.com/en/docs/cli/">Yarn CLI</a>.</p>
<h2 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create react app"></a>create react app</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn global add create-react-app</span><br><span class="line">$ yarn create react-app test_app</span><br><span class="line"><span class="comment"># Starts the development server.</span></span><br><span class="line">$ <span class="built_in">cd</span> test_app</span><br><span class="line">$ yarn start</span><br><span class="line"><span class="comment"># Starts the test runner.</span></span><br><span class="line">$ yarn <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># at last all things seems ok, passed all test</span></span><br><span class="line"><span class="comment"># Bundles the app into static files for production, so that you can deploy this on your wbserver</span></span><br><span class="line"><span class="comment"># this will create a build dir with static files, deploy that</span></span><br><span class="line">$ yarn build</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==========================================deploy with online static server===========================</span></span><br><span class="line"><span class="comment"># For test only, you can deploy bundles file to surge which hosts static website for free with couples of days</span></span><br><span class="line"><span class="comment"># so that someone else outside can see what the website should be when it&#x27;s deployed.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install surge cli to deploy weserver on surge server http://surge.sh/</span></span><br><span class="line">$ yarn global add surge</span><br><span class="line"></span><br><span class="line"><span class="comment"># at the project dir run below commands (p means the path, -d means domain, the very first time need you configure email/password</span></span><br><span class="line">$ surge -p build -d your-domain.surge.sh</span><br><span class="line"><span class="comment"># but the subsequent call, this is not required)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Later after the first call edit package.json, under “scripts”:</span></span><br><span class="line"><span class="comment"># so that you add a new command to yar</span></span><br><span class="line"><span class="string">&quot;deploy&quot;</span>: <span class="string">&quot;yarn run build &amp;&amp; surge -p build -d jason_lkm.surge.sh&quot;</span></span><br><span class="line">$ yarn deploy</span><br><span class="line"><span class="comment"># ==========================================deploy local with static server===========================</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> test_app</span><br><span class="line">$ yarn global add serve</span><br><span class="line">$ serve -s build</span><br></pre></td></tr></table></figure>

<h2 id="use-json-mock-server-from-vs-code"><a href="#use-json-mock-server-from-vs-code" class="headerlink" title="use json mock server from vs code"></a>use json mock server from vs code</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># edit prj/package.json</span></span><br><span class="line"><span class="string">&quot;proxy&quot;</span>: <span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="debug-react-app-with-chrome"><a href="#debug-react-app-with-chrome" class="headerlink" title="debug react app with chrome"></a>debug react app with chrome</h2><ul>
<li>Install Chrome debugger for VS code</li>
<li>Use the following config for your launch.jsonfile to configure the VS Code debugger and put it inside .vscode in your root folder<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Chrome&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;chrome&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;url&quot;: &quot;http://localhost:3000&quot;,</span><br><span class="line">            &quot;webRoot&quot;: &quot;$&#123;workspaceRoot&#125;/src&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Start your React app by running yarn start in another terminal<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ BROWSER=none yarn start</span><br></pre></td></tr></table></figure></li>
<li>Start debugging in VS Code by pressing F5or by clicking the green debug icon<h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><a href="https://blog.usejournal.com/creating-a-react-app-from-scratch-f3c693b84658">Behide react-create-app</a></li>
</ul>
]]></content>
      <categories>
        <category>react</category>
        <category>setup</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>Yarn</tag>
        <tag>enzyme</tag>
      </tags>
  </entry>
  <entry>
    <title>qemu-kvm</title>
    <url>/2021/11/02/qemu-kvm/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>In this article, we only give you the knowledge of qemu-kvm without libvirt, say how to start vm by running qemu-kvm itself and others.</p>
<span id="more"></span>

<h1 id="Simulated-device"><a href="#Simulated-device" class="headerlink" title="Simulated device"></a>Simulated device</h1><p>qemu-kvm can simulate serial, block, serial, net device inside vm based on virtio driver, the simulated virtio devices is located at <code>/sys/class/virtio-ports/</code>, for simulated device, there are two sides need to be set from command line, backend in host, virtio in vm.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ qemu-kvm -chardev socket,<span class="built_in">id</span>=charch0,path=/var/run/xagent/vm-HZVsuboAJh-<span class="built_in">test</span>/xagent.sock -device virtserialport,bus=virtio-serial0.0,nr=1,chardev=charch0,<span class="built_in">id</span>=channel0,name=agent.channel.0 -serial unix:/var/run/agent/vm-HZVsuboAJh-<span class="built_in">test</span>/console.sock,server,nowait -device virtio-serial-pci,<span class="built_in">id</span>=virtio-serial0,bus=pci.0,addr=0x2</span><br><span class="line"></span><br><span class="line"><span class="comment"># check device name inside guest</span></span><br><span class="line">$ <span class="built_in">cat</span> /sys/class/virtio-ports/vport0p1/name</span><br><span class="line">agent.channel.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># check device id(major:minor) inside guest</span></span><br><span class="line">$ <span class="built_in">cat</span> /sys/class/virtio-ports/vport0p1/dev</span><br><span class="line">252:1</span><br><span class="line"></span><br><span class="line"><span class="comment"># echo hello&gt; /dev/vport0p1</span></span><br></pre></td></tr></table></figure>
<p><strong>Device Front End</strong><br>A device front end is how a device is presented to the guest. The type of device presented should match the hardware that the guest operating system is expecting to see. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check support front end device and specific options for each type</span></span><br><span class="line">$ /usr/libexec/qemu-kvm --device virtio-serial-pci,<span class="built_in">help</span></span><br><span class="line">virtio-serial-pci.event_idx=bool (on/off)</span><br><span class="line">virtio-serial-pci.ioeventfd=bool (on/off)</span><br><span class="line">virtio-serial-pci.multifunction=bool (on/off)</span><br><span class="line">virtio-serial-pci.rombar=uint32</span><br><span class="line">virtio-serial-pci.x-disable-pcie=bool (on/off)</span><br><span class="line">virtio-serial-pci.indirect_desc=bool (on/off)</span><br><span class="line">virtio-serial-pci.__com.redhat_rhel6_ctrl_guest_workaround=bool</span><br><span class="line">virtio-serial-pci.disable-modern=bool</span><br><span class="line">virtio-serial-pci.disable-legacy=OnOffAuto (on/off/auto)</span><br><span class="line">virtio-serial-pci.emergency-write=bool (on/off)</span><br><span class="line">virtio-serial-pci.command_serr_enable=bool (on/off)</span><br><span class="line">virtio-serial-pci.x-pcie-lnkctl-init=bool (on/off)</span><br><span class="line">virtio-serial-pci.max_ports=uint32</span><br><span class="line">virtio-serial-pci.page-per-vq=bool (on/off)</span><br><span class="line">virtio-serial-pci.x-pcie-deverr-init=bool (on/off)</span><br><span class="line">virtio-serial-pci.x-pcie-pm-init=bool (on/off)</span><br><span class="line">virtio-serial-pci.x-pcie-lnksta-dllla=bool (on/off)</span><br><span class="line">virtio-serial-pci.any_layout=bool (on/off)</span><br><span class="line">virtio-serial-pci.class=uint32</span><br><span class="line">virtio-serial-pci.addr=int32 (Slot and optional <span class="keyword">function</span> number, example: 06.0 or 06)</span><br><span class="line">virtio-serial-pci.migrate-extra=bool (on/off)</span><br><span class="line">virtio-serial-pci.modern-pio-notify=bool (on/off)</span><br><span class="line">virtio-serial-pci.vectors=uint32</span><br><span class="line">virtio-serial-pci.x-pcie-extcap-init=bool (on/off)</span><br><span class="line">virtio-serial-pci.virtio-backend=child&lt;virtio-serial-device&gt;</span><br><span class="line">virtio-serial-pci.x-ignore-backend-features=bool</span><br><span class="line">virtio-serial-pci.notify_on_empty=bool (on/off)</span><br><span class="line">virtio-serial-pci.iommu_platform=bool (on/off)</span><br><span class="line">virtio-serial-pci.ats=bool (on/off)</span><br><span class="line">virtio-serial-pci.virtio-pci-bus-master-bug-migration=bool (on/off)</span><br><span class="line">virtio-serial-pci.romfile=str</span><br><span class="line"></span><br><span class="line"><span class="comment"># check common options, refer to https://qemu-project.gitlab.io/qemu/system/invocation.html#hxtool-1</span></span><br><span class="line">/usr/libexec/qemu-kvm -d int -D /tmp/qemu_vm.log -trace <span class="built_in">enable</span>=* -kernel /home/data/github/cyun/utils/tips_useful_script/qemu/kernel-5.10.7 -initrd /home/data/github/cyun/utils/tips_useful_script/qemu/initramfs.img -nographic -append console=ttyS0 -qmp unix:/var/run/qmp.sock,server,nowait -serial mon:stdio -vnc 0.0.0.0:106 -chardev file,<span class="built_in">id</span>=mydev0,path=/tmp/test.s -device isa-serial,chardev=mydev0</span><br></pre></td></tr></table></figure>

<p><strong>A front end is often paired with a back end, which describes how the host’s resources are used in the emulation.</strong></p>
<p><strong>Device Back End</strong><br>The back end describes <code>how the data from the emulated device will be processed by QEMU</code>. The <strong>configuration of the back end is usually specific to the class of device being emulated</strong>. For example <code>serial devices will be backed by a --chardev</code> which can redirect the data to a file or socket or some other system. <code>Storage devices are handled by --blockdev</code> which will specify how blocks are handled, for example being stored in a qcow2 file or accessing a raw host disk partition. Back ends can sometimes be stacked to implement features like snapshots.</p>
<p><code>While the choice of back end is generally transparent to the guest</code>, there are cases where features will not be reported to the guest if the back end is unable to support it.</p>
<p><strong>Device Buses</strong><br>Most devices will exist on a BUS of some sort. Depending on the machine model you choose (-M foo) a number of buses will have been automatically created. In most cases the BUS a device is attached to can be inferred, for example <code>PCI devices are generally automatically allocated to the next free address of first PCI bus found</code>. However <strong>in complicated configurations you can explicitly specify what bus (bus&#x3D;ID) a device is attached to along with its address (addr&#x3D;N).</strong></p>
<p>Some devices, for example a PCI SCSI host controller, will add an additional buses to the system that other devices can be attached to. A hypothetical chain of devices might look like:</p>
<p><code>–device foo,bus=pci.0,addr=0,id=foo –device bar,bus=foo.0,addr=1,id=baz</code></p>
<p>which would be a bar device (with the ID of baz) which is attached to the first foo bus (foo.0) at address 1. The foo device which provides that bus is itself is attached to the first PCI bus (pci.0).</p>
<h2 id="serial-device-backend-chardev"><a href="#serial-device-backend-chardev" class="headerlink" title="serial device backend(chardev)"></a>serial device backend(chardev)</h2><p>Qemu char device uses below format for <strong>backend</strong>, more options refer to <a href="https://qemu-project.gitlab.io/qemu/system/invocation.html#hxtool-6">qemu chardev options</a></p>
<p><code>-chardev backend,id=id[,mux=on|off][,options]</code></p>
<p>Backend is one of: null, <code>socket, udp, file, pipe, console, serial, pty, stdio, tty, parallel and more...</code> . The specific backend will determine the applicable options. different types have different options for that specific type.</p>
<p><font color='red' size=4>All devices must have an id, which can be any string up to 127 characters long</font>. It is used to uniquely identify this device in other command line directives.</p>
<p><code>A character device may be used in multiplexing mode by multiple front-ends</code>. Specify mux&#x3D;on to enable this mode. A multiplexer is a “1:N” device, and here the “1” end is your specified chardev backend, and the “N” end is the various parts of QEMU that can talk to a chardev. by default it’s disabled</p>
<p><strong>Example</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-chardev file,<span class="built_in">id</span>=mydev0,path=/tmp/test.s \</span><br><span class="line">-device isa-serial,chardev=mydev0 \</span><br><span class="line"></span><br><span class="line">$ /usr/libexec/qemu-kvm -d int -D /tmp/qemu_vm.log -trace <span class="built_in">enable</span>=* -kernel /home/data/github/cyun/utils/tips_useful_script/qemu/kernel-5.10.7 -initrd /home/data/github/cyun/utils/tips_useful_script/qemu/initramfs.img -nographic -append console=ttyS0 -qmp unix:/var/run/qmp.sock,server,nowait -serial mon:stdio -vnc 0.0.0.0:106 -chardev file,<span class="built_in">id</span>=mydev0,path=/tmp/test.s -device isa-serial,chardev=mydev0</span><br><span class="line"><span class="comment"># in guest /dev/ttyS1 is front end as the ttyS0 is used for console!!!</span></span><br></pre></td></tr></table></figure>

<p>use virtio serial in the guest, in order to do this, you have to add a <code>virtio pci serial device(hub)</code> into the PCI bus, then under this virtio serial device, you can create serial and console port.</p>
<p>virtio-serial-pci &#x3D;&#x3D; virtio-serial</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-device virtio-serial-pci,<span class="built_in">id</span>=virtio_serial_pci0 \</span><br><span class="line">-chardev file,<span class="built_in">id</span>=mydev0,path=/tmp/test.s \</span><br><span class="line">-device virtserialport,chardev=mydev0,name=serial0,<span class="built_in">id</span>=vc1,bus=virtio_serial_pci0.0 \</span><br><span class="line">-chardev file,<span class="built_in">id</span>=mydev1,path=/tmp/test.c \</span><br><span class="line">-device virtconsole,chardev=mydev1,name=serial1,<span class="built_in">id</span>=vc2,bus=virtio_serial_pci0.0</span><br></pre></td></tr></table></figure>
<h3 id="Socket-option"><a href="#Socket-option" class="headerlink" title="Socket option"></a>Socket option</h3><p><code>-chardev socket,id=id[,TCP options or unix options][,server=on|off][,wait=on|off][,telnet=on|off][,websocket=on|off][,reconnect=seconds][,tls-creds=id][,tls-authz=id]</code></p>
<ul>
<li>Create a <code>two-way stream socket</code>, which can be either a TCP or a unix socket. A unix socket will be created if path is specified. Behaviour is undefined if TCP options are specified for a unix socket.</li>
<li>server&#x3D;on|off specifies that the socket shall be a listening socket.</li>
<li>wait&#x3D;on|off specifies that QEMU should not block waiting for a client to connect to a listening socket.</li>
<li>telnet&#x3D;on|off specifies that traffic on the socket should interpret telnet escape sequences.</li>
<li>websocket&#x3D;on|off specifies that the socket uses WebSocket protocol for communication.</li>
<li>reconnect sets the timeout for reconnecting on non-server sockets when the remote end goes away. qemu will delay this many seconds and then attempt to reconnect. Zero disables reconnecting, and is the default.</li>
<li>tls-creds requests enablement of the TLS protocol for encryption, and specifies the id of the TLS credentials to use for the handshake. The credentials must be previously created with the -object tls-creds argument.</li>
<li>tls-auth provides the ID of the QAuthZ authorization object against which the client’s x509 distinguished name will be validated. This object is only resolved at time of use, so can be deleted and recreated on the fly while the chardev server is active. If missing, it will default to denying access.</li>
</ul>
<p><em>TCP and unix socket options are given below:</em></p>
<p><code>TCP options: port=port[,host=host][,to=to][,ipv4=on|off][,ipv6=on|off][,nodelay=on|off]</code></p>
<ul>
<li><p>host for a listening socket specifies the local address to be bound. For a connecting socket species the remote host to connect to. host is optional for listening sockets. If not specified it defaults to 0.0.0.0.</p>
</li>
<li><p>port for a listening socket specifies the local port to be bound. For a connecting socket specifies the port on the remote host to connect to. port can be given as either a port number or a service name. port is required.</p>
</li>
<li><p>to is only relevant to listening sockets. If it is specified, and port cannot be bound, QEMU will attempt to bind to subsequent ports up to and including to until it succeeds. to must be specified as a port number.</p>
</li>
<li><p>ipv4&#x3D;on|off and ipv6&#x3D;on|off specify that either IPv4 or IPv6 must be used. If neither is specified the socket may use either protocol.</p>
</li>
<li><p>nodelay&#x3D;on|off disables the Nagle algorithm.</p>
</li>
</ul>
<p><code>unix options: path=path[,abstract=on|off][,tight=on|off]</code></p>
<ul>
<li>path specifies the local path of the unix socket. path is required. abstract&#x3D;on|off specifies the use of the abstract socket namespace, rather than the filesystem. Optional, defaults to false. tight&#x3D;on|off sets the socket length of abstract sockets to their minimum, rather than the full sun_path length. Optional, defaults to true.</li>
</ul>
<h3 id="Pty"><a href="#Pty" class="headerlink" title="Pty"></a>Pty</h3><p><code>-chardev pty,id=id</code>  </p>
<ul>
<li>Create a new pseudo-terminal on the host and connect to it. pty does not take any options.</li>
</ul>
<h2 id="Block-device-backend"><a href="#Block-device-backend" class="headerlink" title="Block device(backend)"></a>Block device(backend)</h2><h2 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h2><p><a href="https://qemu-project.gitlab.io/qemu/system/devices/usb.html">QEMU</a> can emulate a PCI UHCI, OHCI, EHCI or XHCI USB controller. You can plug virtual USB devices, QEMU will <code>automatically create and connect virtual USB hubs as necessary to connect multiple USB devices</code></p>
<p><strong>XHCI controller</strong><br>QEMU has XHCI host adapter support. The XHCI hardware design is much more virtualization-friendly when compared to EHCI and UHCI, thus XHCI emulation uses less resources (especially CPU). So if your guest supports XHCI (which should be the case for any operating system released around 2010 or later) we recommend using it:<br><code>qemu -device qemu-xhci</code>  or <code>qemu -device nec-usb-xhci</code></p>
<p><strong>XHCI supports USB 1.1, USB 2.0 and USB 3.0 devices</strong>, so this is the only controller you need. <strong>With only a single USB controller (and therefore only a single USB bus) present in the system there is no need to use the bus&#x3D; parameter when adding USB devices, as there is only one controller!!!</strong></p>
<p><strong>EHCI controller</strong><br>The QEMU EHCI Adapter supports USB 2.0 devices. It can be used either <code>standalone or with companion controllers (UHCI, OHCI) for USB 1.1 devices</code>. The <code>companion controller setup is more convenient to use because it provides a single USB bus supporting both USB 2.0 and USB 1.1 devices</code></p>
<p><strong>EHCI standalone</strong><br>When running <code>EHCI in standalone mode you can add UHCI or OHCI controllers for USB 1.1 devices too</code>. Each controller creates its own bus though, <code>so there are two completely separate USB buses:</code> One USB 1.1 bus driven by the UHCI controller and one USB 2.0 bus driven by the EHCI controller. <strong>Devices must be attached to the correct controller manually</strong></p>
<p><strong>EHCI compansion</strong><br><code>The UHCI and OHCI controllers can attach to a USB bus created by EHCI as companion controllers</code>. This is done by specifying the <code>masterbus</code> and <code>firstport</code> properties. masterbus specifies the bus name the controller should attach to. firstport specifies the first port the controller should attach to, which is needed as <code>usually one EHCI controller with six ports has three UHCI companion controllers with two ports each</code>.</p>
<p>Companion controller is defined as <code>multiple USB host controllers (EHCI/OHCI/UHCI) that are wired to the same physical connector</code> such that a device, depending on some characteristic like speed, will <code>be connected to a different controller even when plugged into the same connector</code>, so that for a port on EHCI bus, it can handle usb2.0 and usb1.1 devices, but from system views, you still see several controllers, each takes one PCI addresse!!!</p>
<p><font color='red'><strong>Bus selection for USB devices</strong></font></p>
<ul>
<li><p>XHCI only(support usb1.1, usb2.0, usb3.0), only one usb bus(<strong>Recommanded</strong>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  no need to set bus=xx as there is only one usb controller</span></span><br><span class="line">-device qemu-xhci \</span><br><span class="line">-device usb-tablet</span><br></pre></td></tr></table></figure></li>
<li><p>EHCI bus(usb2.0) + UCHI(OHCI)(usb1.1), two separate buses, usb devices must set <code>bus=x</code> manually.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># USB 1.1(uhci,ohci controller) bus will carry the name usb-bus.0</span></span><br><span class="line"><span class="comment"># usb2.0(ehci controller) will carry the name ehci.0</span></span><br><span class="line"><span class="comment"># usb3.0(xhci controller) will carry the name usb1.0</span></span><br><span class="line"><span class="comment"># must set bus for each usb device as there are two separate buses.</span></span><br><span class="line"><span class="comment"># The &#x27;-usb&#x27; switch will make qemu create the UHCI controller as part of the PIIX3 chipset.  The USB 1.1 bus will carry the name &quot;usb-bus.0&quot;.</span></span><br><span class="line">-usb                                                        \</span><br><span class="line">-device usb-ehci,<span class="built_in">id</span>=ehci                                    \</span><br><span class="line">-device usb-tablet,bus=usb-bus.0                            \</span><br><span class="line">-device usb-storage,bus=ehci.0,drive=usbstick</span><br></pre></td></tr></table></figure></li>
<li><p>Companion controller, only one usb bus.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># usb2.0 controller ehci six ports</span></span><br><span class="line"><span class="comment"># usb1.1 controller uchi(two ports) attached to ehci</span></span><br><span class="line">-device ich9-usb-ehci1,<span class="built_in">id</span>=usb,bus=pci.0,addr=0x3.0x7 \</span><br><span class="line">-device ich9-usb-uhci1,masterbus=usb.0,firstport=0,bus=pci.0,multifunction=on,addr=0x3 \</span><br><span class="line">-device ich9-usb-uhci2,masterbus=usb.0,firstport=2,bus=pci.0,addr=0x3.0x1 \</span><br><span class="line">-device ich9-usb-uhci3,masterbus=usb.0,firstport=4,bus=pci.0,addr=0x3.0x2 \</span><br><span class="line">-device usb-tablet</span><br><span class="line"></span><br><span class="line"><span class="comment"># inside guest</span></span><br><span class="line">$ lspci </span><br><span class="line">00:03.0 USB controller: Intel Corporation 82801I (ICH9 Family) USB UHCI Controller <span class="comment">#1 (rev 03)</span></span><br><span class="line">00:03.1 USB controller: Intel Corporation 82801I (ICH9 Family) USB UHCI Controller <span class="comment">#2 (rev 03)</span></span><br><span class="line">00:03.2 USB controller: Intel Corporation 82801I (ICH9 Family) USB UHCI Controller <span class="comment">#3 (rev 03)</span></span><br><span class="line">00:03.7 USB controller: Intel Corporation 82801I (ICH9 Family) USB2 EHCI Controller <span class="comment">#1 (rev 03)</span></span><br></pre></td></tr></table></figure>
<p>USB devices can be connected with the -device <code>usb-... </code>command line option or the device_add monitor command. Available devices are:</p>
</li>
<li><p>usb-mouse</p>
</li>
<li><p>usb-tablet</p>
</li>
<li><p>usb-kbd (Standard USB keyboard)</p>
</li>
<li><p>usb-audio</p>
</li>
<li><p>…</p>
</li>
</ul>
<p><strong>USB Hub</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Plugging a hub into UHCI port 2 works like this:</span></span><br><span class="line">-device usb-hub,bus=usb-bus.0,port=2</span><br><span class="line"><span class="comment"># Plugging a virtual USB stick into port 4 of the hub just plugged works this way:</span></span><br><span class="line">-device usb-storage,bus=usb-bus.0,port=2.4,drive=...</span><br></pre></td></tr></table></figure>

<h2 id="network-dev"><a href="#network-dev" class="headerlink" title="network dev"></a>network dev</h2><p>In order to use network device, you need to setup two sides front end and back end, but different types use different ways to setup backend, let’s say vhost-user and tap uses different way to setup back end, Here show tap interface as example, you have to do</p>
<ul>
<li>A bridge(ovs bridge or linux bridge) created by user.</li>
<li><code>A tap interface created by user or let qemu to create it automatically.</code></li>
<li>Up tap interface and add it to the bridge, either by user manually from command line or provide <code>/etc/qemu-ifup which is called by qemu automatically</code></li>
<li>Down tap interface and remove it from the bridge, either by user mannulay from command linie or provide <code>/etc/qemu-ifdown whih is called by qemu automatically</code></li>
</ul>
<p>There are severals way to setup network devices. In short, the <strong>-net is the legacy option</strong>, while -netdev comes in to solve issue present for -net, the <code>newest way -nic from 2.12 is easiest way to set up an interface.</code></p>
<ul>
<li>The -net option can create either a front-end or a back-end (but has disadvanges than -nic)</li>
<li><strong>-netdev can only create a back-end, use -device for front end</strong></li>
<li><strong>Asingle occurrence of -nic will create both a front-end and a back-end</strong>.</li>
</ul>
<p><strong>NOTE</strong><br>if you use libvirt, all these operations will be done by libvirt itself!!</p>
<h3 id="linux-bridge"><a href="#linux-bridge" class="headerlink" title="linux bridge"></a>linux bridge</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create a linux bridge or ovs bridge if ovs installed, or use docker bridge(docker0) which is linux bridge</span></span><br><span class="line">$ brctl show</span><br><span class="line">bridge name     bridge <span class="built_in">id</span>               STP enabled     interfaces</span><br><span class="line">docker0         8000.525400d85e6d       <span class="built_in">yes</span>             docker0-nic</span><br><span class="line">                                                        veth6e0057e</span><br><span class="line">                                                        vethdb3e964</span><br><span class="line">                                                        vnet0</span><br><span class="line"><span class="comment"># cat /etc/qemu-ifup</span></span><br><span class="line"><span class="comment">#! /bin/sh</span></span><br><span class="line">ifconfig <span class="string">&quot;<span class="variable">$1</span>&quot;</span> 0.0.0.0 up</span><br><span class="line">br=<span class="string">&#x27;docker0&#x27;</span></span><br><span class="line">brctl addif <span class="variable">$br</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chmod +x /etc/qemu-ifup</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cat /etc/qemu-ifdown</span></span><br><span class="line"><span class="comment">#! /bin/sh</span></span><br><span class="line">ifconfig <span class="string">&quot;<span class="variable">$1</span>&quot;</span> 0.0.0.0 down</span><br><span class="line">br=<span class="string">&#x27;docker0&#x27;</span></span><br><span class="line">brctl delif <span class="variable">$br</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chmod +x /etc/qemu-ifdown</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># run vm with network</span></span><br><span class="line">$ /usr/libexec/qemu-kvm -kernel kernel-4.14.121 -initrd initramfs.img -nographic -append <span class="string">&quot;console=ttyS0&quot;</span> -qmp unix:/var/run/qmp.sock,server,nowait -serial mon:stdio -netdev tap,<span class="built_in">id</span>=n1,ifname=tap0 -device virtio-net,netdev=n1</span><br><span class="line">$ brctl show</span><br><span class="line">bridge name     bridge <span class="built_in">id</span>               STP enabled     interfaces</span><br><span class="line">docker0         8000.525400d85e6d       <span class="built_in">yes</span>             docker0-nic</span><br><span class="line">                                                        tap0</span><br><span class="line">                                                        veth6e0057e</span><br><span class="line">                                                        vethdb3e964</span><br><span class="line">                                                        vnet0</span><br><span class="line"><span class="comment"># then inside vm, if you have dhcp client, it will try get ip or dns from docker0 whih must have dnsmsq runs on it, or other dhcp server</span></span><br><span class="line"><span class="comment"># if no dhcp client or server, you need to config an ip and setup dns server, route, then VM can access outside network!!!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====================================Expose vm port for outside like:ssh ==============================================</span></span><br><span class="line"><span class="comment"># As the it uses docker0 network like 172.17.0.x which is private address</span></span><br><span class="line"><span class="comment"># Inside VM it can access external network as docker already setup iptables for us automatically.</span></span><br><span class="line"><span class="comment"># but outside can NOT access VM as it&#x27;s private network, in order to let outisde acesss VM like port 22 or 80</span></span><br><span class="line"><span class="comment"># you have to expose VM port to Host Port by iptables like this.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># expose VM port 22 to host port 6622!!! VM IP: 172.17.0.2</span></span><br><span class="line">$ <span class="built_in">cat</span> exponse.sh</span><br><span class="line">iptables -t nat -C DOCKER ! -i docker0 -p tcp -m tcp --dport 6622 -j DNAT --to-destination 172.17.0.2:22 &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">  iptables -t nat -A DOCKER ! -i docker0 -p tcp -m tcp --dport 6622 -j DNAT --to-destination 172.17.0.2:22</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">iptables -t filter -C DOCKER -d 172.17.0.2/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 6622 -j ACCEPT &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">  iptables -A DOCKER -d 172.17.0.2/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 6622 -j ACCEPT</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># tap device created from command line</span></span><br><span class="line"><span class="variable">$ip</span> tuntap add dev tap0 mod tap</span><br><span class="line"><span class="variable">$ip</span> tuntap del dev tap0 mod tap</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.windriver.com/bundle/Wind_River_Linux_Platform_Virtualization_Features_Guide_9_1/page/tfx1501099048400.html">Tap port with linux bridge example</a></p>
<h3 id="ovs-bridge"><a href="#ovs-bridge" class="headerlink" title="ovs bridge"></a>ovs bridge</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show ovs bridge</span></span><br><span class="line">$ ovs-vsctl show</span><br><span class="line">23b480b4-4a65-4163-8840-439ef102449e</span><br><span class="line">    Bridge ovs-br0</span><br><span class="line">        Port enp0s3</span><br><span class="line">            Interface enp0s3</span><br><span class="line">        Port ovs-br0</span><br><span class="line">            Interface ovs-br0</span><br><span class="line">                <span class="built_in">type</span>: internal</span><br><span class="line">    ovs_version: <span class="string">&quot;2.16.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># touch /etc/ovs-ifup</span></span><br><span class="line"><span class="comment">#! /bin/sh</span></span><br><span class="line">ifconfig <span class="string">&quot;<span class="variable">$1</span>&quot;</span> 0.0.0.0 up</span><br><span class="line">br=<span class="string">&#x27;ovs-br0&#x27;</span></span><br><span class="line">ovs-vsctl add-port <span class="variable">$&#123;br&#125;</span> <span class="variable">$1</span></span><br><span class="line"><span class="comment"># chmod +x /etc/ovs-ifup</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># touch /etc/ovs-ifdown</span></span><br><span class="line"><span class="comment">#! /bin/sh</span></span><br><span class="line">ifconfig <span class="string">&quot;<span class="variable">$1</span>&quot;</span> 0.0.0.0 down</span><br><span class="line">br=<span class="string">&#x27;ovs-br0&#x27;</span></span><br><span class="line">ovs-vsctl del-port <span class="variable">$&#123;br&#125;</span> <span class="variable">$1</span></span><br><span class="line"><span class="comment"># chmod +x /etc/ovs-ifdown</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># run vm with network</span></span><br><span class="line">$ /usr/libexec/qemu-kvm -kernel kernel-4.14.121 -initrd initramfs.img -nographic -append <span class="string">&quot;console=ttyS0&quot;</span> -qmp unix:/var/run/qmp.sock,server,nowait -serial mon:stdio -netdev tap,<span class="built_in">id</span>=n1,ifname=vnet0,script=/etc/ovs-ifup,downscript=/etc/ovs-ifdown -device virtio-net,netdev=n1</span><br><span class="line"></span><br><span class="line">$ ovs-vsctl show</span><br><span class="line">23b480b4-4a65-4163-8840-439ef102449e</span><br><span class="line">    Bridge ovs-br0</span><br><span class="line">        Port vnet0</span><br><span class="line">            Interface vnet0</span><br><span class="line">        Port enp0s3</span><br><span class="line">            Interface enp0s3</span><br><span class="line">        Port ovs-br0</span><br><span class="line">            Interface ovs-br0</span><br><span class="line">                <span class="built_in">type</span>: internal</span><br><span class="line">    ovs_version: <span class="string">&quot;2.16.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vnet0 is created by qemu automatically</span></span><br><span class="line">$ ethtool  -i vnet0</span><br><span class="line">driver: tun</span><br><span class="line">version: 1.6</span><br><span class="line">firmware-version: </span><br><span class="line">expansion-rom-version: </span><br><span class="line">bus-info: tap         -----------------&gt;tap device</span><br><span class="line">supports-statistics: no</span><br><span class="line">supports-test: no</span><br><span class="line">supports-eeprom-access: no</span><br><span class="line">supports-register-dump: no</span><br><span class="line">supports-priv-flags: no</span><br><span class="line"></span><br><span class="line"><span class="comment"># then inside vm, if you have dhcp client, it will try get ip or dns from docker0 which has dnsmasq runs on it</span></span><br><span class="line"><span class="comment"># if no dhcp client or server, you need to config an ip and setup dns server, route, then VM can access outside network!!!</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.sbarjatiya.com/notes_wiki/index.php/Starting_qemu-kvm_VMs_with_openvswitch_networking">Tap device with OVS</a></p>
<h1 id="Kernel-and-rootfs"><a href="#Kernel-and-rootfs" class="headerlink" title="Kernel and rootfs"></a>Kernel and rootfs</h1><h1 id="Change-vm-setting-runtime"><a href="#Change-vm-setting-runtime" class="headerlink" title="Change vm setting runtime"></a>Change vm setting runtime</h1><p>The QEMU Monitor Protocol (QMP) is a JSON-based protocol which allows applications to communicate with a QEMU instance. there are several ways to talk with QEMU instance.</p>
<ul>
<li>virsh&#x2F;libvirt way using ‘qemu-monitor-command’ which provided by virsh command</li>
<li>if qemu-instance is not started by libvirt or no virsh installed, talk with <code>qmp socket</code> directly.<ul>
<li>use <code>telnet, nc</code> over <code>tcp qmp socket</code> with json format</li>
<li>use <code>nc</code>, <code>socat over</code> <code>unix qmp socket</code> with json format, while <code>qemu-shell</code> with human way as it’s python tool that does json encode for you.</li>
</ul>
</li>
</ul>
<p><code>Same thing happens for HMP(human machine protocol) as well who creates monitor socket for talking.</code></p>
<p><strong>Qemu parameters</strong>  </p>
<ul>
<li>-monitor dev    redirect the monitor to char device ‘dev’, will create monitor socket.</li>
<li>-qmp dev        like -monitor but opens in ‘control’ mode, will create qmp socket. same with &#x3D;&#x3D; <code>-monitor chardev=mon0,mode=control</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ==================================QMP socket===================================================================================</span></span><br><span class="line"><span class="comment"># -qmp tcp:localhost:1234,server,nowait</span></span><br><span class="line">Same as below (qmp uses tcp socket)</span><br><span class="line"><span class="comment"># -chardev socket,id=mon0,host=localhost,port=1234,server,nowait -mon chardev=mon0,mode=control</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># qemu instance sends output with pretty json</span></span><br><span class="line"><span class="comment"># -chardev socket,id=mon0,host=localhost,port=1234,server,nowait -mon chardev=mon0,mode=control,pretty=on</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># qmp uses unix socket</span></span><br><span class="line"><span class="comment"># -qmp unix:/var/run/qmp.sock,server,nowait</span></span><br><span class="line">$ nc -U /var/run/qmp.sock </span><br><span class="line">&#123;<span class="string">&quot;QMP&quot;</span>: &#123;<span class="string">&quot;version&quot;</span>: &#123;<span class="string">&quot;qemu&quot;</span>: &#123;<span class="string">&quot;nano&quot;</span>: 1, <span class="string">&quot;micro&quot;</span>: 0, <span class="string">&quot;minor&quot;</span>: 9, <span class="string">&quot;major&quot;</span>: 2&#125;, <span class="string">&quot;package&quot;</span>: <span class="string">&quot; (-dirty)&quot;</span>&#125;, <span class="string">&quot;capabilities&quot;</span>: []&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># -chardev socket,id=mon0,path=/var/run/qmp.sock,server,nowait -mon chardev=mon0,id=monitor,mode=control</span></span><br><span class="line">$ nc -U /var/run/qmp.sock </span><br><span class="line">&#123;<span class="string">&quot;QMP&quot;</span>: &#123;<span class="string">&quot;version&quot;</span>: &#123;<span class="string">&quot;qemu&quot;</span>: &#123;<span class="string">&quot;nano&quot;</span>: 1, <span class="string">&quot;micro&quot;</span>: 0, <span class="string">&quot;minor&quot;</span>: 9, <span class="string">&quot;major&quot;</span>: 2&#125;, <span class="string">&quot;package&quot;</span>: <span class="string">&quot; (-dirty)&quot;</span>&#125;, <span class="string">&quot;capabilities&quot;</span>: []&#125;&#125;$</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================================Monitor socket===================================================================================</span></span><br><span class="line"><span class="comment"># -chardev socket,id=mon0,path=/var/run/monitor.sock,server,nowait -mon chardev=mon0,id=monitor</span></span><br><span class="line"><span class="comment"># if monitor with readline mode(default), only support human like command and output is formated</span></span><br><span class="line">$ nc -U /var/run/monitor.sock </span><br><span class="line">QEMU 2.9.0.1 monitor - <span class="built_in">type</span> <span class="string">&#x27;help&#x27;</span> <span class="keyword">for</span> more information</span><br><span class="line">(qemu) </span><br><span class="line">(qemu) info block</span><br><span class="line">info block</span><br><span class="line">ide1-cd0: [not inserted]</span><br><span class="line">    Removable device: not locked, tray closed</span><br><span class="line"></span><br><span class="line">floppy0: [not inserted]</span><br><span class="line">    Removable device: not locked, tray closed</span><br><span class="line"></span><br><span class="line">sd0: [not inserted]</span><br><span class="line">    Removable device: not locked, tray closed</span><br></pre></td></tr></table></figure>

<p><strong>NOTE</strong></p>
<ul>
<li>both sockets(if monitor in control mode) support QMP(json based) and HMP(human machine protocol), they proivde different commands for similiar purpose, </li>
<li>The outputs are different, QMP has more details and with json output, HMP is different.</li>
<li>if monitor socket with readline mode, only support human commands and output is formated.</li>
</ul>
<p><font color='red'><strong>Suggestion</strong></font></p>
<ul>
<li><p>With virsh&#x2F;libvirt</p>
<ul>
<li>Use <code>virsh qemu-monitor-command</code></li>
</ul>
</li>
<li><p>Without virsh&#x2F;libvirt</p>
<ul>
<li>For CLI troubleshooting only, run monitor socket with readline mode, provides man subcommands</li>
<li>For programable, run monitor socket with control mode, or qmp socket, but you still has tool like <code>qemu-shell</code> which proivdes CLI for user to use with man subcommands. <strong>qemu-shell similiar to qemu-monitor-command</strong></li>
</ul>
</li>
<li>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># without qmp-shell, when -nographic option is in use, you can switch between the monitor console </span></span><br><span class="line"><span class="comment"># by pressing Ctrl–a, then press c, back to console ctrl-a, then press c again.</span></span><br><span class="line">$ ./qmp-shell  /var/run/qmp.sock</span><br><span class="line">Welcome to the QMP low-level shell!</span><br><span class="line">Connected to QEMU 2.12.0</span><br><span class="line"></span><br><span class="line">(QEMU) query-block</span><br><span class="line">&#123;<span class="string">&quot;return&quot;</span>: [&#123;<span class="string">&quot;locked&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;tray_open&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;io-status&quot;</span>: <span class="string">&quot;ok&quot;</span>, <span class="string">&quot;qdev&quot;</span>: <span class="string">&quot;/machine/unattached/device[22]&quot;</span>, <span class="string">&quot;removable&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;device&quot;</span>: <span class="string">&quot;ide1-cd0&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;unknown&quot;</span>&#125;, &#123;<span class="string">&quot;device&quot;</span>: <span class="string">&quot;floppy0&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;unknown&quot;</span>, <span class="string">&quot;qdev&quot;</span>: <span class="string">&quot;/machine/unattached/device[15]&quot;</span>, <span class="string">&quot;locked&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;removable&quot;</span>: <span class="literal">true</span>&#125;, &#123;<span class="string">&quot;device&quot;</span>: <span class="string">&quot;sd0&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;unknown&quot;</span>, <span class="string">&quot;locked&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;removable&quot;</span>: <span class="literal">true</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># HMP format</span></span><br><span class="line">$ ./qmp-shell -H /var/run/qmp.sock</span><br><span class="line">Welcome to the HMP shell!</span><br><span class="line">Connected to QEMU 2.12.0</span><br><span class="line"></span><br><span class="line">(QEMU) info block</span><br><span class="line">ide1-cd0: [not inserted]</span><br><span class="line">    Attached to:      /machine/unattached/device[22]</span><br><span class="line">    Removable device: not locked, tray closed</span><br><span class="line"></span><br><span class="line">floppy0: [not inserted]</span><br><span class="line">    Attached to:      /machine/unattached/device[15]</span><br><span class="line">    Removable device: not locked, tray closed</span><br><span class="line"></span><br><span class="line">sd0: [not inserted]</span><br><span class="line">    Removable device: not locked, tray closed</span><br><span class="line">(QEMU) </span><br><span class="line"></span><br><span class="line">$ ./qmp-shell -p /var/run/qmp.sock</span><br><span class="line">Welcome to the QMP low-level shell!</span><br><span class="line">Connected to QEMU 2.12.0</span><br><span class="line"></span><br><span class="line">(QEMU) query-block</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;return&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;locked&quot;</span>: <span class="literal">false</span>, </span><br><span class="line">            <span class="string">&quot;tray_open&quot;</span>: <span class="literal">false</span>, </span><br><span class="line">            <span class="string">&quot;io-status&quot;</span>: <span class="string">&quot;ok&quot;</span>, </span><br><span class="line">            <span class="string">&quot;qdev&quot;</span>: <span class="string">&quot;/machine/unattached/device[22]&quot;</span>, </span><br><span class="line">            <span class="string">&quot;removable&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">            <span class="string">&quot;device&quot;</span>: <span class="string">&quot;ide1-cd0&quot;</span>, </span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;unknown&quot;</span></span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;device&quot;</span>: <span class="string">&quot;floppy0&quot;</span>, </span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;unknown&quot;</span>, </span><br><span class="line">            <span class="string">&quot;qdev&quot;</span>: <span class="string">&quot;/machine/unattached/device[15]&quot;</span>, </span><br><span class="line">            <span class="string">&quot;locked&quot;</span>: <span class="literal">false</span>, </span><br><span class="line">            <span class="string">&quot;removable&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;device&quot;</span>: <span class="string">&quot;sd0&quot;</span>, </span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;unknown&quot;</span>, </span><br><span class="line">            <span class="string">&quot;locked&quot;</span>: <span class="literal">false</span>, </span><br><span class="line">            <span class="string">&quot;removable&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">(QEMU) </span><br></pre></td></tr></table></figure>
<h2 id="command-output"><a href="#command-output" class="headerlink" title="command output"></a>command output</h2><p>Most QMP commands</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;blockdev-add&quot;</span><br><span class="line">&quot;chardev-remove&quot;</span><br><span class="line">&quot;chardev-add&quot;</span><br><span class="line">&quot;query-cpu-definitions&quot;</span><br><span class="line">&quot;query-machines&quot;</span><br><span class="line">&quot;device-list-properties&quot;</span><br><span class="line">&quot;change-vnc-password&quot;</span><br><span class="line">&quot;nbd-server-stop&quot;</span><br><span class="line">&quot;nbd-server-add&quot;</span><br><span class="line">&quot;nbd-server-start&quot;</span><br><span class="line">&quot;query-block-jobs&quot;</span><br><span class="line">&quot;query-balloon&quot;</span><br><span class="line">&quot;query-migrate-capabilities&quot;</span><br><span class="line">&quot;migrate-set-capabilities&quot;</span><br><span class="line">&quot;query-migrate&quot;</span><br><span class="line">&quot;query-command-line-options&quot;</span><br><span class="line">&quot;query-uuid&quot;</span><br><span class="line">&quot;query-name&quot;</span><br><span class="line">&quot;query-spice&quot;</span><br><span class="line">&quot;query-vnc&quot;</span><br><span class="line">&quot;query-mice&quot;</span><br><span class="line">&quot;query-status&quot;</span><br><span class="line">&quot;query-kvm&quot;</span><br><span class="line">&quot;query-pci&quot;</span><br><span class="line">&quot;query-cpus&quot;</span><br><span class="line">&quot;query-blockstats&quot;</span><br><span class="line">&quot;query-block&quot;</span><br><span class="line">&quot;query-chardev&quot;</span><br><span class="line">&quot;query-events&quot;</span><br><span class="line">&quot;query-commands&quot;</span><br><span class="line">&quot;query-version&quot;</span><br><span class="line">&quot;human-monitor-command&quot;</span><br><span class="line">&quot;qmp_capabilities&quot;</span><br><span class="line">&quot;expire_password&quot;</span><br><span class="line">&quot;set_password&quot;</span><br><span class="line">&quot;block_set_io_throttle&quot;</span><br><span class="line">&quot;block_passwd&quot;</span><br><span class="line">&quot;query-fdsets&quot;</span><br><span class="line">&quot;remove-fd&quot;</span><br><span class="line">&quot;add-fd&quot;</span><br><span class="line">&quot;closefd&quot;</span><br><span class="line">&quot;getfd&quot;</span><br><span class="line">&quot;set_link&quot;</span><br><span class="line">&quot;balloon&quot;</span><br><span class="line">&quot;block_resize&quot;</span><br><span class="line">&quot;netdev_del&quot;</span><br><span class="line">&quot;netdev_add&quot;</span><br><span class="line">&quot;client_migrate_info&quot;</span><br><span class="line">&quot;migrate_set_downtime&quot;</span><br><span class="line">&quot;migrate_set_speed&quot;</span><br><span class="line">&quot;query-migrate-cache-size&quot;</span><br><span class="line">&quot;migrate-set-cache-size&quot;</span><br><span class="line">&quot;migrate_cancel&quot;</span><br><span class="line">&quot;migrate&quot;</span><br><span class="line">&quot;cpu-add&quot;</span><br><span class="line">&quot;cpu&quot;</span><br><span class="line">&quot;device_del&quot;</span><br><span class="line">&quot;device_add&quot;</span><br><span class="line">&quot;system_powerdown&quot;</span><br><span class="line">&quot;system_reset&quot;</span><br><span class="line">&quot;system_wakeup&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>QMP by virsh qemu-monitor-command</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 6095 is domain id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HMP protocol</span></span><br><span class="line">$ virsh qemu-monitor-command –hmp 6095 info block</span><br><span class="line">drive-virtio-disk0: removable=0 file=/export/jvirt/jcs-agent/instances/i-sm6pxr4068/vda backing_file=/export/jvirt/jcs-agent/instances/_base/img-8sdjnj4qbq backing_file_depth=1 ro=0 drv=qcow2 encrypted=0 bps=0 bps_rd=0 bps_wr=0 iops=0 iops_rd=0 iops_wr=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># QMP protocol --pretty means format json output</span></span><br><span class="line">$ virsh qemu-monitor-command  6095 --pretty <span class="string">&#x27;&#123; &quot;execute&quot;: &quot;query-block&quot;&#125;&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;return&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;device&quot;</span>: <span class="string">&quot;drive-virtio-disk0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;locked&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;removable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;inserted&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;iops_rd&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;image&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;backing-image&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;virtual-size&quot;</span>: 42949672960,</span><br><span class="line">            <span class="string">&quot;filename&quot;</span>: <span class="string">&quot;/export/jvirt/jcs-agent/instances/_base/img-8sdjnj4qbq&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cluster-size&quot;</span>: 65536,</span><br><span class="line">            <span class="string">&quot;format&quot;</span>: <span class="string">&quot;qcow2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;actual-size&quot;</span>: 24866193408,</span><br><span class="line">            <span class="string">&quot;format-specific&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;type&quot;</span>: <span class="string">&quot;qcow2&quot;</span>,</span><br><span class="line">              <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;compat&quot;</span>: <span class="string">&quot;1.1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;lazy-refcounts&quot;</span>: <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;dirty-flag&quot;</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;virtual-size&quot;</span>: 42949672960,</span><br><span class="line">          <span class="string">&quot;filename&quot;</span>: <span class="string">&quot;/export/jvirt/jcs-agent/instances/i-sm6pxr4068/vda&quot;</span>,</span><br><span class="line">          <span class="string">&quot;cluster-size&quot;</span>: 65536,</span><br><span class="line">          <span class="string">&quot;format&quot;</span>: <span class="string">&quot;qcow2&quot;</span>,</span><br><span class="line">          <span class="string">&quot;actual-size&quot;</span>: 21068431360,</span><br><span class="line">          <span class="string">&quot;format-specific&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;qcow2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;compat&quot;</span>: <span class="string">&quot;1.1&quot;</span>,</span><br><span class="line">              <span class="string">&quot;lazy-refcounts&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;backing-filename&quot;</span>: <span class="string">&quot;/export/jvirt/jcs-agent/instances/_base/img-8sdjnj4qbq&quot;</span>,</span><br><span class="line">          <span class="string">&quot;dirty-flag&quot;</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;iops_wr&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;ro&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;backing_file_depth&quot;</span>: 1,</span><br><span class="line">        <span class="string">&quot;drv&quot;</span>: <span class="string">&quot;qcow2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iops&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;bps_wr&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;backing_file&quot;</span>: <span class="string">&quot;/export/jvirt/jcs-agent/instances/_base/img-8sdjnj4qbq&quot;</span>,</span><br><span class="line">        <span class="string">&quot;encrypted&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;bps&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;bps_rd&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;file&quot;</span>: <span class="string">&quot;/export/jvirt/jcs-agent/instances/i-sm6pxr4068/vda&quot;</span>,</span><br><span class="line">        <span class="string">&quot;encryption_key_missing&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;unknown&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="string">&quot;libvirt-8302918&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>QMP over tcp socket</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># run your qemu instance:   -qmp tcp:127.0.0.1:12345,server,nowait</span></span><br><span class="line">$ /usr/libexec/qemu-kvm  -kernel ./kernel -initrd ./initramfs.img -nographic -append <span class="string">&quot;console=ttyS0&quot;</span> -qmp tcp:127.0.0.1:12345,server,nowait -serial mon:stdio</span><br><span class="line"></span><br><span class="line">[root@dev jason]<span class="comment"># nc localhost 12345</span></span><br><span class="line">&#123;<span class="string">&quot;QMP&quot;</span>: &#123;<span class="string">&quot;version&quot;</span>: &#123;<span class="string">&quot;qemu&quot;</span>: &#123;<span class="string">&quot;nano&quot;</span>: 1, <span class="string">&quot;micro&quot;</span>: 0, <span class="string">&quot;minor&quot;</span>: 9, <span class="string">&quot;major&quot;</span>: 2&#125;, <span class="string">&quot;package&quot;</span>: <span class="string">&quot; (-dirty)&quot;</span>&#125;, <span class="string">&quot;capabilities&quot;</span>: []&#125;&#125;</span><br><span class="line">&#123; <span class="string">&quot;execute&quot;</span>: <span class="string">&quot;qmp_capabilities&quot;</span> &#125; <span class="comment"># must run this firstly</span></span><br><span class="line">&#123;<span class="string">&quot;return&quot;</span>: &#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># HMP</span></span><br><span class="line">&#123;<span class="string">&quot;execute&quot;</span>: <span class="string">&quot;human-monitor-command&quot;</span>, <span class="string">&quot;arguments&quot;</span>: &#123;<span class="string">&quot;command-line&quot;</span>: <span class="string">&quot;info block&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;return&quot;</span>: <span class="string">&quot;ide1-cd0: [not inserted]\r\n    Removable device: not locked, tray closed\r\n\r\nfloppy0: [not inserted]\r\n    Removable device: not locked, tray closed\r\n\r\nsd0: [not inserted]\r\n    Removable device: not locked, tray closed\r\n&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># QMP</span></span><br><span class="line">&#123;<span class="string">&quot;execute&quot;</span>: <span class="string">&quot;query-block&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;return&quot;</span>: [&#123;<span class="string">&quot;io-status&quot;</span>: <span class="string">&quot;ok&quot;</span>, <span class="string">&quot;device&quot;</span>: <span class="string">&quot;ide1-cd0&quot;</span>, <span class="string">&quot;locked&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;removable&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;tray_open&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;unknown&quot;</span>&#125;, &#123;<span class="string">&quot;device&quot;</span>: <span class="string">&quot;floppy0&quot;</span>, <span class="string">&quot;locked&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;removable&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;unknown&quot;</span>&#125;, &#123;<span class="string">&quot;device&quot;</span>: <span class="string">&quot;sd0&quot;</span>, <span class="string">&quot;locked&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;removable&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;unknown&quot;</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctrl +C</span><br><span class="line"></span><br><span class="line">[root@dev jason]<span class="comment"># telnet 127.0.0.1 12345</span></span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br><span class="line">&#123;<span class="string">&quot;QMP&quot;</span>: &#123;<span class="string">&quot;version&quot;</span>: &#123;<span class="string">&quot;qemu&quot;</span>: &#123;<span class="string">&quot;nano&quot;</span>: 1, <span class="string">&quot;micro&quot;</span>: 0, <span class="string">&quot;minor&quot;</span>: 9, <span class="string">&quot;major&quot;</span>: 2&#125;, <span class="string">&quot;package&quot;</span>: <span class="string">&quot; (-dirty)&quot;</span>&#125;, <span class="string">&quot;capabilities&quot;</span>: []&#125;&#125;</span><br><span class="line">&#123; <span class="string">&quot;execute&quot;</span>: <span class="string">&quot;qmp_capabilities&quot;</span> &#125; <span class="comment"># must run this firstly</span></span><br><span class="line">&#123;<span class="string">&quot;return&quot;</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="string">&quot;execute&quot;</span>: <span class="string">&quot;query-commands&quot;</span> &#125; <span class="comment"># check all QMP commands support</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HMP</span></span><br><span class="line">&#123;<span class="string">&quot;execute&quot;</span>: <span class="string">&quot;human-monitor-command&quot;</span>, <span class="string">&quot;arguments&quot;</span>: &#123;<span class="string">&quot;command-line&quot;</span>: <span class="string">&quot;info block&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;return&quot;</span>: <span class="string">&quot;ide1-cd0: [not inserted]\r\n    Removable device: not locked, tray closed\r\n\r\nfloppy0: [not inserted]\r\n    Removable device: not locked, tray closed\r\n\r\nsd0: [not inserted]\r\n    Removable device: not locked, tray closed\r\n&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># QMP</span></span><br><span class="line">&#123;<span class="string">&quot;execute&quot;</span>: <span class="string">&quot;query-block&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;return&quot;</span>: [&#123;<span class="string">&quot;io-status&quot;</span>: <span class="string">&quot;ok&quot;</span>, <span class="string">&quot;device&quot;</span>: <span class="string">&quot;ide1-cd0&quot;</span>, <span class="string">&quot;locked&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;removable&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;tray_open&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;unknown&quot;</span>&#125;, &#123;<span class="string">&quot;device&quot;</span>: <span class="string">&quot;floppy0&quot;</span>, <span class="string">&quot;locked&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;removable&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;unknown&quot;</span>&#125;, &#123;<span class="string">&quot;device&quot;</span>: <span class="string">&quot;sd0&quot;</span>, <span class="string">&quot;locked&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;removable&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;unknown&quot;</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line">ctrl + &#125;</span><br><span class="line">telnet&gt;quit</span><br></pre></td></tr></table></figure>

<p><strong>QMP over unix socket</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /usr/libexec/qemu-kvm  -kernel ./kernel -initrd ./initramfs.img -nographic -append <span class="string">&quot;console=ttyS0&quot;</span>  -qmp unix:/var/run/qmp.sock,server,nowait -serial mon:stdio</span><br><span class="line">$ nc -U /var/run/qmp.sock</span><br><span class="line">&#123;<span class="string">&quot;QMP&quot;</span>: &#123;<span class="string">&quot;version&quot;</span>: &#123;<span class="string">&quot;qemu&quot;</span>: &#123;<span class="string">&quot;nano&quot;</span>: 1, <span class="string">&quot;micro&quot;</span>: 0, <span class="string">&quot;minor&quot;</span>: 9, <span class="string">&quot;major&quot;</span>: 2&#125;, <span class="string">&quot;package&quot;</span>: <span class="string">&quot; (-dirty)&quot;</span>&#125;, <span class="string">&quot;capabilities&quot;</span>: []&#125;&#125;</span><br><span class="line">&#123; <span class="string">&quot;execute&quot;</span>: <span class="string">&quot;qmp_capabilities&quot;</span> &#125; <span class="comment"># must run this firstly</span></span><br><span class="line">&#123;<span class="string">&quot;return&quot;</span>: &#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># HMP</span></span><br><span class="line">&#123;<span class="string">&quot;execute&quot;</span>: <span class="string">&quot;human-monitor-command&quot;</span>, <span class="string">&quot;arguments&quot;</span>: &#123;<span class="string">&quot;command-line&quot;</span>: <span class="string">&quot;info block&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;return&quot;</span>: <span class="string">&quot;ide1-cd0: [not inserted]\r\n    Removable device: not locked, tray closed\r\n\r\nfloppy0: [not inserted]\r\n    Removable device: not locked, tray closed\r\n\r\nsd0: [not inserted]\r\n    Removable device: not locked, tray closed\r\n&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h1 id="disk-image"><a href="#disk-image" class="headerlink" title="disk image"></a>disk image</h1><p>Different hypervisor softwares uses different image format, here is a list of them.</p>
<ul>
<li><p><code>VDI is the native format of VirtualBox</code>. Other virtualization software generally don’t support VDI</p>
</li>
<li><p><code>VMDK is developed by and for VMWare</code>, but <strong>VirtualBox also support it</strong>. <font color='red'>This format might be the the best choice for you because you want wide compatibility with other virtualization software. it has smaller disk size than qcow2</font></p>
</li>
<li><p><code>VHD is the native format of Microsoft Virtual PC</code>. Windows Server <code>2012 introduced VHDX as the successor to VHD</code>, but VirtualBox does not support VHDX.</p>
</li>
<li><p><code>QCOW is the old original version of the qcow format</code>. It has been <code>superseded by qcow2</code>, which VirtualBox does not support.</p>
</li>
<li><p><code>QED was an abandoned enhancement of qcow2</code>. QEMU advises against using QED(not use it).</p>
</li>
</ul>
<p><strong>qemu-img is a tool which supports converting from one image format to another. if you want to run VM between hypervisors</strong></p>
<h2 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a>Operation</h2><p>qemu-img allows you to <code>create, convert and modify images offline</code>. It can handle all image formats supported by QEMU</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ qemu-img create -f qcow2 /var/lib/libvirt/images/disk1.img 10G</span><br><span class="line"></span><br><span class="line"><span class="comment"># Raw type: Raw disk image format is default. This format has the advantage of being simple and easily exportable to all other emulators</span></span><br><span class="line">$ <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/var/lib/libvirt/images/disk1.img bs=2M count=5120 status=progress</span><br><span class="line">$ qemu-img create -f raw /var/lib/libvirt/images/disk1.img 10G</span><br><span class="line">$ qemu-img info /var/lib/libvirt/images/disk1.img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># vhd to qcow2</span></span><br><span class="line">$ qemu-img convert -p -f vpc -O qcow2 centos6.9.vhd centos6.9.qcow2</span><br><span class="line"></span><br><span class="line"><span class="comment"># vmdk to qcow</span></span><br><span class="line">$ qemu-img convert -p -f vmdk -O qcow2 centos6.9.vmdk centos6.9.qcow2</span><br><span class="line"></span><br><span class="line"><span class="comment"># resize a disk, add 3G to guest disk</span></span><br><span class="line"><span class="comment"># Can&#x27;t resize an image which has snapshots</span></span><br><span class="line"><span class="comment"># Note the new 3G is not seen by guest right now you have to create partition on it using parted command</span></span><br><span class="line">$ qemu-img resize data.qcow2 +3G</span><br><span class="line"></span><br><span class="line"><span class="comment"># shrink the free space(not used, unallocated in guest)</span></span><br><span class="line">$ qemu-img resize --shrink data.qcow2 -3G</span><br><span class="line"></span><br><span class="line"><span class="comment"># to 100G</span></span><br><span class="line">$ qemu-img resize data.qcow2 100G</span><br><span class="line"></span><br><span class="line">$ qemu-img info data.qcow2</span><br><span class="line"></span><br><span class="line"><span class="comment"># create snapshots of image(snapshot stores in image itself)</span></span><br><span class="line">$ qemu-img snapshot -c org CentOS-7-x86_64-GenericCloud.qcow2</span><br><span class="line"></span><br><span class="line"><span class="comment"># show snapshots of image</span></span><br><span class="line">$ qemu-img snapshot -l CentOS-7-x86_64-GenericCloud.qcow2 </span><br><span class="line">Snapshot list:</span><br><span class="line">ID        TAG                 VM SIZE                DATE       VM CLOCK</span><br><span class="line">1         1646107061             268M 2022-03-01 11:57:41   00:15:03.857</span><br><span class="line">2         1646107194             268M 2022-03-01 11:59:54   00:17:14.997</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete snapshots with given ID</span></span><br><span class="line">$ qemu-img snapshot -d  1  CentOS-7-x86_64-GenericCloud.qcow2</span><br></pre></td></tr></table></figure>

<p><strong>NOTE: make sure make a copy of disk before operation</strong></p>
<h2 id="backing-file-qcow2"><a href="#backing-file-qcow2" class="headerlink" title="backing file(qcow2)"></a>backing file(qcow2)</h2><p>In essence, QCOW2(Qemu <code>Copy-On-Write</code>) gives you an ability to create a base-image, and create several ‘disposable’ copy-on-write overlay disk images on top of <code>the base image(also called backing file)</code>. Backing files and overlays are extremely useful to rapidly instantiate thin-privisoned virtual machines(more on it below). Especially quite useful in development &amp; test environments, so that one could quickly <code>revert to a known state &amp; discard the overlay</code>. It can also be used to <code>start 100 virtual machines from a common backing image, thus saving space</code>.</p>
<p><strong>use case</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.--------------.    .-------------.    .-------------.    .-------------.</span><br><span class="line">|              |    |             |    |             |    |             |</span><br><span class="line">| RootBase     |&lt;---| Overlay-1   |&lt;---| Overlay-1A  &lt;--- | Overlay-1B  |</span><br><span class="line">| (raw/qcow2)  |    | (qcow2)     |    | (qcow2)     |    | (qcow2)     |</span><br><span class="line">&#x27;--------------&#x27;    &#x27;-------------&#x27;    &#x27;-------------&#x27;    &#x27;-------------&#x27;</span><br><span class="line"></span><br><span class="line">The above figure illustrates - RootBase is the backing file for Overlay-1, which in turn is backing file for Overlay-2, which in turn is backing file for Overlay-3.</span><br><span class="line"></span><br><span class="line">.-----------.   .-----------.   .------------.  .------------.  .------------.</span><br><span class="line">|           |   |           |   |            |  |            |  |            |</span><br><span class="line">| RootBase  |&lt;--- Overlay-1 |&lt;--- Overlay-1A &lt;--- Overlay-1B &lt;--- Overlay-1C |</span><br><span class="line">|           |   |           |   |            |  |            |  | (Active)   |</span><br><span class="line">&#x27;-----------&#x27;   &#x27;-----------&#x27;   &#x27;------------&#x27;  &#x27;------------&#x27;  &#x27;------------&#x27;</span><br><span class="line">   ^    ^</span><br><span class="line">   |    |</span><br><span class="line">   |    |       .-----------.    .------------.</span><br><span class="line">   |    |       |           |    |            |</span><br><span class="line">   |    &#x27;-------| Overlay-2 |&lt;---| Overlay-2A |</span><br><span class="line">   |            |           |    | (Active)   |</span><br><span class="line">   |            &#x27;-----------&#x27;    &#x27;------------&#x27;</span><br><span class="line">   |</span><br><span class="line">   |</span><br><span class="line">   |            .-----------.    .------------.</span><br><span class="line">   |            |           |    |            |</span><br><span class="line">   &#x27;------------| Overlay-3 |&lt;---| Overlay-3A |</span><br><span class="line">                |           |    | (Active)   |</span><br><span class="line">                &#x27;-----------&#x27;    &#x27;------------&#x27;</span><br><span class="line"></span><br><span class="line">The above figure is just another representation which indicates, we can use a &#x27;single&#x27; backing file, and create several overlays -- which can be used further, to create overlays on top of them.</span><br><span class="line"></span><br><span class="line">NOTE: Backing files are always opened read-only. In other words, once an overlay is created, its backing file should not be modified(as the overlay depends on a particular state of the backing file)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># base &lt;- sn1 &lt;- sn2 &lt;- sn3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create sn1</span></span><br><span class="line">$ qemu-img create -b /home/data/tmp/base.img -f qcow2 /home/data/tmp/sn1.qcow2</span><br><span class="line">$ qemu-img info /home/data/tmp/sn1.qcow2</span><br><span class="line">qemu-img info /home/data/tmp/sn1.qcow2</span><br><span class="line">image: /home/data/tmp/sn1.qcow2</span><br><span class="line">file format: qcow2</span><br><span class="line">virtual size: 25G (26843545600 bytes)</span><br><span class="line">disk size: 196K</span><br><span class="line">cluster_size: 65536</span><br><span class="line">backing file: /home/data/tmp/base.img</span><br><span class="line">Format specific information:</span><br><span class="line">    compat: 1.1</span><br><span class="line">    lazy refcounts: <span class="literal">false</span></span><br><span class="line">    refcount bits: 16</span><br><span class="line">    corrupt: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create sn2</span></span><br><span class="line">$ qemu-img create -b /home/data/tmp/sn1.qcow2 -f qcow2 /home/data/tmp/sn2.qcow2</span><br><span class="line">$ qemu-img info /home/data/tmp/sn2.qcow2</span><br><span class="line">image: /home/data/tmp/sn2.qcow2</span><br><span class="line">file format: qcow2</span><br><span class="line">virtual size: 25G (26843545600 bytes)</span><br><span class="line">disk size: 196K</span><br><span class="line">cluster_size: 65536</span><br><span class="line">backing file: /home/data/tmp/sn1.qcow2</span><br><span class="line">Format specific information:</span><br><span class="line">    compat: 1.1</span><br><span class="line">    lazy refcounts: <span class="literal">false</span></span><br><span class="line">    refcount bits: 16</span><br><span class="line">    corrupt: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create sn3</span></span><br><span class="line">$ qemu-img create -b /home/data/tmp/sn2.qcow2 -f qcow2 /home/data/tmp/sn3.qcow2</span><br><span class="line">$ qemu-img info /home/data/tmp/sn3.qcow2</span><br><span class="line">image: /home/data/tmp/sn3.qcow2</span><br><span class="line">file format: qcow2</span><br><span class="line">virtual size: 25G (26843545600 bytes)</span><br><span class="line">disk size: 196K</span><br><span class="line">cluster_size: 65536</span><br><span class="line">backing file: /home/data/tmp/sn2.qcow2</span><br><span class="line">Format specific information:</span><br><span class="line">    compat: 1.1</span><br><span class="line">    lazy refcounts: <span class="literal">false</span></span><br><span class="line">    refcount bits: 16</span><br><span class="line">    corrupt: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># an entire backing chain can be recursively </span></span><br><span class="line">$ qemu-img info --backing-chain /home/data/tmp/sn3.qcow2</span><br><span class="line">image: /home/data/tmp/sn3.qcow2</span><br><span class="line">file format: qcow2</span><br><span class="line">virtual size: 25G (26843545600 bytes)</span><br><span class="line">disk size: 196K</span><br><span class="line">cluster_size: 65536</span><br><span class="line">backing file: /home/data/tmp/sn2.qcow2</span><br><span class="line">Format specific information:</span><br><span class="line">    compat: 1.1</span><br><span class="line">    lazy refcounts: <span class="literal">false</span></span><br><span class="line">    refcount bits: 16</span><br><span class="line">    corrupt: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">image: /home/data/tmp/sn2.qcow2</span><br><span class="line">file format: qcow2</span><br><span class="line">virtual size: 25G (26843545600 bytes)</span><br><span class="line">disk size: 196K</span><br><span class="line">cluster_size: 65536</span><br><span class="line">backing file: /home/data/tmp/sn1.qcow2</span><br><span class="line">Format specific information:</span><br><span class="line">    compat: 1.1</span><br><span class="line">    lazy refcounts: <span class="literal">false</span></span><br><span class="line">    refcount bits: 16</span><br><span class="line">    corrupt: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">image: /home/data/tmp/sn1.qcow2</span><br><span class="line">file format: qcow2</span><br><span class="line">virtual size: 25G (26843545600 bytes)</span><br><span class="line">disk size: 196K</span><br><span class="line">cluster_size: 65536</span><br><span class="line">backing file: /home/data/tmp/base.img</span><br><span class="line">Format specific information:</span><br><span class="line">    compat: 1.1</span><br><span class="line">    lazy refcounts: <span class="literal">false</span></span><br><span class="line">    refcount bits: 16</span><br><span class="line">    corrupt: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">image: /home/data/tmp/base.img</span><br><span class="line">file format: raw</span><br><span class="line">virtual size: 25G (26843545600 bytes)</span><br><span class="line">disk size: 16M</span><br><span class="line"></span><br><span class="line"><span class="comment"># size of overlays is smaller!!!</span></span><br><span class="line">$ <span class="built_in">ls</span>  -alh sn*.qcow2</span><br><span class="line">-rw-r--r-- 1 root root 193K Aug  2 16:38 sn1.qcow2</span><br><span class="line">-rw-r--r-- 1 root root 193K Aug  2 16:39 sn2.qcow2</span><br><span class="line">-rw-r--r-- 1 root root 193K Aug  2 16:39 sn3.qcow2</span><br><span class="line"></span><br><span class="line"><span class="comment"># merge sn2 with sn1(commit sn2 changes to sn1)</span></span><br><span class="line">$ qemu-img commit /home/data/tmp/sn2.qcow2</span><br><span class="line">$ qemu-img rebase -u -b /home/data/tmp/sn1.qcow2 /home/data/tmp/sn3.qcow2</span><br><span class="line"><span class="comment"># we need to rebase sn3 as before it points to sn2 as backing file!!!</span></span><br><span class="line"></span><br><span class="line">$ qemu-img info --backing-chain /home/data/tmp/sn3.qcow2</span><br><span class="line">image: /home/data/tmp/sn3.qcow2</span><br><span class="line">file format: qcow2</span><br><span class="line">virtual size: 25G (26843545600 bytes)</span><br><span class="line">disk size: 196K</span><br><span class="line">cluster_size: 65536</span><br><span class="line">backing file: /home/data/tmp/sn1.qcow2</span><br><span class="line">Format specific information:</span><br><span class="line">    compat: 1.1</span><br><span class="line">    lazy refcounts: <span class="literal">false</span></span><br><span class="line">    refcount bits: 16</span><br><span class="line">    corrupt: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">image: /home/data/tmp/sn1.qcow2</span><br><span class="line">file format: qcow2</span><br><span class="line">virtual size: 25G (26843545600 bytes)</span><br><span class="line">disk size: 196K</span><br><span class="line">cluster_size: 65536</span><br><span class="line">backing file: /home/data/tmp/base.img</span><br><span class="line">Format specific information:</span><br><span class="line">    compat: 1.1</span><br><span class="line">    lazy refcounts: <span class="literal">false</span></span><br><span class="line">    refcount bits: 16</span><br><span class="line">    corrupt: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">image: /home/data/tmp/base.img</span><br><span class="line">file format: raw</span><br><span class="line">virtual size: 25G (26843545600 bytes)</span><br><span class="line">disk size: 16M</span><br></pre></td></tr></table></figure>

<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="Boot-with-disk-x2F-diskless"><a href="#Boot-with-disk-x2F-diskless" class="headerlink" title="Boot with disk&#x2F;diskless"></a>Boot with disk&#x2F;diskless</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># root filesystem is in an ext2 &quot;hard disk&quot;</span></span><br><span class="line">$ /usr/libexec/qemu-kvm -kernel normal/bzImage -drive file=rootfs.ext2</span><br><span class="line"></span><br><span class="line"><span class="comment"># root filesystem is in initramfs</span></span><br><span class="line">$ /usr/libexec/qemu-kvm -kernel normal/bzImage -initrd initramfs.img</span><br><span class="line"><span class="comment"># full command to run</span></span><br><span class="line">$ /usr/libexec/qemu-kvm  -kernel normal/bzImage -initrd initramfs.img -nographic -append <span class="string">&quot;console=ttyS0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># root filesystem is built in kernel</span></span><br><span class="line">$ /usr/libexec/qemu-kvm -kernel with_initramfs/bzImage</span><br><span class="line"><span class="comment"># Neither -drive nor -initrd are given.</span></span><br><span class="line"><span class="comment"># with_initramfs/bzImage is a kernel compiled with options identical to normal/bzImage, except for one: CONFIG_INITRAMFS_SOURCE=initramfs.img pointing to the exact same CPIO as from the -initrd example.</span></span><br></pre></td></tr></table></figure>

<h2 id="how-to-terminate-qemu-process-from-console"><a href="#how-to-terminate-qemu-process-from-console" class="headerlink" title="how to terminate qemu process from console"></a>how to terminate qemu process from console</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># must have  -serial mon:stdio, otherwise Ctrl+A, then `X` not working</span></span><br><span class="line">$ /usr/libexec/qemu-kvm  -kernel ./kernel -initrd ./initramfs.img -nographic -append <span class="string">&quot;console=ttyS0&quot;</span>  -qmp unix:/var/run/qmp.sock,server,nowait -serial mon:stdio</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Ctrl + A</code>, then press <code>X</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ virt-install --boot kernel=./kernel,initrd=./initramfs.img,kernel_args=<span class="string">&quot;console=ttyS0,115200n8&quot;</span> --name <span class="variable">$VM_NAME</span> --memory 500 --vcpus 1 --disk none --os-type linux --graphics none --network default</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Ctrl + ]</code> to quit virt-install</li>
</ul>
<h2 id="how-to-start-qemu-with-vnc"><a href="#how-to-start-qemu-with-vnc" class="headerlink" title="how to start qemu with vnc"></a>how to start qemu with vnc</h2><p>Add vnc parameter with specified ID, qemu-process will listen on particular port <code>as for vnc id 0==5900</code>, so id 88 means qemu-process will listen on 5988.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">id</span>=88</span><br><span class="line">$ /usr/libexec/qemu-kvm  -kernel ./kernel -initrd ./initramfs.img -nographic -append <span class="string">&quot;console=ttyS0&quot;</span>  -qmp unix:/var/run/qmp.sock,server,nowait -serial mon:stdio -vnc 0.0.0.0:<span class="variable">$id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># OR let qemu select the vnc port automatically</span></span><br><span class="line">$ /usr/libexec/qemu-kvm  -kernel ./kernel -initrd ./initramfs.img -nographic -append <span class="string">&quot;console=ttyS0&quot;</span>  -qmp unix:/var/run/qmp.sock,server,nowait -serial mon:stdio -vnc 0.0.0.0</span><br><span class="line"></span><br><span class="line">$ netstat -nltp | grep kvm</span><br><span class="line">5:tcp        0      0 0.0.0.0:5988            0.0.0.0:*               LISTEN      8566/qemu-kvm  </span><br></pre></td></tr></table></figure>

<h2 id="how-to-mount-raw-disk"><a href="#how-to-mount-raw-disk" class="headerlink" title="how to mount raw disk"></a>how to mount raw disk</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create raw disk by dd or qemu-img create</span></span><br><span class="line">$ <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=disk.raw bs=1024k seek=25600 count=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># check disk info (type) etc</span></span><br><span class="line">$ qemu-img info disk.raw</span><br><span class="line">image: disk.raw</span><br><span class="line">file format: raw</span><br><span class="line">virtual size: 25G (26843545600 bytes)</span><br><span class="line">disk size: 13M</span><br><span class="line"></span><br><span class="line"><span class="comment"># format with xfs</span></span><br><span class="line">$ mkfs.xfs disk.raw</span><br><span class="line"></span><br><span class="line">$ blkid disk.raw</span><br><span class="line">disk.raw: UUID=<span class="string">&quot;aa26d14d-267f-477b-b1a1-3848c448a0b3&quot;</span> TYPE=<span class="string">&quot;xfs&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">########################################### mount raw disk ######################</span></span><br><span class="line"><span class="comment"># make disk image as a block device!!!</span></span><br><span class="line"><span class="comment"># The -f option will search for the next free loop device to attach the image to. </span></span><br><span class="line"><span class="comment"># The -P option will trigger a scan for partitions on the attached image and create devices for each partition detected</span></span><br><span class="line"><span class="comment"># losetup only supports raw disk, not qcow2</span></span><br><span class="line"><span class="comment">#================ one way ====================================</span></span><br><span class="line">$ losetup -f -P disk.raw</span><br><span class="line">$ losetup -l</span><br><span class="line">NAME       SIZELIMIT OFFSET AUTOCLEAR RO BACK-FILE</span><br><span class="line">/dev/loop0         0      0         0  0 /root/jason/disk.raw</span><br><span class="line"></span><br><span class="line"><span class="comment"># mount block device to a dir, then we can access its files</span></span><br><span class="line">$ mount /dev/loop0  /tmp/raw</span><br><span class="line"></span><br><span class="line"><span class="comment">#================ another way ====================================</span></span><br><span class="line">$ mount -t xfs disk.raw /mnt/disk</span><br></pre></td></tr></table></figure>

<h2 id="after-enter-qmp-command-no-output"><a href="#after-enter-qmp-command-no-output" class="headerlink" title="after enter qmp command, no output"></a>after enter qmp command, no output</h2><p>This is probably, qmp.sock is connected with another client, as one qmp.sock can only talk with only on client!!!, if multiple clients want to connect with qemu instance, create multiple qmp socks when start qemu instance like this</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /usr/libexec/qemu-kvm  -kernel ./kernel -initrd ./initramfs.img -nographic -append <span class="string">&quot;console=ttyS0&quot;</span>  -qmp unix:/var/run/qmp1.sock,server,nowait  -qmp unix:/var/run/qmp2.sock,server,nowait -serial mon:stdio</span><br></pre></td></tr></table></figure>

<h2 id="difference-between-net-netdev-and-nic"><a href="#difference-between-net-netdev-and-nic" class="headerlink" title="difference between -net, -netdev and -nic"></a>difference between -net, -netdev and -nic</h2><p>In short, the <strong>-net is the legacy option</strong>, while -netdev comes in to solve issue present for -net, the <code>newest way -nic from 2.12 is easiest way to set up an interface. </code></p>
<ul>
<li>The -net option can create either a front-end or a back-end (but has disadvanges than -nic)</li>
<li>-netdev can only create a back-end, use -device for front end</li>
<li>Asingle occurrence of -nic will create both a front-end and a back-end.</li>
</ul>
<p><font color='red' size=4><strong>Suggestion</strong></font></p>
<ul>
<li>The new -nic option gives you an <code>easy and quick way to configure the networking of your guest.</code></li>
<li>For more detailed configuration, e.g. when you need to <strong>tweak the details(like queue size, buffer etc) of the emulated NIC hardware, you can use -device together with -netdev.</strong></li>
<li>The <strong>-net option should be avoided</strong> these days unless you really want to configure a set-up with a hub between the front-ends and back-ends.</li>
</ul>
<p><font color='red'><strong>-nic like a wrapper of -netdev and -deivce pair, easy to use but less control.</strong></font></p>
<h3 id="net-legacy-option"><a href="#net-legacy-option" class="headerlink" title="-net(legacy option)"></a>-net(legacy option)</h3><p>QEMU’s initial way of configuring the network for the guest was the -net option, <strong>the emulated NIC and the host back-end are not directly connected</strong>. They are rather both connected to an emulated hub by default vlan0 (called “vlan” in older versions of QEMU). Therefore, if you start QEMU with <code>-net nic,model=e1000 -net user -net nic,model=virtio -net tap</code> for example, you get a setup where all the front-ends and back-ends are connected together via a hub(vlan)</p>
<p>front end <code>-net nic,model=xyz</code> or <code>-net nic,model=virtio</code> and  backend <code>-net user</code> or <code>-net tap</code> (e.g. -net user for the SLIRP back-end)</p>
<p><img src="https://www.qemu.org/screenshots/2018-05-31-qemu-cli-net.svg" alt="-net"></p>
<p>That means the e1000 NIC also gets the network traffic from the virtio-net NIC and both host back-ends, this can be solved by giving one hub for each nic, for example -net nic,model&#x3D;e1000,vlan&#x3D;0 -net user,vlan&#x3D;0 -net nic,model&#x3D;virtio,vlan&#x3D;1 -net tap,vlan&#x3D;1 moves the virtio-net NIC and the “tap” back-end to a second hub (with ID #1), Please note that the **“vlan” parameter will be dropped in QEMU v3.0 since the term was rather confusing (it’s not related to IEEE 802.1Q for example) *** and caused a lot of misconfigurations in the past.</p>
<h3 id="netdev"><a href="#netdev" class="headerlink" title="-netdev"></a>-netdev</h3><p>To configure a network connection where the <code>emulated NIC is directly connected to a host network back-end, without a hub in between</code>, the well-established solution is to use the -netdev option for the back-end, together with -device for the front-end. </p>
<p><code>-netdev user,id=n1 -device e1000,netdev=n1 -netdev tap,id=n2 -device virtio-net,netdev=n2</code></p>
<p><img src="https://www.qemu.org/screenshots/2018-05-31-qemu-cli-netdev.svg" alt="directly connected"></p>
<p>Now while -netdev together with -device provide a very flexible and extensive way to configure a network connection, there are still two drawbacks with this option pair which prevented us from deprecating the legacy -net option completely:</p>
<ul>
<li>The <strong>-device option can only be used for pluggable NICs</strong>. Boards (e.g. embedded boards) which feature an on-board NIC cannot be configured with -device yet, so -net nic,netdev&#x3D;<id> must be used here instead.</li>
<li>In some cases, the -net option is easier to use (less to type). For example, assuming you want to set up a “tap” network connection and your default scripts &#x2F;etc&#x2F;qemu-ifup and -down are already in place, it’s enough to type -net nic -net tap to start your guest. To do the same with -netdev, you always have to specify an ID here, too, for example like this: -netdev tap,id&#x3D;n1 -device e1000,netdev&#x3D;n1.</li>
</ul>
<h3 id="nic"><a href="#nic" class="headerlink" title="-nic"></a>-nic</h3><p>Looking at the disadvantages listed above, users could benefit from a convenience option that:</p>
<ul>
<li>is easier to use (and shorter to type) than -netdev <backend>,id&#x3D;<id> -device <dev>,netdev&#x3D;<id></li>
<li>can be used to configure on-board &#x2F; non-pluggable NICs, too</li>
<li>does not place a hub between the NIC and the host back-end.</li>
</ul>
<p>This is where the new -nic option kicks in!! this option can be used to configure both the guest’s NIC hardware and the host back-end in one go, instead of <code>-netdev tap,id=n1 -device e1000,netdev=n1</code> you can simply type <code>-nic tap,model=e1000</code>,  you can simply run QEMU with -nic model&#x3D;help. Beside being easier to use, the -nic option can be used to configure on-board NICs, For machines that have on-board NICs, the first -nic option configures the first on-board NIC, the second -nic option configures the second on-board NIC, and so forth.</p>
<h2 id="qemu-kvm-and-qemu-kvm-ev"><a href="#qemu-kvm-and-qemu-kvm-ev" class="headerlink" title="qemu-kvm and qemu-kvm-ev"></a>qemu-kvm and qemu-kvm-ev</h2><p>qemu-kvm and qemu-kvm-ev are usually built from the same src.rpm. Some newer or advanced virtualization features have been implemented in qemu-kvm-ev which are not able to be backported to qemu-kvm for compatibility reasons. Also, recently qemu-kvm-ev has a newer qemu-kvm version than the one provided by qemu-kvm being qemu-kvm-ev rebuilt from Red Hat Enterprise Virtualization.</p>
<h2 id="why-qemu-needs-nvdimm"><a href="#why-qemu-needs-nvdimm" class="headerlink" title="why qemu needs nvdimm??"></a>why qemu needs nvdimm??</h2><p>Really fast writes particularly interesting for:</p>
<ul>
<li>In-memory databases – get persistence for free*!</li>
<li>Databases – transaction logs</li>
<li>File &amp; storage systems – frequently updated metadata</li>
</ul>
<h2 id="why-PCI-address-in-guest-is-not-the-same-as-we-set"><a href="#why-PCI-address-in-guest-is-not-the-same-as-we-set" class="headerlink" title="why PCI address(in guest) is not the same as we set?"></a>why PCI address(in guest) is not the same as we set?</h2><p>Most of that each PCI device would show up in the guest OS with a PCI address that matches the one present in command line set by user, but <strong>that’s not guaranteed to happen and will in fact not be the case in all but the simplest scenarios.</strong> refer to <a href="https://libvirt.org/pci-addresses.html">Qemu pci address</a></p>
<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul>
<li><a href="https://github.com/qemu/qemu/tree/master/python">Install qemu-shell python tool</a></li>
<li><a href="https://qemu-project.gitlab.io/qemu/interop/qemu-qmp-ref.html#">qmp commands to change qemu instance runtime</a></li>
<li><a href="https://gitlab.com/qemu-project/qemu/-/blob/master/hmp-commands.hx">hmp commands of qemu in code</a></li>
<li><a href="https://qemu-project.gitlab.io/qemu/system/index.html">qemu parameter</a></li>
<li><a href="https://www.redhat.com/en/blog/hands-vhost-net-do-or-do-not-there-no-try">libvirt with vhost on&#x2F;off</a></li>
</ul>
]]></content>
      <categories>
        <category>kvm</category>
        <category>qemu</category>
      </categories>
      <tags>
        <tag>qemu</tag>
      </tags>
  </entry>
  <entry>
    <title>Single_Packet_Authorization</title>
    <url>/2020/11/12/single-packet-authorization/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Single Packet Authorization (SPA) is defined as the communication of authentication information over spa server port, together with the dynamic reconfiguration of a default-drop firewall policy to allow access to services that would otherwise be blocked, SPA <code>communicates authentication information within the payload</code> portion of a single packet. Because packet payloads are used, SPA offers many enhancements over PK such as stronger usage of cryptography, protection from replay attacks, minimal network footprint (in terms of what IDS’s may alert on - PK sequences look like port scans after all), the ability to transmit full commands and complex access requests, and better performance.</p>
<p><code>For simple, access service is blocked by firewall, SPA client requests to open that service for itself, SPA server authenticates the request, adds proper firewall rules to that client, after that client can access server as normal.</code></p>
<span id="more"></span>

<h2 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h2><p>A basic outline for using fwknop to conceal an SSH daemon(or any service) with Single Packet Authorization (SPA) involves the following steps. This assumes an SPA client system (hostname: spaclient), and an SPA server system spaserver.domain.com where fwknopd is installed and the SSH daemon listens:</p>
<ol>
<li>Generate encryption and HMAC keys with fwknop –key-gen.</li>
<li>Transfer the keys you just generated fwknopd to the server (this is where SSHD is listening too).</li>
<li>Start fwknopd and deploy a default-drop firewall policy against all inbound SSH connections.</li>
<li>From anywhere on the Internet, use the fwknop client to send an SPA packets and have fwknopd open the firewall.</li>
<li>Use your SSH client as usual now that you have access. No one else can even see that SSHD is listening.</li>
</ol>
<p><img src="https://www.cipherdyne.org/images/fwknop_tutorial_network_diagram.png" alt="Network"></p>
<p><strong>NOTE</strong></p>
<ul>
<li>SPA sends request in payload to grant access(add firewall rule at spa server) for IP in the payload.</li>
<li>Firewall(iptables) checks protocol headers for access.</li>
</ul>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>Here are the steps to install fwknop from source code, first make sure you have dev machine and env to compile from source, install from package is available for ubuntu as well, but here I want to share how to install from source.</p>
<p><strong>install from package</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu18</span></span><br><span class="line">$ apt-get install -y fwknop-server</span><br><span class="line">$ apt-get install -y fwknop-client</span><br><span class="line"><span class="comment"># Centos7</span></span><br><span class="line">yum install -y fwknop</span><br></pre></td></tr></table></figure>

<p><strong>install from source</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install dependencies</span></span><br><span class="line">$ apt-get update</span><br><span class="line">$ apt-get install -y build-essential autoconf autotools-dev libtool textinfo git</span><br></pre></td></tr></table></figure>
<p><strong>install server</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">yes</span> <span class="built_in">yes</span> | git <span class="built_in">clone</span> https://github.com/mrash/fwknop.git</span><br><span class="line">$ <span class="built_in">cd</span> fwknop/</span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ ./configure --disable-client --prefix=/usr</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># make sure install correctly</span></span><br><span class="line">$ fwknopd -V</span><br><span class="line"><span class="comment"># enable systemd service, then you can check fwknopd by `service fwknopd status`</span></span><br><span class="line">$ <span class="built_in">cp</span> extras/systemd/fwknopd.service  /lib/systemd/system/</span><br><span class="line"></span><br><span class="line"><span class="comment"># config location</span></span><br><span class="line"><span class="comment"># /usr/sbin/fwknopd</span></span><br><span class="line"><span class="comment"># /usr/etc/fwknop/fwknopd.conf</span></span><br><span class="line"><span class="comment"># /usr/etc/fwknop/access.conf</span></span><br></pre></td></tr></table></figure>

<p><strong>install client</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">yes</span> <span class="built_in">yes</span> | git <span class="built_in">clone</span> https://github.com/mrash/fwknop.git</span><br><span class="line">$ <span class="built_in">cd</span> fwknop/</span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ ./configure --disable-server --prefix=/usr</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br><span class="line"><span class="comment"># make sure install correctly</span></span><br><span class="line">$ fwknop -V</span><br><span class="line"><span class="comment"># /usr/bin/fwknop</span></span><br></pre></td></tr></table></figure>

<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>After installation, you need to config both client and server together to make them work, but the config depends on network topology you’re using, here are some typical use cases.</p>
<h3 id="Network-topology-no-NAT-same-network-or-public-ip-SPA-server-and-service-on-same-machine"><a href="#Network-topology-no-NAT-same-network-or-public-ip-SPA-server-and-service-on-same-machine" class="headerlink" title="Network topology no NAT(same network or public ip), SPA server and service on same machine"></a>Network topology no NAT(same network or public ip), SPA server and service on same machine</h3><p><strong>server side</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create key for hmac and aes</span></span><br><span class="line">$ fwknopd --key-gen</span><br><span class="line">KEY_BASE64: +RCO0Gi2oTWbmBaylY4mVsDXzggQKDKwYU2FaLBL0Jo=</span><br><span class="line">HMAC_KEY_BASE64: 729XvADuHzSs6I9vz9tVIOFITF/ckAAIZGWVU4Hy4c82kbAbsFzkZRfddNZPr10AJlUCVdtx9D6vNN2XQ6ribQ==</span><br><span class="line"></span><br><span class="line"><span class="comment"># edit /usr/etc/fwknop/access.conf</span></span><br><span class="line">SOURCE                      ANY</span><br><span class="line">KEY_BASE64                  WO3yTj1oMCoFr3l8WlCLSJAGikvej2BqYgwEcFPwiHg=</span><br><span class="line">HMAC_KEY_BASE64             06EL9sbYsYUm396U/H44BnEm/qIOi1iiWVPILv8jWJg3NMm52I4Whu/AyL0v4CnR1IcHV27QUjFJ8NFNllTatA==</span><br><span class="line"></span><br><span class="line"><span class="comment"># edit /usr/etc/fwknopd/fwknopd.conf</span></span><br><span class="line">FWKNOP_RUN_DIR              /var/run/fwknop;</span><br><span class="line">FWKNOP_PID_FILE             <span class="variable">$FWKNOP_RUN_DIR</span>/fwknopd.pid;</span><br><span class="line">PCAP_INTF ens160</span><br><span class="line"></span><br><span class="line"><span class="comment"># start fwknopd service</span></span><br><span class="line">$ service fwknopd start</span><br><span class="line">$ service fwknopd status</span><br><span class="line"></span><br><span class="line"><span class="comment"># insert two rules at header, the second one before the first one in iptables</span></span><br><span class="line"><span class="comment"># hence for established tcp connection, keep it, others default to drop</span></span><br><span class="line">$ iptables -I INPUT 1 -i ens160  -p tcp --dport 22 -j DROP</span><br><span class="line">$ iptables -I INPUT 1  -i ens160  -p tcp --dport 22 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT</span><br></pre></td></tr></table></figure>

<p><strong>client side</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># we use named config, the config file is at /user/.fwknoprc, create it if no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># edit /user/.fwknoprc</span></span><br><span class="line">[default]</span><br><span class="line">USE_HMAC                    Y</span><br><span class="line"></span><br><span class="line">[spaserver-ssl]</span><br><span class="line">ALLOW_IP                    10.10.10.10</span><br><span class="line">ACCESS                      tcp/22</span><br><span class="line">SPA_SERVER                  10.10.10.1</span><br><span class="line">KEY_BASE64                  WO3yTj1oMCoFr3l8WlCLSJAGikvej2BqYgwEcFPwiHg=</span><br><span class="line">HMAC_KEY_BASE64             06EL9sbYsYUm396U/H44BnEm/qIOi1iiWVPILv8jWJg3NMm52I4Whu/AyL0v4CnR1IcHV27QUjFJ8NFNllTatA==</span><br><span class="line"></span><br><span class="line"><span class="comment"># default section is global setting</span></span><br><span class="line"><span class="comment"># each named section can has it own setting</span></span><br><span class="line"><span class="comment"># ALLOW_IP, ACCESS, request access for this IP and port</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># request access for info in spaserver-ssl</span></span><br><span class="line">$ fwknop -n spaserver-ssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># then normal ssh</span></span><br><span class="line">ssh root@10.10.10.1</span><br></pre></td></tr></table></figure>
<h3 id="Network-topology-with-NAT-service-private-address-behind-SPA-server-on-different-machines"><a href="#Network-topology-with-NAT-service-private-address-behind-SPA-server-on-different-machines" class="headerlink" title="Network topology with NAT, service(private address) behind SPA server on different machines"></a>Network topology with NAT, service(private address) behind SPA server on different machines</h3><p><img src="https://cipherdyne.org/images/SPA_DNAT.png" alt="network topology"></p>
<ul>
<li>client ip: 192.168.1.2</li>
<li>SPA server ip: 10.10.10.3(public)</li>
<li>SSH server ip: 192.168.100.10</li>
</ul>
<p><strong>server side</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># edit /usr/etc/fwknopd/fwknopd.conf</span></span><br><span class="line">ENABLE_IPT_FORWARDING      Y;</span><br><span class="line"></span><br><span class="line"><span class="comment"># after client sent SPA request, check iptables rules</span></span><br><span class="line">$ fwknopd --fw-list</span><br><span class="line">Listing rules <span class="keyword">in</span> fwknopd iptables chains...</span><br><span class="line"></span><br><span class="line">Chain FWKNOP_INPUT (1 references)</span><br><span class="line">num  target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain FWKNOP_FORWARD (1 references)</span><br><span class="line">num  target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line">1    ACCEPT     tcp  --  2.2.2.2              0.0.0.0/0            tcp dpt:2 /* _exp_1605161576 */</span><br><span class="line"></span><br><span class="line">Chain FWKNOP_PREROUTING (1 references)</span><br><span class="line">num  target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line">1    DNAT       tcp  --  2.2.2.2              0.0.0.0/0            tcp dpt:22 /* _exp_1605161576 */ to:192.168.100.10:2</span><br></pre></td></tr></table></figure>

<p><strong>client side</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /user/.fwknoprc</span><br><span class="line">[default]</span><br><span class="line">USE_HMAC                    Y</span><br><span class="line"></span><br><span class="line">[spaserver-ssl]</span><br><span class="line">ACCESS                      tcp/22</span><br><span class="line">SPA_SERVER                  10.10.10.3</span><br><span class="line">KEY_BASE64                  WO3yTj1oMCoFr3l8WlCLSJAGikvej2BqYgwEcFPwiHg=</span><br><span class="line">HMAC_KEY_BASE64             06EL9sbYsYUm396U/H44BnEm/qIOi1iiWVPILv8jWJg3NMm52I4Whu/AyL0v4CnR1IcHV27QUjFJ8NFNllTatA==</span><br><span class="line">RESOLVE_IP_HTTPS            Y</span><br><span class="line">NAT_ACCESS                  192.168.100.10:22</span><br><span class="line"></span><br><span class="line"><span class="comment"># with RESOLVE_IP_HTTPS, the real ip in SPA packet, is the external ip, get by fwknop atomically.</span></span><br><span class="line"><span class="comment"># but if you know the external ip. use &#x27;ALLOW_IP&#x27; remove &#x27;RESOLVE_IP_HTTPS&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># the external ip for client is 2.2.2.2</span></span><br><span class="line">$ fwknop -n spaserver-ssl</span><br><span class="line">$ ssh root@10.10.10.3</span><br></pre></td></tr></table></figure>

<h3 id="Network-topology-with-SNAT-at-spa-server-service-behind-SPA-server-on-different-machines"><a href="#Network-topology-with-SNAT-at-spa-server-service-behind-SPA-server-on-different-machines" class="headerlink" title="Network topology with SNAT(at spa server), service behind SPA server on different machines"></a>Network topology with SNAT(at spa server), service behind SPA server on different machines</h3><p>As you know SNAT is after POSTROUTING, that means when SPA server forwards packet, the SRC must be replaced, otherwise packet can not be routed to service server, it’s total SPA server config, client even not care!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># edit /usr/etc/fwknopd/fwknopd.conf</span></span><br><span class="line">ENABLE_IPT_FORWARDING Y;</span><br><span class="line">ENABLE_IPT_SNAT Y;</span><br><span class="line">$ service fwknopd restart</span><br></pre></td></tr></table></figure>

<h3 id="Network-topology-with-DNAT-port-only"><a href="#Network-topology-with-DNAT-port-only" class="headerlink" title="Network topology with DNAT(port only)"></a>Network topology with DNAT(port only)</h3><p>DNAT is needed when spa server does NOT want to grant access to well-known port like ssh(22), but instead grants access to a temporary port which is only known to SPA client who triggers the request for safe.</p>
<p><strong>server</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># edit /usr/etc/fwknopd/fwknopd.conf</span></span><br><span class="line">ENABLE_IPT_LOCAL_NAT        Y;</span><br><span class="line"></span><br><span class="line">$ service fwknopd restart</span><br><span class="line"><span class="comment"># after client sent SPA packet</span></span><br><span class="line">$ fwknopd --fw-list</span><br><span class="line">Listing rules <span class="keyword">in</span> fwknopd iptables chains...</span><br><span class="line"></span><br><span class="line">Chain FWKNOP_INPUT (1 references)</span><br><span class="line">num  target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line">1    ACCEPT     tcp  --  10.10.10.1           0.0.0.0/0            tcp dpt:22 /* _exp_1605156202 */</span><br><span class="line"></span><br><span class="line">Chain FWKNOP_FORWARD (1 references)</span><br><span class="line">num  target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line"><span class="comment"># this the new added rule for DNAT</span></span><br><span class="line">Chain FWKNOP_PREROUTING (1 references)</span><br><span class="line">num  target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line">1    DNAT       tcp  --  10.10.10.1           0.0.0.0/0            tcp dpt:29935 /* _exp_1605156202 */ to:10.10.10.3:22</span><br></pre></td></tr></table></figure>

<p><strong>client</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /user/.fwknoprc</span><br><span class="line">[default]</span><br><span class="line">USE_HMAC                    Y</span><br><span class="line"></span><br><span class="line">[spaserver-ssl]</span><br><span class="line">ALLOW_IP                    10.10.10.1</span><br><span class="line">ACCESS                      tcp/22</span><br><span class="line">SPA_SERVER                  10.10.10,3</span><br><span class="line">KEY_BASE64                  WO3yTj1oMCoFr3l8WlCLSJAGikvej2BqYgwEcFPwiHg=</span><br><span class="line">HMAC_KEY_BASE64             06EL9sbYsYUm396U/H44BnEm/qIOi1iiWVPILv8jWJg3NMm52I4Whu/AyL0v4CnR1IcHV27QUjFJ8NFNllTatA==</span><br><span class="line">NAT_LOCAL                   Y</span><br><span class="line">NAT_RAND_PORT               Y</span><br><span class="line"></span><br><span class="line">$ fwknop -n spaserver-ssl</span><br><span class="line">[+] Randomly assigned port <span class="string">&#x27;29935&#x27;</span> on: <span class="string">&#x27;10.10.10.1,tcp/29935&#x27;</span> will grant access to: <span class="string">&#x27;10.10.10.3,22&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># access by 29935, not port 22</span></span><br><span class="line">$ ssh root@10.10.10.3 -p 29935</span><br></pre></td></tr></table></figure>

<h3 id="Grant-access-with-limit-scope-source-ip-user-port"><a href="#Grant-access-with-limit-scope-source-ip-user-port" class="headerlink" title="Grant access with limit scope(source ip, user, port)"></a>Grant access with limit scope(source ip, user, port)</h3><p>By default, spa server allows ANY address with ANY user to request ANY port(on server) access, but we can limit the scope by several variables<br><strong>server</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># edit /usr/etc/fwknop/access.conf</span></span><br><span class="line">SOURCE                      1.1.1.0/24, 2.2.2.2</span><br><span class="line">OPEN_PORTS                  tcp/22, tcp/993</span><br><span class="line">REQUIRE_USERNAME            bob</span><br><span class="line">REQUIRE_SOURCE_ADDRESS      Y</span><br><span class="line">KEY_BASE64                  WO3yTj1oMCoFr3l8WlCLSJAGikvej2BqYgwEcFPwiHg=</span><br><span class="line">HMAC_KEY_BASE64             06EL9sbYsYUm396U/H44BnEm/qIOi1iiWVPILv8jWJg3NMm52I4Whu/AyL0v4CnR1IcHV27QUjFJ8NFNllTatA==</span><br></pre></td></tr></table></figure>

<p><strong>client with user name</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /user/.fwknoprc</span><br><span class="line">[default]</span><br><span class="line">USE_HMAC                    Y</span><br><span class="line"></span><br><span class="line">[spaserver-ssl]</span><br><span class="line">ALLOW_IP                    10.10.10.1</span><br><span class="line">ACCESS                      tcp/22</span><br><span class="line">SPA_SERVER                  10.10.10.3</span><br><span class="line">KEY_BASE64                  WO3yTj1oMCoFr3l8WlCLSJAGikvej2BqYgwEcFPwiHg=</span><br><span class="line">HMAC_KEY_BASE64             06EL9sbYsYUm396U/H44BnEm/qIOi1iiWVPILv8jWJg3NMm52I4Whu/AyL0v4CnR1IcHV27QUjFJ8NFNllTatA==</span><br><span class="line">SPOOF_USER                  bob</span><br></pre></td></tr></table></figure>

<h2 id="troubleshooting"><a href="#troubleshooting" class="headerlink" title="troubleshooting"></a>troubleshooting</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check service status</span></span><br><span class="line">$ service fwknopd status</span><br><span class="line"><span class="comment"># check log if not working</span></span><br><span class="line">$ grep fwknopd /var/log/syslog</span><br><span class="line"></span><br><span class="line"><span class="comment"># dump the config</span></span><br><span class="line">$ fwknopd -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># Listing rules in fwknopd iptables chains...</span></span><br><span class="line">$ fwknopd --fw-list</span><br><span class="line"></span><br><span class="line"><span class="comment"># Flush all firewall rules created by fwknop.</span></span><br><span class="line">$ fwknopd --fw-flush</span><br><span class="line"></span><br><span class="line"><span class="comment"># show more info for SPA packet when sending</span></span><br><span class="line">$ fwknop -n spaserver-ssl -v</span><br></pre></td></tr></table></figure>
<h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><h1 id="if-client-behinds-NAT-what-special-setting-needed"><a href="#if-client-behinds-NAT-what-special-setting-needed" class="headerlink" title="if client behinds NAT what special setting needed"></a>if client behinds NAT what special setting needed</h1><p>As SPA server uses iptables which only see external IP used by client after SNAT, hence we should sent this ip in SPA packet.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># edit /user/.fwknoprc at spa client, but never set ALLOW_IP which is the real ip in SPA message</span></span><br><span class="line">RESOLVE_IP_HTTPS   Y</span><br></pre></td></tr></table></figure>

<h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><ul>
<li><a href="https://www.cipherdyne.org/fwknop/docs/fwknop-tutorial.html#quick-start">SPA tutorial</a></li>
<li><a href="https://www.cipherdyne.org/fwknop/docs/manpages/fwknop.html">SPA client man</a></li>
<li><a href="https://www.cipherdyne.org/fwknop/docs/manpages/fwknopd.html">SPA server man</a></li>
<li><a href="https://www.cipherdyne.org/fwknop/docs/">SPA founder page</a></li>
</ul>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>SPA</tag>
        <tag>Authentication</tag>
      </tags>
  </entry>
  <entry>
    <title>storage_nbd</title>
    <url>/2021/07/06/storage-nbd/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Network block devices (NBD) are used to access remote storage device that does not physically reside in the local machine, for each network block device, it’s mapped with (&#x2F;dev&#x2F;nbdx) to client as a local block device, <code>you can do low level operation for this block device, like partition, format with filesystem that NFS can NOT do.</code></p>
<p>NBD works according to a client&#x2F;server architecture. You use the server to make a volume available as a network block device from a host, then run the client to connect to it from another host.</p>
<p><img src="https://www.linuxjournal.com/files/linuxjournal.com/linuxjournal/articles/037/3778/3778f1.jpg" alt="NBD ARCH"></p>
<span id="more"></span>

<p><strong><font color='red'>All commands verified on Centos7</font></strong></p>
<p><strong>NBD uses TCP as its transport protocol. There is no well known port used for NBD</strong></p>
<ul>
<li>Client accesses <code>/dev/nbdx</code> after nbd mounts</li>
<li>Client and Server perform negotiation</li>
<li>Client sends a read request to the server(did by kernel) specifying the <code>start offset and the length of the data</code> to be read.</li>
<li>Server replies with a read reply, containing an error code (if any); if the error code is zero, reply header will be followed by immediate data</li>
<li>Client sends a write request, specifying the start offset and the length of the data to be written, immediately followed by raw data.</li>
<li>Server writes data out and sends a write reply, which contains an error code that may specify if an error occurred. If no error did occur, data is assumed to have been written to disk.</li>
<li>Client sends a disconnect request</li>
<li>Server disconnects.</li>
</ul>
<h1 id="Nbd-example"><a href="#Nbd-example" class="headerlink" title="Nbd example"></a>Nbd example</h1><p>In order to use nbd, need to install nbd server at server machine and nbd client at client side(<code>also install nbd kernel module which exports nbd device for user, so that user sees it as a local block device</code>).</p>
<p>NBD allows to <strong>export a real device or virtual disk at server</strong>, then client can mount it by NBD protocol.</p>
<p><img src="https://miro.medium.com/max/1400/1*0WqhqSXX_IBTyhVtbsZtYg.png" alt="NBD cases"></p>
<p><strong><font color="red">Verified at Centos 7.6</font></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># centos</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install userland tools</span></span><br><span class="line">$ yum install nbd</span><br><span class="line"></span><br><span class="line"><span class="comment"># At client side, you may need to compile nbd by yourself if not found</span></span><br><span class="line">$ modprobe nbd <span class="comment"># this will create nbd device(unbound)</span></span><br><span class="line">$ <span class="built_in">ls</span> /dev/nbd*</span><br><span class="line">/dev/nbd0     /dev/nbd1049  /dev/nbd110   /dev/nbd140  </span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<h2 id="export-and-mount-a-real-device-from-remote"><a href="#export-and-mount-a-real-device-from-remote" class="headerlink" title="export and mount a real device from remote"></a>export and mount a real device from remote</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server side, export a local real device by: /etc/nbd-server/config, create this file if not found</span></span><br><span class="line"><span class="comment"># section name must be unique</span></span><br><span class="line">[generic]</span><br><span class="line">[<span class="built_in">test</span>]</span><br><span class="line">    exportname = /dev/sdb</span><br><span class="line"></span><br><span class="line">$ service nbd-server restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># client side</span></span><br><span class="line">$ nbd-client <span class="variable">$server_ip</span> /dev/nbd0 -N <span class="built_in">test</span></span><br><span class="line"><span class="comment"># if sdb has two partitions, you will see two devices /dev/nbd0p1 and /dev/nbd0p2 check with (fdisk /dev/nbd0 -l)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># then you can create filesystem or make partition </span></span><br><span class="line"><span class="comment"># OR if the disk already has filesystem, just mount it</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mount the first partition</span></span><br><span class="line">$ fdisk /dev/nbd0 -l</span><br><span class="line">$ mount /dev/nbd0p1 /mnt</span><br></pre></td></tr></table></figure>

<h2 id="export-and-mount-two-disk-files-from-remote"><a href="#export-and-mount-two-disk-files-from-remote" class="headerlink" title="export and mount two disk files from remote"></a>export and mount two disk files from remote</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create a virtual disk</span></span><br><span class="line">$ <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=vmdisk1.img bs=1G count=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># edit /etc/nbd-server/config, create if not found</span></span><br><span class="line">[generic]</span><br><span class="line">[disk1]</span><br><span class="line">    exportname = /tmp/vmdisk1.img</span><br><span class="line">[disk2]</span><br><span class="line">    exportname = /tmp/vmdisk2.img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ service nbd-server restart</span><br><span class="line"></span><br><span class="line">$ nbd-client <span class="variable">$server_ip</span> /dev/nbd0  -N disk1</span><br><span class="line"></span><br><span class="line">$ nbd-client <span class="variable">$server_ip</span> /dev/nbd1  -N disk2</span><br><span class="line"><span class="comment"># then you can create filesystem or make partition </span></span><br><span class="line"><span class="comment"># OR if the disk already has filesystem, just mount it</span></span><br><span class="line">$ parted /dev/nbd0</span><br></pre></td></tr></table></figure>

<h2 id="mount-a-virtual-disk-image-qcow2"><a href="#mount-a-virtual-disk-image-qcow2" class="headerlink" title="mount a virtual disk image qcow2"></a>mount a virtual disk image qcow2</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># edit /etc/nbd-server/config, create if not found</span></span><br><span class="line">[generic]</span><br><span class="line">[<span class="built_in">test</span>]</span><br><span class="line">    exportname = /tmp/windows.iso</span><br><span class="line">$ service nbd-server restart</span><br><span class="line"></span><br><span class="line">$ nbd-client <span class="variable">$server_ip</span> /dev/nbd0 -N <span class="built_in">test</span></span><br><span class="line"><span class="comment"># then mount it </span></span><br><span class="line">$ fdisk /dev/nbd0 -l</span><br><span class="line">$ mount /dev/nbd0p1 /mnt</span><br></pre></td></tr></table></figure>


<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul>
<li><a href="https://github.com/NetworkBlockDevice/nbd">nbd man</a></li>
<li><a href="https://github.com/NetworkBlockDevice/nbd/blob/master/doc/proto.md">nbd protocol</a></li>
</ul>
]]></content>
      <categories>
        <category>kvm</category>
        <category>nbd</category>
      </categories>
      <tags>
        <tag>storage</tag>
        <tag>nbd</tag>
      </tags>
  </entry>
  <entry>
    <title>stress_workload_generator</title>
    <url>/2021/04/15/stress-workload-generator/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>It is a simple workload generator for POSIX systems. It imposes a configurable amount of CPU, memory, I&#x2F;O, and disk stress on the system. It will <code>stress test a server</code> for the following features:</p>
<ul>
<li>CPU compute</li>
<li>Cache thrashing</li>
<li>VM stress</li>
<li>Drive stress</li>
<li>I&#x2F;O syncs</li>
<li>Socket stressing</li>
<li>Context switching</li>
<li>Process creation and termination</li>
<li>It includes over 60 different stress tests, over 50 CPU specific stress tests that exercise floating point, integer, bit manipulation and control flow, over 20 virtual memory stress tests.<span id="more"></span>
<strong>Lots of stressors</strong></li>
</ul>
<p><strong>It is not a benchmark, but is rather a tool designed</strong></p>
<h1 id="Stressor"><a href="#Stressor" class="headerlink" title="Stressor"></a>Stressor</h1><p><code>The stress-ng stressors are grouped together in different classes, each class may have many stressors or one stressor</code>, when you start stress, <strong>you can run a class(all stressor in that class) or just a specific stressor or several stressors at a time.</strong></p>
<p><strong>Classes:</strong>  </p>
<ul>
<li>cpu - CPU intensive</li>
<li>cpu-cache - stress CPU instruction and&#x2F;or data caches</li>
<li>device - raw device driver stressors</li>
<li>io - generic input&#x2F;output</li>
<li>interrupt - high interrupt load generators</li>
<li>filesystem - file system activity</li>
<li>memory - stack, heap, memory mapping, shared memory stressors</li>
<li>network - TCP&#x2F;IP, UDP and UNIX domain socket stressors</li>
<li>os - core kernel stressors</li>
<li>pipe - pipe and UNIX socket stressors</li>
<li>scheduler - force high levels of context switching</li>
<li>security - AppArmor stressor</li>
<li>vm - Virtual Memory stressor (paging and memory)</li>
</ul>
<p><strong>Stressors</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y stress-ng</span><br><span class="line">$ stress-ng --stressor</span><br><span class="line">access af-alg affinity aio aiol apparmor atomic bad-altstack bad-ioctl bigheap bind-mount binderfs branch brk bsearch cache <span class="built_in">cap</span> chattr <span class="built_in">chdir</span> <span class="built_in">chmod</span> <span class="built_in">chown</span> <span class="built_in">chroot</span> clock <span class="built_in">clone</span> close context copy-file cpu cpu-online crypt cyclic daemon dccp dentry dev dev-shm <span class="built_in">dir</span> dirdeep dnotify dup dynlib efivar enosys <span class="built_in">env</span> epoll eventfd <span class="built_in">exec</span> fallocate fanotify fault fcntl fiemap fifo file-ioctl filename flock fork fp-error fstat full funccall funcret futex get getdent getrandom handle hdd heapsort hrtimers hsearch icache icmp-flood idle-page inode-flags inotify io iomix ioport ioprio io-uring ipsec-mb itimer judy kcmp key <span class="built_in">kill</span> klog l1cache lease <span class="built_in">link</span> locka lockbus lockf lockofd longjmp loop lsearch madvise malloc matrix matrix-3d mcontend membarrier memcpy memfd memhotplug memrate memthrash mergesort mincore <span class="built_in">mknod</span> mlock mlockmany mmap mmapaddr mmapfixed mmapfork mmapmany mq mremap msg msync nanosleep netdev netlink-proc netlink-task <span class="built_in">nice</span> nop null numa oom-pipe opcode open personality physpage pidfd ping-sock pipe pipeherd pkey poll prctl procfs pthread ptrace pty qsort quota radixsort ramfs rawdev rawpkt rawsock rawudp rdrand readahead reboot remap rename resources revio rlimit rmap rseq rtc schedpolicy sctp seal seccomp secretmem seek sem sem-sysv sendfile session <span class="built_in">set</span> shellsort shm shm-sysv sigabrt sigchld sigfd sigfpe sigio signal sigpending sigpipe sigq sigrt sigsegv sigsuspend sigtrap skiplist <span class="built_in">sleep</span> sock sockabuse sockdiag sockfd sockpair sockmany softlockup spawn splice stack stackmmap str stream swap switch symlink sync-file sysbadaddr sysinfo sysinval sysfs <span class="built_in">tee</span> timer timerfd tlb-shootdown tmpfs tree tsc tsearch tun udp udp-flood unshare uprobe urandom userfaultfd utime vdso vecmath verity vfork vforkmany vm vm-addr vm-rw vm-segv vm-splice <span class="built_in">wait</span> watchdog wcs x86syscall xattr yield zero zlib zombie</span><br></pre></td></tr></table></figure>

<p><strong>Options</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a N, --all N, --parallel N (mostly used combined with  --class)</span><br><span class="line">    start N instances of all stressors <span class="keyword">in</span> parallel. If N is less than  zero,  <span class="keyword">then</span>  the</span><br><span class="line">    number  of CPUs online is used <span class="keyword">for</span> the number of instances.  If N is zero, <span class="keyword">then</span> the</span><br><span class="line">    number of CPUs <span class="keyword">in</span> the system is used.</span><br><span class="line"></span><br><span class="line">--sequential N</span><br><span class="line">    sequentially  run  all  the  stressors  one by one <span class="keyword">for</span> a default of 60 seconds. The</span><br><span class="line">    number of instances of each of the individual stressors to be started is N.   If  N</span><br><span class="line">    is  less  than  zero,  <span class="keyword">then</span>  the  number  of  CPUs online is used <span class="keyword">for</span> the number of</span><br><span class="line">    instances.  If N is zero, <span class="keyword">then</span> the number of CPUs <span class="keyword">in</span> the system is used.   Use  the</span><br><span class="line">    --<span class="built_in">timeout</span> option to specify the duration to run each stressor.</span><br><span class="line"></span><br><span class="line">--taskset list</span><br><span class="line">    <span class="built_in">set</span> CPU affinity based on the list of CPUs provided; stress-ng is bound to just use</span><br><span class="line">    these CPUs (Linux only). The CPUs to be used are specified  by  a  comma  separated</span><br><span class="line">    list  of  CPU  (0  to N-1). One can specify a range of CPUs using <span class="string">&#x27;-&#x27;</span>, <span class="keyword">for</span> example:</span><br><span class="line">    --taskset 0,2-3,6,7-11</span><br><span class="line"></span><br><span class="line">-t N, --<span class="built_in">timeout</span> T</span><br><span class="line">    stop  stress  <span class="built_in">test</span>  after  T  seconds.  One  can  also specify the units of time <span class="keyword">in</span></span><br><span class="line">    seconds, minutes, hours, days or years with the suffix s, m, h, d or  y.   Note:  A</span><br><span class="line">    <span class="built_in">timeout</span> of 0 will run stress-ng without any timeouts (run forever).</span><br><span class="line"></span><br><span class="line">--vm-keep</span><br><span class="line">    don not continually unmap and map memory, just keep on re-writing to</span><br><span class="line">    it.</span><br><span class="line"></span><br><span class="line">--vm-populate</span><br><span class="line">    populate (prefault) page tables <span class="keyword">for</span> the memory mappings; this can</span><br><span class="line">    stress swapping. Only available on systems that support</span><br><span class="line">    MAP_POPULATE (since Linux 2.5.46).</span><br></pre></td></tr></table></figure>

<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fork two processes for 10 seconds</span></span><br><span class="line">$ stress-ng -c 2 -t 10s --metrics-brief</span><br><span class="line">$ stress-ng -c 2 -t 1m --metrics-brief</span><br><span class="line"></span><br><span class="line"><span class="comment"># fork process of inline CPU</span></span><br><span class="line">$ stress-ng -c 0 -t 1m --metrics-brief</span><br><span class="line"></span><br><span class="line"><span class="comment"># run 3 instances of the CPU stressor and pin them to CPUs 0, 2 and 3.</span></span><br><span class="line">$ stress-ng --taskset 0,2-3 --cpu 3</span><br></pre></td></tr></table></figure>
<h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fork 1 process malloc/free 128M</span></span><br><span class="line">$ stress-ng -m 1 --vm-bytes 128M -t 10s --metrics-brief</span><br><span class="line"><span class="comment"># fork 1 process malloc/free 1G</span></span><br><span class="line">$ stress-ng -m 1 --vm-bytes 1G -t 10s --metrics-brief</span><br><span class="line"></span><br><span class="line">$ stress-ng -m 1 --vm-bytes 1G -t 10s --vm-keep --vm-populate --metrics-brief</span><br><span class="line"></span><br><span class="line"><span class="comment"># fork 2 processes malloc/free 50% available memory, one 25 %</span></span><br><span class="line">$ stress-ng -m 2 --vm-bytes 50% -t 10s --metrics-brief</span><br></pre></td></tr></table></figure>
<h3 id="interrupt-load"><a href="#interrupt-load" class="headerlink" title="interrupt load"></a>interrupt load</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 32 instances at 1MHz:</span></span><br><span class="line">$ stress-ng --timer 32 --timer-freq 1000000</span><br></pre></td></tr></table></figure>
<h3 id="page-faults"><a href="#page-faults" class="headerlink" title="page faults"></a>page faults</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># You can generate major page faults (by accessing a page is not loaded in memory at the time of the fault) and see the page fault rate using:</span></span><br><span class="line">$ stress-ng --fault 0 --perf -t 1m</span><br><span class="line"></span><br><span class="line"><span class="comment"># or with newer kernels use the userfaultfd stressor to force even more major faults:</span></span><br><span class="line">$ stress-ng --userfaultfd 0 --perf -t 1m</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>stress</category>
        <category>generator</category>
      </categories>
      <tags>
        <tag>stress</tag>
        <tag>generator</tag>
      </tags>
  </entry>
  <entry>
    <title>systemd_resource_control</title>
    <url>/2022/09/21/systemd-resource-control/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>systemd is a Linux initialization system and service manager that includes features like on-demand starting of daemons, mount and automount point maintenance, snapshot support, and processes tracking using Linux control groups. systemd provides a logging daemon and other tools and utilities to help with common system administration tasks.</p>
<span id="more"></span>

<h1 id="resource-control"><a href="#resource-control" class="headerlink" title="resource control"></a>resource control</h1><p>All processes running on the system are child processes of the systemd init process. Systemd provides three unit types that are used for the purpose of resource control</p>
<ul>
<li><p>Service<br>  A process or a group of processes, which systemd started based on a unit configuration file. Services encapsulate the specified processes so that they can be started and stopped as one set. Services are named in the following way: <code>name.service</code></p>
</li>
<li><p>Scope<br>  A group of <code>externally created processes</code>. Scopes encapsulate processes that are started and stopped by arbitrary processes through the <code>fork() function and then registered by systemd at runtime</code>. For instance, user sessions, containers, and virtual machines are treated as scopes. Scopes are named as follows: <code>name.scope</code></p>
</li>
<li><p>Slice<br>  A group of hierarchically organized units. Slices do not contain processes, <code>they organize a hierarchy in which scopes and services are placed</code>. The actual processes are contained in scopes or in services. In this hierarchical tree, <strong>every name of a slice unit corresponds to the path to a location in the hierarchy</strong>. The dash <code>(&quot;-&quot;)</code> character acts as a separator of the path components. For example, if the name of a slice looks as follows: <code>parent-name.slice</code>.</p>
</li>
</ul>
<p><strong>NOTE</strong>  </p>
<ul>
<li><p>Service, scope, and slice units <code>directly map to objects in the cgroup tree</code>. When these units are activated, they map directly to cgroup paths built from the unit names. For example, the <code>ex.service</code> residing in the <code>test-waldo.slice</code>is mapped to the cgroup <code>test.slice/test-waldo.slice/ex.service/</code></p>
</li>
<li><p>cgroup dir for slice is created when</p>
<ul>
<li>A service starts when it uses that slice</li>
<li><code>systemctl start test.slice</code> even no one uses it</li>
</ul>
</li>
</ul>
<h2 id="troubleshooting"><a href="#troubleshooting" class="headerlink" title="troubleshooting"></a>troubleshooting</h2><h3 id="systemd-cgroups"><a href="#systemd-cgroups" class="headerlink" title="systemd cgroups"></a>systemd cgroups</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get cgroup tree </span></span><br><span class="line"><span class="variable">$systemd</span>-cgls</span><br><span class="line">systemd-cgls</span><br><span class="line">├─1 /usr/lib/systemd/systemd --switched-root --system --deserialize 22</span><br><span class="line">├─docker</span><br><span class="line">│ └─febf819341b7bee63374f6f666077b04fbc53bce4cb091db0ecd2327db6d8546</span><br><span class="line">│   └─13204 /bin/bash</span><br><span class="line">├─machine.slice</span><br><span class="line">│ └─machine-qemu\x2d1\x2dvm100.scope</span><br><span class="line">│   └─12841 /usr/libexec/qemu-kvm -name guest=vm100,debug-threads=on -S -object secret,<span class="built_in">id</span>=masterKey0,format=raw,file=/var/lib/libvirt/qemu/domain-1-vm100/master-key.aes -machine pc-i440fx-</span><br><span class="line">├─user.slice</span><br><span class="line">│ └─user-0.slice</span><br><span class="line">│   ├─session-121.scope</span><br><span class="line">│   │ ├─12400 sshd: root@pts/2    </span><br><span class="line">│   │ └─12403 -bash</span><br><span class="line">│   ├─session-80.scope</span><br><span class="line"></span><br><span class="line"><span class="variable">$systemd</span>-cgls cpu</span><br><span class="line"><span class="variable">$systemd</span>-cgls memory</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># get cpu/memory/io usage of each cgroup</span></span><br><span class="line"><span class="variable">$systemd</span>-cgtop</span><br><span class="line">Path                                                                                                                                                                                                                    Tasks   %CPU   Memory  Input/s Output/s</span><br><span class="line"></span><br><span class="line">/                                                                                                                                                                                                                         210   16.7    12.1G        -        -</span><br><span class="line">/system.slice                                                                                                                                                                                                               1   11.1     2.2G        -        -</span><br><span class="line">/system.slice/systemd-journald.service                                                                                                                                                                                      1    8.3   112.1M        -        -</span><br><span class="line">/system.slice/rsyslog.service                                                                                                                                                                                               1    2.3     9.8M        -        -</span><br><span class="line">/machine.slice                                                                                                                                                                                                              -    1.1     2.0G        -        -</span><br><span class="line">/machine.slice/machine-qemu\x2d1\x2dvm100.scope                                                                                                                                                                             3    1.1     2.0G        -        -</span><br><span class="line">/machine.slice/machine-qemu\x2d1\x2dvm100.scope/vcpu2                                                                                                                                                                       1    0.6        -        -        -</span><br><span class="line">/machine.slice/machine-qemu\x2d1\x2dvm100.scope/vcpu3                                                                                                                                                                       1    0.5        -        -        -</span><br><span class="line">/system.slice/mysqld.service                                                                                                                                                                                                1    0.2        -        -        -</span><br><span class="line">/system.slice/ovs-vswitchd.service                                                                                                                                                                                          1    0.2        -        -        -</span><br><span class="line">/system.slice/ovsdb-server.service                                                                                                                                                                                          1    0.1        -        -        -</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">############# Creating transient service using systemd-run command#########################</span></span><br><span class="line"><span class="comment"># this will create a service unit at /run with command under slice</span></span><br><span class="line"><span class="variable">$systemd</span>-run --unit=&lt;name&gt; --slice=&lt;name&gt;.slice &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># these files are removed when os reboot or it exits correctly or systemctl stop sleep</span></span><br><span class="line"><span class="variable">$systemd</span>-run --unit=<span class="built_in">sleep</span> --slice=system.slice <span class="built_in">sleep</span> 10000</span><br><span class="line">Running as unit sleep.service.</span><br><span class="line"></span><br><span class="line"><span class="comment"># these files are created</span></span><br><span class="line"><span class="variable">$ls</span> /run/systemd/system/sleep.service</span><br><span class="line"><span class="variable">$ls</span> /run/systemd/system/sleep.service.d/</span><br><span class="line">50-Description.conf  50-ExecStart.conf  50-Slice.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># this will create a service scope unit at /run with command under slice</span></span><br><span class="line"><span class="variable">$systemd</span>-run --unit=&lt;name&gt; --scope --slice=&lt;name&gt;.slice &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="service-and-unit-management"><a href="#service-and-unit-management" class="headerlink" title="service and unit management"></a>service and unit management</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list all units by type</span></span><br><span class="line"><span class="variable">$systemctl</span> -t service</span><br><span class="line"><span class="variable">$systemctl</span> -t slice</span><br><span class="line"></span><br><span class="line"><span class="comment"># show runtime info of given service</span></span><br><span class="line"><span class="variable">$systemctl</span> show libvirtd.service</span><br><span class="line"><span class="comment"># show runtime info of slice</span></span><br><span class="line"><span class="variable">$systemctl</span> show test.slice</span><br><span class="line">Slice=-.slice</span><br><span class="line">ControlGroup=/test.slice</span><br><span class="line">MemoryCurrent=56729600</span><br><span class="line">TasksCurrent=23</span><br><span class="line">Delegate=no</span><br><span class="line">CPUAccounting=no</span><br><span class="line">CPUShares=18446744073709551615</span><br><span class="line">StartupCPUShares=18446744073709551615</span><br><span class="line">Slice=-.slice</span><br><span class="line">ControlGroup=/test.slice</span><br><span class="line">MemoryCurrent=56729600</span><br><span class="line">TasksCurrent=23</span><br><span class="line">Delegate=no</span><br><span class="line">CPUAccounting=no</span><br><span class="line">CPUShares=18446744073709551615</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">############# set property of unix(slice, service, scop etc) from command line #######################</span></span><br><span class="line"><span class="comment"># set does not change /usr/lib/systemd/system/test.slice </span></span><br><span class="line"><span class="comment"># but create a file(overide the above) at /etc/systemd/system/test.slice.d/50-MemoryAccounting.conf</span></span><br><span class="line"><span class="variable">$systemctl</span> set-property test.slice MemoryAccounting=no</span><br><span class="line"><span class="variable">$systemctl</span> set-property &lt;service name&gt; &lt;unit file option&gt;=&lt;value&gt;</span><br><span class="line"><span class="comment"># check the new setting</span></span><br><span class="line"><span class="variable">$systemctl</span> show --property &lt;unit file option&gt; &lt;service name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">########### set property of unix(slice, service, scop etc) by editing file############################</span></span><br><span class="line"><span class="variable">$vi</span> /usr/lib/systemd/system/test.slice </span><br><span class="line">[Slice]                                                                         </span><br><span class="line">MemoryAccounting=no</span><br><span class="line"></span><br><span class="line"><span class="variable">$vi</span> xx.service</span><br><span class="line">[Service]</span><br><span class="line">MemoryLimit=16G</span><br></pre></td></tr></table></figure>

<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="without-systemd-run-a-program-in-a-pairs-of-cgroups"><a href="#without-systemd-run-a-program-in-a-pairs-of-cgroups" class="headerlink" title="without systemd, run a program in a pairs of cgroups"></a>without systemd, run a program in a pairs of cgroups</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cgexec</span> -g controllers:path_to_cgroup <span class="built_in">command</span> arguments </span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line"><span class="variable">$mkdir</span> /sys/fs/cgroup/memory/test</span><br><span class="line"><span class="variable">$mkdir</span> /sys/fs/cgroup/cpu/test</span><br><span class="line"><span class="variable">$cgexec</span> -g memory:<span class="built_in">test</span> -g cpu:<span class="built_in">test</span> <span class="built_in">sleep</span> 10</span><br></pre></td></tr></table></figure>
<h2 id="without-systemd-move-a-process-in-a-pairs-of-cgroups"><a href="#without-systemd-move-a-process-in-a-pairs-of-cgroups" class="headerlink" title="without systemd, move a process in a pairs of cgroups"></a>without systemd, move a process in a pairs of cgroups</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check the cgroups of the given process</span></span><br><span class="line"><span class="variable">$cat</span> /proc/12546/cgroup</span><br><span class="line">11:blkio:/</span><br><span class="line">10:cpuset:/</span><br><span class="line">9:devices:/</span><br><span class="line">8:cpuacct,cpu:/test2</span><br><span class="line">7:net_prio,net_cls:/</span><br><span class="line">6:memory:/test</span><br><span class="line">5:pids:/</span><br><span class="line">4:freezer:/</span><br><span class="line">3:hugetlb:/</span><br><span class="line">2:perf_event:/</span><br><span class="line">1:name=systemd:/user.slice/user-0.slice/session-80.scope</span><br><span class="line"></span><br><span class="line"><span class="comment"># move the process and its child to the given cgroups</span></span><br><span class="line"><span class="variable">$cgclassify</span> -g cpu:test2 12546</span><br><span class="line"><span class="comment"># to all subsystem of cgroups(must create it each before)</span></span><br><span class="line"><span class="variable">$cgclassify</span> -g *:test2 12546</span><br></pre></td></tr></table></figure>

<h2 id="how-to-set-limit-for-a-given-service-by-systemd"><a href="#how-to-set-limit-for-a-given-service-by-systemd" class="headerlink" title="how to set limit for a given service by systemd"></a>how to set limit for a given service by systemd</h2><p>These can be done from command line with <code>set-property</code> command or edit service file directly.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi xx.service</span></span><br><span class="line">[Service]</span><br><span class="line">MemoryLimit=16G</span><br><span class="line"></span><br><span class="line"><span class="comment"># if command line with &#x27;set-property`, a override file is created at</span></span><br><span class="line"><span class="comment"># /etc/systemd/system/xx.service.d/50-MemoryLimit.conf </span></span><br><span class="line">[Service]</span><br><span class="line">MemoryLimit=16G</span><br></pre></td></tr></table></figure>

<h2 id="how-to-set-limit-for-a-group-of-services"><a href="#how-to-set-limit-for-a-group-of-services" class="headerlink" title="how to set limit for a group of services"></a>how to set limit for a group of services</h2><p>You need to create a slice which defines the limitation for the services.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$touch</span> /usr/lib/systemd/system/test.slice</span><br><span class="line">[Unit]</span><br><span class="line">Description=Test Slice</span><br><span class="line">Before=slices.target</span><br><span class="line"></span><br><span class="line">[Slice]</span><br><span class="line">MemoryAccounting=<span class="literal">true</span></span><br><span class="line">MemoryLimit=2048M</span><br><span class="line">CPUAccounting=<span class="literal">true</span></span><br><span class="line">CPUQuota=25%</span><br><span class="line">TasksMax=4096</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># edit each service unit file</span></span><br><span class="line"><span class="variable">$vi</span> /etc/systemd/system/libvirtd.service</span><br><span class="line">...</span><br><span class="line">[Service]</span><br><span class="line">Slice=docker.slice</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="variable">$systemctl</span> daemon-reload</span><br><span class="line"><span class="variable">$systemctl</span> stop libvirtd</span><br><span class="line"><span class="variable">$systemctl</span> start libvirtd</span><br><span class="line"><span class="variable">$systemctl</span> status libvirtd</span><br><span class="line">● libvirtd.service - Virtualization daemon</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/libvirtd.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Wed 2022-09-21 14:38:46 CST; 1h 0min ago</span><br><span class="line">     Docs: man:libvirtd(8)</span><br><span class="line">           https://libvirt.org</span><br><span class="line"> Main PID: 13573 (libvirtd)</span><br><span class="line">    Tasks: 19 (<span class="built_in">limit</span>: 32768)</span><br><span class="line">   CGroup: /test.slice/libvirtd.service</span><br><span class="line">           ├─12657 /usr/sbin/dnsmasq --conf-file=/var/lib/libvirt/dnsmasq/default.conf --leasefile-ro --dhcp-script=/usr/libexec/libvirt_leaseshelper</span><br><span class="line">           ├─12659 /usr/sbin/dnsmasq --conf-file=/var/lib/libvirt/dnsmasq/default.conf --leasefile-ro --dhcp-script=/usr/libexec/libvirt_leaseshelper</span><br><span class="line">           └─13573 /usr/sbin/libvirtd --listen</span><br></pre></td></tr></table></figure>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://www.freedesktop.org/software/systemd/man/systemd.directives.html#">systemd directive</a></li>
<li><a href="https://www.section.io/engineering-education/understanding-systemd/">understand systemd</a></li>
<li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html-single/resource_management_guide/index#chap-Using_Control_Groups">resource control with systemd</a></li>
<li><a href="https://www.freedesktop.org/software/systemd/man/systemctl.html">systemctl man</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units">systemctl guide</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
        <category>systemd</category>
      </categories>
      <tags>
        <tag>systemd</tag>
        <tag>cgroup</tag>
      </tags>
  </entry>
  <entry>
    <title>virtualization-IO-deep-passthrough</title>
    <url>/2021/08/18/virtualization-IO-deep-passthrough/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>For IO virtualization, A MM supports two well known models: <code>Emulation of devices or Paravirtualization.</code>, like we see Qemu for emulation and virtio for paravirtualization, but both have performance issue, as guest os(guest driver) can’t access physical device directly, it must send IO to intermediate layer(VMM) firstly which reduces performance. there is another voice comes up:<br><code>Can we assign HW resources directly to the VM?</code> if we do, what extra work should support by CPU?</p>
<span id="more"></span>

<p>When a VM or a Guest is launched over the VMM, the address space that the Guest OS is provided as its physical address range, known as <strong>Guest Physical Address (GPA)</strong>, may not be the same as the real Host Physical Address (HPA). <strong>DMA capable devices need HPA to transfer the data to and from physical memory locations</strong>, <strong>we need CPU can translate GPA to HPA when DMA happens</strong>, that’s what IOMMU does, DMA remapping(similar thing for interrupt as well, Interrupt remapping)</p>
<p>The VT-d DMA-remapping hardware logic in the chipset sits between the DMA capable peripheral I&#x2F;O devices and the computer’s physical memory.</p>
<p>IOMMU allows virtual machines to have direct access to hardware I&#x2F;O devices, such as network cards, storage controllers (HBAs), and GPUs.</p>
<h1 id="IOMMU"><a href="#IOMMU" class="headerlink" title="IOMMU"></a>IOMMU</h1><h2 id="DMA-remapping"><a href="#DMA-remapping" class="headerlink" title="DMA remapping"></a>DMA remapping</h2><p>In a direct assignment model(Direct&#x2F;IO), the <code>guest OS device driver is in control of the device</code> and is providing GPA instead of HPA required by the DMA capable device. DMA remapping hardware can be used to do the appropriate conversion. Since the GPA is provided by the VMM it knows the conversion from the GPA to the HPA. The <strong>VMM programs the DMA remapping hardware with the GPA to HPA conversion information so the DMA remapping hardware can perform the necessary translation</strong>. Using the remapping, the data can now be transferred directly to the appropriate buffer of the guests rather than going through an intermediate software emulation layer.</p>
<p><img src="https://software.intel.com/content/dam/develop/external/us/en/images/5658-aspose-words-demos-001-139035.png" alt="IOMMU ARCH"></p>
<p>The basic idea of IOMMU DMA remapping is the same as the MMU for address translation. When the physical IO device do DMA, the address for DMA is called IOVA, <strong>IOMMU first using the device’s address(PCI BDF address) provided by PCI-E when raising interrupt(PCI device does not include this!!!) to find a page table(page table of domain) then using the the IOVA to walk this page table and finally get the host physical address</strong>. This is very like that how the MMU work to translate a virtual address to a physical address. Following figure show the basic idea of DMA remapping, this is the legacy mode, there is also a scalable mode, though the detail differs, the idea is the same.</p>
<p><img src="https://cyun.tech/images/virt/iommu.png" alt="iommu"></p>
<p>The device’s bus is useds to index in Root Table, the root table is 4-KByte in size and contains 256 root-entries. The root-table-entry contains the context-table pointer which references the context-table for all the devices on the bus identified by the root-entry.</p>
<p><strong>A context-entry maps a specific I&#x2F;O device on a bus to the domain to which it is assigned</strong>, and, in turn, to the address translation structures for the domain. Each context-table contains 256 entries, with each entry corresponding to a PCI device function on the bus. For a PCI device, the device and function numbers (lower 8-bits) are used to index into the context-table.</p>
<p><strong>The root-table and context table is setup by the IOMMU driver, the page table is usually setup by the VMM</strong>. Of course, any process can do setup this page table. The IOVA is used as the input for the IOMMU translation, this address is device’s view address. The IOVA can be any address that is meaning for for the guest or process. For example, the qemu&#x2F;kvm uses the GPA as the IOVA and also you can uses another address as the IOVA. The VFIO uses IOMMU to do the translation from GPA to HPA.</p>
<h2 id="Interrupt-remapping"><a href="#Interrupt-remapping" class="headerlink" title="Interrupt remapping"></a>Interrupt remapping</h2><h2 id="IOMMU-groups"><a href="#IOMMU-groups" class="headerlink" title="IOMMU groups"></a>IOMMU groups</h2><p><img src="https://upload.wikimedia.org/wikipedia/commons/1/1c/Example_PCI_Express_Topology.svg" alt="pci-e topology"></p>
<p>VFIO uses IOMMU groups to isolate devices and prevent unintentional Direct Memory Access (DMA) between two devices running on the same host physical machine, which would impact host and guest functionality.</p>
<p>An IOMMU group is defined as the smallest set of devices that can be considered isolated from the IOMMU’s perspective, <strong>devices in the same group can be only assigned to same VM, devices in the same group use the same BDF as request ID when interrupted happens</strong>, VMM uses this request ID to identify VM and set proper IO page table of that VM, if devices in the same group are assigned to different machine, VMM can NOT know which IO page table to use to translated GPA to HPA.</p>
<p><strong>With the exception of bridges, root ports, and switches (all examples of interconnect fabric), all devices within an IOMMU group must be bound to a VFIO device driver or known safe stub driver</strong>, For PCI, these drivers are vfio-pci and pci-stub, then you can assign to VM by passthrough.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show all pci devices(bridges, root ports, switches)</span></span><br><span class="line">$ virsh nodedev-list pci</span><br><span class="line">...</span><br><span class="line">pci_0000_00_1c_3</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># show which iommu groups it belongs to and devices in the same group</span></span><br><span class="line"><span class="comment"># all iommu groups /sys/kernel/iommu_groups/ </span></span><br><span class="line">$ virsh nodedev-dumpxml pci_0000_00_1c_3</span><br><span class="line">&lt;device&gt;</span><br><span class="line">  &lt;name&gt;pci_0000_00_1c_3&lt;/name&gt;</span><br><span class="line">  &lt;path&gt;/sys/devices/pci0000:00/0000:00:1c.3&lt;/path&gt;</span><br><span class="line">  &lt;parent&gt;computer&lt;/parent&gt;</span><br><span class="line">  &lt;driver&gt;</span><br><span class="line">    &lt;name&gt;pcieport&lt;/name&gt;</span><br><span class="line">  &lt;/driver&gt;</span><br><span class="line">  &lt;capability <span class="built_in">type</span>=<span class="string">&#x27;pci&#x27;</span>&gt;</span><br><span class="line">    &lt;domain&gt;0&lt;/domain&gt;</span><br><span class="line">    &lt;bus&gt;0&lt;/bus&gt;</span><br><span class="line">    &lt;slot&gt;28&lt;/slot&gt;</span><br><span class="line">    &lt;<span class="keyword">function</span>&gt;3&lt;/function&gt;</span><br><span class="line">    &lt;product <span class="built_in">id</span>=<span class="string">&#x27;0x8d16&#x27;</span>&gt;C610/X99 series chipset PCI Express Root Port <span class="comment">#4&lt;/product&gt;</span></span><br><span class="line">    &lt;vendor <span class="built_in">id</span>=<span class="string">&#x27;0x8086&#x27;</span>&gt;Intel Corporation&lt;/vendor&gt;</span><br><span class="line">    &lt;capability <span class="built_in">type</span>=<span class="string">&#x27;pci-bridge&#x27;</span>/&gt;</span><br><span class="line">    &lt;iommuGroup number=<span class="string">&#x27;40&#x27;</span>&gt;</span><br><span class="line">      &lt;address domain=<span class="string">&#x27;0x0000&#x27;</span> bus=<span class="string">&#x27;0x00&#x27;</span> slot=<span class="string">&#x27;0x1c&#x27;</span> <span class="keyword">function</span>=<span class="string">&#x27;0x3&#x27;</span>/&gt;</span><br><span class="line">    &lt;/iommuGroup&gt;</span><br><span class="line">    &lt;numa node=<span class="string">&#x27;0&#x27;</span>/&gt;</span><br><span class="line">    &lt;pci-express&gt;</span><br><span class="line">      &lt;<span class="built_in">link</span> validity=<span class="string">&#x27;cap&#x27;</span> port=<span class="string">&#x27;4&#x27;</span> speed=<span class="string">&#x27;5&#x27;</span> width=<span class="string">&#x27;1&#x27;</span>/&gt;</span><br><span class="line">      &lt;<span class="built_in">link</span> validity=<span class="string">&#x27;sta&#x27;</span> speed=<span class="string">&#x27;2.5&#x27;</span> width=<span class="string">&#x27;1&#x27;</span>/&gt;</span><br><span class="line">    &lt;/pci-express&gt;</span><br><span class="line">  &lt;/capability&gt;</span><br><span class="line">&lt;/device&gt;</span><br><span class="line"><span class="comment"># PCI-E device assigned to VM must be bound with vfio-pci driver!!!</span></span><br><span class="line">$ lspci -s 00:1c.3 -v</span><br><span class="line">00:1c.3 PCI bridge: Intel Corporation C610/X99 series chipset PCI Express Root Port <span class="comment">#4 (rev d5) (prog-if 00 [Normal decode])</span></span><br><span class="line">        Flags: bus master, fast devsel, latency 0, IRQ 31, NUMA node 0</span><br><span class="line">        Bus: primary=00, secondary=06, subordinate=07, sec-latency=0</span><br><span class="line">        I/O behind bridge: 00005000-00005fff</span><br><span class="line">        Memory behind bridge: cf000000-d00fffff</span><br><span class="line">        Capabilities: [40] Express Root Port (Slot+), MSI 00</span><br><span class="line">        Capabilities: [80] MSI: Enable+ Count=1/1 Maskable- 64bit-</span><br><span class="line">        Capabilities: [90] Subsystem: Super Micro Computer Inc Device 0852</span><br><span class="line">        Capabilities: [a0] Power Management version 3</span><br><span class="line">        Kernel driver <span class="keyword">in</span> use: pcieport</span><br><span class="line">        Kernel modules: shpchp</span><br></pre></td></tr></table></figure>
<p><a href="https://youtu.be/qQiMMeVNw-o">iommu example</a></p>
<h2 id="vDPA"><a href="#vDPA" class="headerlink" title="vDPA"></a>vDPA</h2><p>Virtual data path acceleration (vDPA) in essence is an approach to standardize the NIC SRIOV data plane using the virtio ring layout and <strong>placing a single standard virtio driver in the guest</strong> decoupled from any vendor implementation, while adding a generic control plane and SW infrastructure to support it.</p>
<p>with vDPA, <strong>Data plane goes directly from the NIC to the guest using the virtio ring layout(need IOMMU support from CPU)</strong>. However each NIC vendor can now continue using its own driver (with a small vDPA add-on) and a generic vDPA driver is added to the kernel to translate the vendor NIC driver&#x2F;control-plane to the virtio control plane.</p>
<p>A “vDPA device” means a type of device whose datapath complies with the virtio specification, but whose control path is vendor specific. like smartNIC(Mellox Bluefield).</p>
<p><img src="https://www.redhat.com/cms/managed-files/2020-08-12-vdpa-kernel-fig1.png"></p>
<p>Passthrough with vDPA framework in kernel(can work also with vDPA in DPDK) and virtio-net-pmd can moved to guest kernel as well, it’s virtio-net</p>
<hr>
<p><img src="https://www.redhat.com/cms/managed-files/2020-08-12-vdpa-kernel-fig2.png"></p>
<p>Passthrough with vDPA framework for container!!!</p>
<ul>
<li><p>In the VM use case since the QEMU exposes a virtio PCI device to the guest, the virtio-net-pmd will use PCI commands on the control plane and the QEMU will translate them to the vDPA kernel APIs (system calls).</p>
</li>
<li><p>In the container use case the virtio-net-pmd will invoke the vDPA kernel APIs (system calls) directly.</p>
</li>
</ul>
<h3 id="vDPA-kernel-framework"><a href="#vDPA-kernel-framework" class="headerlink" title="vDPA kernel framework"></a>vDPA kernel framework</h3><p>Here are some more details about vDPA kernel framework(actually vDPA firstly introduced in DPDK), Basic introduction about vDPA, please refer to <a href="https://cyun.tech/virtualization-IO/#more">vDPA basics</a>.</p>
<p>Why vDPA kernel approach is required even DPDK already implement it?<br>Because there are a number of limitations for DPDK approach:</p>
<ul>
<li><p>DPDK Library dependency on the host side is required for supporting this framework which is another dependency to take into account.</p>
</li>
<li><p>Since the vhost-user only provides userspace APIs, it can’t be connected to kernel subsystems. This means that the consumer of the vDPA interface will lose kernel functionality such as eBPF support.</p>
</li>
<li><p>Since DPDK focuses on the datapath then it doesn’t provide tooling for provisioning and controlling the HW. This also applies to the vDPA DPDK framework.</p>
</li>
</ul>
<p><img src="https://www.redhat.com/cms/managed-files/2020-08-12-vdpa-kernel-fig4.jpg" alt="vDPA kerenel framework"></p>
<ul>
<li><p>The vhost subsystem is the historical data path implementation of virtio inside the kernel. It was used for emulating the datapath of virtio devices on the HOST side. It exposes mature userspace APIs for setting up the kernel data path through vhost device (which are char devices). Various backends have been developed for using different types of vhost device (e.g. networking or SCSI). <strong>The vDPA kernel framework leverages these APIs through this subsystem for control plane</strong> </p>
</li>
<li><p>The virtio subsystem is the historical virtio kernel driver framework used for connecting guests&#x2F;processes to a virtio device. It was used for controlling emulated virtio devices on the guest side. Usually we have the virtio device on the host and virtio driver on the guest which combine to create the virtio interface. This basically enables running applications that leverage vDPA (via the vhost subsystem) and those who do not (via the virtio subsystem) on the same physical vDPA NIC.</p>
</li>
</ul>
<p><strong>As you can see vDPA provides two ways to communicate with it</strong></p>
<ul>
<li>One is from vhost(host kernel exposes a char device), user space can operate vDPA by this char device, like Qemu can uses vhost driver to operate vDPA device(control it).</li>
<li>The other is from virtio driver, like Guest OS kernel uses virtio-net as front end, virtio backend call vDPA to operate vDPA device.</li>
</ul>
<p>By combining the vDPA framework and the vhost&#x2F;virtio subsystems, <strong>kernel virtio drivers or userspace vhost drivers think they are controlling a vhost or virtio device while in practice it’s a vDPA device</strong></p>
<p>vDPA framework is a generic layer, it calls vendor driver for controlling device, so for each device, there must be a vDPA driver(driver plugin which calls vendor driver) inside vDPA framework, a typical vDPA driver is required to implement the following capabilities for control plane.</p>
<ul>
<li><p>Device probing&#x2F;removing: Vendor specific device probing and removing procedure.</p>
</li>
<li><p>Interrupt processing: Vendor or platform specific allocation and processing of the interrupt.</p>
</li>
<li><p>vDPA device abstraction: Implement the functions that are required by the vDPA framework most of which are the translation between virtio control command, vendor specific device interface and registering the vDPA device to the framework</p>
</li>
<li><p>DMA operation: For the device that has its own DMA translation logic, it can require the framework to pass DMA mapping to the driver for implementing vendor specific DMA translation</p>
</li>
</ul>
<p><strong>Since the datapath is offloaded to the vDPA hardware, the hardware vDPA driver becomes thin and simple to implement</strong>. The userspace vhost drivers or kernel virtio drivers control and setup the hardware datapath via vhost ioctls or virtio bus commands (depending on the subsystem you chose). The vDPA framework will then forward the virtio&#x2F;vhost commands to the hardware vDPA drivers which will implement those commands in a vendor specific way. </p>
<p>vDPA framework will also relay the interrupts from vDPA hardware to the userspace vhost drivers and kernel virtio drivers. Doorbell and interrupt passthrough will be supported by the framework as well to achieve the device native performance.</p>
<p><strong>Inside vDPA kernel framework</strong><br><img src="https://www.redhat.com/cms/managed-files/2020-08-17-kernel-fig4.png"></p>
<ul>
<li><p>vhost-vDPA bus driver - This driver connects the vDPA bus to the vhost subsystem and presents a vhost char device to the userspace. This is useful for cases when the datapath is expected to bypass the kernel completely. Userspace drivers can control the vDPA device via vhost ioctls as if a vhost device. A typical use case is for performing direct I&#x2F;O to userspace (or VM). </p>
</li>
<li><p>virtio-vDPA bus driver - This driver bridges the vDPA bus to a virtio bus and from there to a virtio interface. With the help of a virtio-vDPA bus driver, the vDPA device behaves as a virtio device so it can be used by various kernel subsystems such as networking, block, crypto etc. Applications that do not use vhost userspace APIs can keep using userspace APIs that are provided by kernel networking, block and other subsystems.</p>
</li>
</ul>
<p><strong>NOTE: a vdpa device can be bound to only one bus driver</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check all vdpa device(each VF is an vdpa device)</span></span><br><span class="line">$ <span class="built_in">ls</span> /sys/bus/vdpa/devices</span><br><span class="line"><span class="comment"># check bus driver of a vdpa device</span></span><br><span class="line">$  <span class="built_in">ls</span> -l /sys/bus/vdpa/devices/vdpa0/driver</span><br><span class="line"></span><br><span class="line"><span class="comment"># switch bus driver</span></span><br><span class="line">$ <span class="built_in">echo</span> vdpa0 &gt; /sys/bus/vdpa/drivers/vhost_vdpa/unbind</span><br><span class="line">$ <span class="built_in">echo</span> vdpa0 &gt; /sys/bus/vdpa/drivers/virtio_vdpa/bind</span><br><span class="line"></span><br><span class="line"><span class="comment"># check all bus drivers(virtio, vhost)</span></span><br><span class="line">$ <span class="built_in">ls</span>  /sys/bus/vdpa/drivers</span><br></pre></td></tr></table></figure>

<h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul>
<li><p><a href="https://software.intel.com/content/www/us/en/develop/articles/intel-virtualization-technology-for-directed-io-vt-d-enhancing-intel-platforms-for-efficient-virtualization-of-io-devices.html">VT-d from intel</a></p>
</li>
<li><p><a href="https://terenceli.github.io/%E6%8A%80%E6%9C%AF/2019/08/04/iommu-introduction">IOMMU Introduction</a></p>
</li>
<li><p><a href="https://www.redhat.com/en/blog/introduction-vdpa-kernel-framework">vDPA kernel framework</a></p>
</li>
<li><p><a href="https://www.redhat.com/en/blog/vdpa-kernel-framework-part-2-vdpa-bus-drivers-kernel-subsystem-interactions">vDPA bus driver</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>virtualization</category>
        <category>io</category>
      </categories>
      <tags>
        <tag>io virtualization</tag>
        <tag>iommu</tag>
      </tags>
  </entry>
  <entry>
    <title>virtualization-IO-deep-virtio</title>
    <url>/2021/08/18/virtualization-IO-deep-virtio/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>When talking about virtio-networking we can separate the discussion into two layers:</p>
<ul>
<li>Control plane - Used for capability exchange negotiation between the host and guest both for establishing and terminating the data plane.</li>
<li>Data plane - Used for transferring the actual data (packets) between host and guest.</li>
</ul>
<p>It’s important to distinguish between these layers since they have different requirements (such as performance) and different implementations</p>
<p><strong>Fundamentally the data plane is required to be as efficient as possible for moving the packets fast while the control plane is required to be as flexible as possible for supporting different devices and vendors in future architectures.</strong></p>
<span id="more"></span>

<h1 id="virtio-specification"><a href="#virtio-specification" class="headerlink" title="virtio specification"></a>virtio specification</h1><p><strong>virtio spec defines virtual device(like a device from vendor)</strong><br>Virtio is an open specification for virtual machines’ data I&#x2F;O communication, offering a straightforward, efficient, standard and extensible mechanism for virtual devices, rather than boutique per-environment or per-OS mechanisms. It uses the fact that the guest can share memory with the host for I&#x2F;O to implement that.</p>
<p>The virtio specification is based on two elements: devices and drivers. In a typical implementation, the hypervisor(qemu) exposes the virtio devices to the guest through a number of transport methods. By design they look like physical devices to the guest within the virtual machine.</p>
<p>The most common transport method is PCI or PCIe bus. However, <strong>the device can be available at some predefined guest’s memory address (MMIO transport)</strong>. These devices can be completely virtual with no physical counterpart or physical ones exposing a compatible interface.</p>
<p>The typical (and easiest) way to expose a virtio device is through a PCI port since we can leverage the fact that PCI is a mature and well supported protocol in QEMU and Linux drivers. Real PCI hardware exposes its configuration space using a specific physical memory address range (i.e., the driver can read or write the device’s registers by accessing that memory range) and&#x2F;or special processor instructions. In the VM world, <strong>the hypervisor captures accesses to that memory range and performs device emulation, exposing the same memory layout that a real machine would have and offering the same responses. The virtio specification also defines the layout of its PCI Configuration space, so implementing it is straightforward.</strong></p>
<p>When the guest boots and uses the PCI&#x2F;PCIe auto discovering mechanism, <strong>the virtio devices identify themselves with with the PCI vendor ID and their PCI Device ID. The guest’s kernel uses these identifiers to know which driver must handle the device. In particular, the linux kernel already includes virtio drivers.</strong></p>
<p>The virtio drivers must be able to allocate memory regions that both the hypervisor and the devices can access for reading and writing, i.e., via memory sharing. We call data plane the part of the data communication that uses these memory regions, and control plane the process of setting them up.</p>
<p>The virtio kernel drivers share a generic transport-specific interface (e.g: virtio-pci), used by the actual transport and device implementation (such as virtio-net, or virtio-scsi).</p>
<p>The virtio network device is a virtual ethernet card, and it supports multiqueue for TX&#x2F;RX. Empty buffers are placed in <strong>N virtqueues for receiving packets</strong>, and outgoing packets are enqueued into <strong>another N virtqueues for transmission</strong>. <strong>Another virtqueue is used for driver-device communication outside of the data plane</strong>, like to control advanced filtering features, settings like the mac address, or the number of active queues. As a physical NIC, the virtio device supports features such as many offloadings, and can let the real host’s device do them.</p>
<p><strong>Virtio specification: virtqueues</strong></p>
<p>Virtqueues are the mechanism for bulk data transport on virtio devices. Each device can have zero or more virtqueues (link). It consists of a queue of guest-allocated buffers that the host interacts with either by reading them or by writing to them. In addition, <strong>the virtio specification also defines bi-directional notifications:</strong></p>
<ul>
<li>Available Buffer Notification: Used by the driver to signal there are buffers that are ready to be processed by the device</li>
<li>Used Buffer Notification: Used by the device to signal that it has finished processing some buffers.</li>
</ul>
<p>In the PCI case, the guest sends the available buffer notification by writing to a specific memory address, and the device (in this case, QEMU) uses a vCPU interrupt to send the used buffer notification.</p>
<p>The virtio specification also allows the notifications to be enabled or disabled dynamically. That way, devices and drivers can batch buffer notifications or even actively poll for new buffers in virtqueues (busy polling). This approach is better suited for high traffic rates.</p>
<p>In summary, the <strong>virtio driver interface exposes:</strong>  </p>
<ul>
<li>Device’s feature bits (which device and guest have to negotiate)</li>
<li>Status bits</li>
<li>Configuration space (that contains device specific information, like MAC address)</li>
<li>Notification system (configuration changed, buffer available, buffer used)</li>
<li>Zero or more virtqueues</li>
<li>Transport specific interface to the device</li>
</ul>
<h2 id="virtio-in-Qemu-virtio-backend-implement-in-Qemu"><a href="#virtio-in-Qemu-virtio-backend-implement-in-Qemu" class="headerlink" title="virtio in Qemu(virtio backend implement in Qemu)"></a>virtio in Qemu(virtio backend implement in Qemu)</h2><p>Implement data plan in Qemu is the first(early) way, easy to understand, but low performance!!!</p>
<p><img src="https://www.redhat.com/cms/managed-files/2019-09-12-virtio-networking-fig1.png"></p>
<p><strong>Sending data diagram</strong>  </p>
<p><img src="https://www.redhat.com/cms/managed-files/2019-09-12-virtio-networking-fig2.png.jpg"></p>
<h2 id="vhost-virtio-backend-in-kernel"><a href="#vhost-virtio-backend-in-kernel" class="headerlink" title="vhost(virtio backend in kernel)"></a>vhost(virtio backend in kernel)</h2><p>vhost protocol enables us to implement a data plane going directly from the kernel (host) to the guest bypassing the qemu process. </p>
<p><strong>The vhost protocol itself only describes how to establish the data plane</strong>, however. Whoever implements it is also expected to implement the ring layout for describing the data buffers (both host and guest) and the actual send&#x2F;receive packets.  </p>
<p>The vhost API is a message based protocol that allows the hypervisor(it says qemu) to offload the data plane to another component (handler) that performs data forwarding more efficiently. Using this protocol, <strong>the master sends the following configuration information to the handler:</strong></p>
<ul>
<li>The hypervisor’s memory layout. This way, the handler can locate the virtqueues and buffer within the hypervisor’s memory space.</li>
<li>A pair of file descriptors that are used for the handler to send and receive the notifications defined in the virtio spec. These file descriptors are shared between the handler and KVM so they can communicate directly without requiring the hypervisor’s intervention. Note that this notifications can still be dynamically disabled per virtqueue.</li>
</ul>
<p>After this process, the hypervisor(here it says qemu) will no longer process packets (read or write to&#x2F;from the virtqueues). Instead, the dataplane will be completely offloaded to the handler, which can now access the virtqueues’ memory region directly as well as send and receive notifications directly to and from the guest.</p>
<p>The vhost messages can be exchanged in any host-local transport protocol, such as Unix sockets or character devices and the hypervisor can act as a server or as a client (in the context of the communication channel). The hypervisor is the leader of the protocol, the offloading device is a handler and any of them can send messages.</p>
<h3 id="without-dpdk-vhost-net"><a href="#without-dpdk-vhost-net" class="headerlink" title="without dpdk(vhost-net)"></a>without dpdk(vhost-net)</h3><p><img src="https://www.redhat.com/cms/managed-files/2019-09-10-virtio-intro-fig3.jpg"></p>
<p>Above described how the guest can pass the packets to the host kernel using the virtio-networking interface. In order to forward these packets to other guest running on the same host or outside the hosts (such as the internet) we use OVS</p>
<p><img src="https://www.redhat.com/cms/managed-files/2019-09-10-virtio-intro-fig4.jpg"></p>
<p>The vhost-net is a kernel driver that implements the handler side of the vhost protocol to implement an efficient data plane, i.e., packet forwarding. In this implementation, qemu and the vhost-net kernel driver (handler) use ioctls to exchange vhost messages and a couple of eventfd-like file descriptors called <strong>irqfd and ioeventfd(created by Qemu process with ioctl with kvm, then pass it with ioctl with vhost-net)</strong> are used to exchange notifications with the guest.</p>
<p>When vhost-net kernel driver is loaded, it exposes a character device on &#x2F;dev&#x2F;vhost-net. When qemu is launched with vhost-net support it opens it and initializes the vhost-net instance with several ioctl(2) calls. These are necessary to associate the hypervisor(qemu) process with the vhost-net instance, prepare for virtio feature negotiation and pass the guest physical memory mapping to the vhost-net driver by this fd with ioctl.</p>
<p>During the initialization the vhost-net kernel driver <code>creates a kernel thread called vhost-$pid</code>, where $pid is the hypervisor(qemu) process pid. This thread is called the “vhost worker thread”.</p>
<p>A tap device is still used to communicate the VM with the host but now the worker thread handles the I&#x2F;O events i.e. it polls for driver notifications or tap events, and forwards data.</p>
<p><strong>Qemu allocates one eventfd and registers it to both vhost and KVM in order to achieve the notification bypass</strong>. The vhost-$pid kernel thread polls it, and KVM writes to it when the guest writes in a specific address. This mechanism is named ioeventfd. This way, a simple read&#x2F;write operation to a specific guest memory address does not need to go through the expensive QEMU process wakeup and can be routed to the vhost worker thread directly. This also has the advantage of being asynchronous, no need for the vCPU to stop (so no need to do an immediate context switch).</p>
<p>On the other hand, qemu allocates another eventfd and registers it to both KVM and vhost again for direct vCPU interruption injection. This mechanism is called irqfd, and <strong>it allows any process in the host to inject vCPU interrupts to the guest by writing to it</strong>, with the same advantages (asynchronous, no need for immediate context switching, etc).</p>
<p>Note that such changes in the virtio packet processing backend are completely transparent to the guest who still uses the standard virtio interface.</p>
<p><strong>Sending pkt diagram</strong>  </p>
<p><img src="https://www.redhat.com/cms/managed-files/2019-09-12-virtio-networking-fig4.png"></p>
<p><strong>More detail with OVS(add tap interface to ovs or create ovs port by ovs-tool)</strong></p>
<p><img src="https://www.redhat.com/cms/managed-files/2019-09-12-virtio-networking-fig5.png"></p>
<h3 id="with-dpdk-vhost-user"><a href="#with-dpdk-vhost-user" class="headerlink" title="with dpdk(vhost-user)"></a>with dpdk(vhost-user)</h3><p><strong>Solution 1 Guest use virtio-net</strong>  </p>
<p><img src="https://www.redhat.com/cms/managed-files/2019-09-24-virtio-networking-fig1.png"></p>
<p><strong>Solution 2 Guest use virtio-PMD</strong>  </p>
<p><img src="https://www.redhat.com/cms/managed-files/2019-09-20-virtio-and-dpdk-fig3.jpg"></p>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="virtio-pci-vs-vfio-pci"><a href="#virtio-pci-vs-vfio-pci" class="headerlink" title="virtio-pci vs vfio-pci"></a>virtio-pci vs vfio-pci</h2><h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><ul>
<li><a href="https://www.redhat.com/en/blog/introduction-virtio-networking-and-vhost-net">vhost-net from redhat</a></li>
<li><a href="https://www.redhat.com/en/blog/deep-dive-virtio-networking-and-vhost-net">deep dive vhost-net </a></li>
<li><a href="http://blog.vmsplice.net/2011/09/qemu-internals-vhost-architecture.html">how vhost-net works</a></li>
<li><a href="https://www.redhat.com/en/blog/journey-vhost-users-realm">vhost-user details</a></li>
<li><a href="https://www.redhat.com/en/blog/how-vhost-user-came-being-virtio-networking-and-dpdk">vhost-user introduction</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>virtualization-IO</title>
    <url>/2021/08/18/virtualization-IO/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Virtual machine uses host device by three different types.</p>
<ul>
<li>Full Emulated devices</li>
<li>Paravirtualized devices</li>
<li>Physically shared devices</li>
</ul>
<p>As the first way has low performance for IO intensive VM, hence it should not be used in cloud provider, so let’s focus on the later two.<br>Paravirtualization provides a fast and efficient means of communication for guests to use devices on the host machine, The popular one is virtio.</p>
<p>Physically shared devices(Direct&#x2F;IO, Passthrough) is more efficient than Paravirtualization for IO intensive VM, but it needs hardware IOMMU support.</p>
<span id="more"></span>

<h1 id="Virtual-Devices"><a href="#Virtual-Devices" class="headerlink" title="Virtual Devices"></a>Virtual Devices</h1><h2 id="Paravirtulization"><a href="#Paravirtulization" class="headerlink" title="Paravirtulization"></a>Paravirtulization</h2><p>Some paravirtualized devices decrease I&#x2F;O latency and increase I&#x2F;O throughput to near bare-metal levels, while other paravirtualized devices add functionality to virtual machines that is not otherwise available.  </p>
<p>All virtio devices have two parts: the host device(backend) and the guest driver(front end). Paravirtualized device drivers allow the guest operating system access to physical devices on the host system. to use this device, the paravirtualized device drivers must be installed on the guest operating system and set the virtual device with such driver.</p>
<p><strong>Front end driver for different type of virtual device</strong></p>
<ul>
<li><p><strong>The paravirtualized network device (virtio-net)</strong><br>  The paravirtualized network device is a virtual network device that provides network access to virtual machines with increased I&#x2F;O performance and lower latency. </p>
</li>
<li><p><strong>The paravirtualized block device (virtio-blk)</strong><br>  The paravirtualized block device is a high-performance virtual storage device that provides storage to virtual machines with increased I&#x2F;O performance and lower latency. The paravirtualized block device is supported by the hypervisor and is attached to the virtual machine (except for floppy disk drives, which must be emulated). </p>
</li>
<li><p><strong>The paravirtualized controller device (virtio-scsi)</strong><br>  The paravirtualized SCSI controller device provides a more flexible and scalable alternative to virtio-blk. A virtio-scsi guest is capable of inheriting the feature set of the target device, and can handle hundreds of devices compared to virtio-blk, which can only handle 28 devices. </p>
</li>
<li><p><strong>The paravirtualized serial device (virtio-serial)</strong><br>  The paravirtualized serial device is a bytestream-oriented, character stream device, and provides a simple communication interface between the host’s user space and the guest’s user space. </p>
</li>
<li><p><strong>The paravirtualized serial device (virtio-serial)</strong><br>  The paravirtualized serial device is a bytestream-oriented, character stream device, and provides <strong>a simple communication interface between the host’s user space and the guest’s user space.</strong></p>
</li>
</ul>
<p>Requires:</p>
<ul>
<li>Guest: Must install virtio-xx front end driver(most linux already install it)</li>
<li>Host: Must install vhost-xxx backend driver in host(Should install for KVM enabled machine), Host also needs to install driver for physical device, but Guest never access it directly. but backend driver in KVM accesses it.</li>
</ul>
<h2 id="Passthrough"><a href="#Passthrough" class="headerlink" title="Passthrough"></a>Passthrough</h2><p>VFIO attaches PCI devices on the host system directly to virtual machines, <strong>providing guests with exclusive access to PCI devices</strong> for a range of tasks. This enables PCI devices to appear and behave as if they were physically attached to the guest virtual machine.  </p>
<p>VFIO improves on previous PCI device assignment architecture by moving device assignment out of the KVM hypervisor, and <strong>enforcing device isolation at the kernel level</strong>.</p>
<p>With VFIO and IOMMU from hardware, Hypervisor can assign physical device to VM directly, like GPU to a VM, <strong>but in cloud environment, we usually we do not assign the whole physical device(GPU, network card, block device) to one VM directly, as we want to share physical device by different VMs, but still need isolation, this what SR-IOV does,  SR-IOR is a feature provided by PIC-E device, it’s virtualization from hardware.</strong></p>
<blockquote>
<p>SR-IOV (Single Root I&#x2F;O Virtualization) is a PCI Express (PCI-e) standard that extends a single physical PCI function to share its PCI resources as separate virtual functions (VFs). Each function can be used by a different virtual machine via PCI device assignment.<br>An SR-IOV-capable PCI-e device provides a Single Root function (for example, a single Ethernet port) and presents multiple, separate virtual devices as unique PCI device functions. Each virtual device may have its own unique PCI configuration space, memory-mapped registers, and individual MSI-based interrupts. </p>
</blockquote>
<p>SR-IOV has two main functions:</p>
<ul>
<li><p>Physical functions (PFs) which are a full PCI device including discovery, managing and configuring as normal PCI devices. There is a single PF pair per NIC and it provides the actual configuration for the full NIC device</p>
</li>
<li><p>Virtual functions (VFs) are simple PCI functions that only control part of the device and are derived from physical functions. Multiple VFs can reside on the same NIC.</p>
</li>
</ul>
<p>There are two solutions for pass through, the solution two wins!!!</p>
<h3 id="Solution-one"><a href="#Solution-one" class="headerlink" title="Solution one"></a>Solution one</h3><p>There are two cases for solution one vendor specific driver in Guest os</p>
<ul>
<li><p>Using the guest kernel driver: In this approach we use the NIC (vendor specific) driver in the kernel of the guest, while directly mapping the IO memory, so that the HW device can directly access the memory on the guest kernel.</p>
</li>
<li><p>Using the DPDK pmd driver in the guest: In this approach we use the NIC (vendor specific) DPDK pmd driver in the guest userspace, while directly mapping the IO memory, so that the HW device can directly access the memory on the specific userspace process in the guest.</p>
</li>
</ul>
<mark class="label danger">Vendor-VF-PMD in userspace or Vendor-VF driver in guest kernel</mark>

<p><img src="https://www.redhat.com/cms/managed-files/2019-10-02-vdpa-figure3.jpg"></p>
<p><strong>Note</strong></p>
<ul>
<li><p>The data plane is vendor specific and goes directly to the VF.</p>
</li>
<li><p>For SRIOV, Vendor NIC specific drivers are required both in the host kernel (PF driver) and the guest userspace (VF PMD) to enable this solution.</p>
</li>
<li><p>The host kernel driver(for PF) and the guest userspace PMD driver don’t communicate directly. The PF&#x2F;VF drivers are configured through other interfaces (e.g. the host PF driver can be configured by libvirt).</p>
</li>
<li><p>The vendor-VF-pmd in the guest userspace is responsible for configuring the NICs VF while the vendor-PF-driver in the host kernel space is managing the full NIC.</p>
</li>
<li><p>Host: IOMMU support from hardware and must install VFIO driver and vendor driver for PF.</p>
</li>
</ul>
<p><strong>Installed vendor driver in guest has many drawbacks</strong></p>
<ul>
<li>It requires a match between the drivers running in the guest and the actual physical NIC. </li>
<li>If the NIC firmware is upgraded, the guest application driver may need to be upgraded as well.</li>
<li>If the NIC is replaced with a NIC from another vendor, the guest must use another drive the NIC.</li>
<li>Migration of a VM can only be done to a host with the exact same configuration.</li>
</ul>
<h3 id="solution-two"><a href="#solution-two" class="headerlink" title="solution two"></a>solution two</h3><p>Use generic driver(virtio) in Guest OS</p>
<p><strong>Can we still use virtio driver in guest os to operate VF directly?</strong><br>Without hardware support, NO, as VF is vendor specific, different vendors use different formats for data transferring, it does not know data sent by virtio driver, so VF vendor in hardware must implement virtio spec(ring layout), so that for datapplane, it can know data sent with virtio format and send it on wire!!!, this is only for dataplane, in order to send, we need control plan for VF to prepare sending setting like set register etc, if we use virtio, there must be a guy in middle to convert virtio control to vendor specific, that’s virtio data path acceleration (vDPA) does, it’s only for control plane, In summary, offload dataplane to hardware, use vDPA for control plane.</p>
<p>Why not offload control plan to HW as well?<br>Control plan supports the virtio control spec including discovery, feature negotiation, establishing&#x2F;terminating the data plane, and so on,it is more complicated and requires interactions with memory management units, hence it’s not offload to HW.</p>
<p>Virtual data path acceleration (vDPA) in essence is an approach to standardize the NIC SRIOV data plane using the virtio ring layout and placing a single standard virtio driver in the guest decoupled from any vendor implementation, while adding a generic control plane and SW infrastructure to support it.</p>
<p>with vDPA, Data plane goes directly from the NIC to the guest using the virtio ring layout. However each NIC vendor can now continue using its own driver (with a small vDPA add-on) and a generic vDPA driver is added to the kernel to translate the vendor NIC driver&#x2F;control-plane to the virtio control plane.</p>
<p><img src="https://www.redhat.com/cms/managed-files/2019-10-02-vdpa-figure5.jpg"></p>
<mark class="label danger">virtio-net-pmd can be replaced with virtio-net in guest kernel and vDPA can be in DPDK as well(actually vDPA framework in kernel merged March 2020, while in DPDK, it's April 2018! and deployed in production environment)</mark>

<p><strong>Solution two requires</strong></p>
<ul>
<li>Guest: virtio driver</li>
<li>Host: IOMMU support from CPU, VFIO driver, virtio support in PCI-E hardware(smartNIC), vDPA generic framework and vDPA for vendor specific plugin, vendor driver(vDPA generic-&gt;vDPA vendor plugin-&gt;vendor driver)</li>
</ul>
<p><strong>Cons</strong></p>
<ul>
<li>Live migration—Providing live migration between different vendor NICs and versions given the ring layout is now standard in the guest.</li>
<li>Providing a standard <strong>accelerated interface for containers</strong></li>
<li>The bare-metal vision—a single generic NIC driver—Forward looking, the <strong>virtio-net driver can be enabled as a bare-metal driver</strong>, while using the vDPA SW infrastructure in the kernel to enable a single generic NIC driver to drive different HW NICs (similar, e.g. to the NVMe driver for storage devices).</li>
</ul>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_getting_started_guide/sec-virtualization_getting_started-products-virtualized-hardware-devices">virtual device</a></li>
<li><a href="https://www.redhat.com/en/blog/achieving-network-wirespeed-open-standard-manner-introducing-vdpa">vDPA introduction</a></li>
</ul>
]]></content>
      <categories>
        <category>virtualization</category>
        <category>io</category>
      </categories>
      <tags>
        <tag>virtualization</tag>
        <tag>virtio</tag>
        <tag>passthrough</tag>
      </tags>
  </entry>
  <entry>
    <title>virtualization-cpu</title>
    <url>/2021/08/18/virtualization-cpu/</url>
    <content><![CDATA[<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="Intel-vt-x-vs-vt-d"><a href="#Intel-vt-x-vs-vt-d" class="headerlink" title="Intel vt-x vs vt-d"></a>Intel vt-x vs vt-d</h2><p>VT-x is CPU virtualization technology from intel, while VT-d is IO virtualization technology from intel as well.</p>
<ul>
<li>VT-x which supports root mode and vmx mode for cpu and series of instructions for use to support cpu virtualization.</li>
<li>VT-d(Intel® Virtualization Technology for Directed I&#x2F;O) is technology which supports IOMMU, hence can provide Direct&#x2F;IO, IO passthrough to guest VM.</li>
</ul>
<h2 id="How-to-enable-vt-x-and-vt-d"><a href="#How-to-enable-vt-x-and-vt-d" class="headerlink" title="How to enable vt-x and vt-d"></a>How to enable vt-x and vt-d</h2><p>If you CPU supports these, there is a switch in BIOS to enable&#x2F;disable them, the switch is mostly located at Processor tab.</p>
<p><strong>check VT-x enabled or not</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vmx Virtual Machine Extensions</span></span><br><span class="line">$ lscpu | grep vmx</span><br><span class="line">Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch epb cat_l3 cdp_l3 intel_pt tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm rdt_a rdseed adx smap xsaveopt cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts</span><br></pre></td></tr></table></figure>
<p><strong>check VT-d enabled or not</strong><br>When vt-d is enable and IOMMU kernel is loaded, at system boot time, IOMMU is initialized</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># centos7</span></span><br><span class="line">$ dmesg | grep <span class="string">&quot;DMAR:&quot;</span></span><br><span class="line">[    0.000000] DMAR: IOMMU enabled</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>virtualization-mem-balloon</title>
    <url>/2022/04/07/virtualization-mem-balloon/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Memory ballooning is a memory management feature used in most virtualization platforms which <code>allows a host system to artificially enlarge its pool of memory by taking advantage or reclaiming unused memory previously allocated to various virtual machines</code>.<br>This is achieved through a <code>balloon driver which is installed on the guest</code> operating system which the <code>hypervisor communicates with when it needs to reclaim memory through ballooning</code>.</p>
<p>Through memory ballooning, a host server can <code>reclaim unused memory from other less busy virtual machines and reassign it to ones that require it more</code>. Theoretically, <code>a server with 32GB of memory might be able to support a combined virtual machine memory capacity allocation of 64GB</code> simply because all of those virtual machines will not be using the maximum amount of memory they have been assigned at the same time.</p>
<span id="more"></span>
<h1 id="Inside"><a href="#Inside" class="headerlink" title="Inside"></a>Inside</h1><h2 id="How-balloon-driver-works"><a href="#How-balloon-driver-works" class="headerlink" title="How balloon driver works"></a>How balloon driver works</h2><p>VirtIO provides Memory Ballooning: the host system can reclaim memory from virtual machines (VM) by telling them to give back part of their memory to the host system. This is achieved by inflating the memory balloon(balloon driver) inside the VM, which reduced the memory available to other tasks inside the VM. Which memory pages are given back is the decision of the guest operating system (OS): <code>It just tells the host OS which pages it does no longer need and will no longer access. The host OS then un-maps(kvm in kernel) those pages from the guests and marks them as unavailable for the guest VM. The host system can then use them for other tasks like starting even more VMs or other processes.</code></p>
<p>If later on the VM need more free memory itself, the host can later on return pages to the guest and shrink the holes. This allows to dynamically adjust the memory available to each VM even while the VMs keep running.</p>
<p><code>The balloon driver(virtio_balloon)</code> in each guest operating system <code>keeps track of the excess memory of each VM</code> and when the hypervisor calls for a memory reclamation through ballooning, the balloon driver in the VM pins down a specific amount of memory so that the VM cannot consume it, and then the hypervisor reclaims that pinned memory for reallocation. <code>If there is a scarcity of unused memory then a memory swap might be initiated in order to fulfill the balloon quota</code>. If this happens too much, there would be a lot of I&#x2F;O overhead between the various VMs that are doing memory swapping with the disk and might adversely affect overall performance of the virtual system</p>
<p>The ballooning driver inflation is a smart way to claim memory from the virtual machine to the host. It’s beneficial because it will only generally claim back memory which is free inside the virtual machine, thus is usually a non-disruptive memory reclaim technique.</p>
<h2 id="Cost-of-memory-balloon"><a href="#Cost-of-memory-balloon" class="headerlink" title="Cost of memory balloon"></a>Cost of memory balloon</h2><p>Memory ballooning while an impressive solution can cause issues to virtual machines that have reoccurring spikes in memory demand. Also, <strong>ballooning will not work if your virtual machines are using all of their memory by applications within the virtual machine, this is commonly noticed in applications such as databases.</strong></p>
<p>Ballooning can also become a problem if it’s relied upon too much by the hypervisor. In an ideal situation, there would be no ballooning taking place. This would indicate a healthy environment. Ballooning would only commence if there is too much demand for memory on the host, in other words when the ESXi host does not have enough free physical memory to allocate to virtual machines. <strong>If ballooning is happening all the time then a performance issue can start on the host</strong>.</p>
<p>Many ballooning operations could cause additional CPU cycles to be used to perform the ballooning operations. This, in turn, could <strong>reduce the amount of physical CPU available to virtual machines on the host.</strong></p>
<h2 id="Suggestion"><a href="#Suggestion" class="headerlink" title="Suggestion"></a>Suggestion</h2><ol>
<li>Set proper balloon size of each VM</li>
<li>Disable memory balloon for vm used for database</li>
</ol>
<p><strong>libvirt</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># disable memballoon</span></span><br><span class="line">&lt;devices&gt;</span><br><span class="line">  &lt;memballoon model=<span class="string">&#x27;none&#x27;</span>/&gt;</span><br><span class="line">&lt;/devices&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable it </span></span><br><span class="line">&lt;devices&gt;</span><br><span class="line">  &lt;memballoon model=<span class="string">&#x27;virtio&#x27;</span>/&gt;</span><br><span class="line">&lt;/devices&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://www.cbtnuggets.com/blog/certifications/cloud/memory-ballooning-managing-memory-in-a-virtual-environment">memory balloon</a></li>
<li><a href="https://www.geeksforgeeks.org/memory-ballooning-in-os/">memory balloon pro and cons</a></li>
</ul>
]]></content>
      <categories>
        <category>virtualization</category>
        <category>memory</category>
      </categories>
      <tags>
        <tag>virtualization</tag>
        <tag>memory balloon</tag>
      </tags>
  </entry>
  <entry>
    <title>virtualization-memory</title>
    <url>/2021/08/18/virtualization-memory/</url>
    <content><![CDATA[<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="How-to-enable-EPT"><a href="#How-to-enable-EPT" class="headerlink" title="How to enable EPT"></a>How to enable EPT</h2><p>EPT is feature of CPU, but there is no independent switch for EPT feature, to turn it on or off, that means if you CPU supports it, <code>it&#39;s turned on or off along with VT-X from BIOS</code><br><strong>check EPT supported or not</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> lscpu | grep ept</span><br><span class="line">Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch epb cat_l3 cdp_l3 intel_pt tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm rdt_a rdseed adx smap xsaveopt cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>virtualization-serverless-computing</title>
    <url>/2021/12/15/virtualization-serverless-computing/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>virtualization-virtio</title>
    <url>/2022/04/07/virtualization-virtio/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Virtual I&#x2F;O devices, or virtio for short, are virtualized devices that are known to be virtualized devices. Usually, a virtual machine will emulate real hardware, so the registers and setup are the same for actual hardware versus emulated hardware. </p>
<p>The virtio architecture has three layers: <code>(1) the backend or transport layer, like PCI express, (2) the virtio layer, and (3) the device layer</code>. The transport layer in our case will be PCI express. So, the backend tells us the vendor specific capabilities that the virtio system understands and what they mean. The data layer consists of several circular rings that are used to read or write data from and to the virtio device. Finally, the device layer tells us how we should read or write data.</p>
<p>This means we will have three sections in our kernel: <code>(1) PCIe and associated functions, (2) Virtio and associated functions, and (3) device specific(block, networ, scsi) functions</code>. Each one layer should be agnostic of the other layers.</p>
<span id="more"></span>

<h1 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list loaded virtio drivers.</span></span><br><span class="line">$ lsmode | grep virtio</span><br><span class="line">virtio_balloon         18015  0 </span><br><span class="line">virtio_net             28063  0 </span><br><span class="line">virtio_console         28075  1 </span><br><span class="line">virtio_blk             18222  2 </span><br><span class="line">virtio_pci             22985  0 </span><br><span class="line">virtio_ring            22746  5 virtio_blk,virtio_net,virtio_pci,virtio_balloon,virtio_console</span><br><span class="line">virtio                 14959  5 virtio_blk,virtio_net,virtio_pci,virtio_balloon,virtio_console</span><br><span class="line"></span><br><span class="line"><span class="comment"># check virtio mode info</span></span><br><span class="line">$ modinfo virtio_net</span><br><span class="line">filename:       /lib/modules/3.10.0-957.el7.x86_64/kernel/drivers/net/virtio_net.ko.xz</span><br><span class="line">license:        GPL</span><br><span class="line">description:    Virtio network driver</span><br><span class="line">retpoline:      Y</span><br><span class="line">rhelversion:    7.6</span><br><span class="line">srcversion:     5E7651CC01452FC98F9E3F4</span><br><span class="line"><span class="built_in">alias</span>:          virtio:d00000001v*</span><br><span class="line">depends:        virtio,virtio_ring</span><br><span class="line">intree:         Y</span><br><span class="line">vermagic:       3.10.0-957.el7.x86_64 SMP mod_unload modversions </span><br><span class="line">signer:         CentOS Linux kernel signing key</span><br><span class="line">sig_key:        B7:0D:CF:0D:F2:D9:B7:F2:91:59:24:82:49:FD:6F:E8:7B:78:14:27</span><br><span class="line">sig_hashalgo:   sha256</span><br><span class="line">parm:           napi_weight:int</span><br><span class="line">parm:           csum:bool</span><br><span class="line">parm:           gso:bool</span><br><span class="line"></span><br><span class="line"><span class="comment"># more info about this mode</span></span><br><span class="line">$ <span class="built_in">ls</span>  /sys/module/virtio_net</span><br><span class="line">coresize  drivers  holders  initsize  initstate  notes  parameters  refcnt  rhelversion  sections  srcversion  taint  uevent</span><br><span class="line"></span><br><span class="line"><span class="comment"># more about mode driver</span></span><br><span class="line">$ <span class="built_in">ls</span> /sys/module/virtio_net/drivers/</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr  7 10:44 virtio:virtio_net -&gt; ../../../bus/virtio/drivers/virtio_net</span><br><span class="line"></span><br><span class="line"><span class="comment"># Under virtio_net driver, you can bind and unbind devices to this driver, and check devices uses this driver.</span></span><br><span class="line">$ <span class="built_in">ls</span> -al  /sys/module/virtio_net/drivers/virtio\:virtio_net/</span><br><span class="line">--w------- 1 root root 4096 Apr  7 10:44 <span class="built_in">bind</span></span><br><span class="line">lrwxrwxrwx 1 root root    0 Apr  7 10:44 module -&gt; ../../../../module/virtio_net</span><br><span class="line">--w------- 1 root root 4096 Apr  7 10:44 uevent</span><br><span class="line">--w------- 1 root root 4096 Apr  7 10:44 unbind</span><br><span class="line">lrwxrwxrwx 1 root root    0 Apr  7 10:44 virtio0 -&gt; ../../../../devices/pci0000:00/0000:00:03.0/virtio0</span><br><span class="line"></span><br><span class="line"><span class="comment"># check devices that use virtio_net driver</span></span><br><span class="line">$ <span class="built_in">ls</span> /sys/module/virtio_net/drivers/virtio\:virtio_net/virtio0</span><br><span class="line">device  driver  features  modalias  net  power  status  subsystem  uevent  vendor</span><br><span class="line"></span><br><span class="line"><span class="comment"># get all virtio devices</span></span><br><span class="line">$ lspci  | grep virt</span><br><span class="line">00:03.0 Ethernet controller: Red Hat, Inc. Virtio network device</span><br><span class="line">00:04.0 Communication controller: Red Hat, Inc. Virtio console</span><br><span class="line">00:05.0 SCSI storage controller: Red Hat, Inc. Virtio block device</span><br><span class="line">00:06.0 Unclassified device [00ff]: Red Hat, Inc. Virtio memory balloon</span><br><span class="line"></span><br><span class="line"><span class="comment"># more info about virtio device</span></span><br><span class="line">$ lspci -kvv -s 00:03.0</span><br><span class="line">00:03.0 Ethernet controller: Red Hat, Inc. Virtio network device</span><br><span class="line">        Subsystem: Red Hat, Inc. Device 0001</span><br><span class="line">        Physical Slot: 3</span><br><span class="line">        Control: I/O+ Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR+ FastB2B- DisINTx+</span><br><span class="line">        Status: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast &gt;TAbort- &lt;TAbort- &lt;MAbort- &gt;SERR- &lt;PERR- INTx-</span><br><span class="line">        Latency: 0</span><br><span class="line">        Interrupt: pin A routed to IRQ 10</span><br><span class="line">        Region 0: I/O ports at c000 [size=64]</span><br><span class="line">        Region 1: Memory at febf1000 (32-bit, non-prefetchable) [size=4K]</span><br><span class="line">        Region 4: Memory at fe000000 (64-bit, prefetchable) [size=16K]</span><br><span class="line">        Expansion ROM at febe0000 [disabled] [size=64K]</span><br><span class="line">        Capabilities: [98] MSI-X: Enable+ Count=10 Masked-</span><br><span class="line">                Vector table: BAR=1 offset=00000000</span><br><span class="line">                PBA: BAR=1 offset=00000800</span><br><span class="line">        Capabilities: [84] Vendor Specific Information: VirtIO: &lt;unknown&gt;</span><br><span class="line">                BAR=0 offset=00000000 size=00000000</span><br><span class="line">        Capabilities: [70] Vendor Specific Information: VirtIO: Notify</span><br><span class="line">                BAR=4 offset=00003000 size=00001000 multiplier=00000004</span><br><span class="line">        Capabilities: [60] Vendor Specific Information: VirtIO: DeviceCfg</span><br><span class="line">                BAR=4 offset=00002000 size=00001000</span><br><span class="line">        Capabilities: [50] Vendor Specific Information: VirtIO: ISR</span><br><span class="line">                BAR=4 offset=00001000 size=00001000</span><br><span class="line">        Capabilities: [40] Vendor Specific Information: VirtIO: CommonCfg</span><br><span class="line">                BAR=4 offset=00000000 size=00001000</span><br><span class="line">        Kernel driver <span class="keyword">in</span> use: virtio-pci</span><br><span class="line">        Kernel modules: virtio_pci</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> /proc/iomem </span><br><span class="line">00000000-00000fff : reserved</span><br><span class="line">00001000-0009fbff : System RAM</span><br><span class="line">0009fc00-0009ffff : reserved</span><br><span class="line">000a0000-000bffff : PCI Bus 0000:00</span><br><span class="line">000c0000-000c97ff : Video ROM</span><br><span class="line">000c9800-000ca1ff : Adapter ROM</span><br><span class="line">000ca800-000ccbff : Adapter ROM</span><br><span class="line">000f0000-000fffff : reserved</span><br><span class="line">  000f0000-000fffff : System ROM</span><br><span class="line">00100000-bffd8fff : System RAM</span><br><span class="line">  2b000000-350fffff : Crash kernel</span><br><span class="line">  9c200000-9c97c25e : Kernel code</span><br><span class="line">  9c97c25f-9cf661ff : Kernel data</span><br><span class="line">  9d145000-9d450fff : Kernel bss</span><br><span class="line">bffd9000-bfffffff : reserved</span><br><span class="line">c0000000-febfffff : PCI Bus 0000:00</span><br><span class="line">  fd000000-fdffffff : 0000:00:02.0</span><br><span class="line">    fd000000-fdffffff : bochs-drm</span><br><span class="line">  fe000000-fe003fff : 0000:00:03.0    -----&gt; here <span class="keyword">for</span> 00.03.0 iomem region 4: 16K</span><br><span class="line">    fe000000-fe003fff : virtio-pci-modern   </span><br><span class="line">  fe004000-fe007fff : 0000:00:04.0</span><br><span class="line">    fe004000-fe007fff : virtio-pci-modern</span><br><span class="line">  fe008000-fe00bfff : 0000:00:05.0</span><br><span class="line">    fe008000-fe00bfff : virtio-pci-modern</span><br><span class="line">  fe00c000-fe00ffff : 0000:00:06.0</span><br><span class="line">    fe00c000-fe00ffff : virtio-pci-modern</span><br><span class="line">  febd0000-febdffff : 0000:00:02.0</span><br><span class="line">  febe0000-febeffff : 0000:00:03.0    -----&gt; here <span class="keyword">for</span> 00.03.0 <span class="keyword">for</span> expension ram: 64K</span><br><span class="line">  febf0000-febf0fff : 0000:00:02.0</span><br><span class="line">    febf0000-febf0fff : bochs-drm</span><br><span class="line">  febf1000-febf1fff : 0000:00:03.0    -----&gt; here <span class="keyword">for</span> 00.03.0 <span class="keyword">for</span> region 1: 4K</span><br><span class="line">  febf2000-febf2fff : 0000:00:04.0</span><br><span class="line">  febf3000-febf3fff : 0000:00:05.0</span><br><span class="line">fec00000-fec003ff : IOAPIC 0</span><br><span class="line">fee00000-fee00fff : Local APIC</span><br><span class="line">feffc000-feffffff : reserved</span><br><span class="line">fffc0000-ffffffff : reserved</span><br><span class="line">100000000-23fffffff : System RAM</span><br></pre></td></tr></table></figure>

<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://marz.utk.edu/my-courses/cosc562/virtio/">virto overview</a></li>
<li><a href="https://projectacrn.github.io/latest/developer-guides/hld/hld-virtio-devices.html">virtio inside</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>yum-rpm-pkg</title>
    <url>/2021/07/14/yum-rpm-pkg/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>YUM is the primary package management tool for <code>installing, updating, removing, and managing software packages in Red Hat Enterprise Linux</code>. YUM performs dependency resolution when installing, updating, and removing software packages.</p>
<p>RPM is a popular package management tool in Red Hat Enterprise Linux-based distros. Using RPM, you can install, uninstall, and query individual software packages. Still, it <code>cannot manage dependency resolution like YUM</code>. RPM does provide you useful output, including a list of required packages. An RPM package consists of an archive of files and metadata. Metadata includes helper scripts, file attributes, and information about packages.</p>
<h2 id="Yum"><a href="#Yum" class="headerlink" title="Yum"></a>Yum</h2><p>Yum is much more useful than rpm as it resolves dependencies of the package and installs them all!, First yum download meta data of packages from enalbed repo, rpm is downloaded only when it’s installing. any another command like search, list only check the meta data.</p>
<h3 id="Useful-command"><a href="#Useful-command" class="headerlink" title="Useful command"></a>Useful command</h3><p><strong>conf</strong></p>
<ul>
<li>&#x2F;etc&#x2F;yum.conf: global conf</li>
<li>&#x2F;etc&#x2F;yum.repos.d&#x2F;: each repos</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show all repos, disabled and enabled</span></span><br><span class="line">$ yum repolist all </span><br><span class="line"></span><br><span class="line"><span class="comment"># yum cache</span></span><br><span class="line">$ yum clean all</span><br><span class="line">$ yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment"># show packages from local cache, no auto cache update</span></span><br><span class="line">$ yum list                   <span class="comment"># installed and not</span></span><br><span class="line">$ yum list libvirt           <span class="comment"># installed and not of given package</span></span><br><span class="line">$ yum list installed         <span class="comment"># installed only</span></span><br><span class="line">$ yum list installed libvirt <span class="comment"># installed only of given package</span></span><br><span class="line"><span class="comment"># shell-style glob</span></span><br><span class="line">$ yum list mysql*    <span class="comment"># installed and not pkg with prefix mysql</span></span><br><span class="line"></span><br><span class="line">$ yum install yum-utils <span class="comment"># can trigger cache update</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show latest version of ipvsadm(will trigger cache update) of repo</span></span><br><span class="line">$ repoquery ipvsadm</span><br><span class="line"></span><br><span class="line"><span class="comment"># show files of given pkgs from local cache and will trigger cache update</span></span><br><span class="line"><span class="comment"># bash can be installed or not(list files of given packages)</span></span><br><span class="line">$ repoquery --list bash</span><br><span class="line"></span><br><span class="line">mysql++.x86_64  3.1.0-12.el7    epel  <span class="comment"># not install available from epel repo</span></span><br><span class="line">ipvsadm.x86_64  1.27-8.el7      @base <span class="comment"># installed from base repo: @ indicate installed</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check all packages contains ipvs in its name(package name)</span></span><br><span class="line">$ yum search ipvs <span class="comment"># wildcard searching</span></span><br><span class="line"></span><br><span class="line">$ yum info ipvsadm        <span class="comment"># show basic info of a package installed or not, no auto cache update</span></span><br><span class="line">$ yum provides /etc/fstab <span class="comment"># show which package(installed or not) has such file from local cache, no auto cache update</span></span><br><span class="line">$ yum provides <span class="built_in">rm</span>         <span class="comment"># show which package(installed or not) has rm binary from local cache, no auto cache update</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install, will trigger cache update</span></span><br><span class="line">$ yum install -y ipvsadm</span><br><span class="line">$ yum remove ipvsadm</span><br><span class="line"></span><br><span class="line">$ yum grouplist</span><br><span class="line">$ yum groupinfo <span class="string">&quot;Development tools&quot;</span> <span class="comment"># show what packages in this group</span></span><br><span class="line">$ yum groupinstall -y <span class="string">&quot;Development Tools&quot;</span> <span class="comment"># install group of packages</span></span><br><span class="line">$ yum groupremove</span><br><span class="line"></span><br><span class="line"><span class="comment">######################## Download file of given rpm #########################</span></span><br><span class="line">$ yumdownloader ipvsadm                                 <span class="comment"># save at current dir</span></span><br><span class="line">$ yum install --downloadonly ipvsadm                    <span class="comment"># saved at /var/cache/yum/x86_64/</span></span><br><span class="line">$ yum install --downloadonly --downloaddir=/tmp ipvsadm</span><br><span class="line">$ yumdownloader --<span class="built_in">source</span> ipvsadm                        <span class="comment"># download ipvsadm-xxx-src.rpm</span></span><br><span class="line"><span class="comment">######################## Download file of given rpm #########################</span></span><br><span class="line"></span><br><span class="line">$ yum <span class="built_in">history</span> <span class="comment"># show what operations happened</span></span><br><span class="line">$ yum <span class="built_in">history</span> undo &lt;<span class="built_in">id</span>&gt; <span class="comment"># undo an operation</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#####################upgrade and downgrade####################################</span></span><br><span class="line"><span class="comment"># list all possible version of given packet from local cache</span></span><br><span class="line">$ yum provides ipvsadm</span><br><span class="line"></span><br><span class="line"><span class="comment"># check current installed version</span></span><br><span class="line">$ rpm -qa | grep ipvsadm</span><br><span class="line"></span><br><span class="line"><span class="comment"># upgrade to latest or specific version</span></span><br><span class="line"><span class="comment"># NOTE for upgrade, package must be installed before!!!</span></span><br><span class="line">$ yum upgrade libvirt</span><br><span class="line">Package(s) libvirt available, but not installed.</span><br><span class="line"></span><br><span class="line"><span class="comment"># upgrade does not run daemon-reload and service restart!!!</span></span><br><span class="line">$ yum upgrade -y ipvsadm <span class="comment"># can trigger local cache update</span></span><br><span class="line">$ yum upgrade -y ipvsadm-1.27-7.el7.x86_64 <span class="comment"># can trigger local cache update</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yum upgrade return 0 (OK) !!!</span></span><br><span class="line"><span class="comment"># if packet does not exist </span></span><br><span class="line"><span class="comment"># or upgrade to specific version or latest</span></span><br><span class="line"></span><br><span class="line">$ yum upgrade -y no-exist-package</span><br><span class="line">Loaded plugins: fastestmirror, langpacks, priorities</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">47 packages excluded due to repository priority protections</span><br><span class="line">No Match <span class="keyword">for</span> argument: no-exist-package</span><br><span class="line">No package no-exist-package available.</span><br><span class="line">No packages marked <span class="keyword">for</span> update</span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line"></span><br><span class="line"><span class="comment"># downgrade to previous version or specific version</span></span><br><span class="line"><span class="comment"># NOTE for upgrade, package must be installed before!!!</span></span><br><span class="line">$ yum downgrade ipvsadm</span><br><span class="line">$ yum downgrade ipvsadm-1.27-7.el7.x86_64</span><br><span class="line"><span class="comment">#####################upgrade and downgrade####################################</span></span><br></pre></td></tr></table></figure>
<h2 id="RPM"><a href="#RPM" class="headerlink" title="RPM"></a>RPM</h2><p>Name Format of RPM <code>name-version-release.os.arch.</code>, example: bash-4.3.2-5.el6.x86_64.rpm</p>
<ul>
<li>name: package name</li>
<li>version: package version</li>
<li>release: identifier of RPM itself, not related to package</li>
<li>os: operation system</li>
<li>arch：i686、x86_64、amd64、ppc（power-pc）、noarch</li>
</ul>
<p><strong>RPM repo</strong></p>
<ul>
<li><a href="http://mirrors.sohu.com/">http://mirrors.sohu.com</a></li>
<li><a href="http://rpmfind.net/">http://rpmfind.net</a></li>
<li><a href="http://rpm.pbone.net/">http://rpm.pbone.net/</a></li>
</ul>
<p><code>epel: extended packages provided by RedHat, Maintained by Fedora.</code></p>
<h3 id="Useful-command-for-rpm"><a href="#Useful-command-for-rpm" class="headerlink" title="Useful command for rpm"></a>Useful command for rpm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Install</span></span><br><span class="line">$ rpm -ivh xx.rpm</span><br><span class="line">$ rpm -ivh https://xxx.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># rebuild xx.rpm from source, then install it</span></span><br><span class="line">$ rpm -rebuild *.src.rpm</span><br><span class="line">$ rpm -ivh /usr/src/dist/RPMS/xx.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># Query</span></span><br><span class="line">$ rpm -qa                   <span class="comment"># check all installed packages</span></span><br><span class="line">$ rpm -q ipvsadm            <span class="comment"># check if ipvsadm installed or not</span></span><br><span class="line"></span><br><span class="line">$ rpm -qi ipvsadm           <span class="comment"># check basic info of this installed rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># this requires ipvsadm must be installed!!!</span></span><br><span class="line">$ rpm -qlv ipvsadm          <span class="comment"># check all installed files of given installed rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># preinstall scriptlet – this will run before a package is installed</span></span><br><span class="line"><span class="comment"># postinstall scriptlet – this will run after a package is installed</span></span><br><span class="line"><span class="comment"># preuninstall scriptlet – this will run before a package is uninstalled</span></span><br><span class="line"><span class="comment"># postuninstall scriptlet – this will run after a package is uninstalled</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check scripts of the installed rpm, post/pre etc</span></span><br><span class="line">$ rpm -q --scripts libvirt</span><br><span class="line">preinstall scriptlet (using /bin/sh):</span><br><span class="line"><span class="comment"># &#x27;libvirt&#x27; group is just to allow password-less polkit access to</span></span><br><span class="line"><span class="comment"># libvirtd. The uid number is irrelevant, so we use dynamic allocation</span></span><br><span class="line"><span class="comment"># described at the above link.</span></span><br><span class="line">getent group libvirt &gt;/dev/null || groupadd -r libvirt</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line">postinstall scriptlet (using /bin/sh):</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> -eq 1 ] ; <span class="keyword">then</span> </span><br><span class="line">        <span class="comment"># Initial installation </span></span><br><span class="line">        systemctl preset virtlockd.socket virtlogd.socket libvirtd.service &gt;/dev/null 2&gt;&amp;1 || : </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">preuninstall scriptlet (using /bin/sh):</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> -eq 0 ] ; <span class="keyword">then</span> </span><br><span class="line">        <span class="comment"># Package removal, not upgrade </span></span><br><span class="line">        systemctl --no-reload <span class="built_in">disable</span> libvirtd.service virtlogd.socket virtlogd.service virtlockd.socket virtlockd.service &gt; /dev/null 2&gt;&amp;1 || : </span><br><span class="line">        systemctl stop libvirtd.service virtlogd.socket virtlogd.service virtlockd.socket virtlockd.service &gt; /dev/null 2&gt;&amp;1 || : </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">postuninstall scriptlet (using /bin/sh):</span><br><span class="line">/bin/systemctl daemon-reload &gt;/dev/null 2&gt;&amp;1 || :</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> -ge 1 ] ; <span class="keyword">then</span></span><br><span class="line">    /bin/systemctl reload-or-try-restart virtlockd.service &gt;/dev/null 2&gt;&amp;1 || :</span><br><span class="line">    /bin/systemctl reload-or-try-restart virtlogd.service &gt;/dev/null 2&gt;&amp;1 || :</span><br><span class="line">    /bin/systemctl try-restart libvirtd.service &gt;/dev/null 2&gt;&amp;1 || :</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># In upgrade scenario we must explicitly enable virtlockd/virtlogd</span></span><br><span class="line"><span class="comment"># sockets, if libvirtd is already enabled and start them if</span></span><br><span class="line"><span class="comment"># libvirtd is running, otherwise you&#x27;ll get failures to start</span></span><br><span class="line"><span class="comment"># guests</span></span><br><span class="line"></span><br><span class="line">$ rpm -qf /usr/sbin/ipvsadm <span class="comment"># check which rpm this file belongs to</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uninstall</span></span><br><span class="line">$ rpm -e ipvsadm</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extract rpm files</span></span><br><span class="line">$ rpm2cpio ./packagecloud-test-1.1-1.x86_64.rpm | cpio -idmv</span><br><span class="line"></span><br><span class="line"><span class="comment">############################ For uninstalled package ###########################################################</span></span><br><span class="line"><span class="comment"># -p, --package PACKAGE_FILE</span></span><br><span class="line"><span class="comment">#    Query  an (uninstalled) package PACKAGE_FILE.  The PACKAGE_FILE may be specified as an ftp or http style URL</span></span><br><span class="line"><span class="comment">############################ For uninstalled package ###########################################################</span></span><br><span class="line"><span class="comment"># show files of given rpm</span></span><br><span class="line">$ rpm -qlp ./ipvsadm.x86_64 0:1.27-8.el7</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebuild rpm from installed files then deploy it with rebuild rpm</span></span><br><span class="line"><span class="comment"># edit some conf files then rebuild it</span></span><br><span class="line">$ rpmrebuild ipvsadm</span><br><span class="line"></span><br><span class="line"><span class="comment"># with editing ipvsadm.spec prompt, then rebuild</span></span><br><span class="line">$ rpmrebuild -e ipvsadm</span><br></pre></td></tr></table></figure>

<p><strong><a href="https://docs.fedoraproject.org/en-US/packaging-guidelines/Scriptlets/#_syntax">rpm scriptlets</a></strong></p>
<blockquote>
<p>When scriptlets are called, they will be supplied with an argument. This argument, accessed via $1 (for shell scripts) is the number of packages of this name which will be left on the system when the action completes. So for the common case of install, upgrade, and uninstall we have:</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>install</td>
<td>upgrade</td>
<td>uninstall</td>
</tr>
<tr>
<td>%pretrans</td>
<td>$1 &#x3D;&#x3D; 1</td>
<td>$1 &#x3D;&#x3D; 2</td>
<td>(N&#x2F;A)</td>
</tr>
<tr>
<td>%pre</td>
<td>$1 &#x3D;&#x3D; 1</td>
<td>$1 &#x3D;&#x3D; 2</td>
<td>(N&#x2F;A)</td>
</tr>
<tr>
<td>%post</td>
<td>$1 &#x3D;&#x3D; 1</td>
<td>$1 &#x3D;&#x3D; 2</td>
<td>(N&#x2F;A)</td>
</tr>
<tr>
<td>%preun</td>
<td>(N&#x2F;A)</td>
<td>$1 &#x3D;&#x3D; 1</td>
<td>$1 &#x3D;&#x3D; 0</td>
</tr>
<tr>
<td>%postun</td>
<td>(N&#x2F;A)</td>
<td>$1 &#x3D;&#x3D; 1</td>
<td>$1 &#x3D;&#x3D; 0</td>
</tr>
<tr>
<td>%posttrans</td>
<td>$1 &#x3D;&#x3D; 1</td>
<td>$1 &#x3D;&#x3D; 1</td>
<td>(N&#x2F;A)</td>
</tr>
</tbody></table>
<p>Note: even some scripts in rpm(built-in, no such files after installation) come from <code>.spec</code>, there is <strong>NO spec file</strong> in <code>xxx.rpm</code> but <code>xxx.src.rpm</code>.</p>
<h1 id="Build-rpm"><a href="#Build-rpm" class="headerlink" title="Build rpm"></a>Build rpm</h1><p>Refer to <a href="https://rpm-packaging-guide.github.io/">RPM guideline</a></p>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ?"></a>FAQ?</h1><h2 id="does-service-auto-start-after-rpm-i-xx-rpm"><a href="#does-service-auto-start-after-rpm-i-xx-rpm" class="headerlink" title="does service auto start after rpm -i xx.rpm?"></a>does service auto start after rpm -i xx.rpm?</h2><p>It depends on the xx.rpm, as RPM allows to add scripts, hence you can do this there, but most of time, service is not started automatically after installation.</p>
<h2 id="show-all-services-with-systemctl"><a href="#show-all-services-with-systemctl" class="headerlink" title="show all services with systemctl"></a>show all services with systemctl</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show all active systemd service</span></span><br><span class="line">$ systemctl --<span class="built_in">type</span>=service</span><br><span class="line"></span><br><span class="line"><span class="comment"># show all active/inactive systemd service</span></span><br><span class="line">$ systemctl --<span class="built_in">type</span>=service --all</span><br><span class="line"><span class="comment"># enable means start at boot time</span></span><br><span class="line"></span><br><span class="line">$ systemctl <span class="built_in">enable</span> htg</span><br></pre></td></tr></table></figure>

<h2 id="yum-upgrade-vs-yum-install"><a href="#yum-upgrade-vs-yum-install" class="headerlink" title="yum upgrade vs yum install"></a>yum upgrade vs yum install</h2><ul>
<li>yum upgrade needs the package installed before</li>
<li>yum upgrade does NOT touch conf file, it remains what changed, actually, this depends on rpm.spec file<blockquote>
<p>with noreplace, if it exists, no replace</p>
</blockquote>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> libvirtd.spec</span><br><span class="line">...</span><br><span class="line">%config(noreplace) %&#123;_sysconfdir&#125;/sysconfig/libvirtd                            </span><br><span class="line">%config(noreplace) %&#123;_sysconfdir&#125;/sysconfig/virtlogd                            </span><br><span class="line">%config(noreplace) %&#123;_sysconfdir&#125;/sysconfig/virtlockd                           </span><br><span class="line">%config(noreplace) %&#123;_sysconfdir&#125;/libvirt/libvirtd.conf                         </span><br><span class="line">%config(noreplace) %&#123;_sysconfdir&#125;/libvirt/virtlogd.conf                         </span><br><span class="line">%config(noreplace) %&#123;_sysconfdir&#125;/libvirt/virtlockd.conf                        </span><br><span class="line">%config(noreplace) %&#123;_prefix&#125;/lib/sysctl.d/60-libvirtd.conf                     </span><br><span class="line">                                                                                </span><br><span class="line">%config(noreplace) %&#123;_sysconfdir&#125;/logrotate.d/libvirtd                          </span><br></pre></td></tr></table></figure>

<ul>
<li>yum install copy conf rom rpm and backup existing conf suffixed with xx.rpmsave(like libivrtd.conf.rpmsave)</li>
</ul>
<h2 id="list-rpm-installation-date"><a href="#list-rpm-installation-date" class="headerlink" title="list rpm installation date"></a>list rpm installation date</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$rpm</span> -qa --last</span><br><span class="line">libreport-filesystem-2.1.11-38.el7.centos.x86_64 Wed 11 Sep 2019 05:22:55 PM CST</span><br><span class="line">grub2-common-2.02-0.64.el7.centos.noarch      Wed 11 Sep 2019 05:22:55 PM CST</span><br><span class="line">filesystem-3.2-21.el7.x86_64                  Wed 11 Sep 2019 05:22:55 PM CST</span><br><span class="line">centos-release-7-4.1708.el7.centos.x86_64     Wed 11 Sep 2019 05:22:55 PM CST</span><br><span class="line">libgcc-4.8.5-16.el7.x86_64                    Wed 11 Sep 2019 05:22:54 PM CST</span><br><span class="line">microcode_ctl-2.1-22.2.el7.centos.x86_64      Wed 11 Sep 2019 09:33:20 AM CST</span><br></pre></td></tr></table></figure>

<h2 id="prevent-rpmbuild-to-strip-symbol"><a href="#prevent-rpmbuild-to-strip-symbol" class="headerlink" title="prevent rpmbuild to strip symbol"></a>prevent rpmbuild to strip symbol</h2><p>You can add <code>%global __os_install_post %&#123;nil&#125;</code> at the top line of <code>xx.spec</code> file.</p>
<h2 id="remove-multiple-package-with-wildcard"><a href="#remove-multiple-package-with-wildcard" class="headerlink" title="remove multiple package with wildcard"></a>remove multiple package with wildcard</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># remove dependency as well</span></span><br><span class="line">$ yum remove <span class="string">&#x27;libvirt*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># only remove package, their dependency is kept</span></span><br><span class="line"><span class="variable">$rpm</span> -e $(rpm -qa <span class="string">&#x27;libvirt*&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="rpm-command-hangs"><a href="#rpm-command-hangs" class="headerlink" title="rpm command hangs"></a>rpm command hangs</h2><p>rpm may be waiting for a lock to be freed.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps -ef | grep rpm </span><br><span class="line">$ <span class="built_in">kill</span> -9 <span class="variable">$output_above</span></span><br><span class="line">$/bin/rm -rf /var/lib/rpm/__db.0*</span><br><span class="line"></span><br><span class="line"><span class="comment"># Then try your rpm command again. If it still doesn&#x27;t work, repeat as above</span></span><br><span class="line"><span class="comment"># but then also run rpm --rebuilddb before trying your rpm command again.</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>pkg</category>
        <category>rpm</category>
      </categories>
      <tags>
        <tag>yum</tag>
        <tag>rpm</tag>
      </tags>
  </entry>
  <entry>
    <title>prototol_gre</title>
    <url>/2021/04/22/prototol-gre/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><ul>
<li><p><strong>passenger protocol(inner)</strong><br>  The type of protocol (IPv4, IPv6, or MPLS) used by the networks that are connected by a GRE tunnel. Packets that are encapsulated and routed across the transport network are payload packets.</p>
</li>
<li><p><strong>encapsulation protocol(gre)</strong><br>  The type of network layer protocol (GRE) used to encapsulate passenger protocol packets so that the resulting GRE packets can be carried over the transport protocol network as the packet payload.</p>
</li>
<li><p><strong>transport protocol(outer)</strong><br>  The type of protocol (IPv4) used by the network that routes passenger protocol packets through a GRE tunnel. The transport protocol is also called the delivery protocol.</p>
</li>
</ul>
<span id="more"></span>

<p>Generic Routing Encapsulation (GRE) is one of the available tunneling mechanisms which <code>uses IP as the transport protocol</code> and can be used for <code>carrying many different passenger protocols</code>. The tunnels<code> behave as virtual point-to-point links</code> that have two endpoints identified by the tunnel source and tunnel destination addresses at each endpoint.</p>
<p>A GRE packet header structure is represented in the diagram below.<br><img src="https://community.cisco.com/legacyfs/online/legacy/2/4/1/159142-GRE.jpg" alt="GRE HEADER"></p>
<p><img src="https://www.juniper.net/documentation/us/en/software/junos/routing-policy/images/g041432.gif" alt="gre"></p>
<p>Five GRE flag bits indicate whether a particular GRE header includes any optional fields (Checksum, Offset, Key, Sequence Number, and Routing). Of the five optional fields, filter-based GRE IPv4 tunneling uses the Key field only.</p>
<ul>
<li><p>The first two octets encode GRE flags, indicate whether a particular GRE header includes any optional fields (Checksum, Offset, Key, Sequence Number, and Routing)</p>
</li>
<li><p>The 2-octet Protocol Type field contains the value 0x0800 to specify the EtherType value for the IPv4 protocol.</p>
</li>
<li><p>The 4-octet Key field is included only if the Key Present bit is set to 1. The Key field carries the key value of the tunnel defined on the encapsulator. If the GRE tunnel definition specifies a key, the Packet Forwarding Engine for the encapsulating endpoint sets the Key Present bit and adds the Key to the GRE header.</p>
</li>
</ul>
<h1 id="How-GRE-works"><a href="#How-GRE-works" class="headerlink" title="How GRE works"></a>How GRE works</h1><h2 id="Topopogy"><a href="#Topopogy" class="headerlink" title="Topopogy"></a>Topopogy</h2><p><img src="https://www.9tut.com/images/ccna_self_study/GRE_Tunnel/GRE_Tunnel.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">R1 (GRE config only)</span><br><span class="line">interface s0/0/0</span><br><span class="line">ip address 63.1.27.2 255.255.255.0</span><br><span class="line">interface tunnel0</span><br><span class="line">ip address 10.0.0.1 255.255.255.0</span><br><span class="line">tunnel mode gre ip //this command can be ignored</span><br><span class="line">tunnel source s0/0</span><br><span class="line">tunnel destination 85.5.24.10</span><br><span class="line">router ospf 1</span><br><span class="line"></span><br><span class="line">R1&gt;ip route 192.168.2.0 255.255.255.0 10.0.0.1</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">R2 (GRE config only)</span><br><span class="line">interface s0/0/0</span><br><span class="line">ip address 85.5.24.10 255.255.255.0</span><br><span class="line">interface tunnel1</span><br><span class="line">ip address 10.0.0.2 255.255.255.0</span><br><span class="line">tunnel source 85.5.24.10</span><br><span class="line">tunnel destination 63.1.27.2</span><br><span class="line">router ospf 1</span><br><span class="line"></span><br><span class="line">R2&gt;ip route 192.168.1.0 255.255.255.0 10.0.0.2</span><br></pre></td></tr></table></figure>
<p>Sssigns the IP address for the tunnel interface: 10.0.0.1&#x2F;24.<br>The IP addresses of two tunnel interfaces must be in the same subnet<br>(10.0.0.1&#x2F;24 on R1 &amp; 10.0.0.2&#x2F;24 on R2 in this case).</p>
<p><code>This address is not used by Delivery header who uses tunnel source and tunnel destination(tunnel source and tunnel destination should reach each other!!!)</code></p>
<h2 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h2><p>When the sending router decides to send a packet into the GRE Tunnel, it will “wrap” the whole packet into another IP packet with two headers: one is the GRE header (4 bytes) which uses to manage the tunnel itself. The other is called “Delivery header” (20 bytes) which includes the new source and destination IP addresses of two virtual interfaces of the tunnel (called tunnel interfaces). This process is called encapsulation.</p>
<p><img src="https://www.9tut.com/images/ccna_self_study/GRE_Tunnel/GRE_Tunnel_Encapsulation_Process.jpg"></p>
<p>In the example above when R1 receives an IP packet, it wraps the whole packet with a GRE header and a delivery header. The delivery header includes new source IP address of 63.1.27.2 (the IP address of R1’s physical interface which is used to create tunnel) and new destination IP address of 85.5.24.10 (the IP address of R2’s physical interface which is used to create tunnel).</p>
<p>It is important to note that the <code>GRE tunnel does not encrypt the packet, only encapsulate i</code>t. If we want to encrypt the packet inside GRE Tunnel we must use IPSec.</p>
<p>When the GRE packet arrives at the other end of the tunnel (R2 in this case), the receiving router R2 needs to remove the GRE header and delivery header to get the original packet.</p>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://www.juniper.net/documentation/us/en/software/junos/routing-policy/topics/concept/firewall-filter-tunneling-ipv4-gre-components.html">Juniper GRE</a></li>
<li><a href="https://www.9tut.com/gre-tunnel-tutorial">GRE example</a></li>
</ul>
]]></content>
      <categories>
        <category>protocol</category>
        <category>gre</category>
      </categories>
      <tags>
        <tag>GRE</tag>
      </tags>
  </entry>
</search>
